; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_gint.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_gint.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\SRC\eGFX\Fonts\Arial__23px__Regular__SystemDefault_1BPP -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_gint.crf SRC\Drivers\fsl_gint.c]
                          THUMB

                          AREA ||i.GINT0_DriverIRQHandler||, CODE, READONLY, ALIGN=2

                  GINT0_DriverIRQHandler PROC
;;;168    /* IRQ handler functions overloading weak symbols in the startup */
;;;169    void GINT0_DriverIRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;170    {
;;;171        /* Clear interrupt before callback */
;;;172        s_gintBases[0]->CTRL |= GINT_CTRL_INT_MASK;
000002  4807              LDR      r0,|L1.32|
000004  6800              LDR      r0,[r0,#0]  ; s_gintBases
000006  6800              LDR      r0,[r0,#0]
000008  f0400001          ORR      r0,r0,#1
00000c  4904              LDR      r1,|L1.32|
00000e  6809              LDR      r1,[r1,#0]  ; s_gintBases
000010  6008              STR      r0,[r1,#0]
;;;173        /* Call user function */
;;;174        if (s_gintCallback[0] != NULL)
000012  4804              LDR      r0,|L1.36|
000014  6800              LDR      r0,[r0,#0]  ; s_gintCallback
000016  b110              CBZ      r0,|L1.30|
;;;175        {
;;;176            s_gintCallback[0]();
000018  4902              LDR      r1,|L1.36|
00001a  6808              LDR      r0,[r1,#0]  ; s_gintCallback
00001c  4780              BLX      r0
                  |L1.30|
;;;177        }
;;;178    }
00001e  bd10              POP      {r4,pc}
;;;179    
                          ENDP

                  |L1.32|
                          DCD      s_gintBases
                  |L1.36|
                          DCD      s_gintCallback

                          AREA ||i.GINT1_DriverIRQHandler||, CODE, READONLY, ALIGN=2

                  GINT1_DriverIRQHandler PROC
;;;180    #if (FSL_FEATURE_SOC_GINT_COUNT > 1U)
;;;181    void GINT1_DriverIRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183        /* Clear interrupt before callback */
;;;184        s_gintBases[1]->CTRL |= GINT_CTRL_INT_MASK;
000002  4807              LDR      r0,|L2.32|
000004  6840              LDR      r0,[r0,#4]  ; s_gintBases
000006  6800              LDR      r0,[r0,#0]
000008  f0400001          ORR      r0,r0,#1
00000c  4904              LDR      r1,|L2.32|
00000e  6849              LDR      r1,[r1,#4]  ; s_gintBases
000010  6008              STR      r0,[r1,#0]
;;;185        /* Call user function */
;;;186        if (s_gintCallback[1] != NULL)
000012  4804              LDR      r0,|L2.36|
000014  6840              LDR      r0,[r0,#4]  ; s_gintCallback
000016  b110              CBZ      r0,|L2.30|
;;;187        {
;;;188            s_gintCallback[1]();
000018  4902              LDR      r1,|L2.36|
00001a  6848              LDR      r0,[r1,#4]  ; s_gintCallback
00001c  4780              BLX      r0
                  |L2.30|
;;;189        }
;;;190    }
00001e  bd10              POP      {r4,pc}
;;;191    #endif
                          ENDP

                  |L2.32|
                          DCD      s_gintBases
                  |L2.36|
                          DCD      s_gintCallback

                          AREA ||i.GINT_ClrStatus||, CODE, READONLY, ALIGN=1

                  GINT_ClrStatus PROC
;;;207     */
;;;208    static inline void GINT_ClrStatus(GINT_Type *base)
000000  6801              LDR      r1,[r0,#0]
;;;209    {
;;;210        base->CTRL |= GINT_CTRL_INT_MASK;
000002  f0410101          ORR      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;211    }
000008  4770              BX       lr
;;;212    
                          ENDP


                          AREA ||i.GINT_ConfigPins||, CODE, READONLY, ALIGN=1

                  GINT_ConfigPins PROC
;;;114    
;;;115    void GINT_ConfigPins(GINT_Type *base, gint_port_t port, uint32_t polarityMask, uint32_t enableMask)
000000  b510              PUSH     {r4,lr}
;;;116    {
;;;117        base->PORT_POL[port] = polarityMask;
000002  f1000420          ADD      r4,r0,#0x20
000006  f8442021          STR      r2,[r4,r1,LSL #2]
;;;118        base->PORT_ENA[port] = enableMask;
00000a  3420              ADDS     r4,r4,#0x20
00000c  f8443021          STR      r3,[r4,r1,LSL #2]
;;;119    }
000010  bd10              POP      {r4,pc}
;;;120    
                          ENDP


                          AREA ||i.GINT_Deinit||, CODE, READONLY, ALIGN=2

                  GINT_Deinit PROC
;;;148    
;;;149    void GINT_Deinit(GINT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;150    {
000002  4605              MOV      r5,r0
;;;151        uint32_t instance;
;;;152    
;;;153        instance = GINT_GetInstance(base);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       GINT_GetInstance
00000a  4604              MOV      r4,r0
;;;154    
;;;155        /* Cleanup */
;;;156        GINT_DisableCallback(base);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GINT_DisableCallback
;;;157        s_gintCallback[instance] = NULL;
000012  2000              MOVS     r0,#0
000014  490e              LDR      r1,|L5.80|
000016  f8410024          STR      r0,[r1,r4,LSL #2]
;;;158    
;;;159        /* Reset the peripheral */
;;;160        RESET_PeripheralReset(s_gintResets[instance]);
00001a  490e              LDR      r1,|L5.84|
00001c  f8510024          LDR      r0,[r1,r4,LSL #2]
000020  f7fffffe          BL       RESET_PeripheralReset
;;;161    
;;;162    #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;163        /* Disable the peripheral clock */
;;;164        CLOCK_DisableClock(s_gintClocks[instance]);
000024  490c              LDR      r1,|L5.88|
000026  f8310014          LDRH     r0,[r1,r4,LSL #1]
00002a  0a01              LSRS     r1,r0,#8
00002c  2903              CMP      r1,#3
00002e  d205              BCS      |L5.60|
000030  2201              MOVS     r2,#1
000032  4082              LSLS     r2,r2,r0
000034  4b09              LDR      r3,|L5.92|
000036  f8432021          STR      r2,[r3,r1,LSL #2]
00003a  e006              B        |L5.74|
                  |L5.60|
00003c  2201              MOVS     r2,#1
00003e  4082              LSLS     r2,r2,r0
000040  4b07              LDR      r3,|L5.96|
000042  619a              STR      r2,[r3,#0x18]
000044  2200              MOVS     r2,#0
000046  031b              LSLS     r3,r3,#12
000048  64da              STR      r2,[r3,#0x4c]
                  |L5.74|
00004a  bf00              NOP      
;;;165    #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;166    }
00004c  bd70              POP      {r4-r6,pc}
;;;167    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      s_gintCallback
                  |L5.84|
                          DCD      s_gintResets
                  |L5.88|
                          DCD      s_gintClocks
                  |L5.92|
                          DCD      0x40000240
                  |L5.96|
                          DCD      0x40040000

                          AREA ||i.GINT_DisableCallback||, CODE, READONLY, ALIGN=2

                  GINT_DisableCallback PROC
;;;138    
;;;139    void GINT_DisableCallback(GINT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;140    {
000002  4605              MOV      r5,r0
;;;141        uint32_t instance;
;;;142    
;;;143        instance = GINT_GetInstance(base);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       GINT_GetInstance
00000a  4604              MOV      r4,r0
;;;144        DisableIRQ(s_gintIRQ[instance]);
00000c  490c              LDR      r1,|L6.64|
00000e  5708              LDRSB    r0,[r1,r4]
000010  f1100f80          CMN      r0,#0x80
000014  d100              BNE      |L6.24|
000016  e00a              B        |L6.46|
                  |L6.24|
000018  bf00              NOP      
00001a  f000021f          AND      r2,r0,#0x1f
00001e  2101              MOVS     r1,#1
000020  4091              LSLS     r1,r1,r2
000022  4a08              LDR      r2,|L6.68|
000024  0943              LSRS     r3,r0,#5
000026  f8421023          STR      r1,[r2,r3,LSL #2]
00002a  bf00              NOP      
00002c  bf00              NOP      
                  |L6.46|
;;;145        GINT_ClrStatus(base);
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GINT_ClrStatus
;;;146        NVIC_ClearPendingIRQ(s_gintIRQ[instance]);
000034  4902              LDR      r1,|L6.64|
000036  5708              LDRSB    r0,[r1,r4]
000038  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;147    }
00003c  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
                          DCD      s_gintIRQ
                  |L6.68|
                          DCD      0xe000e180

                          AREA ||i.GINT_EnableCallback||, CODE, READONLY, ALIGN=2

                  GINT_EnableCallback PROC
;;;126    
;;;127    void GINT_EnableCallback(GINT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;128    {
000002  4605              MOV      r5,r0
;;;129        uint32_t instance;
;;;130    
;;;131        instance = GINT_GetInstance(base);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       GINT_GetInstance
00000a  4604              MOV      r4,r0
;;;132        /* If GINT is configured in "AND" mode a spurious interrupt is generated.
;;;133           Clear status and pending interrupt before enabling the irq in NVIC. */
;;;134        GINT_ClrStatus(base);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GINT_ClrStatus
;;;135        NVIC_ClearPendingIRQ(s_gintIRQ[instance]);
000012  490c              LDR      r1,|L7.68|
000014  5708              LDRSB    r0,[r1,r4]
000016  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;136        EnableIRQ(s_gintIRQ[instance]);
00001a  490a              LDR      r1,|L7.68|
00001c  5708              LDRSB    r0,[r1,r4]
00001e  f1100f80          CMN      r0,#0x80
000022  d100              BNE      |L7.38|
000024  e00c              B        |L7.64|
                  |L7.38|
000026  bf00              NOP      
000028  f000021f          AND      r2,r0,#0x1f
00002c  2101              MOVS     r1,#1
00002e  4091              LSLS     r1,r1,r2
000030  0942              LSRS     r2,r0,#5
000032  0092              LSLS     r2,r2,#2
000034  f10222e0          ADD      r2,r2,#0xe000e000
000038  f8c21100          STR      r1,[r2,#0x100]
00003c  bf00              NOP      
00003e  bf00              NOP      
                  |L7.64|
;;;137    }
000040  bd70              POP      {r4-r6,pc}
;;;138    
                          ENDP

000042  0000              DCW      0x0000
                  |L7.68|
                          DCD      s_gintIRQ

                          AREA ||i.GINT_GetConfigPins||, CODE, READONLY, ALIGN=1

                  GINT_GetConfigPins PROC
;;;120    
;;;121    void GINT_GetConfigPins(GINT_Type *base, gint_port_t port, uint32_t *polarityMask, uint32_t *enableMask)
000000  b510              PUSH     {r4,lr}
;;;122    {
;;;123        *polarityMask = base->PORT_POL[port];
000002  f1000420          ADD      r4,r0,#0x20
000006  f8544021          LDR      r4,[r4,r1,LSL #2]
00000a  6014              STR      r4,[r2,#0]
;;;124        *enableMask = base->PORT_ENA[port];
00000c  f1000440          ADD      r4,r0,#0x40
000010  f8544021          LDR      r4,[r4,r1,LSL #2]
000014  601c              STR      r4,[r3,#0]
;;;125    }
000016  bd10              POP      {r4,pc}
;;;126    
                          ENDP


                          AREA ||i.GINT_GetCtrl||, CODE, READONLY, ALIGN=2

                  GINT_GetCtrl PROC
;;;103    
;;;104    void GINT_GetCtrl(GINT_Type *base, gint_comb_t *comb, gint_trig_t *trig, gint_cb_t *callback)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;105    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;106        uint32_t instance;
;;;107    
;;;108        instance = GINT_GetInstance(base);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GINT_GetInstance
000012  4680              MOV      r8,r0
;;;109    
;;;110        *comb = (gint_comb_t)((base->CTRL & GINT_CTRL_COMB_MASK) >> GINT_CTRL_COMB_SHIFT);
000014  6820              LDR      r0,[r4,#0]
000016  f3c00040          UBFX     r0,r0,#1,#1
00001a  7028              STRB     r0,[r5,#0]
;;;111        *trig = (gint_trig_t)((base->CTRL & GINT_CTRL_TRIG_MASK) >> GINT_CTRL_TRIG_SHIFT);
00001c  6820              LDR      r0,[r4,#0]
00001e  f3c00080          UBFX     r0,r0,#2,#1
000022  7030              STRB     r0,[r6,#0]
;;;112        *callback = s_gintCallback[instance];
000024  4802              LDR      r0,|L9.48|
000026  f8500028          LDR      r0,[r0,r8,LSL #2]
00002a  6038              STR      r0,[r7,#0]
;;;113    }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP

                  |L9.48|
                          DCD      s_gintCallback

                          AREA ||i.GINT_GetInstance||, CODE, READONLY, ALIGN=2

                  GINT_GetInstance PROC
;;;56     
;;;57     static uint32_t GINT_GetInstance(GINT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;58     {
000002  4605              MOV      r5,r0
;;;59         uint32_t instance;
;;;60     
;;;61         /* Find the instance index from base address mappings. */
;;;62         for (instance = 0; instance < FSL_FEATURE_SOC_GINT_COUNT; instance++)
000004  2400              MOVS     r4,#0
000006  e006              B        |L10.22|
                  |L10.8|
;;;63         {
;;;64             if (s_gintBases[instance] == base)
000008  4809              LDR      r0,|L10.48|
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  42a8              CMP      r0,r5
000010  d100              BNE      |L10.20|
;;;65             {
;;;66                 break;
000012  e002              B        |L10.26|
                  |L10.20|
000014  1c64              ADDS     r4,r4,#1              ;62
                  |L10.22|
000016  2c02              CMP      r4,#2                 ;62
000018  d3f6              BCC      |L10.8|
                  |L10.26|
00001a  bf00              NOP      
;;;67             }
;;;68         }
;;;69     
;;;70         assert(instance < FSL_FEATURE_SOC_GINT_COUNT);
00001c  2c02              CMP      r4,#2
00001e  d200              BCS      |L10.34|
000020  e004              B        |L10.44|
                  |L10.34|
000022  2246              MOVS     r2,#0x46
000024  a103              ADR      r1,|L10.52|
000026  a009              ADR      r0,|L10.76|
000028  f7fffffe          BL       __aeabi_assert
                  |L10.44|
;;;71     
;;;72         return instance;
00002c  4620              MOV      r0,r4
;;;73     }
00002e  bd70              POP      {r4-r6,pc}
;;;74     
                          ENDP

                  |L10.48|
                          DCD      s_gintBases
                  |L10.52|
000034  5352435c          DCB      "SRC\\Drivers\\fsl_gint.c",0
000038  44726976
00003c  6572735c
000040  66736c5f
000044  67696e74
000048  2e6300  
00004b  00                DCB      0
                  |L10.76|
00004c  696e7374          DCB      "instance < FSL_FEATURE_SOC_GINT_COUNT",0
000050  616e6365
000054  203c2046
000058  534c5f46
00005c  45415455
000060  52455f53
000064  4f435f47
000068  494e545f
00006c  434f554e
000070  5400    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.GINT_Init||, CODE, READONLY, ALIGN=2

                  GINT_Init PROC
;;;74     
;;;75     void GINT_Init(GINT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;76     {
000002  4605              MOV      r5,r0
;;;77         uint32_t instance;
;;;78     
;;;79         instance = GINT_GetInstance(base);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       GINT_GetInstance
00000a  4604              MOV      r4,r0
;;;80     
;;;81         s_gintCallback[instance] = NULL;
00000c  2000              MOVS     r0,#0
00000e  490e              LDR      r1,|L11.72|
000010  f8410024          STR      r0,[r1,r4,LSL #2]
;;;82     
;;;83     #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;84         /* Enable the peripheral clock */
;;;85         CLOCK_EnableClock(s_gintClocks[instance]);
000014  490d              LDR      r1,|L11.76|
000016  f8310014          LDRH     r0,[r1,r4,LSL #1]
00001a  0a01              LSRS     r1,r0,#8
00001c  2903              CMP      r1,#3
00001e  d205              BCS      |L11.44|
000020  2201              MOVS     r2,#1
000022  4082              LSLS     r2,r2,r0
000024  4b0a              LDR      r3,|L11.80|
000026  f8432021          STR      r2,[r3,r1,LSL #2]
00002a  e005              B        |L11.56|
                  |L11.44|
00002c  2201              MOVS     r2,#1
00002e  0793              LSLS     r3,r2,#30
000030  64da              STR      r2,[r3,#0x4c]
000032  4082              LSLS     r2,r2,r0
000034  4b07              LDR      r3,|L11.84|
000036  615a              STR      r2,[r3,#0x14]
                  |L11.56|
000038  bf00              NOP      
;;;86     #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;87     
;;;88         /* Reset the peripheral */
;;;89         RESET_PeripheralReset(s_gintResets[instance]);
00003a  4907              LDR      r1,|L11.88|
00003c  f8510024          LDR      r0,[r1,r4,LSL #2]
000040  f7fffffe          BL       RESET_PeripheralReset
;;;90     }
000044  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
                          DCD      s_gintCallback
                  |L11.76|
                          DCD      s_gintClocks
                  |L11.80|
                          DCD      0x40000220
                  |L11.84|
                          DCD      0x40040000
                  |L11.88|
                          DCD      s_gintResets

                          AREA ||i.GINT_SetCtrl||, CODE, READONLY, ALIGN=2

                  GINT_SetCtrl PROC
;;;91     
;;;92     void GINT_SetCtrl(GINT_Type *base, gint_comb_t comb, gint_trig_t trig, gint_cb_t callback)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;93     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;94         uint32_t instance;
;;;95     
;;;96         instance = GINT_GetInstance(base);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GINT_GetInstance
000012  4680              MOV      r8,r0
;;;97     
;;;98         base->CTRL = (GINT_CTRL_COMB(comb) | GINT_CTRL_TRIG(trig));
000014  2002              MOVS     r0,#2
000016  ea000045          AND      r0,r0,r5,LSL #1
00001a  2104              MOVS     r1,#4
00001c  ea010186          AND      r1,r1,r6,LSL #2
000020  4308              ORRS     r0,r0,r1
000022  6020              STR      r0,[r4,#0]
;;;99     
;;;100        /* Save callback pointer */
;;;101        s_gintCallback[instance] = callback;
000024  4802              LDR      r0,|L12.48|
000026  f8407028          STR      r7,[r0,r8,LSL #2]
;;;102    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;103    
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      s_gintCallback

                          AREA ||i.NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_ClearPendingIRQ PROC
;;;1671    */
;;;1672   __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1673   {
;;;1674     NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a02              LDR      r2,|L13.20|
00000a  0943              LSRS     r3,r0,#5
00000c  f8421023          STR      r1,[r2,r3,LSL #2]
;;;1675   }
000010  4770              BX       lr
;;;1676   
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      0xe000e280

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  s_gintBases
                          DCD      0x40002000
                          DCD      0x40003000
                  s_gintClocks
000008  00130013          DCW      0x0013,0x0013
                  s_gintResets
                          DCD      0x00000013
                          DCD      0x00000013
                  s_gintIRQ
000014  0203              DCB      0x02,0x03

                          AREA ||.data||, DATA, ALIGN=2

                  s_gintCallback
                          %        8

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_gint.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_gint_c_14422b2f____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_fsl_gint_c_14422b2f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_gint_c_14422b2f____REVSH|
#line 402
|__asm___10_fsl_gint_c_14422b2f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_gint_c_14422b2f____RRX|
#line 587
|__asm___10_fsl_gint_c_14422b2f____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

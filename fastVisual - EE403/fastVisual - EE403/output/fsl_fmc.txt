; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_fmc.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_fmc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\SRC\eGFX\Fonts\Arial__23px__Regular__SystemDefault_1BPP -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_fmc.crf SRC\Drivers\fsl_fmc.c]
                          THUMB

                          AREA ||i.FMC_Denit||, CODE, READONLY, ALIGN=2

                  FMC_Denit PROC
;;;75     
;;;76     void FMC_Denit(FMC_Type *base)
000000  b510              PUSH     {r4,lr}
;;;77     {
000002  4604              MOV      r4,r0
;;;78         /* Reset FMC module */
;;;79         RESET_PeripheralReset(kFMC_RST_SHIFT_RSTn);
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RESET_PeripheralReset
;;;80     
;;;81     #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;82         /* enable clock to FMC */
;;;83         CLOCK_DisableClock(kCLOCK_Fmc);
00000a  2008              MOVS     r0,#8
00000c  0a01              LSRS     r1,r0,#8
00000e  2903              CMP      r1,#3
000010  d205              BCS      |L1.30|
000012  2201              MOVS     r2,#1
000014  4082              LSLS     r2,r2,r0
000016  4b06              LDR      r3,|L1.48|
000018  f8432021          STR      r2,[r3,r1,LSL #2]
00001c  e006              B        |L1.44|
                  |L1.30|
00001e  2201              MOVS     r2,#1
000020  4082              LSLS     r2,r2,r0
000022  4b04              LDR      r3,|L1.52|
000024  619a              STR      r2,[r3,#0x18]
000026  2200              MOVS     r2,#0
000028  031b              LSLS     r3,r3,#12
00002a  64da              STR      r2,[r3,#0x4c]
                  |L1.44|
00002c  bf00              NOP      
;;;84     #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;85     }
00002e  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  |L1.48|
                          DCD      0x40000240
                  |L1.52|
                          DCD      0x40040000

                          AREA ||i.FMC_GenerateFlashSignature||, CODE, READONLY, ALIGN=1

                  FMC_GenerateFlashSignature PROC
;;;86     
;;;87     void FMC_GenerateFlashSignature(FMC_Type *base,
000000  b530              PUSH     {r4,r5,lr}
;;;88                                     uint32_t startAddress,
;;;89                                     uint32_t length,
;;;90                                     fmc_flash_signature_t *flashSignature)
;;;91     {
;;;92         uint32_t stopAddress;
;;;93     
;;;94         /* Clear generation done flag. */
;;;95         base->FMSTATCLR = kFMC_SignatureGenerationDoneFlag;
000002  2504              MOVS     r5,#4
000004  f8c05fe8          STR      r5,[r0,#0xfe8]
;;;96     
;;;97         /* Calculate flash stop address */
;;;98         stopAddress = ((startAddress + length - 1) >> 4) & FMC_FMSSTOP_STOP_MASK;
000008  188d              ADDS     r5,r1,r2
00000a  1e6d              SUBS     r5,r5,#1
00000c  f3c51410          UBFX     r4,r5,#4,#17
;;;99     
;;;100        /* Calculate flash start address. */
;;;101        startAddress = (startAddress >> 4) & FMC_FMSSTART_START_MASK;
000010  f3c11110          UBFX     r1,r1,#4,#17
;;;102    
;;;103        /* Start flash signature generation. */
;;;104        base->FMSSTART = startAddress;
000014  6201              STR      r1,[r0,#0x20]
;;;105        base->FMSSTOP = stopAddress;
000016  6244              STR      r4,[r0,#0x24]
;;;106    
;;;107        base->FMSSTOP |= FMC_FMSSTOP_SIG_START_MASK;
000018  6a45              LDR      r5,[r0,#0x24]
00001a  f4453500          ORR      r5,r5,#0x20000
00001e  6245              STR      r5,[r0,#0x24]
;;;108    
;;;109        /* Wait for signature done. */
;;;110        while ((base->FMSTAT & kFMC_SignatureGenerationDoneFlag) != kFMC_SignatureGenerationDoneFlag)
000020  bf00              NOP      
                  |L2.34|
000022  f8d05fe0          LDR      r5,[r0,#0xfe0]
000026  f0050504          AND      r5,r5,#4
00002a  2d04              CMP      r5,#4
00002c  d1f9              BNE      |L2.34|
;;;111        {
;;;112        }
;;;113    
;;;114        /* Clear generation done flag. */
;;;115        base->FMSTATCLR = kFMC_SignatureGenerationDoneFlag;
00002e  f8c05fe8          STR      r5,[r0,#0xfe8]
;;;116    
;;;117        /* Get the generated flash signature. */
;;;118        flashSignature->word0 = base->FMSW[0];
000032  6ac5              LDR      r5,[r0,#0x2c]
000034  601d              STR      r5,[r3,#0]
;;;119        flashSignature->word1 = base->FMSW[1];
000036  6b05              LDR      r5,[r0,#0x30]
000038  605d              STR      r5,[r3,#4]
;;;120        flashSignature->word2 = base->FMSW[2];
00003a  6b45              LDR      r5,[r0,#0x34]
00003c  609d              STR      r5,[r3,#8]
;;;121        flashSignature->word3 = base->FMSW[3];
00003e  6b85              LDR      r5,[r0,#0x38]
000040  60dd              STR      r5,[r3,#0xc]
;;;122    
;;;123        return;
;;;124    }
000042  bd30              POP      {r4,r5,pc}
                          ENDP


                          AREA ||i.FMC_GetDefaultConfig||, CODE, READONLY, ALIGN=1

                  FMC_GetDefaultConfig PROC
;;;54     
;;;55     void FMC_GetDefaultConfig(fmc_config_t *config)
000000  2105              MOVS     r1,#5
;;;56     {
;;;57         config->waitStates = 0x05;
000002  7001              STRB     r1,[r0,#0]
;;;58     }
000004  4770              BX       lr
;;;59     
                          ENDP


                          AREA ||i.FMC_Init||, CODE, READONLY, ALIGN=2

                  FMC_Init PROC
;;;59     
;;;60     void FMC_Init(FMC_Type *base, fmc_config_t *config)
000000  b530              PUSH     {r4,r5,lr}
;;;61     {
000002  460a              MOV      r2,r1
;;;62     #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;63         /* enable clock to FMC */
;;;64         CLOCK_EnableClock(kCLOCK_Fmc);
000004  2108              MOVS     r1,#8
000006  0a0b              LSRS     r3,r1,#8
000008  2b03              CMP      r3,#3
00000a  d205              BCS      |L4.24|
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  4d0d              LDR      r5,|L4.72|
000012  f8454023          STR      r4,[r5,r3,LSL #2]
000016  e005              B        |L4.36|
                  |L4.24|
000018  2401              MOVS     r4,#1
00001a  07a5              LSLS     r5,r4,#30
00001c  64ec              STR      r4,[r5,#0x4c]
00001e  408c              LSLS     r4,r4,r1
000020  4d0a              LDR      r5,|L4.76|
000022  616c              STR      r4,[r5,#0x14]
                  |L4.36|
000024  bf00              NOP      
;;;65     #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;66     
;;;67         /* Set control register, FS_RD0 = 0, FS_RD1 = 1. */
;;;68         base->FCTR &= ~(FMC_FCTR_FS_RD0_MASK | FMC_FCTR_FS_RD1_MASK);
000026  6801              LDR      r1,[r0,#0]
000028  f0210118          BIC      r1,r1,#0x18
00002c  6001              STR      r1,[r0,#0]
;;;69         base->FCTR |= FMC_FCTR_FS_RD1_MASK;
00002e  6801              LDR      r1,[r0,#0]
000030  f0410110          ORR      r1,r1,#0x10
000034  6001              STR      r1,[r0,#0]
;;;70     
;;;71         /* Set wait state, same as FLASHTIM in SYSCON->FLASHCFG register. */
;;;72         base->FBWST &= ~FMC_FBWST_WAITSTATES_MASK;
000036  6901              LDR      r1,[r0,#0x10]
000038  f02101ff          BIC      r1,r1,#0xff
00003c  6101              STR      r1,[r0,#0x10]
;;;73         base->FBWST |= config->waitStates;
00003e  6901              LDR      r1,[r0,#0x10]
000040  7813              LDRB     r3,[r2,#0]
000042  4319              ORRS     r1,r1,r3
000044  6101              STR      r1,[r0,#0x10]
;;;74     }
000046  bd30              POP      {r4,r5,pc}
;;;75     
                          ENDP

                  |L4.72|
                          DCD      0x40000220
                  |L4.76|
                          DCD      0x40040000

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_fmc_c_457cee11____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_fmc_c_457cee11____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_fmc_c_457cee11____REVSH|
#line 402
|__asm___9_fsl_fmc_c_457cee11____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_fmc_c_457cee11____RRX|
#line 587
|__asm___9_fsl_fmc_c_457cee11____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

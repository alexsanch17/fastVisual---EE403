; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_usart_dma.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_usart_dma.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_usart_dma.crf SRC\Drivers\fsl_usart_dma.c]
                          THUMB

                          AREA ||i.USART_EnableRxDMA||, CODE, READONLY, ALIGN=1

                  USART_EnableRxDMA PROC
;;;389    */
;;;390    static inline void USART_EnableRxDMA(USART_Type *base, bool enable)
000000  b131              CBZ      r1,|L1.16|
;;;391    {
;;;392        if (enable)
;;;393        {
;;;394            base->FIFOCFG |= USART_FIFOCFG_DMARX_MASK;
000002  f8d02e00          LDR      r2,[r0,#0xe00]
000006  f4425200          ORR      r2,r2,#0x2000
00000a  f8c02e00          STR      r2,[r0,#0xe00]
00000e  e005              B        |L1.28|
                  |L1.16|
;;;395        }
;;;396        else
;;;397        {
;;;398            base->FIFOCFG &= ~(USART_FIFOCFG_DMARX_MASK);
000010  f8d02e00          LDR      r2,[r0,#0xe00]
000014  f4225200          BIC      r2,r2,#0x2000
000018  f8c02e00          STR      r2,[r0,#0xe00]
                  |L1.28|
;;;399        }
;;;400    }
00001c  4770              BX       lr
;;;401    
                          ENDP


                          AREA ||i.USART_EnableTxDMA||, CODE, READONLY, ALIGN=1

                  USART_EnableTxDMA PROC
;;;374    */
;;;375    static inline void USART_EnableTxDMA(USART_Type *base, bool enable)
000000  b131              CBZ      r1,|L2.16|
;;;376    {
;;;377        if (enable)
;;;378        {
;;;379            base->FIFOCFG |= USART_FIFOCFG_DMATX_MASK;
000002  f8d02e00          LDR      r2,[r0,#0xe00]
000006  f4425280          ORR      r2,r2,#0x1000
00000a  f8c02e00          STR      r2,[r0,#0xe00]
00000e  e005              B        |L2.28|
                  |L2.16|
;;;380        }
;;;381        else
;;;382        {
;;;383            base->FIFOCFG &= ~(USART_FIFOCFG_DMATX_MASK);
000010  f8d02e00          LDR      r2,[r0,#0xe00]
000014  f4225280          BIC      r2,r2,#0x1000
000018  f8c02e00          STR      r2,[r0,#0xe00]
                  |L2.28|
;;;384        }
;;;385    }
00001c  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.USART_TransferAbortReceiveDMA||, CODE, READONLY, ALIGN=2

                  USART_TransferAbortReceiveDMA PROC
;;;236    
;;;237    void USART_TransferAbortReceiveDMA(USART_Type *base, usart_dma_handle_t *handle)
000000  b570              PUSH     {r4-r6,lr}
;;;238    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;239        assert(NULL != handle);
000006  b104              CBZ      r4,|L3.10|
000008  e004              B        |L3.20|
                  |L3.10|
00000a  22ef              MOVS     r2,#0xef
00000c  a108              ADR      r1,|L3.48|
00000e  a00f              ADR      r0,|L3.76|
000010  f7fffffe          BL       __aeabi_assert
                  |L3.20|
;;;240        assert(NULL != handle->rxDmaHandle);
000014  69a0              LDR      r0,[r4,#0x18]
000016  b100              CBZ      r0,|L3.26|
000018  e004              B        |L3.36|
                  |L3.26|
00001a  22f0              MOVS     r2,#0xf0
00001c  a104              ADR      r1,|L3.48|
00001e  a00f              ADR      r0,|L3.92|
000020  f7fffffe          BL       __aeabi_assert
                  |L3.36|
;;;241    
;;;242        /* Stop transfer. */
;;;243        DMA_AbortTransfer(handle->rxDmaHandle);
000024  69a0              LDR      r0,[r4,#0x18]
000026  f7fffffe          BL       DMA_AbortTransfer
;;;244        handle->rxState = kUSART_RxIdle;
00002a  2002              MOVS     r0,#2
00002c  7760              STRB     r0,[r4,#0x1d]
;;;245    }
00002e  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP

                  |L3.48|
000030  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
000034  44726976
000038  6572735c
00003c  66736c5f
000040  75736172
000044  745f646d
000048  612e6300
                  |L3.76|
00004c  4e554c4c          DCB      "NULL != handle",0
000050  20213d20
000054  68616e64
000058  6c6500  
00005b  00                DCB      0
                  |L3.92|
00005c  4e554c4c          DCB      "NULL != handle->rxDmaHandle",0
000060  20213d20
000064  68616e64
000068  6c652d3e
00006c  7278446d
000070  6148616e
000074  646c6500

                          AREA ||i.USART_TransferAbortSendDMA||, CODE, READONLY, ALIGN=2

                  USART_TransferAbortSendDMA PROC
;;;226    
;;;227    void USART_TransferAbortSendDMA(USART_Type *base, usart_dma_handle_t *handle)
000000  b570              PUSH     {r4-r6,lr}
;;;228    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;229        assert(NULL != handle);
000006  b104              CBZ      r4,|L4.10|
000008  e004              B        |L4.20|
                  |L4.10|
00000a  22e5              MOVS     r2,#0xe5
00000c  a108              ADR      r1,|L4.48|
00000e  a00f              ADR      r0,|L4.76|
000010  f7fffffe          BL       __aeabi_assert
                  |L4.20|
;;;230        assert(NULL != handle->txDmaHandle);
000014  6960              LDR      r0,[r4,#0x14]
000016  b100              CBZ      r0,|L4.26|
000018  e004              B        |L4.36|
                  |L4.26|
00001a  22e6              MOVS     r2,#0xe6
00001c  a104              ADR      r1,|L4.48|
00001e  a00f              ADR      r0,|L4.92|
000020  f7fffffe          BL       __aeabi_assert
                  |L4.36|
;;;231    
;;;232        /* Stop transfer. */
;;;233        DMA_AbortTransfer(handle->txDmaHandle);
000024  6960              LDR      r0,[r4,#0x14]
000026  f7fffffe          BL       DMA_AbortTransfer
;;;234        handle->txState = kUSART_TxIdle;
00002a  2000              MOVS     r0,#0
00002c  7720              STRB     r0,[r4,#0x1c]
;;;235    }
00002e  bd70              POP      {r4-r6,pc}
;;;236    
                          ENDP

                  |L4.48|
000030  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
000034  44726976
000038  6572735c
00003c  66736c5f
000040  75736172
000044  745f646d
000048  612e6300
                  |L4.76|
00004c  4e554c4c          DCB      "NULL != handle",0
000050  20213d20
000054  68616e64
000058  6c6500  
00005b  00                DCB      0
                  |L4.92|
00005c  4e554c4c          DCB      "NULL != handle->txDmaHandle",0
000060  20213d20
000064  68616e64
000068  6c652d3e
00006c  7478446d
000070  6148616e
000074  646c6500

                          AREA ||i.USART_TransferCreateHandleDMA||, CODE, READONLY, ALIGN=2

                  USART_TransferCreateHandleDMA PROC
;;;96     
;;;97     status_t USART_TransferCreateHandleDMA(USART_Type *base,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;98                                            usart_dma_handle_t *handle,
;;;99                                            usart_dma_transfer_callback_t callback,
;;;100                                           void *userData,
;;;101                                           dma_handle_t *txDmaHandle,
;;;102                                           dma_handle_t *rxDmaHandle)
;;;103    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
00000c  e9dd7808          LDRD     r7,r8,[sp,#0x20]
;;;104        int32_t instance = 0;
000010  2600              MOVS     r6,#0
;;;105    
;;;106        /* check 'base' */
;;;107        assert(!(NULL == base));
000012  b105              CBZ      r5,|L5.22|
000014  e004              B        |L5.32|
                  |L5.22|
000016  226b              MOVS     r2,#0x6b
000018  a11f              ADR      r1,|L5.152|
00001a  a026              ADR      r0,|L5.180|
00001c  f7fffffe          BL       __aeabi_assert
                  |L5.32|
;;;108        if (NULL == base)
000020  b915              CBNZ     r5,|L5.40|
;;;109        {
;;;110            return kStatus_InvalidArgument;
000022  2004              MOVS     r0,#4
                  |L5.36|
;;;111        }
;;;112        /* check 'handle' */
;;;113        assert(!(NULL == handle));
;;;114        if (NULL == handle)
;;;115        {
;;;116            return kStatus_InvalidArgument;
;;;117        }
;;;118    
;;;119        instance = USART_GetInstance(base);
;;;120    
;;;121        memset(handle, 0, sizeof(*handle));
;;;122        /* assign 'base' and 'handle' */
;;;123        s_dmaPrivateHandle[instance].base = base;
;;;124        s_dmaPrivateHandle[instance].handle = handle;
;;;125    
;;;126        /* set tx/rx 'idle' state */
;;;127        handle->rxState = kUSART_RxIdle;
;;;128        handle->txState = kUSART_TxIdle;
;;;129    
;;;130        handle->callback = callback;
;;;131        handle->userData = userData;
;;;132    
;;;133        handle->rxDmaHandle = rxDmaHandle;
;;;134        handle->txDmaHandle = txDmaHandle;
;;;135    
;;;136        /* Configure TX. */
;;;137        if (txDmaHandle)
;;;138        {
;;;139            DMA_SetCallback(txDmaHandle, USART_TransferSendDMACallback, &s_dmaPrivateHandle[instance]);
;;;140        }
;;;141    
;;;142        /* Configure RX. */
;;;143        if (rxDmaHandle)
;;;144        {
;;;145            DMA_SetCallback(rxDmaHandle, USART_TransferReceiveDMACallback, &s_dmaPrivateHandle[instance]);
;;;146        }
;;;147    
;;;148        return kStatus_Success;
;;;149    }
000024  e8bd87f0          POP      {r4-r10,pc}
                  |L5.40|
000028  b104              CBZ      r4,|L5.44|
00002a  e004              B        |L5.54|
                  |L5.44|
00002c  2271              MOVS     r2,#0x71              ;113
00002e  a11a              ADR      r1,|L5.152|
000030  a024              ADR      r0,|L5.196|
000032  f7fffffe          BL       __aeabi_assert
                  |L5.54|
000036  b90c              CBNZ     r4,|L5.60|
000038  2004              MOVS     r0,#4                 ;116
00003a  e7f3              B        |L5.36|
                  |L5.60|
00003c  4628              MOV      r0,r5                 ;119
00003e  f7fffffe          BL       USART_GetInstance
000042  4606              MOV      r6,r0                 ;119
000044  2120              MOVS     r1,#0x20              ;121
000046  4620              MOV      r0,r4                 ;121
000048  f7fffffe          BL       __aeabi_memclr4
00004c  4822              LDR      r0,|L5.216|
00004e  f8405036          STR      r5,[r0,r6,LSL #3]     ;123
000052  eb0000c6          ADD      r0,r0,r6,LSL #3       ;124
000056  6044              STR      r4,[r0,#4]            ;124
000058  2002              MOVS     r0,#2                 ;127
00005a  7760              STRB     r0,[r4,#0x1d]         ;127
00005c  2000              MOVS     r0,#0                 ;128
00005e  7720              STRB     r0,[r4,#0x1c]         ;128
000060  f8c49004          STR      r9,[r4,#4]            ;130
000064  f8c4a008          STR      r10,[r4,#8]           ;131
000068  f8c48018          STR      r8,[r4,#0x18]         ;133
00006c  6167              STR      r7,[r4,#0x14]         ;134
00006e  b137              CBZ      r7,|L5.126|
000070  4819              LDR      r0,|L5.216|
000072  eb0002c6          ADD      r2,r0,r6,LSL #3       ;139
000076  4919              LDR      r1,|L5.220|
000078  4638              MOV      r0,r7                 ;139
00007a  f7fffffe          BL       DMA_SetCallback
                  |L5.126|
00007e  f1b80f00          CMP      r8,#0                 ;143
000082  d006              BEQ      |L5.146|
000084  4814              LDR      r0,|L5.216|
000086  eb0002c6          ADD      r2,r0,r6,LSL #3       ;145
00008a  4915              LDR      r1,|L5.224|
00008c  4640              MOV      r0,r8                 ;145
00008e  f7fffffe          BL       DMA_SetCallback
                  |L5.146|
000092  2000              MOVS     r0,#0                 ;148
000094  e7c6              B        |L5.36|
;;;150    
                          ENDP

000096  0000              DCW      0x0000
                  |L5.152|
000098  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
00009c  44726976
0000a0  6572735c
0000a4  66736c5f
0000a8  75736172
0000ac  745f646d
0000b0  612e6300
                  |L5.180|
0000b4  21284e55          DCB      "!(NULL == base)",0
0000b8  4c4c203d
0000bc  3d206261
0000c0  73652900
                  |L5.196|
0000c4  21284e55          DCB      "!(NULL == handle)",0
0000c8  4c4c203d
0000cc  3d206861
0000d0  6e646c65
0000d4  2900    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L5.216|
                          DCD      s_dmaPrivateHandle
                  |L5.220|
                          DCD      USART_TransferSendDMACallback
                  |L5.224|
                          DCD      USART_TransferReceiveDMACallback

                          AREA ||i.USART_TransferGetReceiveCountDMA||, CODE, READONLY, ALIGN=2

                  USART_TransferGetReceiveCountDMA PROC
;;;246    
;;;247    status_t USART_TransferGetReceiveCountDMA(USART_Type *base, usart_dma_handle_t *handle, uint32_t *count)
000000  b570              PUSH     {r4-r6,lr}
;;;248    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;249        assert(handle);
000008  b104              CBZ      r4,|L6.12|
00000a  e004              B        |L6.22|
                  |L6.12|
00000c  22f9              MOVS     r2,#0xf9
00000e  a111              ADR      r1,|L6.84|
000010  a017              ADR      r0,|L6.112|
000012  f7fffffe          BL       __aeabi_assert
                  |L6.22|
;;;250        assert(handle->rxDmaHandle);
000016  69a0              LDR      r0,[r4,#0x18]
000018  b100              CBZ      r0,|L6.28|
00001a  e004              B        |L6.38|
                  |L6.28|
00001c  22fa              MOVS     r2,#0xfa
00001e  a10d              ADR      r1,|L6.84|
000020  a015              ADR      r0,|L6.120|
000022  f7fffffe          BL       __aeabi_assert
                  |L6.38|
;;;251        assert(count);
000026  b105              CBZ      r5,|L6.42|
000028  e004              B        |L6.52|
                  |L6.42|
00002a  22fb              MOVS     r2,#0xfb
00002c  a109              ADR      r1,|L6.84|
00002e  a017              ADR      r0,|L6.140|
000030  f7fffffe          BL       __aeabi_assert
                  |L6.52|
;;;252    
;;;253        if (kUSART_RxIdle == handle->rxState)
000034  7f60              LDRB     r0,[r4,#0x1d]
000036  2802              CMP      r0,#2
000038  d101              BNE      |L6.62|
;;;254        {
;;;255            return kStatus_NoTransferInProgress;
00003a  2006              MOVS     r0,#6
                  |L6.60|
;;;256        }
;;;257    
;;;258        *count = handle->rxDataSizeAll - DMA_GetRemainingBytes(handle->rxDmaHandle->base, handle->rxDmaHandle->channel);
;;;259    
;;;260        return kStatus_Success;
;;;261    }
00003c  bd70              POP      {r4-r6,pc}
                  |L6.62|
00003e  69a2              LDR      r2,[r4,#0x18]         ;258
000040  7b11              LDRB     r1,[r2,#0xc]          ;258
000042  6890              LDR      r0,[r2,#8]            ;258
000044  f7fffffe          BL       DMA_GetRemainingBytes
000048  68e1              LDR      r1,[r4,#0xc]          ;258
00004a  1a08              SUBS     r0,r1,r0              ;258
00004c  6028              STR      r0,[r5,#0]            ;258
00004e  2000              MOVS     r0,#0                 ;260
000050  e7f4              B        |L6.60|
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
000054  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
000058  44726976
00005c  6572735c
000060  66736c5f
000064  75736172
000068  745f646d
00006c  612e6300
                  |L6.112|
000070  68616e64          DCB      "handle",0
000074  6c6500  
000077  00                DCB      0
                  |L6.120|
000078  68616e64          DCB      "handle->rxDmaHandle",0
00007c  6c652d3e
000080  7278446d
000084  6148616e
000088  646c6500
                  |L6.140|
00008c  636f756e          DCB      "count",0
000090  7400    
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.USART_TransferReceiveDMA||, CODE, READONLY, ALIGN=2

                  USART_TransferReceiveDMA PROC
;;;188    
;;;189    status_t USART_TransferReceiveDMA(USART_Type *base, usart_dma_handle_t *handle, usart_transfer_t *xfer)
000000  b5f0              PUSH     {r4-r7,lr}
;;;190    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;191        assert(handle);
00000a  b104              CBZ      r4,|L7.14|
00000c  e004              B        |L7.24|
                  |L7.14|
00000e  22bf              MOVS     r2,#0xbf
000010  a124              ADR      r1,|L7.164|
000012  a02b              ADR      r0,|L7.192|
000014  f7fffffe          BL       __aeabi_assert
                  |L7.24|
;;;192        assert(handle->rxDmaHandle);
000018  69a0              LDR      r0,[r4,#0x18]
00001a  b100              CBZ      r0,|L7.30|
00001c  e004              B        |L7.40|
                  |L7.30|
00001e  22c0              MOVS     r2,#0xc0
000020  a120              ADR      r1,|L7.164|
000022  a029              ADR      r0,|L7.200|
000024  f7fffffe          BL       __aeabi_assert
                  |L7.40|
;;;193        assert(xfer);
000028  b105              CBZ      r5,|L7.44|
00002a  e004              B        |L7.54|
                  |L7.44|
00002c  22c1              MOVS     r2,#0xc1
00002e  a11d              ADR      r1,|L7.164|
000030  a02a              ADR      r0,|L7.220|
000032  f7fffffe          BL       __aeabi_assert
                  |L7.54|
;;;194        assert(xfer->data);
000036  6828              LDR      r0,[r5,#0]
000038  b100              CBZ      r0,|L7.60|
00003a  e004              B        |L7.70|
                  |L7.60|
00003c  22c2              MOVS     r2,#0xc2
00003e  a119              ADR      r1,|L7.164|
000040  a028              ADR      r0,|L7.228|
000042  f7fffffe          BL       __aeabi_assert
                  |L7.70|
;;;195        assert(xfer->dataSize);
000046  6868              LDR      r0,[r5,#4]
000048  b100              CBZ      r0,|L7.76|
00004a  e004              B        |L7.86|
                  |L7.76|
00004c  22c3              MOVS     r2,#0xc3
00004e  a115              ADR      r1,|L7.164|
000050  a027              ADR      r0,|L7.240|
000052  f7fffffe          BL       __aeabi_assert
                  |L7.86|
;;;196    
;;;197        dma_transfer_config_t xferConfig;
;;;198        status_t status;
;;;199    
;;;200        /* If previous RX not finished. */
;;;201        if (kUSART_RxBusy == handle->rxState)
000056  7f60              LDRB     r0,[r4,#0x1d]
000058  2803              CMP      r0,#3
00005a  d102              BNE      |L7.98|
;;;202        {
;;;203            status = kStatus_USART_RxBusy;
00005c  f2416645          MOV      r6,#0x1645
000060  e01c              B        |L7.156|
                  |L7.98|
;;;204        }
;;;205        else
;;;206        {
;;;207            handle->rxState = kUSART_RxBusy;
000062  2003              MOVS     r0,#3
000064  7760              STRB     r0,[r4,#0x1d]
;;;208            handle->rxDataSizeAll = xfer->dataSize;
000066  6868              LDR      r0,[r5,#4]
000068  60e0              STR      r0,[r4,#0xc]
;;;209    
;;;210            /* Enable DMA request from rxFIFO */
;;;211            USART_EnableRxDMA(base, true);
00006a  2101              MOVS     r1,#1
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       USART_EnableRxDMA
;;;212    
;;;213            /* Prepare transfer. */
;;;214            DMA_PrepareTransfer(&xferConfig, (void *)&base->FIFORD, xfer->data, sizeof(uint8_t), xfer->dataSize,
000072  2100              MOVS     r1,#0
000074  2201              MOVS     r2,#1
000076  6868              LDR      r0,[r5,#4]
000078  e9cd2101          STRD     r2,r1,[sp,#4]
00007c  9000              STR      r0,[sp,#0]
00007e  2301              MOVS     r3,#1
000080  f5076163          ADD      r1,r7,#0xe30
000084  a804              ADD      r0,sp,#0x10
000086  682a              LDR      r2,[r5,#0]
000088  f7fffffe          BL       DMA_PrepareTransfer
;;;215                                kDMA_PeripheralToMemory, NULL);
;;;216    
;;;217            /* Submit transfer. */
;;;218            DMA_SubmitTransfer(handle->rxDmaHandle, &xferConfig);
00008c  a904              ADD      r1,sp,#0x10
00008e  69a0              LDR      r0,[r4,#0x18]
000090  f7fffffe          BL       DMA_SubmitTransfer
;;;219            DMA_StartTransfer(handle->rxDmaHandle);
000094  69a0              LDR      r0,[r4,#0x18]
000096  f7fffffe          BL       DMA_StartTransfer
;;;220    
;;;221            status = kStatus_Success;
00009a  2600              MOVS     r6,#0
                  |L7.156|
;;;222        }
;;;223    
;;;224        return status;
00009c  4630              MOV      r0,r6
;;;225    }
00009e  b00b              ADD      sp,sp,#0x2c
0000a0  bdf0              POP      {r4-r7,pc}
;;;226    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L7.164|
0000a4  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
0000a8  44726976
0000ac  6572735c
0000b0  66736c5f
0000b4  75736172
0000b8  745f646d
0000bc  612e6300
                  |L7.192|
0000c0  68616e64          DCB      "handle",0
0000c4  6c6500  
0000c7  00                DCB      0
                  |L7.200|
0000c8  68616e64          DCB      "handle->rxDmaHandle",0
0000cc  6c652d3e
0000d0  7278446d
0000d4  6148616e
0000d8  646c6500
                  |L7.220|
0000dc  78666572          DCB      "xfer",0
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L7.228|
0000e4  78666572          DCB      "xfer->data",0
0000e8  2d3e6461
0000ec  746100  
0000ef  00                DCB      0
                  |L7.240|
0000f0  78666572          DCB      "xfer->dataSize",0
0000f4  2d3e6461
0000f8  74615369
0000fc  7a6500  
0000ff  00                DCB      0

                          AREA ||i.USART_TransferReceiveDMACallback||, CODE, READONLY, ALIGN=2

                  USART_TransferReceiveDMACallback PROC
;;;77     
;;;78     static void USART_TransferReceiveDMACallback(dma_handle_t *handle, void *param, bool transferDone, uint32_t intmode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;79     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;80         assert(handle);
00000c  b106              CBZ      r6,|L8.16|
00000e  e004              B        |L8.26|
                  |L8.16|
000010  2250              MOVS     r2,#0x50
000012  a110              ADR      r1,|L8.84|
000014  a016              ADR      r0,|L8.112|
000016  f7fffffe          BL       __aeabi_assert
                  |L8.26|
;;;81         assert(param);
00001a  b105              CBZ      r5,|L8.30|
00001c  e004              B        |L8.40|
                  |L8.30|
00001e  2251              MOVS     r2,#0x51
000020  a10c              ADR      r1,|L8.84|
000022  a015              ADR      r0,|L8.120|
000024  f7fffffe          BL       __aeabi_assert
                  |L8.40|
;;;82     
;;;83         usart_dma_private_handle_t *usartPrivateHandle = (usart_dma_private_handle_t *)param;
000028  462c              MOV      r4,r5
;;;84     
;;;85         /* Disable UART RX DMA. */
;;;86         USART_EnableRxDMA(usartPrivateHandle->base, false);
00002a  2100              MOVS     r1,#0
00002c  6820              LDR      r0,[r4,#0]
00002e  f7fffffe          BL       USART_EnableRxDMA
;;;87     
;;;88         usartPrivateHandle->handle->rxState = kUSART_RxIdle;
000032  2002              MOVS     r0,#2
000034  6861              LDR      r1,[r4,#4]
000036  7748              STRB     r0,[r1,#0x1d]
;;;89     
;;;90         if (usartPrivateHandle->handle->callback)
000038  6860              LDR      r0,[r4,#4]
00003a  6840              LDR      r0,[r0,#4]
00003c  b138              CBZ      r0,|L8.78|
;;;91         {
;;;92             usartPrivateHandle->handle->callback(usartPrivateHandle->base, usartPrivateHandle->handle, kStatus_USART_RxIdle,
00003e  6862              LDR      r2,[r4,#4]
000040  4611              MOV      r1,r2
000042  6893              LDR      r3,[r2,#8]
000044  6820              LDR      r0,[r4,#0]
000046  6857              LDR      r7,[r2,#4]
000048  f2416247          MOV      r2,#0x1647
00004c  47b8              BLX      r7
                  |L8.78|
;;;93                                                  usartPrivateHandle->handle->userData);
;;;94         }
;;;95     }
00004e  e8bd87f0          POP      {r4-r10,pc}
;;;96     
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
000054  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
000058  44726976
00005c  6572735c
000060  66736c5f
000064  75736172
000068  745f646d
00006c  612e6300
                  |L8.112|
000070  68616e64          DCB      "handle",0
000074  6c6500  
000077  00                DCB      0
                  |L8.120|
000078  70617261          DCB      "param",0
00007c  6d00    
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.USART_TransferSendDMA||, CODE, READONLY, ALIGN=2

                  USART_TransferSendDMA PROC
;;;150    
;;;151    status_t USART_TransferSendDMA(USART_Type *base, usart_dma_handle_t *handle, usart_transfer_t *xfer)
000000  b5f0              PUSH     {r4-r7,lr}
;;;152    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;153        assert(handle);
00000a  b104              CBZ      r4,|L9.14|
00000c  e004              B        |L9.24|
                  |L9.14|
00000e  2299              MOVS     r2,#0x99
000010  a124              ADR      r1,|L9.164|
000012  a02b              ADR      r0,|L9.192|
000014  f7fffffe          BL       __aeabi_assert
                  |L9.24|
;;;154        assert(handle->txDmaHandle);
000018  6960              LDR      r0,[r4,#0x14]
00001a  b100              CBZ      r0,|L9.30|
00001c  e004              B        |L9.40|
                  |L9.30|
00001e  229a              MOVS     r2,#0x9a
000020  a120              ADR      r1,|L9.164|
000022  a029              ADR      r0,|L9.200|
000024  f7fffffe          BL       __aeabi_assert
                  |L9.40|
;;;155        assert(xfer);
000028  b105              CBZ      r5,|L9.44|
00002a  e004              B        |L9.54|
                  |L9.44|
00002c  229b              MOVS     r2,#0x9b
00002e  a11d              ADR      r1,|L9.164|
000030  a02a              ADR      r0,|L9.220|
000032  f7fffffe          BL       __aeabi_assert
                  |L9.54|
;;;156        assert(xfer->data);
000036  6828              LDR      r0,[r5,#0]
000038  b100              CBZ      r0,|L9.60|
00003a  e004              B        |L9.70|
                  |L9.60|
00003c  229c              MOVS     r2,#0x9c
00003e  a119              ADR      r1,|L9.164|
000040  a028              ADR      r0,|L9.228|
000042  f7fffffe          BL       __aeabi_assert
                  |L9.70|
;;;157        assert(xfer->dataSize);
000046  6868              LDR      r0,[r5,#4]
000048  b100              CBZ      r0,|L9.76|
00004a  e004              B        |L9.86|
                  |L9.76|
00004c  229d              MOVS     r2,#0x9d
00004e  a115              ADR      r1,|L9.164|
000050  a027              ADR      r0,|L9.240|
000052  f7fffffe          BL       __aeabi_assert
                  |L9.86|
;;;158    
;;;159        dma_transfer_config_t xferConfig;
;;;160        status_t status;
;;;161    
;;;162        /* If previous TX not finished. */
;;;163        if (kUSART_TxBusy == handle->txState)
000056  7f20              LDRB     r0,[r4,#0x1c]
000058  2801              CMP      r0,#1
00005a  d102              BNE      |L9.98|
;;;164        {
;;;165            status = kStatus_USART_TxBusy;
00005c  f2416644          MOV      r6,#0x1644
000060  e01c              B        |L9.156|
                  |L9.98|
;;;166        }
;;;167        else
;;;168        {
;;;169            handle->txState = kUSART_TxBusy;
000062  2001              MOVS     r0,#1
000064  7720              STRB     r0,[r4,#0x1c]
;;;170            handle->txDataSizeAll = xfer->dataSize;
000066  6868              LDR      r0,[r5,#4]
000068  6120              STR      r0,[r4,#0x10]
;;;171    
;;;172            /* Enable DMA request from txFIFO */
;;;173            USART_EnableTxDMA(base, true);
00006a  2101              MOVS     r1,#1
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       USART_EnableTxDMA
;;;174    
;;;175            /* Prepare transfer. */
;;;176            DMA_PrepareTransfer(&xferConfig, xfer->data, (void *)&base->FIFOWR, sizeof(uint8_t), xfer->dataSize,
000072  2100              MOVS     r1,#0
000074  2202              MOVS     r2,#2
000076  6868              LDR      r0,[r5,#4]
000078  e9cd2101          STRD     r2,r1,[sp,#4]
00007c  9000              STR      r0,[sp,#0]
00007e  2301              MOVS     r3,#1
000080  f5076262          ADD      r2,r7,#0xe20
000084  a804              ADD      r0,sp,#0x10
000086  6829              LDR      r1,[r5,#0]
000088  f7fffffe          BL       DMA_PrepareTransfer
;;;177                                kDMA_MemoryToPeripheral, NULL);
;;;178    
;;;179            /* Submit transfer. */
;;;180            DMA_SubmitTransfer(handle->txDmaHandle, &xferConfig);
00008c  a904              ADD      r1,sp,#0x10
00008e  6960              LDR      r0,[r4,#0x14]
000090  f7fffffe          BL       DMA_SubmitTransfer
;;;181            DMA_StartTransfer(handle->txDmaHandle);
000094  6960              LDR      r0,[r4,#0x14]
000096  f7fffffe          BL       DMA_StartTransfer
;;;182    
;;;183            status = kStatus_Success;
00009a  2600              MOVS     r6,#0
                  |L9.156|
;;;184        }
;;;185    
;;;186        return status;
00009c  4630              MOV      r0,r6
;;;187    }
00009e  b00b              ADD      sp,sp,#0x2c
0000a0  bdf0              POP      {r4-r7,pc}
;;;188    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L9.164|
0000a4  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
0000a8  44726976
0000ac  6572735c
0000b0  66736c5f
0000b4  75736172
0000b8  745f646d
0000bc  612e6300
                  |L9.192|
0000c0  68616e64          DCB      "handle",0
0000c4  6c6500  
0000c7  00                DCB      0
                  |L9.200|
0000c8  68616e64          DCB      "handle->txDmaHandle",0
0000cc  6c652d3e
0000d0  7478446d
0000d4  6148616e
0000d8  646c6500
                  |L9.220|
0000dc  78666572          DCB      "xfer",0
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L9.228|
0000e4  78666572          DCB      "xfer->data",0
0000e8  2d3e6461
0000ec  746100  
0000ef  00                DCB      0
                  |L9.240|
0000f0  78666572          DCB      "xfer->dataSize",0
0000f4  2d3e6461
0000f8  74615369
0000fc  7a6500  
0000ff  00                DCB      0

                          AREA ||i.USART_TransferSendDMACallback||, CODE, READONLY, ALIGN=2

                  USART_TransferSendDMACallback PROC
;;;58     
;;;59     static void USART_TransferSendDMACallback(dma_handle_t *handle, void *param, bool transferDone, uint32_t intmode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;60     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;61         assert(handle);
00000c  b106              CBZ      r6,|L10.16|
00000e  e004              B        |L10.26|
                  |L10.16|
000010  223d              MOVS     r2,#0x3d
000012  a110              ADR      r1,|L10.84|
000014  a016              ADR      r0,|L10.112|
000016  f7fffffe          BL       __aeabi_assert
                  |L10.26|
;;;62         assert(param);
00001a  b105              CBZ      r5,|L10.30|
00001c  e004              B        |L10.40|
                  |L10.30|
00001e  223e              MOVS     r2,#0x3e
000020  a10c              ADR      r1,|L10.84|
000022  a015              ADR      r0,|L10.120|
000024  f7fffffe          BL       __aeabi_assert
                  |L10.40|
;;;63     
;;;64         usart_dma_private_handle_t *usartPrivateHandle = (usart_dma_private_handle_t *)param;
000028  462c              MOV      r4,r5
;;;65     
;;;66         /* Disable UART TX DMA. */
;;;67         USART_EnableTxDMA(usartPrivateHandle->base, false);
00002a  2100              MOVS     r1,#0
00002c  6820              LDR      r0,[r4,#0]
00002e  f7fffffe          BL       USART_EnableTxDMA
;;;68     
;;;69         usartPrivateHandle->handle->txState = kUSART_TxIdle;
000032  2000              MOVS     r0,#0
000034  6861              LDR      r1,[r4,#4]
000036  7708              STRB     r0,[r1,#0x1c]
;;;70     
;;;71         if (usartPrivateHandle->handle->callback)
000038  6860              LDR      r0,[r4,#4]
00003a  6840              LDR      r0,[r0,#4]
00003c  b138              CBZ      r0,|L10.78|
;;;72         {
;;;73             usartPrivateHandle->handle->callback(usartPrivateHandle->base, usartPrivateHandle->handle, kStatus_USART_TxIdle,
00003e  6862              LDR      r2,[r4,#4]
000040  4611              MOV      r1,r2
000042  6893              LDR      r3,[r2,#8]
000044  6820              LDR      r0,[r4,#0]
000046  6857              LDR      r7,[r2,#4]
000048  f2416246          MOV      r2,#0x1646
00004c  47b8              BLX      r7
                  |L10.78|
;;;74                                                  usartPrivateHandle->handle->userData);
;;;75         }
;;;76     }
00004e  e8bd87f0          POP      {r4-r10,pc}
;;;77     
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
000054  5352435c          DCB      "SRC\\Drivers\\fsl_usart_dma.c",0
000058  44726976
00005c  6572735c
000060  66736c5f
000064  75736172
000068  745f646d
00006c  612e6300
                  |L10.112|
000070  68616e64          DCB      "handle",0
000074  6c6500  
000077  00                DCB      0
                  |L10.120|
000078  70617261          DCB      "param",0
00007c  6d00    
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_dmaPrivateHandle
                          %        80

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_usart_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_fsl_usart_dma_c_139683cc____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_fsl_usart_dma_c_139683cc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_fsl_usart_dma_c_139683cc____REVSH|
#line 402
|__asm___15_fsl_usart_dma_c_139683cc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_fsl_usart_dma_c_139683cc____RRX|
#line 587
|__asm___15_fsl_usart_dma_c_139683cc____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_spifi.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_spifi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_spifi.crf SRC\Drivers\fsl_spifi.c]
                          THUMB

                          AREA ||i.SPIFI_Deinit||, CODE, READONLY, ALIGN=2

                  SPIFI_Deinit PROC
;;;112    
;;;113    void SPIFI_Deinit(SPIFI_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;114    {
000002  4605              MOV      r5,r0
;;;115    #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;116        /* Enable the SAI clock */
;;;117        CLOCK_DisableClock(s_spifiClock[SPIFI_GetInstance(base)]);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       SPIFI_GetInstance
00000a  490a              LDR      r1,|L1.52|
00000c  f8314010          LDRH     r4,[r1,r0,LSL #1]
000010  0a20              LSRS     r0,r4,#8
000012  2803              CMP      r0,#3
000014  d205              BCS      |L1.34|
000016  2101              MOVS     r1,#1
000018  40a1              LSLS     r1,r1,r4
00001a  4a07              LDR      r2,|L1.56|
00001c  f8421020          STR      r1,[r2,r0,LSL #2]
000020  e006              B        |L1.48|
                  |L1.34|
000022  2101              MOVS     r1,#1
000024  40a1              LSLS     r1,r1,r4
000026  4a05              LDR      r2,|L1.60|
000028  6191              STR      r1,[r2,#0x18]
00002a  2100              MOVS     r1,#0
00002c  0312              LSLS     r2,r2,#12
00002e  64d1              STR      r1,[r2,#0x4c]
                  |L1.48|
000030  bf00              NOP      
;;;118    #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;119    }
000032  bd70              POP      {r4-r6,pc}
;;;120    
                          ENDP

                  |L1.52|
                          DCD      s_spifiClock
                  |L1.56|
                          DCD      0x40000240
                  |L1.60|
                          DCD      0x40040000

                          AREA ||i.SPIFI_GetDefaultConfig||, CODE, READONLY, ALIGN=1

                  SPIFI_GetDefaultConfig PROC
;;;81     
;;;82     void SPIFI_GetDefaultConfig(spifi_config_t *config)
000000  f64f71ff          MOV      r1,#0xffff
;;;83     {
;;;84         config->timeout = 0xFFFFU;
000004  8001              STRH     r1,[r0,#0]
;;;85         config->csHighTime = 0xFU;
000006  210f              MOVS     r1,#0xf
000008  7081              STRB     r1,[r0,#2]
;;;86         config->disablePrefetch = false;
00000a  2100              MOVS     r1,#0
00000c  70c1              STRB     r1,[r0,#3]
;;;87         config->disableCachePrefech = false;
00000e  7101              STRB     r1,[r0,#4]
;;;88         config->isFeedbackClock = true;
000010  2101              MOVS     r1,#1
000012  7141              STRB     r1,[r0,#5]
;;;89         config->spiMode = kSPIFI_SPISckLow;
000014  2100              MOVS     r1,#0
000016  7181              STRB     r1,[r0,#6]
;;;90         config->isReadFullClockCycle = false;
000018  71c1              STRB     r1,[r0,#7]
;;;91         config->dualMode = kSPIFI_QuadMode;
00001a  7201              STRB     r1,[r0,#8]
;;;92     }
00001c  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i.SPIFI_GetInstance||, CODE, READONLY, ALIGN=2

                  SPIFI_GetInstance PROC
;;;63      ******************************************************************************/
;;;64     uint32_t SPIFI_GetInstance(SPIFI_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;65     {
000002  4605              MOV      r5,r0
;;;66         uint32_t instance;
;;;67     
;;;68         /* Find the instance index from base address mappings. */
;;;69         for (instance = 0; instance < FSL_FEATURE_SOC_SPIFI_COUNT; instance++)
000004  2400              MOVS     r4,#0
000006  e006              B        |L3.22|
                  |L3.8|
;;;70         {
;;;71             if (s_spifiBases[instance] == base)
000008  4809              LDR      r0,|L3.48|
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  42a8              CMP      r0,r5
000010  d100              BNE      |L3.20|
;;;72             {
;;;73                 break;
000012  e002              B        |L3.26|
                  |L3.20|
000014  1c64              ADDS     r4,r4,#1              ;69
                  |L3.22|
000016  2c00              CMP      r4,#0                 ;69
000018  d0f6              BEQ      |L3.8|
                  |L3.26|
00001a  bf00              NOP      
;;;74             }
;;;75         }
;;;76     
;;;77         assert(instance < FSL_FEATURE_SOC_SPIFI_COUNT);
00001c  b904              CBNZ     r4,|L3.32|
00001e  e004              B        |L3.42|
                  |L3.32|
000020  224d              MOVS     r2,#0x4d
000022  a104              ADR      r1,|L3.52|
000024  a009              ADR      r0,|L3.76|
000026  f7fffffe          BL       __aeabi_assert
                  |L3.42|
;;;78     
;;;79         return instance;
00002a  4620              MOV      r0,r4
;;;80     }
00002c  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      s_spifiBases
                  |L3.52|
000034  5352435c          DCB      "SRC\\Drivers\\fsl_spifi.c",0
000038  44726976
00003c  6572735c
000040  66736c5f
000044  73706966
000048  692e6300
                  |L3.76|
00004c  696e7374          DCB      "instance < FSL_FEATURE_SOC_SPIFI_COUNT",0
000050  616e6365
000054  203c2046
000058  534c5f46
00005c  45415455
000060  52455f53
000064  4f435f53
000068  50494649
00006c  5f434f55
000070  4e5400  
000073  00                DCB      0

                          AREA ||i.SPIFI_Init||, CODE, READONLY, ALIGN=2

                  SPIFI_Init PROC
;;;93     
;;;94     void SPIFI_Init(SPIFI_Type *base, const spifi_config_t *config)
000000  b570              PUSH     {r4-r6,lr}
;;;95     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;96         assert(config);
000006  b104              CBZ      r4,|L4.10|
000008  e004              B        |L4.20|
                  |L4.10|
00000a  2260              MOVS     r2,#0x60
00000c  a126              ADR      r1,|L4.168|
00000e  a02c              ADR      r0,|L4.192|
000010  f7fffffe          BL       __aeabi_assert
                  |L4.20|
;;;97     
;;;98     #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;99         /* Enable the SAI clock */
;;;100        CLOCK_EnableClock(s_spifiClock[SPIFI_GetInstance(base)]);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       SPIFI_GetInstance
00001a  492b              LDR      r1,|L4.200|
00001c  f8316010          LDRH     r6,[r1,r0,LSL #1]
000020  0a30              LSRS     r0,r6,#8
000022  2803              CMP      r0,#3
000024  d205              BCS      |L4.50|
000026  2101              MOVS     r1,#1
000028  40b1              LSLS     r1,r1,r6
00002a  4a28              LDR      r2,|L4.204|
00002c  f8421020          STR      r1,[r2,r0,LSL #2]
000030  e005              B        |L4.62|
                  |L4.50|
000032  2101              MOVS     r1,#1
000034  078a              LSLS     r2,r1,#30
000036  64d1              STR      r1,[r2,#0x4c]
000038  40b1              LSLS     r1,r1,r6
00003a  4a25              LDR      r2,|L4.208|
00003c  6151              STR      r1,[r2,#0x14]
                  |L4.62|
00003e  bf00              NOP      
;;;101    #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;102    
;;;103        /* Reset the Command register */
;;;104        SPIFI_ResetCommand(base);
000040  bf00              NOP      
000042  2010              MOVS     r0,#0x10
000044  61e8              STR      r0,[r5,#0x1c]
000046  bf00              NOP      
000048  bf00              NOP      
                  |L4.74|
00004a  69e8              LDR      r0,[r5,#0x1c]
00004c  f0000010          AND      r0,r0,#0x10
000050  2800              CMP      r0,#0
000052  d1fa              BNE      |L4.74|
000054  bf00              NOP      
;;;105    
;;;106        /* Set time delay parameter */
;;;107        base->CTRL = SPIFI_CTRL_TIMEOUT(config->timeout) | SPIFI_CTRL_CSHIGH(config->csHighTime) |
000056  8820              LDRH     r0,[r4,#0]
000058  78a1              LDRB     r1,[r4,#2]
00005a  f44f2270          MOV      r2,#0xf0000
00005e  ea024101          AND      r1,r2,r1,LSL #16
000062  4308              ORRS     r0,r0,r1
000064  78e1              LDRB     r1,[r4,#3]
000066  f44f1200          MOV      r2,#0x200000
00006a  ea025141          AND      r1,r2,r1,LSL #21
00006e  4308              ORRS     r0,r0,r1
000070  79a1              LDRB     r1,[r4,#6]
000072  0092              LSLS     r2,r2,#2
000074  ea0251c1          AND      r1,r2,r1,LSL #23
000078  4308              ORRS     r0,r0,r1
00007a  7921              LDRB     r1,[r4,#4]
00007c  0112              LSLS     r2,r2,#4
00007e  ea0261c1          AND      r1,r2,r1,LSL #27
000082  4308              ORRS     r0,r0,r1
000084  7a21              LDRB     r1,[r4,#8]
000086  0052              LSLS     r2,r2,#1
000088  ea027101          AND      r1,r2,r1,LSL #28
00008c  4308              ORRS     r0,r0,r1
00008e  79e1              LDRB     r1,[r4,#7]
000090  0052              LSLS     r2,r2,#1
000092  ea027141          AND      r1,r2,r1,LSL #29
000096  4308              ORRS     r0,r0,r1
000098  7961              LDRB     r1,[r4,#5]
00009a  0052              LSLS     r2,r2,#1
00009c  ea027181          AND      r1,r2,r1,LSL #30
0000a0  4308              ORRS     r0,r0,r1
0000a2  6028              STR      r0,[r5,#0]
;;;108                     SPIFI_CTRL_D_PRFTCH_DIS(config->disablePrefetch) | SPIFI_CTRL_MODE3(config->spiMode) |
;;;109                     SPIFI_CTRL_PRFTCH_DIS(config->disableCachePrefech) | SPIFI_CTRL_DUAL(config->dualMode) |
;;;110                     SPIFI_CTRL_RFCLK(config->isReadFullClockCycle) | SPIFI_CTRL_FBCLK(config->isFeedbackClock);
;;;111    }
0000a4  bd70              POP      {r4-r6,pc}
;;;112    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L4.168|
0000a8  5352435c          DCB      "SRC\\Drivers\\fsl_spifi.c",0
0000ac  44726976
0000b0  6572735c
0000b4  66736c5f
0000b8  73706966
0000bc  692e6300
                  |L4.192|
0000c0  636f6e66          DCB      "config",0
0000c4  696700  
0000c7  00                DCB      0
                  |L4.200|
                          DCD      s_spifiClock
                  |L4.204|
                          DCD      0x40000220
                  |L4.208|
                          DCD      0x40040000

                          AREA ||i.SPIFI_SetCommand||, CODE, READONLY, ALIGN=1

                  SPIFI_SetCommand PROC
;;;120    
;;;121    void SPIFI_SetCommand(SPIFI_Type *base, spifi_command_t *cmd)
000000  b510              PUSH     {r4,lr}
;;;122    {
;;;123        /* Wait for the CMD and MCINT flag all be 0 */
;;;124        while (SPIFI_GetStatusFlag(base) & (SPIFI_STAT_MCINIT_MASK | SPIFI_STAT_CMD_MASK))
000002  bf00              NOP      
                  |L5.4|
000004  bf00              NOP      
000006  69c2              LDR      r2,[r0,#0x1c]
000008  f0020203          AND      r2,r2,#3
00000c  2a00              CMP      r2,#0
00000e  d1f9              BNE      |L5.4|
;;;125        {
;;;126        }
;;;127        base->CMD = SPIFI_CMD_DATALEN(cmd->dataLen) | SPIFI_CMD_POLL(cmd->isPollMode) | SPIFI_CMD_DOUT(cmd->direction) |
000010  880a              LDRH     r2,[r1,#0]
000012  f3c2020d          UBFX     r2,r2,#0,#14
000016  788b              LDRB     r3,[r1,#2]
000018  f44f4480          MOV      r4,#0x4000
00001c  ea043383          AND      r3,r4,r3,LSL #14
000020  431a              ORRS     r2,r2,r3
000022  78cb              LDRB     r3,[r1,#3]
000024  0064              LSLS     r4,r4,#1
000026  ea0433c3          AND      r3,r4,r3,LSL #15
00002a  431a              ORRS     r2,r2,r3
00002c  790b              LDRB     r3,[r1,#4]
00002e  f44f24e0          MOV      r4,#0x70000
000032  ea044303          AND      r3,r4,r3,LSL #16
000036  431a              ORRS     r2,r2,r3
000038  794b              LDRB     r3,[r1,#5]
00003a  f44f14c0          MOV      r4,#0x180000
00003e  ea0443c3          AND      r3,r4,r3,LSL #19
000042  431a              ORRS     r2,r2,r3
000044  798b              LDRB     r3,[r1,#6]
000046  f44f0460          MOV      r4,#0xe00000
00004a  ea045343          AND      r3,r4,r3,LSL #21
00004e  431a              ORRS     r2,r2,r3
000050  79cb              LDRB     r3,[r1,#7]
000052  f04f447f          MOV      r4,#0xff000000
000056  ea046303          AND      r3,r4,r3,LSL #24
00005a  431a              ORRS     r2,r2,r3
00005c  6042              STR      r2,[r0,#4]
;;;128                    SPIFI_CMD_INTLEN(cmd->intermediateBytes) | SPIFI_CMD_FIELDFORM(cmd->format) |
;;;129                    SPIFI_CMD_FRAMEFORM(cmd->type) | SPIFI_CMD_OPCODE(cmd->opcode);
;;;130    
;;;131        /* Wait for the command written */
;;;132        while ((base->STAT & SPIFI_STAT_CMD_MASK) == 0U)
00005e  bf00              NOP      
                  |L5.96|
000060  69c2              LDR      r2,[r0,#0x1c]
000062  f0020202          AND      r2,r2,#2
000066  2a00              CMP      r2,#0
000068  d0fa              BEQ      |L5.96|
;;;133        {
;;;134        }
;;;135    }
00006a  bd10              POP      {r4,pc}
;;;136    
                          ENDP


                          AREA ||i.SPIFI_SetMemoryCommand||, CODE, READONLY, ALIGN=1

                  SPIFI_SetMemoryCommand PROC
;;;136    
;;;137    void SPIFI_SetMemoryCommand(SPIFI_Type *base, spifi_command_t *cmd)
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139        /* Wait for the CMD and MCINT flag all be 0 */
;;;140        while (SPIFI_GetStatusFlag(base) & (SPIFI_STAT_MCINIT_MASK | SPIFI_STAT_CMD_MASK))
000002  bf00              NOP      
                  |L6.4|
000004  bf00              NOP      
000006  69c2              LDR      r2,[r0,#0x1c]
000008  f0020203          AND      r2,r2,#3
00000c  2a00              CMP      r2,#0
00000e  d1f9              BNE      |L6.4|
;;;141        {
;;;142        }
;;;143    
;;;144        base->MCMD = SPIFI_MCMD_POLL(0U) | SPIFI_MCMD_DOUT(0U) | SPIFI_MCMD_INTLEN(cmd->intermediateBytes) |
000010  790a              LDRB     r2,[r1,#4]
000012  f44f23e0          MOV      r3,#0x70000
000016  ea034202          AND      r2,r3,r2,LSL #16
00001a  794b              LDRB     r3,[r1,#5]
00001c  f44f14c0          MOV      r4,#0x180000
000020  ea0443c3          AND      r3,r4,r3,LSL #19
000024  431a              ORRS     r2,r2,r3
000026  798b              LDRB     r3,[r1,#6]
000028  f44f0460          MOV      r4,#0xe00000
00002c  ea045343          AND      r3,r4,r3,LSL #21
000030  431a              ORRS     r2,r2,r3
000032  79cb              LDRB     r3,[r1,#7]
000034  f04f447f          MOV      r4,#0xff000000
000038  ea046303          AND      r3,r4,r3,LSL #24
00003c  431a              ORRS     r2,r2,r3
00003e  6182              STR      r2,[r0,#0x18]
;;;145                     SPIFI_MCMD_FIELDFORM(cmd->format) | SPIFI_MCMD_FRAMEFORM(cmd->type) | SPIFI_MCMD_OPCODE(cmd->opcode);
;;;146    }
000040  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  s_spifiBases
                          DCD      0x40080000
                  s_spifiClock
000004  000a              DCW      0x000a

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_spifi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_spifi_c_d2a84ddf____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_fsl_spifi_c_d2a84ddf____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_spifi_c_d2a84ddf____REVSH|
#line 402
|__asm___11_fsl_spifi_c_d2a84ddf____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_spifi_c_d2a84ddf____RRX|
#line 587
|__asm___11_fsl_spifi_c_d2a84ddf____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

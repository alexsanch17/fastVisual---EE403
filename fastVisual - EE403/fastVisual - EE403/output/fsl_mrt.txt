; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_mrt.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_mrt.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\SRC\eGFX\Fonts\Arial__23px__Regular__SystemDefault_1BPP -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_mrt.crf SRC\Drivers\fsl_mrt.c]
                          THUMB

                          AREA ||i.MRT_Deinit||, CODE, READONLY, ALIGN=2

                  MRT_Deinit PROC
;;;96     
;;;97     void MRT_Deinit(MRT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;98     {
000002  4605              MOV      r5,r0
;;;99         /* Stop all the timers */
;;;100        MRT_StopTimer(base, kMRT_Channel_0);
000004  2100              MOVS     r1,#0
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       MRT_StopTimer
;;;101        MRT_StopTimer(base, kMRT_Channel_1);
00000c  2101              MOVS     r1,#1
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       MRT_StopTimer
;;;102        MRT_StopTimer(base, kMRT_Channel_2);
000014  2102              MOVS     r1,#2
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       MRT_StopTimer
;;;103        MRT_StopTimer(base, kMRT_Channel_3);
00001c  2103              MOVS     r1,#3
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       MRT_StopTimer
;;;104    
;;;105    #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;106        /* Gate the MRT clock*/
;;;107        CLOCK_DisableClock(s_mrtClocks[MRT_GetInstance(base)]);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       MRT_GetInstance
00002a  490a              LDR      r1,|L1.84|
00002c  f8314010          LDRH     r4,[r1,r0,LSL #1]
000030  0a20              LSRS     r0,r4,#8
000032  2803              CMP      r0,#3
000034  d205              BCS      |L1.66|
000036  2101              MOVS     r1,#1
000038  40a1              LSLS     r1,r1,r4
00003a  4a07              LDR      r2,|L1.88|
00003c  f8421020          STR      r1,[r2,r0,LSL #2]
000040  e006              B        |L1.80|
                  |L1.66|
000042  2101              MOVS     r1,#1
000044  40a1              LSLS     r1,r1,r4
000046  4a05              LDR      r2,|L1.92|
000048  6191              STR      r1,[r2,#0x18]
00004a  2100              MOVS     r1,#0
00004c  0312              LSLS     r2,r2,#12
00004e  64d1              STR      r1,[r2,#0x4c]
                  |L1.80|
000050  bf00              NOP      
;;;108    #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;109    }
000052  bd70              POP      {r4-r6,pc}
;;;110    
                          ENDP

                  |L1.84|
                          DCD      s_mrtClocks
                  |L1.88|
                          DCD      0x40000240
                  |L1.92|
                          DCD      0x40040000

                          AREA ||i.MRT_GetInstance||, CODE, READONLY, ALIGN=2

                  MRT_GetInstance PROC
;;;61      ******************************************************************************/
;;;62     static uint32_t MRT_GetInstance(MRT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;63     {
000002  4605              MOV      r5,r0
;;;64         uint32_t instance;
;;;65         uint32_t mrtArrayCount = (sizeof(s_mrtBases) / sizeof(s_mrtBases[0]));
000004  2601              MOVS     r6,#1
;;;66     
;;;67         /* Find the instance index from base address mappings. */
;;;68         for (instance = 0; instance < mrtArrayCount; instance++)
000006  2400              MOVS     r4,#0
000008  e006              B        |L2.24|
                  |L2.10|
;;;69         {
;;;70             if (s_mrtBases[instance] == base)
00000a  480a              LDR      r0,|L2.52|
00000c  f8500024          LDR      r0,[r0,r4,LSL #2]
000010  42a8              CMP      r0,r5
000012  d100              BNE      |L2.22|
;;;71             {
;;;72                 break;
000014  e002              B        |L2.28|
                  |L2.22|
000016  1c64              ADDS     r4,r4,#1              ;68
                  |L2.24|
000018  42b4              CMP      r4,r6                 ;68
00001a  d3f6              BCC      |L2.10|
                  |L2.28|
00001c  bf00              NOP      
;;;73             }
;;;74         }
;;;75     
;;;76         assert(instance < mrtArrayCount);
00001e  42b4              CMP      r4,r6
000020  d200              BCS      |L2.36|
000022  e004              B        |L2.46|
                  |L2.36|
000024  224c              MOVS     r2,#0x4c
000026  a104              ADR      r1,|L2.56|
000028  a009              ADR      r0,|L2.80|
00002a  f7fffffe          BL       __aeabi_assert
                  |L2.46|
;;;77     
;;;78         return instance;
00002e  4620              MOV      r0,r4
;;;79     }
000030  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      s_mrtBases
                  |L2.56|
000038  5352435c          DCB      "SRC\\Drivers\\fsl_mrt.c",0
00003c  44726976
000040  6572735c
000044  66736c5f
000048  6d72742e
00004c  6300    
00004e  00                DCB      0
00004f  00                DCB      0
                  |L2.80|
000050  696e7374          DCB      "instance < mrtArrayCount",0
000054  616e6365
000058  203c206d
00005c  72744172
000060  72617943
000064  6f756e74
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.MRT_Init||, CODE, READONLY, ALIGN=2

                  MRT_Init PROC
;;;80     
;;;81     void MRT_Init(MRT_Type *base, const mrt_config_t *config)
000000  b570              PUSH     {r4-r6,lr}
;;;82     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;83         assert(config);
000006  b105              CBZ      r5,|L3.10|
000008  e004              B        |L3.20|
                  |L3.10|
00000a  2253              MOVS     r2,#0x53
00000c  a115              ADR      r1,|L3.100|
00000e  a01b              ADR      r0,|L3.124|
000010  f7fffffe          BL       __aeabi_assert
                  |L3.20|
;;;84     
;;;85     #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;86         /* Ungate the MRT clock */
;;;87         CLOCK_EnableClock(s_mrtClocks[MRT_GetInstance(base)]);
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       MRT_GetInstance
00001a  491a              LDR      r1,|L3.132|
00001c  f8314010          LDRH     r4,[r1,r0,LSL #1]
000020  0a20              LSRS     r0,r4,#8
000022  2803              CMP      r0,#3
000024  d205              BCS      |L3.50|
000026  2101              MOVS     r1,#1
000028  40a1              LSLS     r1,r1,r4
00002a  4a17              LDR      r2,|L3.136|
00002c  f8421020          STR      r1,[r2,r0,LSL #2]
000030  e005              B        |L3.62|
                  |L3.50|
000032  2101              MOVS     r1,#1
000034  078a              LSLS     r2,r1,#30
000036  64d1              STR      r1,[r2,#0x4c]
000038  40a1              LSLS     r1,r1,r4
00003a  4a14              LDR      r2,|L3.140|
00003c  6151              STR      r1,[r2,#0x14]
                  |L3.62|
00003e  bf00              NOP      
;;;88     #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;89     
;;;90         /* Reset the module */
;;;91         RESET_PeripheralReset(s_mrtResets[MRT_GetInstance(base)]);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       MRT_GetInstance
000046  4912              LDR      r1,|L3.144|
000048  f8514020          LDR      r4,[r1,r0,LSL #2]
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       RESET_PeripheralReset
;;;92     
;;;93         /* Set timer operating mode */
;;;94         base->MODCFG = MRT_MODCFG_MULTITASK(config->enableMultiTask);
000052  7828              LDRB     r0,[r5,#0]
000054  f04f4100          MOV      r1,#0x80000000
000058  ea0170c0          AND      r0,r1,r0,LSL #31
00005c  f8c600f0          STR      r0,[r6,#0xf0]
;;;95     }
000060  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
000064  5352435c          DCB      "SRC\\Drivers\\fsl_mrt.c",0
000068  44726976
00006c  6572735c
000070  66736c5f
000074  6d72742e
000078  6300    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L3.124|
00007c  636f6e66          DCB      "config",0
000080  696700  
000083  00                DCB      0
                  |L3.132|
                          DCD      s_mrtClocks
                  |L3.136|
                          DCD      0x40000220
                  |L3.140|
                          DCD      0x40040000
                  |L3.144|
                          DCD      s_mrtResets

                          AREA ||i.MRT_StopTimer||, CODE, READONLY, ALIGN=1

                  MRT_StopTimer PROC
;;;315     */
;;;316    static inline void MRT_StopTimer(MRT_Type *base, mrt_chnl_t channel)
000000  f04f4200          MOV      r2,#0x80000000
;;;317    {
;;;318        /* Stop the timer immediately */
;;;319        base->CHANNEL[channel].INTVAL = MRT_CHANNEL_INTVAL_LOAD_MASK;
000004  eb001301          ADD      r3,r0,r1,LSL #4
000008  601a              STR      r2,[r3,#0]
;;;320    }
00000a  4770              BX       lr
;;;321    
                          ENDP


                          AREA ||i.MRT_UpdateTimerPeriod||, CODE, READONLY, ALIGN=1

                  MRT_UpdateTimerPeriod PROC
;;;110    
;;;111    void MRT_UpdateTimerPeriod(MRT_Type *base, mrt_chnl_t channel, uint32_t count, bool immediateLoad)
000000  b530              PUSH     {r4,r5,lr}
;;;112    {
;;;113        uint32_t newValue = count;
000002  4614              MOV      r4,r2
;;;114        if (((base->CHANNEL[channel].CTRL & MRT_CHANNEL_CTRL_MODE_MASK) == kMRT_OneShotMode) || (immediateLoad))
000004  eb001501          ADD      r5,r0,r1,LSL #4
000008  68ad              LDR      r5,[r5,#8]
00000a  f0050506          AND      r5,r5,#6
00000e  2d02              CMP      r5,#2
000010  d000              BEQ      |L5.20|
000012  b10b              CBZ      r3,|L5.24|
                  |L5.20|
;;;115        {
;;;116            /* For one-shot interrupt mode, load the new value immediately even if user forgot to enable */
;;;117            newValue |= MRT_CHANNEL_INTVAL_LOAD_MASK;
000014  f0444400          ORR      r4,r4,#0x80000000
                  |L5.24|
;;;118        }
;;;119    
;;;120        /* Update the timer interval value */
;;;121        base->CHANNEL[channel].INTVAL = newValue;
000018  eb001501          ADD      r5,r0,r1,LSL #4
00001c  602c              STR      r4,[r5,#0]
;;;122    }
00001e  bd30              POP      {r4,r5,pc}
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  s_mrtBases
                          DCD      0x4000d000
                  s_mrtClocks
000004  0100              DCW      0x0100
000006  0000              DCB      0x00,0x00
                  s_mrtResets
                          DCD      0x00010000

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_mrt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_mrt_c_MRT_Init____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_mrt_c_MRT_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_mrt_c_MRT_Init____REVSH|
#line 402
|__asm___9_fsl_mrt_c_MRT_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_mrt_c_MRT_Init____RRX|
#line 587
|__asm___9_fsl_mrt_c_MRT_Init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

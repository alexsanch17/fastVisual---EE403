; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\clock_config.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\clock_config.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\clock_config.crf SRC\Board\clock_config.c]
                          THUMB

                          AREA ||i.BOARD_BootClockHSRUN||, CODE, READONLY, ALIGN=2

                  BOARD_BootClockHSRUN PROC
;;;71     
;;;72     void BOARD_BootClockHSRUN(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74         POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       POWER_DisablePD
;;;75         CLOCK_AttachClk(
000008  4809              LDR      r0,|L1.48|
00000a  f7fffffe          BL       CLOCK_AttachClk
;;;76             kFRO12M_to_MAIN_CLK);          /*!< Switch to 12MHz first to ensure we can change voltage without accidentally
;;;77                                            being below the voltage for current speed */
;;;78         POWER_SetVoltageForFreq(96000000); /*!< Set voltage for core */
00000e  4809              LDR      r0,|L1.52|
000010  f7fffffe          BL       POWER_SetVoltageForFreq
;;;79         CLOCK_SetFLASHAccessCyclesForFreq(96000000); /*!< Set FLASH waitstates for core */
000014  4807              LDR      r0,|L1.52|
000016  f7fffffe          BL       CLOCK_SetFLASHAccessCyclesForFreq
;;;80         CLOCK_SetupFROClocking(96000000);            /*!< Setup CPU to run off FRO 96MHz output*/
00001a  4806              LDR      r0,|L1.52|
00001c  f7fffffe          BL       CLOCK_SetupFROClocking
;;;81     	
;;;82         CLOCK_AttachClk(kFRO_HF_to_MAIN_CLK);        /*!< Switch main clock to 96MHz */
000020  4805              LDR      r0,|L1.56|
000022  f7fffffe          BL       CLOCK_AttachClk
;;;83         SystemCoreClock = 96000000;                  /*!< Update information about frequency */
000026  4803              LDR      r0,|L1.52|
000028  4904              LDR      r1,|L1.60|
00002a  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;84     }
00002c  bd10              POP      {r4,pc}
;;;85     
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x00101100
                  |L1.52|
                          DCD      0x05b8d800
                  |L1.56|
                          DCD      0x00101400
                  |L1.60|
                          DCD      SystemCoreClock

                          AREA ||i.BOARD_BootClockRUN||, CODE, READONLY, ALIGN=2

                  BOARD_BootClockRUN PROC
;;;58     
;;;59     void BOARD_BootClockRUN(void)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61         POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       POWER_DisablePD
;;;62         CLOCK_AttachClk(
000008  4809              LDR      r0,|L2.48|
00000a  f7fffffe          BL       CLOCK_AttachClk
;;;63             kFRO12M_to_MAIN_CLK);          /*!< Switch to 12MHz first to ensure we can change voltage without accidentally
;;;64                                            being below the voltage for current speed */
;;;65         POWER_SetVoltageForFreq(48000000); /*!< Set voltage for core */
00000e  4809              LDR      r0,|L2.52|
000010  f7fffffe          BL       POWER_SetVoltageForFreq
;;;66         CLOCK_SetFLASHAccessCyclesForFreq(48000000); /*!< Set FLASH waitstates for core */
000014  4807              LDR      r0,|L2.52|
000016  f7fffffe          BL       CLOCK_SetFLASHAccessCyclesForFreq
;;;67         CLOCK_SetupFROClocking(48000000);            /*!< Setup CPU to run off FRO 48MHz output*/
00001a  4806              LDR      r0,|L2.52|
00001c  f7fffffe          BL       CLOCK_SetupFROClocking
;;;68         CLOCK_AttachClk(kFRO_HF_to_MAIN_CLK);        /*!< Switch main clock to 48MHz */
000020  4805              LDR      r0,|L2.56|
000022  f7fffffe          BL       CLOCK_AttachClk
;;;69         SystemCoreClock = 48000000;                  /*!< Update information about frequency */
000026  4803              LDR      r0,|L2.52|
000028  4904              LDR      r1,|L2.60|
00002a  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;70     }
00002c  bd10              POP      {r4,pc}
;;;71     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x00101100
                  |L2.52|
                          DCD      0x02dc6c00
                  |L2.56|
                          DCD      0x00101400
                  |L2.60|
                          DCD      SystemCoreClock

                          AREA ||i.BOARD_BootClockVLPR||, CODE, READONLY, ALIGN=2

                  BOARD_BootClockVLPR PROC
;;;48     
;;;49     void BOARD_BootClockVLPR(void)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51         POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       POWER_DisablePD
;;;52         CLOCK_AttachClk(kFRO12M_to_MAIN_CLK); /*!< Switch to 12MHz */
000008  4807              LDR      r0,|L3.40|
00000a  f7fffffe          BL       CLOCK_AttachClk
;;;53         CLOCK_SetupFROClocking(12000000);     /*!< Turn off high speed output of FRO */
00000e  4807              LDR      r0,|L3.44|
000010  f7fffffe          BL       CLOCK_SetupFROClocking
;;;54         CLOCK_SetFLASHAccessCyclesForFreq(12000000); /*!< Set FLASH waitstates for core */
000014  4805              LDR      r0,|L3.44|
000016  f7fffffe          BL       CLOCK_SetFLASHAccessCyclesForFreq
;;;55         POWER_SetVoltageForFreq(12000000);           /*!< Set voltage for core */
00001a  4804              LDR      r0,|L3.44|
00001c  f7fffffe          BL       POWER_SetVoltageForFreq
;;;56         SystemCoreClock = 12000000;                  /*!< Update information about frequency */
000020  4802              LDR      r0,|L3.44|
000022  4903              LDR      r1,|L3.48|
000024  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;57     }
000026  bd10              POP      {r4,pc}
;;;58     
                          ENDP

                  |L3.40|
                          DCD      0x00101100
                  |L3.44|
                          DCD      0x00b71b00
                  |L3.48|
                          DCD      SystemCoreClock

                          AREA ||i.BOARD_BootClock_PLL_RUN||, CODE, READONLY, ALIGN=2

                  BOARD_BootClock_PLL_RUN PROC
;;;98     
;;;99     void BOARD_BootClock_PLL_RUN(void)
000000  b500              PUSH     {lr}
;;;100    {
000002  b08d              SUB      sp,sp,#0x34
;;;101        POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       POWER_DisablePD
;;;102       
;;;103        POWER_SetVoltageForFreq(1800000000); /*!< Set voltage for core */
00000a  480f              LDR      r0,|L4.72|
00000c  f7fffffe          BL       POWER_SetVoltageForFreq
;;;104        CLOCK_SetFLASHAccessCyclesForFreq(180000000); /*!< Set FLASH waitstates for core */
000010  480e              LDR      r0,|L4.76|
000012  f7fffffe          BL       CLOCK_SetFLASHAccessCyclesForFreq
;;;105    	
;;;106    	  pll_config_t sys_pll_config = 
000016  221c              MOVS     r2,#0x1c
000018  490d              LDR      r1,|L4.80|
00001a  a806              ADD      r0,sp,#0x18
00001c  f7fffffe          BL       __aeabi_memcpy4
;;;107    		{
;;;108            .desiredRate = 180000000, .inputRate = 12000000U,
;;;109        };
;;;110    		
;;;111    		pll_setup_t sys_pll_setup;
;;;112    	
;;;113    		CLOCK_SetupPLLData(&sys_pll_config, &sys_pll_setup);
000020  4669              MOV      r1,sp
000022  a806              ADD      r0,sp,#0x18
000024  f7fffffe          BL       CLOCK_SetupPLLData
;;;114        
;;;115    		sys_pll_setup.flags = PLL_SETUPFLAG_POWERUP | PLL_SETUPFLAG_WAITLOCK ;
000028  2003              MOVS     r0,#3
00002a  9005              STR      r0,[sp,#0x14]
;;;116    		
;;;117        CLOCK_SetupSystemPLLPrec(&sys_pll_setup, sys_pll_setup.flags);
00002c  4668              MOV      r0,sp
00002e  9905              LDR      r1,[sp,#0x14]
000030  f7fffffe          BL       CLOCK_SetupSystemPLLPrec
;;;118    		
;;;119    	  CLOCK_AttachClk(kSYS_PLL_to_MAIN_CLK);          /*!< Switch to 12MHz first to ensure we can change voltage without accidentally
000034  f2403001          MOV      r0,#0x301
000038  f7fffffe          BL       CLOCK_AttachClk
;;;120    																										being below the voltage for current speed */
;;;121    		
;;;122        SystemCoreClock = 180000000;                  /*!< Update information about frequency */
00003c  4803              LDR      r0,|L4.76|
00003e  4905              LDR      r1,|L4.84|
000040  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;123    }
000042  b00d              ADD      sp,sp,#0x34
000044  bd00              POP      {pc}
;;;124    
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
                          DCD      0x6b49d200
                  |L4.76|
                          DCD      0x0aba9500
                  |L4.80|
                          DCD      ||.constdata||
                  |L4.84|
                          DCD      SystemCoreClock

                          AREA ||i.POWER_DisablePD||, CODE, READONLY, ALIGN=2

                  POWER_DisablePD PROC
;;;118     */
;;;119    static inline void POWER_DisablePD(pd_bit_t en)
000000  2101              MOVS     r1,#1
;;;120    {
;;;121        /* PDRUNCFGCLR */
;;;122        SYSCON->PDRUNCFGCLR[(en >> 8UL)] = (1UL << (en & 0xffU));
000002  4081              LSLS     r1,r1,r0
000004  4a02              LDR      r2,|L5.16|
000006  0a03              LSRS     r3,r0,#8
000008  f8421023          STR      r1,[r2,r3,LSL #2]
;;;123    }
00000c  4770              BX       lr
;;;124    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40000630

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x0aba9500
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000018  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "SRC\\Board\\clock_config.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_clock_config_c_65c1813a____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_clock_config_c_65c1813a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_clock_config_c_65c1813a____REVSH|
#line 402
|__asm___14_clock_config_c_65c1813a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_clock_config_c_65c1813a____RRX|
#line 587
|__asm___14_clock_config_c_65c1813a____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

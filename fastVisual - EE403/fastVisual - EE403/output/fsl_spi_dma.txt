; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_spi_dma.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_spi_dma.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_spi_dma.crf SRC\Drivers\fsl_spi_dma.c]
                          THUMB

                          AREA ||i.PrepareTxFIFO||, CODE, READONLY, ALIGN=2

                  PrepareTxFIFO PROC
;;;116    
;;;117    static void PrepareTxFIFO(uint32_t *fifo, uint32_t count, uint32_t ctrl)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;118    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;119        assert(!(fifo == NULL));
00000a  b105              CBZ      r5,|L1.14|
00000c  e004              B        |L1.24|
                  |L1.14|
00000e  2277              MOVS     r2,#0x77
000010  a110              ADR      r1,|L1.84|
000012  a017              ADR      r0,|L1.112|
000014  f7fffffe          BL       __aeabi_assert
                  |L1.24|
;;;120        if (fifo == NULL)
000018  b90d              CBNZ     r5,|L1.30|
                  |L1.26|
;;;121        {
;;;122            return;
;;;123        }
;;;124        /* CS deassert and CS delay are relevant only for last word */
;;;125        uint32_t tx_ctrl = ctrl & (~(SPI_FIFOWR_EOT_MASK | SPI_FIFOWR_EOF_MASK));
;;;126        uint32_t i = 0;
;;;127        for (; i + 1 < count; i++)
;;;128        {
;;;129            fifo[i] = (fifo[i] & 0xFFFFU) | (tx_ctrl & 0xFFFF0000U);
;;;130        }
;;;131        if (i < count)
;;;132        {
;;;133            fifo[i] = (fifo[i] & 0xFFFFU) | (ctrl & 0xFFFF0000U);
;;;134        }
;;;135    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  f4271840          BIC      r8,r7,#0x300000       ;125
000022  2400              MOVS     r4,#0                 ;126
000024  e007              B        |L1.54|
                  |L1.38|
000026  f8351024          LDRH     r1,[r5,r4,LSL #2]     ;129
00002a  4640              MOV      r0,r8                 ;129
00002c  f361000f          BFI      r0,r1,#0,#16          ;129
000030  f8450024          STR      r0,[r5,r4,LSL #2]     ;129
000034  1c64              ADDS     r4,r4,#1              ;127
                  |L1.54|
000036  1c60              ADDS     r0,r4,#1              ;127
000038  42b0              CMP      r0,r6                 ;127
00003a  d3f4              BCC      |L1.38|
00003c  42b4              CMP      r4,r6                 ;131
00003e  d206              BCS      |L1.78|
000040  f8351024          LDRH     r1,[r5,r4,LSL #2]     ;133
000044  4638              MOV      r0,r7                 ;133
000046  f361000f          BFI      r0,r1,#0,#16          ;133
00004a  f8450024          STR      r0,[r5,r4,LSL #2]     ;133
                  |L1.78|
00004e  bf00              NOP      
000050  e7e3              B        |L1.26|
;;;136    
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
000054  5352435c          DCB      "SRC\\Drivers\\fsl_spi_dma.c",0
000058  44726976
00005c  6572735c
000060  66736c5f
000064  7370695f
000068  646d612e
00006c  6300    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L1.112|
000070  21286669          DCB      "!(fifo == NULL)",0
000074  666f203d
000078  3d204e55
00007c  4c4c2900

                          AREA ||i.SPI_MasterTransferAbortDMA||, CODE, READONLY, ALIGN=2

                  SPI_MasterTransferAbortDMA PROC
;;;357    
;;;358    void SPI_MasterTransferAbortDMA(SPI_Type *base, spi_dma_handle_t *handle)
000000  b570              PUSH     {r4-r6,lr}
;;;359    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;360        assert(NULL != handle);
000006  b104              CBZ      r4,|L2.10|
000008  e005              B        |L2.22|
                  |L2.10|
00000a  f44f72b4          MOV      r2,#0x168
00000e  a107              ADR      r1,|L2.44|
000010  a00d              ADR      r0,|L2.72|
000012  f7fffffe          BL       __aeabi_assert
                  |L2.22|
;;;361    
;;;362        /* Stop tx transfer first */
;;;363        DMA_AbortTransfer(handle->txHandle);
000016  6860              LDR      r0,[r4,#4]
000018  f7fffffe          BL       DMA_AbortTransfer
;;;364        /* Then rx transfer */
;;;365        DMA_AbortTransfer(handle->rxHandle);
00001c  68a0              LDR      r0,[r4,#8]
00001e  f7fffffe          BL       DMA_AbortTransfer
;;;366    
;;;367        /* Set the handle state */
;;;368        handle->txInProgress = false;
000022  2000              MOVS     r0,#0
000024  7020              STRB     r0,[r4,#0]
;;;369        handle->rxInProgress = false;
000026  7060              STRB     r0,[r4,#1]
;;;370        handle->state = kSPI_Idle;
000028  61a0              STR      r0,[r4,#0x18]
;;;371    }
00002a  bd70              POP      {r4-r6,pc}
;;;372    
                          ENDP

                  |L2.44|
00002c  5352435c          DCB      "SRC\\Drivers\\fsl_spi_dma.c",0
000030  44726976
000034  6572735c
000038  66736c5f
00003c  7370695f
000040  646d612e
000044  6300    
000046  00                DCB      0
000047  00                DCB      0
                  |L2.72|
000048  4e554c4c          DCB      "NULL != handle",0
00004c  20213d20
000050  68616e64
000054  6c6500  
000057  00                DCB      0

                          AREA ||i.SPI_MasterTransferCreateHandleDMA||, CODE, READONLY, ALIGN=2

                  SPI_MasterTransferCreateHandleDMA PROC
;;;143    
;;;144    status_t SPI_MasterTransferCreateHandleDMA(SPI_Type *base,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;145                                               spi_dma_handle_t *handle,
;;;146                                               spi_dma_callback_t callback,
;;;147                                               void *userData,
;;;148                                               dma_handle_t *txHandle,
;;;149                                               dma_handle_t *rxHandle)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd9a08          LDRD     r9,r10,[sp,#0x20]
;;;151        int32_t instance = 0;
000010  2600              MOVS     r6,#0
;;;152    
;;;153        /* check 'base' */
;;;154        assert(!(NULL == base));
000012  b105              CBZ      r5,|L3.22|
000014  e004              B        |L3.32|
                  |L3.22|
000016  229a              MOVS     r2,#0x9a
000018  a11c              ADR      r1,|L3.140|
00001a  a023              ADR      r0,|L3.168|
00001c  f7fffffe          BL       __aeabi_assert
                  |L3.32|
;;;155        if (NULL == base)
000020  b915              CBNZ     r5,|L3.40|
;;;156        {
;;;157            return kStatus_InvalidArgument;
000022  2004              MOVS     r0,#4
                  |L3.36|
;;;158        }
;;;159        /* check 'handle' */
;;;160        assert(!(NULL == handle));
;;;161        if (NULL == handle)
;;;162        {
;;;163            return kStatus_InvalidArgument;
;;;164        }
;;;165    
;;;166        instance = SPI_GetInstance(base);
;;;167    
;;;168        memset(handle, 0, sizeof(*handle));
;;;169        /* Set spi base to handle */
;;;170        handle->txHandle = txHandle;
;;;171        handle->rxHandle = rxHandle;
;;;172        handle->callback = callback;
;;;173        handle->userData = userData;
;;;174    
;;;175        /* Set SPI state to idle */
;;;176        handle->state = kSPI_Idle;
;;;177    
;;;178        /* Set handle to global state */
;;;179        s_dmaPrivateHandle[instance].base = base;
;;;180        s_dmaPrivateHandle[instance].handle = handle;
;;;181    
;;;182        /* Install callback for Tx dma channel */
;;;183        DMA_SetCallback(handle->txHandle, SPI_TxDMACallback, &s_dmaPrivateHandle[instance]);
;;;184        DMA_SetCallback(handle->rxHandle, SPI_RxDMACallback, &s_dmaPrivateHandle[instance]);
;;;185    
;;;186        return kStatus_Success;
;;;187    }
000024  e8bd87f0          POP      {r4-r10,pc}
                  |L3.40|
000028  b104              CBZ      r4,|L3.44|
00002a  e004              B        |L3.54|
                  |L3.44|
00002c  22a0              MOVS     r2,#0xa0              ;160
00002e  a117              ADR      r1,|L3.140|
000030  a021              ADR      r0,|L3.184|
000032  f7fffffe          BL       __aeabi_assert
                  |L3.54|
000036  b90c              CBNZ     r4,|L3.60|
000038  2004              MOVS     r0,#4                 ;163
00003a  e7f3              B        |L3.36|
                  |L3.60|
00003c  4628              MOV      r0,r5                 ;166
00003e  f7fffffe          BL       SPI_GetInstance
000042  4606              MOV      r6,r0                 ;166
000044  2120              MOVS     r1,#0x20              ;168
000046  4620              MOV      r0,r4                 ;168
000048  f7fffffe          BL       __aeabi_memclr4
00004c  f8c49004          STR      r9,[r4,#4]            ;170
000050  f8c4a008          STR      r10,[r4,#8]           ;171
000054  6127              STR      r7,[r4,#0x10]         ;172
000056  f8c48014          STR      r8,[r4,#0x14]         ;173
00005a  2000              MOVS     r0,#0                 ;176
00005c  61a0              STR      r0,[r4,#0x18]         ;176
00005e  481b              LDR      r0,|L3.204|
000060  f8405036          STR      r5,[r0,r6,LSL #3]     ;179
000064  eb0000c6          ADD      r0,r0,r6,LSL #3       ;180
000068  6044              STR      r4,[r0,#4]            ;180
00006a  4918              LDR      r1,|L3.204|
00006c  eb0102c6          ADD      r2,r1,r6,LSL #3       ;183
000070  4917              LDR      r1,|L3.208|
000072  6860              LDR      r0,[r4,#4]            ;183
000074  f7fffffe          BL       DMA_SetCallback
000078  4914              LDR      r1,|L3.204|
00007a  eb0102c6          ADD      r2,r1,r6,LSL #3       ;184
00007e  4915              LDR      r1,|L3.212|
000080  68a0              LDR      r0,[r4,#8]            ;184
000082  f7fffffe          BL       DMA_SetCallback
000086  2000              MOVS     r0,#0                 ;186
000088  e7cc              B        |L3.36|
;;;188    
                          ENDP

00008a  0000              DCW      0x0000
                  |L3.140|
00008c  5352435c          DCB      "SRC\\Drivers\\fsl_spi_dma.c",0
000090  44726976
000094  6572735c
000098  66736c5f
00009c  7370695f
0000a0  646d612e
0000a4  6300    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L3.168|
0000a8  21284e55          DCB      "!(NULL == base)",0
0000ac  4c4c203d
0000b0  3d206261
0000b4  73652900
                  |L3.184|
0000b8  21284e55          DCB      "!(NULL == handle)",0
0000bc  4c4c203d
0000c0  3d206861
0000c4  6e646c65
0000c8  2900    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L3.204|
                          DCD      s_dmaPrivateHandle
                  |L3.208|
                          DCD      SPI_TxDMACallback
                  |L3.212|
                          DCD      SPI_RxDMACallback

                          AREA ||i.SPI_MasterTransferDMA||, CODE, READONLY, ALIGN=2

                  SPI_MasterTransferDMA PROC
;;;188    
;;;189    status_t SPI_MasterTransferDMA(SPI_Type *base, spi_dma_handle_t *handle, spi_transfer_t *xfer)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;190    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4607              MOV      r7,r0
000008  460d              MOV      r5,r1
00000a  4614              MOV      r4,r2
;;;191        int32_t instance;
;;;192        status_t result = kStatus_Success;
00000c  f04f0800          MOV      r8,#0
;;;193        spi_config_t *spi_config_p;
;;;194    
;;;195        assert(!((NULL == handle) || (NULL == xfer)));
000010  b10d              CBZ      r5,|L4.22|
000012  b104              CBZ      r4,|L4.22|
000014  e004              B        |L4.32|
                  |L4.22|
000016  22c3              MOVS     r2,#0xc3
000018  a1a0              ADR      r1,|L4.668|
00001a  a0a7              ADR      r0,|L4.696|
00001c  f7fffffe          BL       __aeabi_assert
                  |L4.32|
;;;196        if ((NULL == handle) || (NULL == xfer))
000020  b105              CBZ      r5,|L4.36|
000022  b91c              CBNZ     r4,|L4.44|
                  |L4.36|
;;;197        {
;;;198            return kStatus_InvalidArgument;
000024  2004              MOVS     r0,#4
                  |L4.38|
;;;199        }
;;;200        /* txData set and not aligned to sizeof(uint32_t) */
;;;201        assert(!((NULL != xfer->txData) && ((uint32_t)xfer->txData % sizeof(uint32_t))));
;;;202        if ((NULL != xfer->txData) && ((uint32_t)xfer->txData % sizeof(uint32_t)))
;;;203        {
;;;204            return kStatus_InvalidArgument;
;;;205        }
;;;206        /* rxData set and not aligned to sizeof(uint32_t) */
;;;207        assert(!((NULL != xfer->rxData) && ((uint32_t)xfer->rxData % sizeof(uint32_t))));
;;;208        if ((NULL != xfer->rxData) && ((uint32_t)xfer->rxData % sizeof(uint32_t)))
;;;209        {
;;;210            return kStatus_InvalidArgument;
;;;211        }
;;;212        /* byte size is zero or not aligned to sizeof(uint32_t) */
;;;213        assert(!((xfer->dataSize == 0) || (xfer->dataSize % sizeof(uint32_t))));
;;;214        if ((xfer->dataSize == 0) || (xfer->dataSize % sizeof(uint32_t)))
;;;215        {
;;;216            return kStatus_InvalidArgument;
;;;217        }
;;;218        /* cannot get instance from base address */
;;;219        instance = SPI_GetInstance(base);
;;;220        assert(!(instance < 0));
;;;221        if (instance < 0)
;;;222        {
;;;223            return kStatus_InvalidArgument;
;;;224        }
;;;225    
;;;226        /* Check if the device is busy */
;;;227        if (handle->state == kSPI_Busy)
;;;228        {
;;;229            return kStatus_SPI_Busy;
;;;230        }
;;;231        else
;;;232        {
;;;233            uint32_t tmp;
;;;234            dma_transfer_config_t xferConfig = {0};
;;;235            spi_config_p = (spi_config_t *)SPI_GetConfig(base);
;;;236    
;;;237            handle->state = kStatus_SPI_Busy;
;;;238            handle->transferSize = xfer->dataSize;
;;;239    
;;;240            /* receive */
;;;241            SPI_EnableRxDMA(base, true);
;;;242            if (xfer->rxData)
;;;243            {
;;;244                DMA_PrepareTransfer(&xferConfig, (void *)&base->FIFORD, xfer->rxData, sizeof(uint32_t), xfer->dataSize,
;;;245                                    kDMA_PeripheralToMemory, NULL);
;;;246            }
;;;247            else
;;;248            {
;;;249                DMA_PrepareTransfer(&xferConfig, (void *)&base->FIFORD, &s_rxDummy, sizeof(uint32_t), xfer->dataSize,
;;;250                                    kDMA_StaticToStatic, NULL);
;;;251            }
;;;252            DMA_SubmitTransfer(handle->rxHandle, &xferConfig);
;;;253            handle->rxInProgress = true;
;;;254            DMA_StartTransfer(handle->rxHandle);
;;;255    
;;;256            /* transmit */
;;;257            SPI_EnableTxDMA(base, true);
;;;258            if (xfer->txData)
;;;259            {
;;;260                tmp = 0;
;;;261                XferToFifoWR(xfer, &tmp);
;;;262                SpiConfigToFifoWR(spi_config_p, &tmp);
;;;263                PrepareTxFIFO((uint32_t *)xfer->txData, xfer->dataSize / sizeof(uint32_t), tmp);
;;;264                DMA_PrepareTransfer(&xferConfig, xfer->txData, (void *)&base->FIFOWR, sizeof(uint32_t), xfer->dataSize,
;;;265                                    kDMA_MemoryToPeripheral, NULL);
;;;266                DMA_SubmitTransfer(handle->txHandle, &xferConfig);
;;;267            }
;;;268            else
;;;269            {
;;;270                if ((xfer->configFlags & kSPI_FrameAssert) && (xfer->dataSize > sizeof(uint32_t)))
;;;271                {
;;;272                    dma_xfercfg_t tmp_xfercfg = { 0 };
;;;273                    tmp_xfercfg.valid = true;
;;;274                    tmp_xfercfg.swtrig = true;
;;;275                    tmp_xfercfg.intA = true;
;;;276                    tmp_xfercfg.byteWidth = sizeof(uint32_t);
;;;277                    tmp_xfercfg.srcInc = 0;
;;;278                    tmp_xfercfg.dstInc = 0;
;;;279                    tmp_xfercfg.transferCount = 1;
;;;280                    /* create chained descriptor to transmit last word */
;;;281                    SPI_SetupDummy(&s_txDummy[instance].lastWord, xfer, spi_config_p);
;;;282                    DMA_CreateDescriptor(&s_spi_descriptor_table[instance], &tmp_xfercfg, &s_txDummy[instance].lastWord,
;;;283                                         (uint32_t *)&base->FIFOWR, NULL);
;;;284                    /* use common API to setup first descriptor */
;;;285                    SPI_SetupDummy(&s_txDummy[instance].word, NULL, spi_config_p);
;;;286                    DMA_PrepareTransfer(&xferConfig, &s_txDummy[instance].word, (void *)&base->FIFOWR, sizeof(uint32_t),
;;;287                                        xfer->dataSize - sizeof(uint32_t), kDMA_StaticToStatic,
;;;288                                        &s_spi_descriptor_table[instance]);
;;;289                    /* disable interrupts for first descriptor
;;;290                     * to avoid calling callback twice */
;;;291                    xferConfig.xfercfg.intA = false;
;;;292                    xferConfig.xfercfg.intB = false;
;;;293                    result = DMA_SubmitTransfer(handle->txHandle, &xferConfig);
;;;294                    if (result != kStatus_Success)
;;;295                    {
;;;296                        return result;
;;;297                    }
;;;298                }
;;;299                else
;;;300                {
;;;301                    SPI_SetupDummy(&s_txDummy[instance].word, xfer, spi_config_p);
;;;302                    DMA_PrepareTransfer(&xferConfig, &s_txDummy[instance].word, (void *)&base->FIFOWR, sizeof(uint32_t),
;;;303                                        xfer->dataSize, kDMA_StaticToStatic, NULL);
;;;304                    result = DMA_SubmitTransfer(handle->txHandle, &xferConfig);
;;;305                    if (result != kStatus_Success)
;;;306                    {
;;;307                        return result;
;;;308                    }
;;;309                }
;;;310            }
;;;311            handle->txInProgress = true;
;;;312            DMA_StartTransfer(handle->txHandle);
;;;313        }
;;;314    
;;;315        return result;
;;;316    }
000026  b00f              ADD      sp,sp,#0x3c
000028  e8bd83f0          POP      {r4-r9,pc}
                  |L4.44|
00002c  6820              LDR      r0,[r4,#0]            ;201
00002e  b118              CBZ      r0,|L4.56|
000030  7820              LDRB     r0,[r4,#0]            ;201
000032  f0000003          AND      r0,r0,#3              ;201
000036  b900              CBNZ     r0,|L4.58|
                  |L4.56|
000038  e004              B        |L4.68|
                  |L4.58|
00003a  22c9              MOVS     r2,#0xc9              ;201
00003c  a197              ADR      r1,|L4.668|
00003e  48a8              LDR      r0,|L4.736|
000040  f7fffffe          BL       __aeabi_assert
                  |L4.68|
000044  6820              LDR      r0,[r4,#0]            ;202
000046  b128              CBZ      r0,|L4.84|
000048  7820              LDRB     r0,[r4,#0]            ;202
00004a  f0000003          AND      r0,r0,#3              ;202
00004e  b108              CBZ      r0,|L4.84|
000050  2004              MOVS     r0,#4                 ;204
000052  e7e8              B        |L4.38|
                  |L4.84|
000054  6860              LDR      r0,[r4,#4]            ;207
000056  b118              CBZ      r0,|L4.96|
000058  7920              LDRB     r0,[r4,#4]            ;207
00005a  f0000003          AND      r0,r0,#3              ;207
00005e  b900              CBNZ     r0,|L4.98|
                  |L4.96|
000060  e004              B        |L4.108|
                  |L4.98|
000062  22cf              MOVS     r2,#0xcf              ;207
000064  a18d              ADR      r1,|L4.668|
000066  489f              LDR      r0,|L4.740|
000068  f7fffffe          BL       __aeabi_assert
                  |L4.108|
00006c  6860              LDR      r0,[r4,#4]            ;208
00006e  b128              CBZ      r0,|L4.124|
000070  7920              LDRB     r0,[r4,#4]            ;208
000072  f0000003          AND      r0,r0,#3              ;208
000076  b108              CBZ      r0,|L4.124|
000078  2004              MOVS     r0,#4                 ;210
00007a  e7d4              B        |L4.38|
                  |L4.124|
00007c  68e0              LDR      r0,[r4,#0xc]          ;213
00007e  b120              CBZ      r0,|L4.138|
000080  7b20              LDRB     r0,[r4,#0xc]          ;213
000082  f0000003          AND      r0,r0,#3              ;213
000086  b900              CBNZ     r0,|L4.138|
000088  e004              B        |L4.148|
                  |L4.138|
00008a  22d5              MOVS     r2,#0xd5              ;213
00008c  a183              ADR      r1,|L4.668|
00008e  a096              ADR      r0,|L4.744|
000090  f7fffffe          BL       __aeabi_assert
                  |L4.148|
000094  68e0              LDR      r0,[r4,#0xc]          ;214
000096  b118              CBZ      r0,|L4.160|
000098  7b20              LDRB     r0,[r4,#0xc]          ;214
00009a  f0000003          AND      r0,r0,#3              ;214
00009e  b108              CBZ      r0,|L4.164|
                  |L4.160|
0000a0  2004              MOVS     r0,#4                 ;216
0000a2  e7c0              B        |L4.38|
                  |L4.164|
0000a4  4638              MOV      r0,r7                 ;219
0000a6  f7fffffe          BL       SPI_GetInstance
0000aa  4606              MOV      r6,r0                 ;219
0000ac  2e00              CMP      r6,#0                 ;220
0000ae  db00              BLT      |L4.178|
0000b0  e004              B        |L4.188|
                  |L4.178|
0000b2  22dc              MOVS     r2,#0xdc              ;220
0000b4  a179              ADR      r1,|L4.668|
0000b6  a09c              ADR      r0,|L4.808|
0000b8  f7fffffe          BL       __aeabi_assert
                  |L4.188|
0000bc  2e00              CMP      r6,#0                 ;221
0000be  da01              BGE      |L4.196|
0000c0  2004              MOVS     r0,#4                 ;223
0000c2  e7b0              B        |L4.38|
                  |L4.196|
0000c4  69a8              LDR      r0,[r5,#0x18]         ;227
0000c6  2801              CMP      r0,#1                 ;227
0000c8  d102              BNE      |L4.208|
0000ca  f44f50af          MOV      r0,#0x15e0            ;229
0000ce  e7aa              B        |L4.38|
                  |L4.208|
0000d0  211c              MOVS     r1,#0x1c              ;234
0000d2  a807              ADD      r0,sp,#0x1c           ;234
0000d4  f7fffffe          BL       __aeabi_memclr4
0000d8  4638              MOV      r0,r7                 ;235
0000da  f7fffffe          BL       SPI_GetConfig
0000de  4681              MOV      r9,r0                 ;235
0000e0  f44f50af          MOV      r0,#0x15e0            ;237
0000e4  61a8              STR      r0,[r5,#0x18]         ;237
0000e6  68e0              LDR      r0,[r4,#0xc]          ;238
0000e8  61e8              STR      r0,[r5,#0x1c]         ;238
0000ea  2101              MOVS     r1,#1                 ;241
0000ec  4638              MOV      r0,r7                 ;241
0000ee  f7fffffe          BL       SPI_EnableRxDMA
0000f2  6860              LDR      r0,[r4,#4]            ;242
0000f4  b168              CBZ      r0,|L4.274|
0000f6  2100              MOVS     r1,#0                 ;244
0000f8  2201              MOVS     r2,#1                 ;244
0000fa  68e0              LDR      r0,[r4,#0xc]          ;244
0000fc  e9cd2101          STRD     r2,r1,[sp,#4]         ;244
000100  9000              STR      r0,[sp,#0]            ;244
000102  2304              MOVS     r3,#4                 ;244
000104  f5076163          ADD      r1,r7,#0xe30          ;244
000108  a807              ADD      r0,sp,#0x1c           ;244
00010a  6862              LDR      r2,[r4,#4]            ;244
00010c  f7fffffe          BL       DMA_PrepareTransfer
000110  e00c              B        |L4.300|
                  |L4.274|
000112  2100              MOVS     r1,#0                 ;249
000114  2203              MOVS     r2,#3                 ;249
000116  68e0              LDR      r0,[r4,#0xc]          ;249
000118  2304              MOVS     r3,#4                 ;249
00011a  e9cd2101          STRD     r2,r1,[sp,#4]         ;249
00011e  9000              STR      r0,[sp,#0]            ;249
000120  4a85              LDR      r2,|L4.824|
000122  f5076163          ADD      r1,r7,#0xe30          ;249
000126  a807              ADD      r0,sp,#0x1c           ;249
000128  f7fffffe          BL       DMA_PrepareTransfer
                  |L4.300|
00012c  a907              ADD      r1,sp,#0x1c           ;252
00012e  68a8              LDR      r0,[r5,#8]            ;252
000130  f7fffffe          BL       DMA_SubmitTransfer
000134  2001              MOVS     r0,#1                 ;253
000136  7068              STRB     r0,[r5,#1]            ;253
000138  68a8              LDR      r0,[r5,#8]            ;254
00013a  f7fffffe          BL       DMA_StartTransfer
00013e  2101              MOVS     r1,#1                 ;257
000140  4638              MOV      r0,r7                 ;257
000142  f7fffffe          BL       SPI_EnableTxDMA
000146  6820              LDR      r0,[r4,#0]            ;258
000148  b308              CBZ      r0,|L4.398|
00014a  2000              MOVS     r0,#0                 ;260
00014c  900e              STR      r0,[sp,#0x38]         ;260
00014e  a90e              ADD      r1,sp,#0x38           ;261
000150  4620              MOV      r0,r4                 ;261
000152  f7fffffe          BL       XferToFifoWR
000156  a90e              ADD      r1,sp,#0x38           ;262
000158  4648              MOV      r0,r9                 ;262
00015a  f7fffffe          BL       SpiConfigToFifoWR
00015e  68e2              LDR      r2,[r4,#0xc]          ;263
000160  0891              LSRS     r1,r2,#2              ;263
000162  6820              LDR      r0,[r4,#0]            ;263
000164  9a0e              LDR      r2,[sp,#0x38]         ;263
000166  f7fffffe          BL       PrepareTxFIFO
00016a  2100              MOVS     r1,#0                 ;264
00016c  2202              MOVS     r2,#2                 ;264
00016e  68e0              LDR      r0,[r4,#0xc]          ;264
000170  e9cd2101          STRD     r2,r1,[sp,#4]         ;264
000174  9000              STR      r0,[sp,#0]            ;264
000176  2304              MOVS     r3,#4                 ;264
000178  f5076262          ADD      r2,r7,#0xe20          ;264
00017c  a807              ADD      r0,sp,#0x1c           ;264
00017e  6821              LDR      r1,[r4,#0]            ;264
000180  f7fffffe          BL       DMA_PrepareTransfer
000184  a907              ADD      r1,sp,#0x1c           ;266
000186  6868              LDR      r0,[r5,#4]            ;266
000188  f7fffffe          BL       DMA_SubmitTransfer
00018c  e07d              B        |L4.650|
                  |L4.398|
00018e  68a0              LDR      r0,[r4,#8]            ;270
000190  f4001080          AND      r0,r0,#0x100000       ;270
000194  2800              CMP      r0,#0                 ;270
000196  d056              BEQ      |L4.582|
000198  68e0              LDR      r0,[r4,#0xc]          ;270
00019a  2804              CMP      r0,#4                 ;270
00019c  d953              BLS      |L4.582|
00019e  2000              MOVS     r0,#0                 ;272
0001a0  9004              STR      r0,[sp,#0x10]         ;272
0001a2  9005              STR      r0,[sp,#0x14]         ;272
0001a4  9006              STR      r0,[sp,#0x18]         ;272
0001a6  2001              MOVS     r0,#1                 ;273
0001a8  f88d0010          STRB     r0,[sp,#0x10]         ;273
0001ac  f88d0012          STRB     r0,[sp,#0x12]         ;274
0001b0  f88d0014          STRB     r0,[sp,#0x14]         ;275
0001b4  2004              MOVS     r0,#4                 ;276
0001b6  f88d0016          STRB     r0,[sp,#0x16]         ;276
0001ba  2000              MOVS     r0,#0                 ;277
0001bc  f88d0017          STRB     r0,[sp,#0x17]         ;277
0001c0  f88d0018          STRB     r0,[sp,#0x18]         ;278
0001c4  2001              MOVS     r0,#1                 ;279
0001c6  f8ad001a          STRH     r0,[sp,#0x1a]         ;279
0001ca  495c              LDR      r1,|L4.828|
0001cc  eb0100c6          ADD      r0,r1,r6,LSL #3       ;281
0001d0  464a              MOV      r2,r9                 ;281
0001d2  4621              MOV      r1,r4                 ;281
0001d4  f7fffffe          BL       SPI_SetupDummy
0001d8  2000              MOVS     r0,#0                 ;282
0001da  4958              LDR      r1,|L4.828|
0001dc  eb0102c6          ADD      r2,r1,r6,LSL #3       ;282
0001e0  4957              LDR      r1,|L4.832|
0001e2  9000              STR      r0,[sp,#0]            ;282
0001e4  eb011006          ADD      r0,r1,r6,LSL #4       ;282
0001e8  f5076362          ADD      r3,r7,#0xe20          ;282
0001ec  a904              ADD      r1,sp,#0x10           ;282
0001ee  f7fffffe          BL       DMA_CreateDescriptor
0001f2  4952              LDR      r1,|L4.828|
0001f4  eb0101c6          ADD      r1,r1,r6,LSL #3       ;285
0001f8  1d08              ADDS     r0,r1,#4              ;285
0001fa  464a              MOV      r2,r9                 ;285
0001fc  2100              MOVS     r1,#0                 ;285
0001fe  f7fffffe          BL       SPI_SetupDummy
000202  484f              LDR      r0,|L4.832|
000204  eb001106          ADD      r1,r0,r6,LSL #4       ;286
000208  2203              MOVS     r2,#3                 ;286
00020a  68e0              LDR      r0,[r4,#0xc]          ;286
00020c  1f00              SUBS     r0,r0,#4              ;286
00020e  e9cd2101          STRD     r2,r1,[sp,#4]         ;286
000212  9000              STR      r0,[sp,#0]            ;286
000214  4849              LDR      r0,|L4.828|
000216  eb0000c6          ADD      r0,r0,r6,LSL #3       ;286
00021a  1d01              ADDS     r1,r0,#4              ;286
00021c  2304              MOVS     r3,#4                 ;286
00021e  f5076262          ADD      r2,r7,#0xe20          ;286
000222  a807              ADD      r0,sp,#0x1c           ;286
000224  f7fffffe          BL       DMA_PrepareTransfer
000228  2100              MOVS     r1,#0                 ;291
00022a  a807              ADD      r0,sp,#0x1c           ;291
00022c  7401              STRB     r1,[r0,#0x10]         ;291
00022e  7441              STRB     r1,[r0,#0x11]         ;292
000230  a907              ADD      r1,sp,#0x1c           ;293
000232  6868              LDR      r0,[r5,#4]            ;293
000234  f7fffffe          BL       DMA_SubmitTransfer
000238  4680              MOV      r8,r0                 ;293
00023a  f1b80f00          CMP      r8,#0                 ;294
00023e  d001              BEQ      |L4.580|
000240  4640              MOV      r0,r8                 ;296
000242  e6f0              B        |L4.38|
                  |L4.580|
000244  e021              B        |L4.650|
                  |L4.582|
000246  493d              LDR      r1,|L4.828|
000248  eb0101c6          ADD      r1,r1,r6,LSL #3       ;301
00024c  1d08              ADDS     r0,r1,#4              ;301
00024e  464a              MOV      r2,r9                 ;301
000250  4621              MOV      r1,r4                 ;301
000252  f7fffffe          BL       SPI_SetupDummy
000256  2100              MOVS     r1,#0                 ;302
000258  2203              MOVS     r2,#3                 ;302
00025a  68e0              LDR      r0,[r4,#0xc]          ;302
00025c  e9cd2101          STRD     r2,r1,[sp,#4]         ;302
000260  9000              STR      r0,[sp,#0]            ;302
000262  4836              LDR      r0,|L4.828|
000264  eb0000c6          ADD      r0,r0,r6,LSL #3       ;302
000268  1d01              ADDS     r1,r0,#4              ;302
00026a  2304              MOVS     r3,#4                 ;302
00026c  f5076262          ADD      r2,r7,#0xe20          ;302
000270  a807              ADD      r0,sp,#0x1c           ;302
000272  f7fffffe          BL       DMA_PrepareTransfer
000276  a907              ADD      r1,sp,#0x1c           ;304
000278  6868              LDR      r0,[r5,#4]            ;304
00027a  f7fffffe          BL       DMA_SubmitTransfer
00027e  4680              MOV      r8,r0                 ;304
000280  f1b80f00          CMP      r8,#0                 ;305
000284  d001              BEQ      |L4.650|
000286  4640              MOV      r0,r8                 ;307
000288  e6cd              B        |L4.38|
                  |L4.650|
00028a  2001              MOVS     r0,#1                 ;311
00028c  7028              STRB     r0,[r5,#0]            ;311
00028e  6868              LDR      r0,[r5,#4]            ;312
000290  f7fffffe          BL       DMA_StartTransfer
000294  bf00              NOP                            ;313
000296  4640              MOV      r0,r8                 ;315
000298  e6c5              B        |L4.38|
;;;317    
                          ENDP

00029a  0000              DCW      0x0000
                  |L4.668|
00029c  5352435c          DCB      "SRC\\Drivers\\fsl_spi_dma.c",0
0002a0  44726976
0002a4  6572735c
0002a8  66736c5f
0002ac  7370695f
0002b0  646d612e
0002b4  6300    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L4.696|
0002b8  2128284e          DCB      "!((NULL == handle) || (NULL == xfer))",0
0002bc  554c4c20
0002c0  3d3d2068
0002c4  616e646c
0002c8  6529207c
0002cc  7c20284e
0002d0  554c4c20
0002d4  3d3d2078
0002d8  66657229
0002dc  2900    
0002de  00                DCB      0
0002df  00                DCB      0
                  |L4.736|
                          DCD      ||.conststring||
                  |L4.740|
                          DCD      ||.conststring||+0x4c
                  |L4.744|
0002e8  21282878          DCB      "!((xfer->dataSize == 0) || (xfer->dataSize % sizeof(uin"
0002ec  6665722d
0002f0  3e646174
0002f4  6153697a
0002f8  65203d3d
0002fc  20302920
000300  7c7c2028
000304  78666572
000308  2d3e6461
00030c  74615369
000310  7a652025
000314  2073697a
000318  656f6628
00031c  75696e  
00031f  7433325f          DCB      "t32_t)))",0
000323  74292929
000327  00      
                  |L4.808|
000328  2128696e          DCB      "!(instance < 0)",0
00032c  7374616e
000330  6365203c
000334  20302900
                  |L4.824|
                          DCD      s_rxDummy
                  |L4.828|
                          DCD      s_txDummy
                  |L4.832|
                          DCD      s_spi_descriptor_table

                          AREA ||i.SPI_MasterTransferGetCountDMA||, CODE, READONLY, ALIGN=2

                  SPI_MasterTransferGetCountDMA PROC
;;;372    
;;;373    status_t SPI_MasterTransferGetCountDMA(SPI_Type *base, spi_dma_handle_t *handle, size_t *count)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;374    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;375        assert(handle);
00000a  b104              CBZ      r4,|L5.14|
00000c  e005              B        |L5.26|
                  |L5.14|
00000e  f2401277          MOV      r2,#0x177
000012  a10d              ADR      r1,|L5.72|
000014  a013              ADR      r0,|L5.100|
000016  f7fffffe          BL       __aeabi_assert
                  |L5.26|
;;;376    
;;;377        if (!count)
00001a  b915              CBNZ     r5,|L5.34|
;;;378        {
;;;379            return kStatus_InvalidArgument;
00001c  2004              MOVS     r0,#4
                  |L5.30|
;;;380        }
;;;381    
;;;382        /* Catch when there is not an active transfer. */
;;;383        if (handle->state != kSPI_Busy)
;;;384        {
;;;385            *count = 0;
;;;386            return kStatus_NoTransferInProgress;
;;;387        }
;;;388    
;;;389        size_t bytes;
;;;390    
;;;391        bytes = DMA_GetRemainingBytes(handle->rxHandle->base, handle->rxHandle->channel);
;;;392    
;;;393        *count = handle->transferSize - bytes;
;;;394    
;;;395        return kStatus_Success;
;;;396    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.34|
000022  69a0              LDR      r0,[r4,#0x18]         ;383
000024  2801              CMP      r0,#1                 ;383
000026  d003              BEQ      |L5.48|
000028  2000              MOVS     r0,#0                 ;385
00002a  6028              STR      r0,[r5,#0]            ;385
00002c  2006              MOVS     r0,#6                 ;386
00002e  e7f6              B        |L5.30|
                  |L5.48|
000030  68a2              LDR      r2,[r4,#8]            ;391
000032  7b11              LDRB     r1,[r2,#0xc]          ;391
000034  6890              LDR      r0,[r2,#8]            ;391
000036  f7fffffe          BL       DMA_GetRemainingBytes
00003a  4606              MOV      r6,r0                 ;391
00003c  69e0              LDR      r0,[r4,#0x1c]         ;393
00003e  1b80              SUBS     r0,r0,r6              ;393
000040  6028              STR      r0,[r5,#0]            ;393
000042  2000              MOVS     r0,#0                 ;395
000044  e7eb              B        |L5.30|
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
000048  5352435c          DCB      "SRC\\Drivers\\fsl_spi_dma.c",0
00004c  44726976
000050  6572735c
000054  66736c5f
000058  7370695f
00005c  646d612e
000060  6300    
000062  00                DCB      0
000063  00                DCB      0
                  |L5.100|
000064  68616e64          DCB      "handle",0
000068  6c6500  
00006b  00                DCB      0

                          AREA ||i.SPI_RxDMACallback||, CODE, READONLY, ALIGN=1

                  SPI_RxDMACallback PROC
;;;317    
;;;318    static void SPI_RxDMACallback(dma_handle_t *handle, void *userData, bool transferDone, uint32_t intmode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;319    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;320        spi_dma_private_handle_t *privHandle = (spi_dma_private_handle_t *)userData;
00000c  462e              MOV      r6,r5
;;;321        spi_dma_handle_t *spiHandle = privHandle->handle;
00000e  6874              LDR      r4,[r6,#4]
;;;322        SPI_Type *base = privHandle->base;
000010  6837              LDR      r7,[r6,#0]
;;;323    
;;;324        /* change the state */
;;;325        spiHandle->rxInProgress = false;
000012  2000              MOVS     r0,#0
000014  7060              STRB     r0,[r4,#1]
;;;326    
;;;327        /* All finished, call the callback */
;;;328        if ((spiHandle->txInProgress == false) && (spiHandle->rxInProgress == false))
000016  7820              LDRB     r0,[r4,#0]
000018  b958              CBNZ     r0,|L6.50|
00001a  7860              LDRB     r0,[r4,#1]
00001c  b948              CBNZ     r0,|L6.50|
;;;329        {
;;;330            spiHandle->state = kSPI_Idle;
00001e  2000              MOVS     r0,#0
000020  61a0              STR      r0,[r4,#0x18]
;;;331            if (spiHandle->callback)
000022  6920              LDR      r0,[r4,#0x10]
000024  b128              CBZ      r0,|L6.50|
;;;332            {
;;;333                (spiHandle->callback)(base, spiHandle, kStatus_Success, spiHandle->userData);
000026  2200              MOVS     r2,#0
000028  4621              MOV      r1,r4
00002a  4638              MOV      r0,r7
00002c  e9d4c304          LDRD     r12,r3,[r4,#0x10]
000030  47e0              BLX      r12
                  |L6.50|
;;;334            }
;;;335        }
;;;336    }
000032  e8bd87f0          POP      {r4-r10,pc}
;;;337    
                          ENDP


                          AREA ||i.SPI_SetupDummy||, CODE, READONLY, ALIGN=1

                  SPI_SetupDummy PROC
;;;136    
;;;137    static void SPI_SetupDummy(uint32_t *dummy, spi_transfer_t *xfer, spi_config_t *spi_config_p)
000000  b570              PUSH     {r4-r6,lr}
;;;138    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;139        *dummy = SPI_DUMMYDATA;
000008  f64f70ff          MOV      r0,#0xffff
00000c  6020              STR      r0,[r4,#0]
;;;140        XferToFifoWR(xfer, dummy);
00000e  4621              MOV      r1,r4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       XferToFifoWR
;;;141        SpiConfigToFifoWR(spi_config_p, dummy);
000016  4621              MOV      r1,r4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       SpiConfigToFifoWR
;;;142    }
00001e  bd70              POP      {r4-r6,pc}
;;;143    
                          ENDP


                          AREA ||i.SPI_TxDMACallback||, CODE, READONLY, ALIGN=1

                  SPI_TxDMACallback PROC
;;;337    
;;;338    static void SPI_TxDMACallback(dma_handle_t *handle, void *userData, bool transferDone, uint32_t intmode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;339    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;340        spi_dma_private_handle_t *privHandle = (spi_dma_private_handle_t *)userData;
00000c  462e              MOV      r6,r5
;;;341        spi_dma_handle_t *spiHandle = privHandle->handle;
00000e  6874              LDR      r4,[r6,#4]
;;;342        SPI_Type *base = privHandle->base;
000010  6837              LDR      r7,[r6,#0]
;;;343    
;;;344        /* change the state */
;;;345        spiHandle->txInProgress = false;
000012  2000              MOVS     r0,#0
000014  7020              STRB     r0,[r4,#0]
;;;346    
;;;347        /* All finished, call the callback */
;;;348        if ((spiHandle->txInProgress == false) && (spiHandle->rxInProgress == false))
000016  7820              LDRB     r0,[r4,#0]
000018  b958              CBNZ     r0,|L8.50|
00001a  7860              LDRB     r0,[r4,#1]
00001c  b948              CBNZ     r0,|L8.50|
;;;349        {
;;;350            spiHandle->state = kSPI_Idle;
00001e  2000              MOVS     r0,#0
000020  61a0              STR      r0,[r4,#0x18]
;;;351            if (spiHandle->callback)
000022  6920              LDR      r0,[r4,#0x10]
000024  b128              CBZ      r0,|L8.50|
;;;352            {
;;;353                (spiHandle->callback)(base, spiHandle, kStatus_Success, spiHandle->userData);
000026  2200              MOVS     r2,#0
000028  4621              MOV      r1,r4
00002a  4638              MOV      r0,r7
00002c  e9d4c304          LDRD     r12,r3,[r4,#0x10]
000030  47e0              BLX      r12
                  |L8.50|
;;;354            }
;;;355        }
;;;356    }
000032  e8bd87f0          POP      {r4-r10,pc}
;;;357    
                          ENDP


                          AREA ||i.SpiConfigToFifoWR||, CODE, READONLY, ALIGN=1

                  SpiConfigToFifoWR PROC
;;;109    
;;;110    static void SpiConfigToFifoWR(spi_config_t *config, uint32_t *fifowr)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112        *fifowr |= (SPI_DEASSERT_ALL & (~SPI_DEASSERTNUM_SSEL(config->sselNum)));
000002  7843              LDRB     r3,[r0,#1]
000004  3310              ADDS     r3,r3,#0x10
000006  2401              MOVS     r4,#1
000008  409c              LSLS     r4,r4,r3
00000a  f44f2370          MOV      r3,#0xf0000
00000e  43a3              BICS     r3,r3,r4
000010  680a              LDR      r2,[r1,#0]
000012  431a              ORRS     r2,r2,r3
000014  600a              STR      r2,[r1,#0]
;;;113        /* set width of data - range asserted at entry */
;;;114        *fifowr |= SPI_FIFOWR_LEN(config->dataWidth);
000016  7803              LDRB     r3,[r0,#0]
000018  f04f6470          MOV      r4,#0xf000000
00001c  ea046303          AND      r3,r4,r3,LSL #24
000020  680a              LDR      r2,[r1,#0]
000022  431a              ORRS     r2,r2,r3
000024  600a              STR      r2,[r1,#0]
;;;115    }
000026  bd10              POP      {r4,pc}
;;;116    
                          ENDP


                          AREA ||i.XferToFifoWR||, CODE, READONLY, ALIGN=1

                  XferToFifoWR PROC
;;;103    
;;;104    static void XferToFifoWR(spi_transfer_t *xfer, uint32_t *fifowr)
000000  680a              LDR      r2,[r1,#0]
;;;105    {
;;;106        *fifowr |= xfer->configFlags & (uint32_t)kSPI_FrameDelay ? (uint32_t)kSPI_FrameDelay : 0;
000002  6883              LDR      r3,[r0,#8]
000004  f4031300          AND      r3,r3,#0x200000
000008  b113              CBZ      r3,|L10.16|
00000a  f44f1300          MOV      r3,#0x200000
00000e  e000              B        |L10.18|
                  |L10.16|
000010  2300              MOVS     r3,#0
                  |L10.18|
000012  431a              ORRS     r2,r2,r3
000014  600a              STR      r2,[r1,#0]
;;;107        *fifowr |= xfer->configFlags & (uint32_t)kSPI_FrameAssert ? (uint32_t)kSPI_FrameAssert : 0;
000016  680a              LDR      r2,[r1,#0]
000018  6883              LDR      r3,[r0,#8]
00001a  f4031380          AND      r3,r3,#0x100000
00001e  b113              CBZ      r3,|L10.38|
000020  f44f1380          MOV      r3,#0x100000
000024  e000              B        |L10.40|
                  |L10.38|
000026  2300              MOVS     r3,#0
                  |L10.40|
000028  431a              ORRS     r2,r2,r3
00002a  600a              STR      r2,[r1,#0]
;;;108    }
00002c  4770              BX       lr
;;;109    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=4

                  s_dmaPrivateHandle
                          %        80
                  s_txDummy
                          %        80
                  s_spi_descriptor_table
                          %        160

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2128284e          DCB      "!((NULL != xfer->txData) && ((uint32_t)xfer->txData % s"
000004  554c4c20
000008  213d2078
00000c  6665722d
000010  3e747844
000014  61746129
000018  20262620
00001c  28287569
000020  6e743332
000024  5f742978
000028  6665722d
00002c  3e747844
000030  61746120
000034  252073  
000037  697a656f          DCB      "izeof(uint32_t)))",0
00003b  66287569
00003f  6e743332
000043  5f742929
000047  2900    
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
00004c  2128284e          DCB      "!((NULL != xfer->rxData) && ((uint32_t)xfer->rxData % s"
000050  554c4c20
000054  213d2078
000058  6665722d
00005c  3e727844
000060  61746129
000064  20262620
000068  28287569
00006c  6e743332
000070  5f742978
000074  6665722d
000078  3e727844
00007c  61746120
000080  252073  
000083  697a656f          DCB      "izeof(uint32_t)))",0
000087  66287569
00008b  6e743332
00008f  5f742929
000093  2900    

                          AREA ||.data||, DATA, ALIGN=1

                  s_rxDummy
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_spi_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_fsl_spi_dma_c_ca7254be____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_fsl_spi_dma_c_ca7254be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_fsl_spi_dma_c_ca7254be____REVSH|
#line 402
|__asm___13_fsl_spi_dma_c_ca7254be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_fsl_spi_dma_c_ca7254be____RRX|
#line 587
|__asm___13_fsl_spi_dma_c_ca7254be____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

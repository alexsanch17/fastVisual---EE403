; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_wwdt.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_wwdt.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_wwdt.crf SRC\Drivers\fsl_wwdt.c]
                          THUMB

                          AREA ||i.WWDT_ClearStatusFlags||, CODE, READONLY, ALIGN=1

                  WWDT_ClearStatusFlags PROC
;;;149    
;;;150    void WWDT_ClearStatusFlags(WWDT_Type *base, uint32_t mask)
000000  6803              LDR      r3,[r0,#0]
;;;151    {
;;;152        /* Clear the WDINT bit so that we don't accidentally clear it */
;;;153        uint32_t reg = (base->MOD & (~WWDT_MOD_WDINT_MASK));
000002  f0230208          BIC      r2,r3,#8
;;;154    
;;;155        /* Clear timeout by writing a zero */
;;;156        if (mask & kWWDT_TimeoutFlag)
000006  f0010304          AND      r3,r1,#4
00000a  b10b              CBZ      r3,|L1.16|
;;;157        {
;;;158            reg &= ~WWDT_MOD_WDTOF_MASK;
00000c  f0220204          BIC      r2,r2,#4
                  |L1.16|
;;;159        }
;;;160    
;;;161        /* Clear warning interrupt flag by writing a one */
;;;162        if (mask & kWWDT_WarningFlag)
000010  f0010308          AND      r3,r1,#8
000014  b10b              CBZ      r3,|L1.26|
;;;163        {
;;;164            reg |= WWDT_MOD_WDINT_MASK;
000016  f0420208          ORR      r2,r2,#8
                  |L1.26|
;;;165        }
;;;166    
;;;167        base->MOD = reg;
00001a  6002              STR      r2,[r0,#0]
;;;168    }
00001c  4770              BX       lr
                          ENDP


                          AREA ||i.WWDT_Deinit||, CODE, READONLY, ALIGN=2

                  WWDT_Deinit PROC
;;;128    
;;;129    void WWDT_Deinit(WWDT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4605              MOV      r5,r0
;;;131        WWDT_Disable(base);
000004  bf00              NOP      
000006  6828              LDR      r0,[r5,#0]
000008  f0200001          BIC      r0,r0,#1
00000c  6028              STR      r0,[r5,#0]
00000e  bf00              NOP      
;;;132    
;;;133    #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;134        /* Disable the WWDT clock */
;;;135        CLOCK_DisableClock(s_wwdtClocks[WWDT_GetInstance(base)]);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       WWDT_GetInstance
000016  490a              LDR      r1,|L2.64|
000018  f8314010          LDRH     r4,[r1,r0,LSL #1]
00001c  0a20              LSRS     r0,r4,#8
00001e  2803              CMP      r0,#3
000020  d205              BCS      |L2.46|
000022  2101              MOVS     r1,#1
000024  40a1              LSLS     r1,r1,r4
000026  4a07              LDR      r2,|L2.68|
000028  f8421020          STR      r1,[r2,r0,LSL #2]
00002c  e006              B        |L2.60|
                  |L2.46|
00002e  2101              MOVS     r1,#1
000030  40a1              LSLS     r1,r1,r4
000032  4a05              LDR      r2,|L2.72|
000034  6191              STR      r1,[r2,#0x18]
000036  2100              MOVS     r1,#0
000038  0312              LSLS     r2,r2,#12
00003a  64d1              STR      r1,[r2,#0x4c]
                  |L2.60|
00003c  bf00              NOP      
;;;136    #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;137    }
00003e  bd70              POP      {r4-r6,pc}
;;;138    
                          ENDP

                  |L2.64|
                          DCD      s_wwdtClocks
                  |L2.68|
                          DCD      0x40000240
                  |L2.72|
                          DCD      0x40040000

                          AREA ||i.WWDT_GetDefaultConfig||, CODE, READONLY, ALIGN=2

                  WWDT_GetDefaultConfig PROC
;;;85     
;;;86     void WWDT_GetDefaultConfig(wwdt_config_t *config)
000000  b510              PUSH     {r4,lr}
;;;87     {
000002  4604              MOV      r4,r0
;;;88         assert(config);
000004  b104              CBZ      r4,|L3.8|
000006  e004              B        |L3.18|
                  |L3.8|
000008  2258              MOVS     r2,#0x58
00000a  a108              ADR      r1,|L3.44|
00000c  a00d              ADR      r0,|L3.68|
00000e  f7fffffe          BL       __aeabi_assert
                  |L3.18|
;;;89     
;;;90         /* Enable the watch dog */
;;;91         config->enableWwdt = true;
000012  2001              MOVS     r0,#1
000014  7020              STRB     r0,[r4,#0]
;;;92         /* Disable the watchdog timeout reset */
;;;93         config->enableWatchdogReset = false;
000016  2000              MOVS     r0,#0
000018  7060              STRB     r0,[r4,#1]
;;;94         /* Disable the watchdog protection for updating the timeout value */
;;;95         config->enableWatchdogProtect = false;
00001a  70a0              STRB     r0,[r4,#2]
;;;96         /* Do not lock the watchdog oscillator */
;;;97         config->enableLockOscillator = false;
00001c  70e0              STRB     r0,[r4,#3]
;;;98         /* Windowing is not in effect */
;;;99         config->windowValue = 0xFFFFFFU;
00001e  f06f407f          MVN      r0,#0xff000000
000022  6060              STR      r0,[r4,#4]
;;;100        /* Set the timeout value to the max */
;;;101        config->timeoutValue = 0xFFFFFFU;
000024  60a0              STR      r0,[r4,#8]
;;;102        /* No warning is provided */
;;;103        config->warningValue = 0;
000026  2000              MOVS     r0,#0
000028  60e0              STR      r0,[r4,#0xc]
;;;104    }
00002a  bd10              POP      {r4,pc}
;;;105    
                          ENDP

                  |L3.44|
00002c  5352435c          DCB      "SRC\\Drivers\\fsl_wwdt.c",0
000030  44726976
000034  6572735c
000038  66736c5f
00003c  77776474
000040  2e6300  
000043  00                DCB      0
                  |L3.68|
000044  636f6e66          DCB      "config",0
000048  696700  
00004b  00                DCB      0

                          AREA ||i.WWDT_GetInstance||, CODE, READONLY, ALIGN=2

                  WWDT_GetInstance PROC
;;;62      ******************************************************************************/
;;;63     static uint32_t WWDT_GetInstance(WWDT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
000002  4605              MOV      r5,r0
;;;65         uint32_t instance;
;;;66         uint32_t wwdtArrayCount = (sizeof(s_wwdtBases) / sizeof(s_wwdtBases[0]));
000004  2601              MOVS     r6,#1
;;;67     
;;;68         /* Find the instance index from base address mappings. */
;;;69         for (instance = 0; instance < wwdtArrayCount; instance++)
000006  2400              MOVS     r4,#0
000008  e006              B        |L4.24|
                  |L4.10|
;;;70         {
;;;71             if (s_wwdtBases[instance] == base)
00000a  480a              LDR      r0,|L4.52|
00000c  f8500024          LDR      r0,[r0,r4,LSL #2]
000010  42a8              CMP      r0,r5
000012  d100              BNE      |L4.22|
;;;72             {
;;;73                 break;
000014  e002              B        |L4.28|
                  |L4.22|
000016  1c64              ADDS     r4,r4,#1              ;69
                  |L4.24|
000018  42b4              CMP      r4,r6                 ;69
00001a  d3f6              BCC      |L4.10|
                  |L4.28|
00001c  bf00              NOP      
;;;74             }
;;;75         }
;;;76     
;;;77         assert(instance < wwdtArrayCount);
00001e  42b4              CMP      r4,r6
000020  d200              BCS      |L4.36|
000022  e004              B        |L4.46|
                  |L4.36|
000024  224d              MOVS     r2,#0x4d
000026  a104              ADR      r1,|L4.56|
000028  a009              ADR      r0,|L4.80|
00002a  f7fffffe          BL       __aeabi_assert
                  |L4.46|
;;;78     
;;;79         return instance;
00002e  4620              MOV      r0,r4
;;;80     }
000030  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      s_wwdtBases
                  |L4.56|
000038  5352435c          DCB      "SRC\\Drivers\\fsl_wwdt.c",0
00003c  44726976
000040  6572735c
000044  66736c5f
000048  77776474
00004c  2e6300  
00004f  00                DCB      0
                  |L4.80|
000050  696e7374          DCB      "instance < wwdtArrayCount",0
000054  616e6365
000058  203c2077
00005c  77647441
000060  72726179
000064  436f756e
000068  7400    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.WWDT_Init||, CODE, READONLY, ALIGN=2

                  WWDT_Init PROC
;;;105    
;;;106    void WWDT_Init(WWDT_Type *base, const wwdt_config_t *config)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;107    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;108        assert(config);
000008  b104              CBZ      r4,|L5.12|
00000a  e004              B        |L5.22|
                  |L5.12|
00000c  226c              MOVS     r2,#0x6c
00000e  a123              ADR      r1,|L5.156|
000010  a028              ADR      r0,|L5.180|
000012  f7fffffe          BL       __aeabi_assert
                  |L5.22|
;;;109    
;;;110        uint32_t value = 0U;
000016  2700              MOVS     r7,#0
;;;111    
;;;112    #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;113        /* Enable the WWDT clock */
;;;114        CLOCK_EnableClock(s_wwdtClocks[WWDT_GetInstance(base)]);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       WWDT_GetInstance
00001e  4927              LDR      r1,|L5.188|
000020  f8316010          LDRH     r6,[r1,r0,LSL #1]
000024  0a30              LSRS     r0,r6,#8
000026  2803              CMP      r0,#3
000028  d205              BCS      |L5.54|
00002a  2101              MOVS     r1,#1
00002c  40b1              LSLS     r1,r1,r6
00002e  4a24              LDR      r2,|L5.192|
000030  f8421020          STR      r1,[r2,r0,LSL #2]
000034  e005              B        |L5.66|
                  |L5.54|
000036  2101              MOVS     r1,#1
000038  078a              LSLS     r2,r1,#30
00003a  64d1              STR      r1,[r2,#0x4c]
00003c  40b1              LSLS     r1,r1,r6
00003e  4a21              LDR      r2,|L5.196|
000040  6151              STR      r1,[r2,#0x14]
                  |L5.66|
000042  bf00              NOP      
;;;115    #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;116    
;;;117        /* Reset the WWDT module */
;;;118        RESET_PeripheralReset(s_wwdtResets[WWDT_GetInstance(base)]);
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       WWDT_GetInstance
00004a  491f              LDR      r1,|L5.200|
00004c  f8516020          LDR      r6,[r1,r0,LSL #2]
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       RESET_PeripheralReset
;;;119    
;;;120        value = WWDT_MOD_WDEN(config->enableWwdt) | WWDT_MOD_WDRESET(config->enableWatchdogReset) |
000056  7820              LDRB     r0,[r4,#0]
000058  f0000001          AND      r0,r0,#1
00005c  7861              LDRB     r1,[r4,#1]
00005e  2202              MOVS     r2,#2
000060  ea020141          AND      r1,r2,r1,LSL #1
000064  4308              ORRS     r0,r0,r1
000066  78a1              LDRB     r1,[r4,#2]
000068  2210              MOVS     r2,#0x10
00006a  ea021101          AND      r1,r2,r1,LSL #4
00006e  4308              ORRS     r0,r0,r1
000070  78e1              LDRB     r1,[r4,#3]
000072  2220              MOVS     r2,#0x20
000074  ea021141          AND      r1,r2,r1,LSL #5
000078  ea400701          ORR      r7,r0,r1
;;;121                WWDT_MOD_WDPROTECT(config->enableWatchdogProtect) | WWDT_MOD_LOCK(config->enableLockOscillator);
;;;122        /* Set configruation */
;;;123        base->WINDOW = WWDT_WINDOW_WINDOW(config->windowValue);
00007c  6860              LDR      r0,[r4,#4]
00007e  f020407f          BIC      r0,r0,#0xff000000
000082  61a8              STR      r0,[r5,#0x18]
;;;124        base->TC = WWDT_TC_COUNT(config->timeoutValue);
000084  68a0              LDR      r0,[r4,#8]
000086  f020407f          BIC      r0,r0,#0xff000000
00008a  6068              STR      r0,[r5,#4]
;;;125        base->WARNINT = WWDT_WARNINT_WARNINT(config->warningValue);
00008c  89a0              LDRH     r0,[r4,#0xc]
00008e  f3c00009          UBFX     r0,r0,#0,#10
000092  6168              STR      r0,[r5,#0x14]
;;;126        base->MOD = value;
000094  602f              STR      r7,[r5,#0]
;;;127    }
000096  e8bd81f0          POP      {r4-r8,pc}
;;;128    
                          ENDP

00009a  0000              DCW      0x0000
                  |L5.156|
00009c  5352435c          DCB      "SRC\\Drivers\\fsl_wwdt.c",0
0000a0  44726976
0000a4  6572735c
0000a8  66736c5f
0000ac  77776474
0000b0  2e6300  
0000b3  00                DCB      0
                  |L5.180|
0000b4  636f6e66          DCB      "config",0
0000b8  696700  
0000bb  00                DCB      0
                  |L5.188|
                          DCD      s_wwdtClocks
                  |L5.192|
                          DCD      0x40000220
                  |L5.196|
                          DCD      0x40040000
                  |L5.200|
                          DCD      s_wwdtResets

                          AREA ||i.WWDT_Refresh||, CODE, READONLY, ALIGN=1

                  WWDT_Refresh PROC
;;;138    
;;;139    void WWDT_Refresh(WWDT_Type *base)
000000  b510              PUSH     {r4,lr}
;;;140    {
000002  4601              MOV      r1,r0
;;;141        uint32_t primaskValue = 0U;
000004  2200              MOVS     r2,#0
;;;142    
;;;143        /* Disable the global interrupt to protect refresh sequence */
;;;144        primaskValue = DisableGlobalIRQ();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f3ef8310          MRS      r3,PRIMASK
00000e  4618              MOV      r0,r3
000010  b672              CPSID    i
000012  bf00              NOP      
000014  4602              MOV      r2,r0
;;;145        base->FEED = WWDT_FIRST_WORD_OF_REFRESH;
000016  20aa              MOVS     r0,#0xaa
000018  6088              STR      r0,[r1,#8]
;;;146        base->FEED = WWDT_SECOND_WORD_OF_REFRESH;
00001a  2055              MOVS     r0,#0x55
00001c  6088              STR      r0,[r1,#8]
;;;147        EnableGlobalIRQ(primaskValue);
00001e  4610              MOV      r0,r2
000020  bf00              NOP      
000022  f3808810          MSR      PRIMASK,r0
000026  bf00              NOP      
000028  bf00              NOP      
;;;148    }
00002a  bd10              POP      {r4,pc}
;;;149    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  s_wwdtBases
                          DCD      0x4000c000
                  s_wwdtClocks
000004  0016              DCW      0x0016
000006  0000              DCB      0x00,0x00
                  s_wwdtResets
                          DCD      0x00000016

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_wwdt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_wwdt_c_49203290____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_fsl_wwdt_c_49203290____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_wwdt_c_49203290____REVSH|
#line 402
|__asm___10_fsl_wwdt_c_49203290____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_wwdt_c_49203290____RRX|
#line 587
|__asm___10_fsl_wwdt_c_49203290____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

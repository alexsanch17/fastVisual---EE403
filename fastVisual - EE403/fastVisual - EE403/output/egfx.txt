; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\egfx.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\egfx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\egfx.crf SRC\eGFX\eGFX.c]
                          THUMB

                          AREA ||i.eGFX_ABS||, CODE, READONLY, ALIGN=1

                  eGFX_ABS PROC
;;;1841   
;;;1842   int16_t eGFX_ABS(int16_t A)
000000  4601              MOV      r1,r0
;;;1843   {
;;;1844       if(A<0)
000002  2900              CMP      r1,#0
000004  da02              BGE      |L1.12|
;;;1845           return -A;
000006  4248              RSBS     r0,r1,#0
000008  b200              SXTH     r0,r0
                  |L1.10|
;;;1846       else
;;;1847           return A;
;;;1848   }
00000a  4770              BX       lr
                  |L1.12|
00000c  4608              MOV      r0,r1                 ;1847
00000e  e7fc              B        |L1.10|
;;;1849   
                          ENDP


                          AREA ||i.eGFX_AddAnimator||, CODE, READONLY, ALIGN=2

                  eGFX_AddAnimator PROC
;;;1867   //Adds an animator object to the list.  returns TRUE if successful.
;;;1868   uint32_t eGFX_AddAnimator(void * Animator)
000000  4601              MOV      r1,r0
;;;1869   {
;;;1870   	if(eGFX_AnimatorEndIndex < eGFX_MAX_ANIMATORS)
000002  4809              LDR      r0,|L2.40|
000004  6800              LDR      r0,[r0,#0]  ; eGFX_AnimatorEndIndex
000006  2820              CMP      r0,#0x20
000008  d20b              BCS      |L2.34|
;;;1871   	{
;;;1872   		eGFX_Animators[eGFX_AnimatorEndIndex] = Animator;
00000a  4808              LDR      r0,|L2.44|
00000c  4a06              LDR      r2,|L2.40|
00000e  6812              LDR      r2,[r2,#0]  ; eGFX_AnimatorEndIndex
000010  f8401022          STR      r1,[r0,r2,LSL #2]
;;;1873   		eGFX_AnimatorEndIndex++;
000014  4804              LDR      r0,|L2.40|
000016  6800              LDR      r0,[r0,#0]  ; eGFX_AnimatorEndIndex
000018  1c40              ADDS     r0,r0,#1
00001a  4a03              LDR      r2,|L2.40|
00001c  6010              STR      r0,[r2,#0]  ; eGFX_AnimatorEndIndex
;;;1874   		return TRUE;
00001e  2001              MOVS     r0,#1
                  |L2.32|
;;;1875   	}
;;;1876   	else
;;;1877   	{
;;;1878   		return FALSE;
;;;1879   	}
;;;1880   }
000020  4770              BX       lr
                  |L2.34|
000022  2000              MOVS     r0,#0                 ;1878
000024  e7fc              B        |L2.32|
;;;1881   void eGFX_ClearAnimators()
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      eGFX_AnimatorEndIndex
                  |L2.44|
                          DCD      eGFX_Animators

                          AREA ||i.eGFX_AddObject||, CODE, READONLY, ALIGN=2

                  eGFX_AddObject PROC
;;;2433   //Adds an animator object to the list.  returns TRUE if successful.
;;;2434   uint32_t eGFX_AddObject(void * Object)
000000  4601              MOV      r1,r0
;;;2435   {
;;;2436   	if(eGFX_ObjectEndIndex < eGFX_MAX_OBJECTS)
000002  4809              LDR      r0,|L3.40|
000004  6800              LDR      r0,[r0,#0]  ; eGFX_ObjectEndIndex
000006  2840              CMP      r0,#0x40
000008  d20b              BCS      |L3.34|
;;;2437   	{
;;;2438   		eGFX_Objects[eGFX_ObjectEndIndex] = Object;
00000a  4808              LDR      r0,|L3.44|
00000c  4a06              LDR      r2,|L3.40|
00000e  6812              LDR      r2,[r2,#0]  ; eGFX_ObjectEndIndex
000010  f8401022          STR      r1,[r0,r2,LSL #2]
;;;2439   		eGFX_ObjectEndIndex++;
000014  4804              LDR      r0,|L3.40|
000016  6800              LDR      r0,[r0,#0]  ; eGFX_ObjectEndIndex
000018  1c40              ADDS     r0,r0,#1
00001a  4a03              LDR      r2,|L3.40|
00001c  6010              STR      r0,[r2,#0]  ; eGFX_ObjectEndIndex
;;;2440   		
;;;2441   		return TRUE;
00001e  2001              MOVS     r0,#1
                  |L3.32|
;;;2442   	}
;;;2443   	else
;;;2444   	{
;;;2445   		return FALSE;
;;;2446   	}
;;;2447   
;;;2448   }
000020  4770              BX       lr
                  |L3.34|
000022  2000              MOVS     r0,#0                 ;2445
000024  e7fc              B        |L3.32|
;;;2449   
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      eGFX_ObjectEndIndex
                  |L3.44|
                          DCD      eGFX_Objects

                          AREA ||i.eGFX_AddObjectBoxF||, CODE, READONLY, ALIGN=1

                  eGFX_AddObjectBoxF PROC
;;;2850   
;;;2851   void eGFX_AddObjectBoxF(eGFX_Obj_BoxF * BF,
000000  b577              PUSH     {r0-r2,r4-r6,lr}
;;;2852   	eGFX_PointF P1,
;;;2853   	eGFX_PointF P2,
;;;2854   	eGFX_PixelState PS,
;;;2855   	uint8_t BoxF_RenderOption
;;;2856   	)
;;;2857   
;;;2858   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;2859   	eGFX_InitObjectBoxF(BF,
00000c  4632              MOV      r2,r6
00000e  4629              MOV      r1,r5
000010  eddd1a03          VLDR     s3,[sp,#0xc]
000014  ed9d1a02          VLDR     s2,[sp,#8]
000018  eddd0a01          VLDR     s1,[sp,#4]
00001c  ed9d0a00          VLDR     s0,[sp,#0]
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       eGFX_InitObjectBoxF
;;;2860   		P1,
;;;2861   		P2,
;;;2862   		PS,
;;;2863   		BoxF_RenderOption
;;;2864   		);
;;;2865   
;;;2866   	eGFX_AddObject(BF);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       eGFX_AddObject
;;;2867   }
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd70              POP      {r4-r6,pc}
;;;2868   
                          ENDP


                          AREA ||i.eGFX_AddObjectCircleF||, CODE, READONLY, ALIGN=1

                  eGFX_AddObjectCircleF PROC
;;;2785   
;;;2786   void eGFX_AddObjectCircleF( eGFX_Obj_CircleF * CF,
000000  b577              PUSH     {r0-r2,r4-r6,lr}
;;;2787   							eGFX_PointF Position,
;;;2788   							float Radius,
;;;2789   							eGFX_PixelState PS,
;;;2790   							uint8_t CircleF_RenderOption
;;;2791   							)
;;;2792   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4604              MOV      r4,r0
000008  eef01a41          VMOV.F32 s3,s2
00000c  460d              MOV      r5,r1
00000e  4616              MOV      r6,r2
;;;2793   	eGFX_InitObjectCircleF(CF,
000010  4632              MOV      r2,r6
000012  4629              MOV      r1,r5
000014  eeb01a61          VMOV.F32 s2,s3
000018  eddd0a01          VLDR     s1,[sp,#4]
00001c  ed9d0a00          VLDR     s0,[sp,#0]
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       eGFX_InitObjectCircleF
;;;2794   		Position,
;;;2795   		Radius,
;;;2796   		PS,
;;;2797   		CircleF_RenderOption
;;;2798   		);
;;;2799   
;;;2800   	eGFX_AddObject(CF);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       eGFX_AddObject
;;;2801   }
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd70              POP      {r4-r6,pc}
;;;2802   
                          ENDP


                          AREA ||i.eGFX_AddObjectLineF||, CODE, READONLY, ALIGN=1

                  eGFX_AddObjectLineF PROC
;;;2626   
;;;2627   void eGFX_AddObjectLineF(eGFX_Obj_LineF * LF,
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2628   	eGFX_PointF Start,
;;;2629   	eGFX_PointF End,
;;;2630   	eGFX_PixelState PS
;;;2631   	)
;;;2632   
;;;2633   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;2634   	eGFX_InitObjectLineF(LF,
00000a  4629              MOV      r1,r5
00000c  eddd1a03          VLDR     s3,[sp,#0xc]
000010  ed9d1a02          VLDR     s2,[sp,#8]
000014  eddd0a01          VLDR     s1,[sp,#4]
000018  ed9d0a00          VLDR     s0,[sp,#0]
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       eGFX_InitObjectLineF
;;;2635   		Start,
;;;2636   		End,
;;;2637   		PS
;;;2638   		);
;;;2639   
;;;2640   	eGFX_AddObject(LF);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       eGFX_AddObject
;;;2641   }
000028  b006              ADD      sp,sp,#0x18
00002a  bd30              POP      {r4,r5,pc}
;;;2642   
                          ENDP


                          AREA ||i.eGFX_AddObjectScaledSpriteF||, CODE, READONLY, ALIGN=1

                  eGFX_AddObjectScaledSpriteF PROC
;;;2730   
;;;2731   void eGFX_AddObjectScaledSpriteF(eGFX_Obj_ScaledSpriteF * S,
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2732   	eGFX_PointF Position,
;;;2733   	eGFX_ImagePlane *	Sprite,
;;;2734   	float Scale
;;;2735   	)
;;;2736   
;;;2737   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  eef01a41          VMOV.F32 s3,s2
;;;2738   	eGFX_InitObjectScaledSpriteF(S,
00000e  eeb01a61          VMOV.F32 s2,s3
000012  4629              MOV      r1,r5
000014  eddd0a01          VLDR     s1,[sp,#4]
000018  ed9d0a00          VLDR     s0,[sp,#0]
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       eGFX_InitObjectScaledSpriteF
;;;2739   		Position,
;;;2740   		Sprite,
;;;2741   		Scale
;;;2742   		);
;;;2743   
;;;2744   	eGFX_AddObject(S);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       eGFX_AddObject
;;;2745   }
000028  b006              ADD      sp,sp,#0x18
00002a  bd30              POP      {r4,r5,pc}
;;;2746   
                          ENDP


                          AREA ||i.eGFX_AddObjectShadedTextF||, CODE, READONLY, ALIGN=1

                  eGFX_AddObjectShadedTextF PROC
;;;2568   
;;;2569   void eGFX_AddObjectShadedTextF(eGFX_Obj_ShadedTextF * TF,
000000  b577              PUSH     {r0-r2,r4-r6,lr}
;;;2570   	eGFX_PointF Position,
;;;2571   	eGFX_Font *Font,
;;;2572   	char * String,
;;;2573   	float Shading
;;;2574   	)
;;;2575   
;;;2576   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  eef01a41          VMOV.F32 s3,s2
;;;2577   	eGFX_InitObjectShadedTextF(TF,
000010  eeb01a61          VMOV.F32 s2,s3
000014  4632              MOV      r2,r6
000016  4629              MOV      r1,r5
000018  eddd0a01          VLDR     s1,[sp,#4]
00001c  ed9d0a00          VLDR     s0,[sp,#0]
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       eGFX_InitObjectShadedTextF
;;;2578   		Position,
;;;2579   		Font,
;;;2580   		String,
;;;2581   		Shading
;;;2582   		);
;;;2583   
;;;2584   	eGFX_AddObject(TF);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       eGFX_AddObject
;;;2585   }
00002c  b007              ADD      sp,sp,#0x1c
00002e  bd70              POP      {r4-r6,pc}
;;;2586   
                          ENDP


                          AREA ||i.eGFX_AddObjectSpriteF||, CODE, READONLY, ALIGN=1

                  eGFX_AddObjectSpriteF PROC
;;;2679   
;;;2680   void eGFX_AddObjectSpriteF(eGFX_Obj_SpriteF * S,
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2681   							eGFX_PointF Position,
;;;2682   							eGFX_ImagePlane *	Sprite
;;;2683   							)
;;;2684   
;;;2685   {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;2686   	eGFX_InitObjectSpriteF(S,
00000a  4629              MOV      r1,r5
00000c  eddd0a01          VLDR     s1,[sp,#4]
000010  ed9d0a00          VLDR     s0,[sp,#0]
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       eGFX_InitObjectSpriteF
;;;2687   		Position,
;;;2688   		Sprite
;;;2689   		);
;;;2690   
;;;2691   	eGFX_AddObject(S);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       eGFX_AddObject
;;;2692   }
000020  bd3f              POP      {r0-r5,pc}
;;;2693   
                          ENDP


                          AREA ||i.eGFX_AddObjectTextF||, CODE, READONLY, ALIGN=1

                  eGFX_AddObjectTextF PROC
;;;2505   
;;;2506   void eGFX_AddObjectTextF(eGFX_Obj_TextF * TF,
000000  b577              PUSH     {r0-r2,r4-r6,lr}
;;;2507   	eGFX_PointF Position,
;;;2508   	eGFX_Font *Font,
;;;2509   	char * String
;;;2510   	)
;;;2511   
;;;2512   {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;2513   	eGFX_InitObjectTextF(TF,
00000c  4632              MOV      r2,r6
00000e  4629              MOV      r1,r5
000010  eddd0a01          VLDR     s1,[sp,#4]
000014  ed9d0a00          VLDR     s0,[sp,#0]
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       eGFX_InitObjectTextF
;;;2514   		Position,
;;;2515   		Font,
;;;2516   		String
;;;2517   		);
;;;2518   
;;;2519   	eGFX_AddObject(TF);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       eGFX_AddObject
;;;2520   }
000024  b005              ADD      sp,sp,#0x14
000026  bd70              POP      {r4-r6,pc}
;;;2521   
                          ENDP


                          AREA ||i.eGFX_AddPointF_BisectAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_AddPointF_BisectAnimator PROC
;;;2011   //returns true if successful, false if not
;;;2012   uint32_t eGFX_AddPointF_BisectAnimator(eGFX_PointF_BisectAnimator *P,
000000  b577              PUSH     {r0-r2,r4-r6,lr}
;;;2013   									eGFX_PointF Target,
;;;2014   									eGFX_PointF *Current,
;;;2015   									uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;2016   									float FractionalBisect) //The amount of percentage of the distance the point should move each step.   0 - 255 maps to 0 to 99.6%.   Zero is invalid
;;;2017   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  eef01a41          VMOV.F32 s3,s2
;;;2018   	if (P != NULL)
000010  b17c              CBZ      r4,|L11.50|
;;;2019   	{
;;;2020   		eGFX_InitPointF_BisectAnimator(P, Target, Current, LastStep, FractionalBisect);
000012  eeb01a61          VMOV.F32 s2,s3
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  eddd0a01          VLDR     s1,[sp,#4]
00001e  ed9d0a00          VLDR     s0,[sp,#0]
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       eGFX_InitPointF_BisectAnimator
;;;2021   
;;;2022   		return eGFX_AddAnimator(P);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       eGFX_AddAnimator
                  |L11.46|
;;;2023   	}
;;;2024   	else
;;;2025   		return FALSE;
;;;2026   
;;;2027   }
00002e  b007              ADD      sp,sp,#0x1c
000030  bd70              POP      {r4-r6,pc}
                  |L11.50|
000032  2000              MOVS     r0,#0                 ;2025
000034  e7fb              B        |L11.46|
;;;2028   
                          ENDP


                          AREA ||i.eGFX_AddPointF_LinearAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_AddPointF_LinearAnimator PROC
;;;2312   //returns true if successful, false if not
;;;2313   uint32_t eGFX_AddPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P,
000000  b577              PUSH     {r0-r2,r4-r6,lr}
;;;2314   	eGFX_PointF Target,
;;;2315   	eGFX_PointF *Current,
;;;2316   	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;2317   	float IncrementX,
;;;2318   	float IncrementY)
;;;2319   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  eeb02a41          VMOV.F32 s4,s2
000010  eef02a61          VMOV.F32 s5,s3
;;;2320   	if (P != NULL)
000014  b18c              CBZ      r4,|L12.58|
;;;2321   	{
;;;2322   		eGFX_InitPointF_LinearAnimator(P, Target, Current, LastStep, IncrementX,IncrementY);
000016  eef01a62          VMOV.F32 s3,s5
00001a  eeb01a42          VMOV.F32 s2,s4
00001e  4632              MOV      r2,r6
000020  4629              MOV      r1,r5
000022  eddd0a01          VLDR     s1,[sp,#4]
000026  ed9d0a00          VLDR     s0,[sp,#0]
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       eGFX_InitPointF_LinearAnimator
;;;2323   
;;;2324   		return eGFX_AddAnimator(P);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       eGFX_AddAnimator
                  |L12.54|
;;;2325   	}
;;;2326   	else
;;;2327   		return FALSE;
;;;2328   
;;;2329   }
000036  b007              ADD      sp,sp,#0x1c
000038  bd70              POP      {r4-r6,pc}
                  |L12.58|
00003a  2000              MOVS     r0,#0                 ;2327
00003c  e7fb              B        |L12.54|
;;;2330   
                          ENDP


                          AREA ||i.eGFX_AddScalarF_BisectAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_AddScalarF_BisectAnimator PROC
;;;2093   //returns true if successful, false if not
;;;2094   uint32_t eGFX_AddScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P,
000000  b570              PUSH     {r4-r6,lr}
;;;2095   	float Target,
;;;2096   	float *Current,
;;;2097   	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;2098   	float FractionalBisect) //The amount of percentage of the distance the point should move each step.   0 - 255 maps to 0 to 99.6%.   Zero is invalid
;;;2099   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  eeb02a40          VMOV.F32 s4,s0
00000c  eef02a60          VMOV.F32 s5,s1
;;;2100   	if (P != NULL)
000010  b164              CBZ      r4,|L13.44|
;;;2101   	{
;;;2102   		eGFX_InitScalarF_BisectAnimator(P, Target, Current, LastStep, FractionalBisect);
000012  eef00a62          VMOV.F32 s1,s5
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  eeb00a42          VMOV.F32 s0,s4
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       eGFX_InitScalarF_BisectAnimator
;;;2103   
;;;2104   		return eGFX_AddAnimator(P);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       eGFX_AddAnimator
                  |L13.42|
;;;2105   	}
;;;2106   	else
;;;2107   		return FALSE;
;;;2108   
;;;2109   }
00002a  bd70              POP      {r4-r6,pc}
                  |L13.44|
00002c  2000              MOVS     r0,#0                 ;2107
00002e  e7fc              B        |L13.42|
;;;2110   
                          ENDP


                          AREA ||i.eGFX_AddScalarF_LinearAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_AddScalarF_LinearAnimator PROC
;;;2199   //returns true if successful, false if not
;;;2200   uint32_t eGFX_AddScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P,
000000  b570              PUSH     {r4-r6,lr}
;;;2201   	float Target,
;;;2202   	float *Current,
;;;2203   	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;2204   	float Increment) 
;;;2205   {
000002  4604              MOV      r4,r0
000004  eef01a40          VMOV.F32 s3,s0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  eeb02a60          VMOV.F32 s4,s1
;;;2206   	if (P != NULL)
000010  b164              CBZ      r4,|L14.44|
;;;2207   	{
;;;2208   		eGFX_InitScalarF_LinearAnimator(P, Target, Current, LastStep, Increment);
000012  eef00a42          VMOV.F32 s1,s4
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  eeb00a61          VMOV.F32 s0,s3
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       eGFX_InitScalarF_LinearAnimator
;;;2209   
;;;2210   		return eGFX_AddAnimator(P);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       eGFX_AddAnimator
                  |L14.42|
;;;2211   	}
;;;2212   	else
;;;2213   		return FALSE;
;;;2214   
;;;2215   }
00002a  bd70              POP      {r4-r6,pc}
                  |L14.44|
00002c  2000              MOVS     r0,#0                 ;2213
00002e  e7fc              B        |L14.42|
;;;2216   
                          ENDP


                          AREA ||i.eGFX_AnimatorIsComplete||, CODE, READONLY, ALIGN=1

                  eGFX_AnimatorIsComplete PROC
;;;1890   
;;;1891   uint32_t eGFX_AnimatorIsComplete(void * A)
000000  4601              MOV      r1,r0
;;;1892   {
;;;1893   	uint32_t RetVal = TRUE;
000002  2001              MOVS     r0,#1
;;;1894   
;;;1895   	if(((eGFX_ObjectHeader *)(A))->State == eGFX_OBJECT_STATE_ANIMATION_ACTIVE)
000004  684a              LDR      r2,[r1,#4]
000006  2a02              CMP      r2,#2
000008  d100              BNE      |L15.12|
;;;1896   	{
;;;1897   		RetVal = FALSE;
00000a  2000              MOVS     r0,#0
                  |L15.12|
;;;1898   	}
;;;1899   
;;;1900   	return RetVal;
;;;1901   
;;;1902   }
00000c  4770              BX       lr
;;;1903   
                          ENDP


                          AREA ||i.eGFX_AnimatorsAreComplete||, CODE, READONLY, ALIGN=2

                  eGFX_AnimatorsAreComplete PROC
;;;1903   
;;;1904   uint32_t eGFX_AnimatorsAreComplete()
000000  b510              PUSH     {r4,lr}
;;;1905   {
;;;1906   	uint32_t RetVal = TRUE;
000002  2401              MOVS     r4,#1
;;;1907   	uint32_t i;
;;;1908   	
;;;1909   	for(i=0;i<eGFX_AnimatorEndIndex;i++)
000004  2300              MOVS     r3,#0
000006  e008              B        |L16.26|
                  |L16.8|
;;;1910   	{
;;;1911   		if(eGFX_AnimatorIsComplete(eGFX_Animators[i]) == FALSE)
000008  4907              LDR      r1,|L16.40|
00000a  f8510023          LDR      r0,[r1,r3,LSL #2]
00000e  f7fffffe          BL       eGFX_AnimatorIsComplete
000012  b908              CBNZ     r0,|L16.24|
;;;1912   		{
;;;1913   			RetVal = FALSE;
000014  2400              MOVS     r4,#0
;;;1914   			break;
000016  e004              B        |L16.34|
                  |L16.24|
000018  1c5b              ADDS     r3,r3,#1              ;1909
                  |L16.26|
00001a  4804              LDR      r0,|L16.44|
00001c  6800              LDR      r0,[r0,#0]            ;1909  ; eGFX_AnimatorEndIndex
00001e  4283              CMP      r3,r0                 ;1909
000020  d3f2              BCC      |L16.8|
                  |L16.34|
000022  bf00              NOP      
;;;1915   		}
;;;1916   	}
;;;1917   	
;;;1918   	return RetVal;
000024  4620              MOV      r0,r4
;;;1919   }
000026  bd10              POP      {r4,pc}
;;;1920   
                          ENDP

                  |L16.40|
                          DCD      eGFX_Animators
                  |L16.44|
                          DCD      eGFX_AnimatorEndIndex

                          AREA ||i.eGFX_BitStreamGet||, CODE, READONLY, ALIGN=1

                  eGFX_BitStreamGet PROC
;;;37     
;;;38     uint32_t eGFX_BitStreamGet(uint8_t * BitStream, uint32_t Position)
000000  b530              PUSH     {r4,r5,lr}
;;;39     {
000002  4602              MOV      r2,r0
;;;40     
;;;41     	uint32_t BaseAddress = Position >> 3;
000004  08cb              LSRS     r3,r1,#3
;;;42     	uint32_t Offset = Position & 0x7;
000006  f0010407          AND      r4,r1,#7
;;;43     
;;;44     	return	(BitStream[BaseAddress] & (1<<Offset));
00000a  5cd0              LDRB     r0,[r2,r3]
00000c  2501              MOVS     r5,#1
00000e  40a5              LSLS     r5,r5,r4
000010  4028              ANDS     r0,r0,r5
;;;45     
;;;46     }
000012  bd30              POP      {r4,r5,pc}
;;;47     
                          ENDP


                          AREA ||i.eGFX_BitStreamPut||, CODE, READONLY, ALIGN=1

                  eGFX_BitStreamPut PROC
;;;22     
;;;23     void eGFX_BitStreamPut(uint8_t * BitStream, uint32_t Position, uint32_t PixelState)
000000  b570              PUSH     {r4-r6,lr}
;;;24     {
000002  460b              MOV      r3,r1
;;;25     	uint32_t BaseAddress = Position >> 3;
000004  08d9              LSRS     r1,r3,#3
;;;26     	uint32_t Offset = Position & 0x7;
000006  f0030407          AND      r4,r3,#7
;;;27     
;;;28     	if(PixelState)
00000a  b12a              CBZ      r2,|L18.24|
;;;29     	{
;;;30     		BitStream[BaseAddress] |= (1<<Offset);
00000c  5c45              LDRB     r5,[r0,r1]
00000e  2601              MOVS     r6,#1
000010  40a6              LSLS     r6,r6,r4
000012  4335              ORRS     r5,r5,r6
000014  5445              STRB     r5,[r0,r1]
000016  e004              B        |L18.34|
                  |L18.24|
;;;31     	}
;;;32     	else
;;;33     	{
;;;34     		BitStream[BaseAddress] &= ~(1<<Offset);
000018  5c45              LDRB     r5,[r0,r1]
00001a  2601              MOVS     r6,#1
00001c  40a6              LSLS     r6,r6,r4
00001e  43b5              BICS     r5,r5,r6
000020  5445              STRB     r5,[r0,r1]
                  |L18.34|
;;;35     	}
;;;36     }
000022  bd70              POP      {r4-r6,pc}
;;;37     
                          ENDP


                          AREA ||i.eGFX_Blit||, CODE, READONLY, ALIGN=1

                  eGFX_Blit PROC
;;;1366   //x,y is a the upper left corner of the blit, not the center
;;;1367   void eGFX_Blit(eGFX_ImagePlane *Destination,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1368   	int16_t x,
;;;1369   	int16_t y,
;;;1370   	const eGFX_ImagePlane *Sprite)
;;;1371   {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;1372       uint16_t i,j;
;;;1373   
;;;1374       for(j=0; j<Sprite->SizeY; j++)
00000c  2600              MOVS     r6,#0
00000e  e017              B        |L19.64|
                  |L19.16|
;;;1375       {
;;;1376           for(i=0; i<Sprite->SizeX; i++)
000010  2500              MOVS     r5,#0
000012  e010              B        |L19.54|
                  |L19.20|
;;;1377           {
;;;1378   			eGFX_PutPixel(Destination, x + i, y + j, eGFX_GetPixel(Sprite, i, j));
000014  b232              SXTH     r2,r6
000016  b229              SXTH     r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       eGFX_GetPixel
00001e  4682              MOV      r10,r0
000020  eb080006          ADD      r0,r8,r6
000024  b202              SXTH     r2,r0
000026  1978              ADDS     r0,r7,r5
000028  b201              SXTH     r1,r0
00002a  4653              MOV      r3,r10
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       eGFX_PutPixel
000032  1c68              ADDS     r0,r5,#1              ;1376
000034  b285              UXTH     r5,r0                 ;1376
                  |L19.54|
000036  8920              LDRH     r0,[r4,#8]            ;1376
000038  42a8              CMP      r0,r5                 ;1376
00003a  dceb              BGT      |L19.20|
00003c  1c70              ADDS     r0,r6,#1              ;1374
00003e  b286              UXTH     r6,r0                 ;1374
                  |L19.64|
000040  8960              LDRH     r0,[r4,#0xa]          ;1374
000042  42b0              CMP      r0,r6                 ;1374
000044  dce4              BGT      |L19.16|
;;;1379           }
;;;1380   
;;;1381       }
;;;1382   }
000046  e8bd87f0          POP      {r4-r10,pc}
;;;1383   
                          ENDP


                          AREA ||i.eGFX_BlitColored||, CODE, READONLY, ALIGN=1

                  eGFX_BlitColored PROC
;;;1454   //x,y is a the upper left corner of the blit, not the center
;;;1455   void eGFX_BlitColored(eGFX_ImagePlane *Destination,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1456   	int16_t x,
;;;1457   	int16_t y,
;;;1458   	const eGFX_ImagePlane *Sprite,
;;;1459   	uint32_t Color)
;;;1460   {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;1461   	uint16_t i, j;
;;;1462   
;;;1463   	for (j = 0; j<Sprite->SizeY; j++)
000010  2600              MOVS     r6,#0
000012  e017              B        |L20.68|
                  |L20.20|
;;;1464   	{
;;;1465   		for (i = 0; i<Sprite->SizeX; i++)
000014  2500              MOVS     r5,#0
000016  e010              B        |L20.58|
                  |L20.24|
;;;1466   		{
;;;1467               if(eGFX_GetPixel(Sprite, i, j))
000018  b232              SXTH     r2,r6
00001a  b229              SXTH     r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       eGFX_GetPixel
000022  b140              CBZ      r0,|L20.54|
;;;1468                   eGFX_PutPixel(Destination, x + i, y + j,Color);
000024  eb080006          ADD      r0,r8,r6
000028  b202              SXTH     r2,r0
00002a  1978              ADDS     r0,r7,r5
00002c  b201              SXTH     r1,r0
00002e  4653              MOV      r3,r10
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       eGFX_PutPixel
                  |L20.54|
000036  1c68              ADDS     r0,r5,#1              ;1465
000038  b285              UXTH     r5,r0                 ;1465
                  |L20.58|
00003a  8920              LDRH     r0,[r4,#8]            ;1465
00003c  42a8              CMP      r0,r5                 ;1465
00003e  dceb              BGT      |L20.24|
000040  1c70              ADDS     r0,r6,#1              ;1463
000042  b286              UXTH     r6,r0                 ;1463
                  |L20.68|
000044  8960              LDRH     r0,[r4,#0xa]          ;1463
000046  42b0              CMP      r0,r6                 ;1463
000048  dce4              BGT      |L20.20|
;;;1469   		}
;;;1470   
;;;1471   	}
;;;1472   }
00004a  e8bd87f0          POP      {r4-r10,pc}
;;;1473   
                          ENDP


                          AREA ||i.eGFX_BlitFaded||, CODE, READONLY, ALIGN=1

                  eGFX_BlitFaded PROC
;;;1411   //x,y is a the upper left corner of the blit, not the center
;;;1412   void eGFX_BlitFaded(eGFX_ImagePlane *Destination,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1413                  int16_t x,
;;;1414                  int16_t y,
;;;1415                  const eGFX_ImagePlane *Sprite,
;;;1416                  eGFX_PixelState PS)
;;;1417   {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  f8dda024          LDR      r10,[sp,#0x24]
;;;1418       uint16_t i,j;
;;;1419   
;;;1420       for(j=0; j<Sprite->SizeY; j++)
000010  2600              MOVS     r6,#0
000012  e01a              B        |L21.74|
                  |L21.20|
;;;1421       {
;;;1422           for(i=0; i<Sprite->SizeX; i++)
000014  2500              MOVS     r5,#0
000016  e013              B        |L21.64|
                  |L21.24|
;;;1423           {
;;;1424   			eGFX_PutPixel(Destination, x + i, y + j, (eGFX_GetPixel(Sprite, i, j) * PS)>>8);
000018  b232              SXTH     r2,r6
00001a  b229              SXTH     r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       eGFX_GetPixel
000022  fb00f00a          MUL      r0,r0,r10
000026  ea4f2b10          LSR      r11,r0,#8
00002a  eb080006          ADD      r0,r8,r6
00002e  b202              SXTH     r2,r0
000030  1978              ADDS     r0,r7,r5
000032  b201              SXTH     r1,r0
000034  465b              MOV      r3,r11
000036  4648              MOV      r0,r9
000038  f7fffffe          BL       eGFX_PutPixel
00003c  1c68              ADDS     r0,r5,#1              ;1422
00003e  b285              UXTH     r5,r0                 ;1422
                  |L21.64|
000040  8920              LDRH     r0,[r4,#8]            ;1422
000042  42a8              CMP      r0,r5                 ;1422
000044  dce8              BGT      |L21.24|
000046  1c70              ADDS     r0,r6,#1              ;1420
000048  b286              UXTH     r6,r0                 ;1420
                  |L21.74|
00004a  8960              LDRH     r0,[r4,#0xa]          ;1420
00004c  42b0              CMP      r0,r6                 ;1420
00004e  dce1              BGT      |L21.20|
;;;1425           }
;;;1426   
;;;1427       }
;;;1428   }
000050  e8bd8ff0          POP      {r4-r11,pc}
;;;1429   
                          ENDP


                          AREA ||i.eGFX_BlitShaded||, CODE, READONLY, ALIGN=2

                  eGFX_BlitShaded PROC
;;;1430   //x,y is a the upper left corner of the blit, not the center
;;;1431   void eGFX_BlitShaded(eGFX_ImagePlane *Destination,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1432   	int16_t x,
;;;1433   	int16_t y,
;;;1434   	const eGFX_ImagePlane *Sprite,
;;;1435   	float Shading)
;;;1436   {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;1437   	uint16_t i, j;
;;;1438   
;;;1439   	if (Shading < 0.0f)
00000c  eeb50ac0          VCMPE.F32 s0,#0.0
000010  eef1fa10          VMRS     APSR_nzcv,FPSCR
000014  d203              BCS      |L22.30|
;;;1440   		Shading = 0.0f;
000016  eddf0a1b          VLDR     s1,|L22.132|
00001a  eeb00a60          VMOV.F32 s0,s1
                  |L22.30|
;;;1441   	if (Shading >1.0f)
00001e  eef70a00          VMOV.F32 s1,#1.00000000
000022  eeb40ae0          VCMPE.F32 s0,s1
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002a  dd03              BLE      |L22.52|
;;;1442   		Shading = 1.0f;
00002c  eef70a00          VMOV.F32 s1,#1.00000000
000030  eeb00a60          VMOV.F32 s0,s1
                  |L22.52|
;;;1443   
;;;1444   	for (j = 0; j<Sprite->SizeY; j++)
000034  2400              MOVS     r4,#0
000036  e020              B        |L22.122|
                  |L22.56|
;;;1445   	{
;;;1446   		for (i = 0; i<Sprite->SizeX; i++)
000038  2600              MOVS     r6,#0
00003a  e019              B        |L22.112|
                  |L22.60|
;;;1447   		{
;;;1448   			eGFX_PutPixel(Destination, x + i, y + j,(eGFX_PixelState) (eGFX_GetPixel(Sprite, i, j) * Shading));
00003c  b222              SXTH     r2,r4
00003e  b231              SXTH     r1,r6
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       eGFX_GetPixel
000046  ee000a90          VMOV     s1,r0
00004a  eef80a60          VCVT.F32.U32 s1,s1
00004e  ee600a80          VMUL.F32 s1,s1,s0
000052  eefc0ae0          VCVT.U32.F32 s1,s1
000056  ee10aa90          VMOV     r10,s1
00005a  eb080004          ADD      r0,r8,r4
00005e  b202              SXTH     r2,r0
000060  19b8              ADDS     r0,r7,r6
000062  b201              SXTH     r1,r0
000064  4653              MOV      r3,r10
000066  4648              MOV      r0,r9
000068  f7fffffe          BL       eGFX_PutPixel
00006c  1c70              ADDS     r0,r6,#1              ;1446
00006e  b286              UXTH     r6,r0                 ;1446
                  |L22.112|
000070  8928              LDRH     r0,[r5,#8]            ;1446
000072  42b0              CMP      r0,r6                 ;1446
000074  dce2              BGT      |L22.60|
000076  1c60              ADDS     r0,r4,#1              ;1444
000078  b284              UXTH     r4,r0                 ;1444
                  |L22.122|
00007a  8968              LDRH     r0,[r5,#0xa]          ;1444
00007c  42a0              CMP      r0,r4                 ;1444
00007e  dcdb              BGT      |L22.56|
;;;1449   		}
;;;1450   
;;;1451   	}
;;;1452   }
000080  e8bd87f0          POP      {r4-r10,pc}
;;;1453   
                          ENDP

                  |L22.132|
000084  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.eGFX_CenteredBlit||, CODE, READONLY, ALIGN=1

                  eGFX_CenteredBlit PROC
;;;1385   
;;;1386   void eGFX_CenteredBlit(eGFX_ImagePlane *Destination,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1387   	int16_t x,
;;;1388   	int16_t y,
;;;1389   	const eGFX_ImagePlane *Sprite)
;;;1390   {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;1391   	uint16_t i, j;
;;;1392   
;;;1393   	uint16_t X_Offset;
;;;1394   	uint16_t Y_Offset;
;;;1395   
;;;1396   	X_Offset = (Sprite->SizeX + 1) >> 1;
00000c  8920              LDRH     r0,[r4,#8]
00000e  1c40              ADDS     r0,r0,#1
000010  ea4f0a60          ASR      r10,r0,#1
;;;1397   	Y_Offset = (Sprite->SizeY + 1) >> 1;
000014  8960              LDRH     r0,[r4,#0xa]
000016  1c40              ADDS     r0,r0,#1
000018  ea4f0b60          ASR      r11,r0,#1
;;;1398   
;;;1399   	for (j = 0; j<Sprite->SizeY; j++)
00001c  2600              MOVS     r6,#0
00001e  e01b              B        |L23.88|
                  |L23.32|
;;;1400   	{
;;;1401   		for (i = 0; i<Sprite->SizeX; i++)
000020  2500              MOVS     r5,#0
000022  e014              B        |L23.78|
                  |L23.36|
;;;1402   		{
;;;1403   			eGFX_PutPixel(Destination, x + i - X_Offset,
000024  b232              SXTH     r2,r6
000026  b229              SXTH     r1,r5
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       eGFX_GetPixel
00002e  9000              STR      r0,[sp,#0]
000030  eb080006          ADD      r0,r8,r6
000034  eba0000b          SUB      r0,r0,r11
000038  b202              SXTH     r2,r0
00003a  1978              ADDS     r0,r7,r5
00003c  eba0000a          SUB      r0,r0,r10
000040  b201              SXTH     r1,r0
000042  4648              MOV      r0,r9
000044  9b00              LDR      r3,[sp,#0]
000046  f7fffffe          BL       eGFX_PutPixel
00004a  1c68              ADDS     r0,r5,#1              ;1401
00004c  b285              UXTH     r5,r0                 ;1401
                  |L23.78|
00004e  8920              LDRH     r0,[r4,#8]            ;1401
000050  42a8              CMP      r0,r5                 ;1401
000052  dce7              BGT      |L23.36|
000054  1c70              ADDS     r0,r6,#1              ;1399
000056  b286              UXTH     r6,r0                 ;1399
                  |L23.88|
000058  8960              LDRH     r0,[r4,#0xa]          ;1399
00005a  42b0              CMP      r0,r6                 ;1399
00005c  dce0              BGT      |L23.32|
;;;1404   									   y + j - Y_Offset,
;;;1405   										eGFX_GetPixel(Sprite, i, j));
;;;1406   		}
;;;1407   
;;;1408   	}
;;;1409   }
00005e  e8bd8ff8          POP      {r3-r11,pc}
;;;1410   
                          ENDP


                          AREA ||i.eGFX_ClearAnimators||, CODE, READONLY, ALIGN=2

                  eGFX_ClearAnimators PROC
;;;1880   }
;;;1881   void eGFX_ClearAnimators()
000000  2000              MOVS     r0,#0
;;;1882   {
;;;1883   	eGFX_AnimatorEndIndex = 0;
000002  4901              LDR      r1,|L24.8|
000004  6008              STR      r0,[r1,#0]  ; eGFX_AnimatorEndIndex
;;;1884   }
000006  4770              BX       lr
;;;1885   
                          ENDP

                  |L24.8|
                          DCD      eGFX_AnimatorEndIndex

                          AREA ||i.eGFX_ClearObjects||, CODE, READONLY, ALIGN=2

                  eGFX_ClearObjects PROC
;;;2467   
;;;2468   void eGFX_ClearObjects()
000000  2000              MOVS     r0,#0
;;;2469   {
;;;2470   	eGFX_ObjectEndIndex = 0;
000002  4901              LDR      r1,|L25.8|
000004  6008              STR      r0,[r1,#0]  ; eGFX_ObjectEndIndex
;;;2471   }
000006  4770              BX       lr
;;;2472   
                          ENDP

                  |L25.8|
                          DCD      eGFX_ObjectEndIndex

                          AREA ||i.eGFX_DisableObject||, CODE, READONLY, ALIGN=1

                  eGFX_DisableObject PROC
;;;2449   
;;;2450   void eGFX_DisableObject(void * Object)
000000  b108              CBZ      r0,|L26.6|
;;;2451   {
;;;2452   	if(Object!=NULL)
;;;2453   	{
;;;2454   		((eGFX_ObjectHeader *)Object)->State = eGFX_OBJECT_STATE_INACTIVE;
000002  2100              MOVS     r1,#0
000004  6041              STR      r1,[r0,#4]
                  |L26.6|
;;;2455   
;;;2456   	}
;;;2457   
;;;2458   }
000006  4770              BX       lr
;;;2459   
                          ENDP


                          AREA ||i.eGFX_DrawBox||, CODE, READONLY, ALIGN=1

                  eGFX_DrawBox PROC
;;;307    
;;;308    void eGFX_DrawBox(eGFX_ImagePlane *Image,
000000  b578              PUSH     {r3-r6,lr}
;;;309                      eGFX_Box *Box,
;;;310                      eGFX_PixelState PS)
;;;311    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;312        eGFX_DrawHline(Image, Box->P1.X, Box->P2.X,Box->P1.Y,PS);
000008  9500              STR      r5,[sp,#0]
00000a  f9b43002          LDRSH    r3,[r4,#2]
00000e  f9b42004          LDRSH    r2,[r4,#4]
000012  f9b41000          LDRSH    r1,[r4,#0]
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       eGFX_DrawHline
;;;313        eGFX_DrawHline(Image, Box->P1.X, Box->P2.X,Box->P2.Y,PS);
00001c  9500              STR      r5,[sp,#0]
00001e  f9b43006          LDRSH    r3,[r4,#6]
000022  f9b42004          LDRSH    r2,[r4,#4]
000026  f9b41000          LDRSH    r1,[r4,#0]
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       eGFX_DrawHline
;;;314        eGFX_DrawVline(Image, Box->P1.Y, Box->P2.Y,Box->P1.X,PS);
000030  9500              STR      r5,[sp,#0]
000032  f9b43000          LDRSH    r3,[r4,#0]
000036  f9b42006          LDRSH    r2,[r4,#6]
00003a  f9b41002          LDRSH    r1,[r4,#2]
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       eGFX_DrawVline
;;;315        eGFX_DrawVline(Image, Box->P1.Y, Box->P2.Y,Box->P2.X,PS);
000044  9500              STR      r5,[sp,#0]
000046  f9b43004          LDRSH    r3,[r4,#4]
00004a  f9b42006          LDRSH    r2,[r4,#6]
00004e  f9b41002          LDRSH    r1,[r4,#2]
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       eGFX_DrawVline
;;;316    }
000058  bd78              POP      {r3-r6,pc}
;;;317    
                          ENDP


                          AREA ||i.eGFX_DrawCharacter||, CODE, READONLY, ALIGN=1

                  eGFX_DrawCharacter PROC
;;;955    
;;;956    int16_t eGFX_DrawCharacter(eGFX_ImagePlane *Image,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;957    	int16_t StartX,
;;;958    	int16_t StartY,
;;;959    	uint8_t Character,
;;;960    	const eGFX_Font *MyFont)
;;;961    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  9e06              LDR      r6,[sp,#0x18]
;;;962        //eGFX_Font does not contain any of the ASCII control codes
;;;963        if(Character<0x20)
00000e  2c20              CMP      r4,#0x20
000010  da02              BGE      |L28.24|
;;;964            return StartX;
000012  4628              MOV      r0,r5
                  |L28.20|
;;;965    
;;;966        Character = Character - 0x20;
;;;967    
;;;968        if(Character == 0x00)
;;;969        {
;;;970    		return StartX + (MyFont->CharacterSprites[0]->SizeX);
;;;971    	}
;;;972        else
;;;973        {
;;;974            eGFX_Blit(Image,StartX,StartY,MyFont->CharacterSprites[Character]);
;;;975        }
;;;976    
;;;977        StartX += MyFont->CharacterSprites[Character]->SizeX;
;;;978        return StartX;
;;;979    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L28.24|
000018  f1a40020          SUB      r0,r4,#0x20           ;966
00001c  b2c4              UXTB     r4,r0                 ;966
00001e  b924              CBNZ     r4,|L28.42|
000020  6830              LDR      r0,[r6,#0]            ;970
000022  8900              LDRH     r0,[r0,#8]            ;970
000024  4428              ADD      r0,r0,r5              ;970
000026  b200              SXTH     r0,r0                 ;970
000028  e7f4              B        |L28.20|
                  |L28.42|
00002a  f8563024          LDR      r3,[r6,r4,LSL #2]     ;974
00002e  4642              MOV      r2,r8                 ;974
000030  4629              MOV      r1,r5                 ;974
000032  4638              MOV      r0,r7                 ;974
000034  f7fffffe          BL       eGFX_Blit
000038  f8560024          LDR      r0,[r6,r4,LSL #2]     ;977
00003c  8900              LDRH     r0,[r0,#8]            ;977
00003e  4428              ADD      r0,r0,r5              ;977
000040  b205              SXTH     r5,r0                 ;977
000042  4628              MOV      r0,r5                 ;978
000044  e7e6              B        |L28.20|
;;;980    
                          ENDP


                          AREA ||i.eGFX_DrawCharacterColored||, CODE, READONLY, ALIGN=1

                  eGFX_DrawCharacterColored PROC
;;;1007   
;;;1008   int16_t eGFX_DrawCharacterColored(eGFX_ImagePlane *Image,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1009                              int16_t StartX,
;;;1010                              int16_t StartY,
;;;1011                              uint8_t Character,
;;;1012                              const eGFX_Font *MyFont,
;;;1013                              eGFX_PixelState Color)
;;;1014   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  e9dd6908          LDRD     r6,r9,[sp,#0x20]
;;;1015       //eGFX_Font does not contain any of the ASCII control codes
;;;1016       if(Character<0x20)
000010  2c20              CMP      r4,#0x20
000012  da02              BGE      |L29.26|
;;;1017           return StartX;
000014  4628              MOV      r0,r5
                  |L29.22|
;;;1018   
;;;1019       Character = Character - 0x20;
;;;1020   
;;;1021       if(Character == 0x00)
;;;1022       {
;;;1023   		return StartX + (MyFont->CharacterSprites[0]->SizeX);
;;;1024   	}
;;;1025       else
;;;1026       {
;;;1027           eGFX_BlitColored(Image,StartX,StartY,MyFont->CharacterSprites[Character],Color);
;;;1028       }
;;;1029   
;;;1030       StartX += MyFont->CharacterSprites[Character]->SizeX;
;;;1031       return StartX;
;;;1032   }
000016  e8bd83f8          POP      {r3-r9,pc}
                  |L29.26|
00001a  f1a40020          SUB      r0,r4,#0x20           ;1019
00001e  b2c4              UXTB     r4,r0                 ;1019
000020  b924              CBNZ     r4,|L29.44|
000022  6830              LDR      r0,[r6,#0]            ;1023
000024  8900              LDRH     r0,[r0,#8]            ;1023
000026  4428              ADD      r0,r0,r5              ;1023
000028  b200              SXTH     r0,r0                 ;1023
00002a  e7f4              B        |L29.22|
                  |L29.44|
00002c  f8cd9000          STR      r9,[sp,#0]            ;1027
000030  f8563024          LDR      r3,[r6,r4,LSL #2]     ;1027
000034  4642              MOV      r2,r8                 ;1027
000036  4629              MOV      r1,r5                 ;1027
000038  4638              MOV      r0,r7                 ;1027
00003a  f7fffffe          BL       eGFX_BlitColored
00003e  f8560024          LDR      r0,[r6,r4,LSL #2]     ;1030
000042  8900              LDRH     r0,[r0,#8]            ;1030
000044  4428              ADD      r0,r0,r5              ;1030
000046  b205              SXTH     r5,r0                 ;1030
000048  4628              MOV      r0,r5                 ;1031
00004a  e7e4              B        |L29.22|
;;;1033   
                          ENDP


                          AREA ||i.eGFX_DrawCharacterFaded||, CODE, READONLY, ALIGN=1

                  eGFX_DrawCharacterFaded PROC
;;;980    
;;;981    int16_t eGFX_DrawCharacterFaded(eGFX_ImagePlane *Image,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;982                               int16_t StartX,
;;;983                               int16_t StartY,
;;;984                               uint8_t Character,
;;;985                               const eGFX_Font *MyFont,
;;;986                               eGFX_PixelState PS)
;;;987    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  e9dd6908          LDRD     r6,r9,[sp,#0x20]
;;;988        //eGFX_Font does not contain any of the ASCII control codes
;;;989        if(Character<0x20)
000010  2c20              CMP      r4,#0x20
000012  da02              BGE      |L30.26|
;;;990            return StartX;
000014  4628              MOV      r0,r5
                  |L30.22|
;;;991    
;;;992        Character = Character - 0x20;
;;;993    
;;;994        if(Character == 0x00)
;;;995        {
;;;996    		return StartX + (MyFont->CharacterSprites[0]->SizeX);
;;;997    	}
;;;998        else
;;;999        {
;;;1000           eGFX_BlitFaded(Image,StartX,StartY,MyFont->CharacterSprites[Character],PS);
;;;1001       }
;;;1002   
;;;1003       StartX += MyFont->CharacterSprites[Character]->SizeX;
;;;1004       return StartX;
;;;1005   }
000016  e8bd83f8          POP      {r3-r9,pc}
                  |L30.26|
00001a  f1a40020          SUB      r0,r4,#0x20           ;992
00001e  b2c4              UXTB     r4,r0                 ;992
000020  b924              CBNZ     r4,|L30.44|
000022  6830              LDR      r0,[r6,#0]            ;996
000024  8900              LDRH     r0,[r0,#8]            ;996
000026  4428              ADD      r0,r0,r5              ;996
000028  b200              SXTH     r0,r0                 ;996
00002a  e7f4              B        |L30.22|
                  |L30.44|
00002c  f8cd9000          STR      r9,[sp,#0]            ;1000
000030  f8563024          LDR      r3,[r6,r4,LSL #2]     ;1000
000034  4642              MOV      r2,r8                 ;1000
000036  4629              MOV      r1,r5                 ;1000
000038  4638              MOV      r0,r7                 ;1000
00003a  f7fffffe          BL       eGFX_BlitFaded
00003e  f8560024          LDR      r0,[r6,r4,LSL #2]     ;1003
000042  8900              LDRH     r0,[r0,#8]            ;1003
000044  4428              ADD      r0,r0,r5              ;1003
000046  b205              SXTH     r5,r0                 ;1003
000048  4628              MOV      r0,r5                 ;1004
00004a  e7e4              B        |L30.22|
;;;1006   
                          ENDP


                          AREA ||i.eGFX_DrawCharacterShaded||, CODE, READONLY, ALIGN=1

                  eGFX_DrawCharacterShaded PROC
;;;1034   
;;;1035   int16_t eGFX_DrawCharacterShaded(eGFX_ImagePlane *Image,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1036   	int16_t StartX,
;;;1037   	int16_t StartY,
;;;1038   	uint8_t Character,
;;;1039   	const eGFX_Font *MyFont,
;;;1040   	float Shading)
;;;1041   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  eeb01a40          VMOV.F32 s2,s0
000010  9e06              LDR      r6,[sp,#0x18]
;;;1042   	//eGFX_Font does not contain any of the ASCII control codes
;;;1043   	if (Character<0x20)
000012  2c20              CMP      r4,#0x20
000014  da02              BGE      |L31.28|
;;;1044   		return StartX;
000016  4628              MOV      r0,r5
                  |L31.24|
;;;1045   
;;;1046   	Character = Character - 0x20;
;;;1047   
;;;1048   	if (Character == 0x00)
;;;1049   	{
;;;1050   		return StartX + (MyFont->CharacterSprites[0]->SizeX);
;;;1051   	}
;;;1052   	else
;;;1053   	{
;;;1054   		eGFX_BlitShaded(Image, StartX, StartY, MyFont->CharacterSprites[Character], Shading);
;;;1055   	}
;;;1056   
;;;1057   	StartX += MyFont->CharacterSprites[Character]->SizeX;
;;;1058   	return StartX;
;;;1059   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L31.28|
00001c  f1a40020          SUB      r0,r4,#0x20           ;1046
000020  b2c4              UXTB     r4,r0                 ;1046
000022  b924              CBNZ     r4,|L31.46|
000024  6830              LDR      r0,[r6,#0]            ;1050
000026  8900              LDRH     r0,[r0,#8]            ;1050
000028  4428              ADD      r0,r0,r5              ;1050
00002a  b200              SXTH     r0,r0                 ;1050
00002c  e7f4              B        |L31.24|
                  |L31.46|
00002e  f8563024          LDR      r3,[r6,r4,LSL #2]     ;1054
000032  eeb00a41          VMOV.F32 s0,s2                 ;1054
000036  4642              MOV      r2,r8                 ;1054
000038  4629              MOV      r1,r5                 ;1054
00003a  4638              MOV      r0,r7                 ;1054
00003c  f7fffffe          BL       eGFX_BlitShaded
000040  f8560024          LDR      r0,[r6,r4,LSL #2]     ;1057
000044  8900              LDRH     r0,[r0,#8]            ;1057
000046  4428              ADD      r0,r0,r5              ;1057
000048  b205              SXTH     r5,r0                 ;1057
00004a  4628              MOV      r0,r5                 ;1058
00004c  e7e4              B        |L31.24|
;;;1060   
                          ENDP


                          AREA ||i.eGFX_DrawCircle||, CODE, READONLY, ALIGN=1

                  eGFX_DrawCircle PROC
;;;817    // midpoint circle algorithm
;;;818    void eGFX_DrawCircle(eGFX_ImagePlane *RC,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;819                         int16_t x0,
;;;820                         int16_t y0,
;;;821                         int16_t radius,
;;;822                         eGFX_PixelState PS)
;;;823    {
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
000008  4698              MOV      r8,r3
;;;824        int16_t f = 1 - radius;
00000a  f1c80001          RSB      r0,r8,#1
00000e  fa0ff980          SXTH     r9,r0
;;;825        int16_t ddF_x = 1;
000012  f04f0a01          MOV      r10,#1
;;;826        int16_t ddF_y = -2 * radius;
000016  ea4f0048          LSL      r0,r8,#1
00001a  4240              RSBS     r0,r0,#0
00001c  fa0ffb80          SXTH     r11,r0
;;;827        int16_t x = 0;
000020  2700              MOVS     r7,#0
;;;828        int16_t y = radius;
000022  4646              MOV      r6,r8
;;;829    
;;;830    	if (radius == 0)
000024  f1b80f00          CMP      r8,#0
000028  d101              BNE      |L32.46|
                  |L32.42|
;;;831    		return;
;;;832    
;;;833        eGFX_PutPixel(RC, x0, y0 + radius, PS);
;;;834        eGFX_PutPixel(RC, x0, y0 - radius, PS);
;;;835        eGFX_PutPixel(RC, x0 + radius, y0, PS);
;;;836        eGFX_PutPixel(RC, x0 - radius, y0, PS);
;;;837    
;;;838    
;;;839        while(x < y)
;;;840        {
;;;841            // ddF_x == 2 * x + 1;
;;;842            // ddF_y == -2 * y;
;;;843            // f == x*x + y*y - radius*radius + 2*x - y + 1;
;;;844            if(f >= 0)
;;;845            {
;;;846                y--;
;;;847                ddF_y += 2;
;;;848                f += ddF_y;
;;;849            }
;;;850    
;;;851            x++;
;;;852            ddF_x += 2;
;;;853            f += ddF_x;
;;;854            eGFX_PutPixel(RC, x0 + x, y0 + y, PS);
;;;855            eGFX_PutPixel(RC, x0 - x, y0 + y, PS);
;;;856            eGFX_PutPixel(RC, x0 + x, y0 - y, PS);
;;;857            eGFX_PutPixel(RC, x0 - x, y0 - y, PS);
;;;858            eGFX_PutPixel(RC, x0 + y, y0 + x, PS);
;;;859            eGFX_PutPixel(RC, x0 - y, y0 + x, PS);
;;;860            eGFX_PutPixel(RC, x0 + y, y0 - x, PS);
;;;861            eGFX_PutPixel(RC, x0 - y, y0 - x, PS);
;;;862        }
;;;863    }
00002a  e8bd8fff          POP      {r0-r11,pc}
                  |L32.46|
00002e  eb050008          ADD      r0,r5,r8              ;833
000032  b202              SXTH     r2,r0                 ;833
000034  4621              MOV      r1,r4                 ;833
000036  9b0d              LDR      r3,[sp,#0x34]         ;833
000038  9800              LDR      r0,[sp,#0]            ;833
00003a  f7fffffe          BL       eGFX_PutPixel
00003e  eba50008          SUB      r0,r5,r8              ;834
000042  b202              SXTH     r2,r0                 ;834
000044  4621              MOV      r1,r4                 ;834
000046  9b0d              LDR      r3,[sp,#0x34]         ;834
000048  9800              LDR      r0,[sp,#0]            ;834
00004a  f7fffffe          BL       eGFX_PutPixel
00004e  eb040008          ADD      r0,r4,r8              ;835
000052  b201              SXTH     r1,r0                 ;835
000054  462a              MOV      r2,r5                 ;835
000056  9b0d              LDR      r3,[sp,#0x34]         ;835
000058  9800              LDR      r0,[sp,#0]            ;835
00005a  f7fffffe          BL       eGFX_PutPixel
00005e  eba40008          SUB      r0,r4,r8              ;836
000062  b201              SXTH     r1,r0                 ;836
000064  462a              MOV      r2,r5                 ;836
000066  9b0d              LDR      r3,[sp,#0x34]         ;836
000068  9800              LDR      r0,[sp,#0]            ;836
00006a  f7fffffe          BL       eGFX_PutPixel
00006e  e056              B        |L32.286|
                  |L32.112|
000070  f1b90f00          CMP      r9,#0                 ;844
000074  db09              BLT      |L32.138|
000076  1e70              SUBS     r0,r6,#1              ;846
000078  b206              SXTH     r6,r0                 ;846
00007a  f10b0002          ADD      r0,r11,#2             ;847
00007e  fa0ffb80          SXTH     r11,r0                ;847
000082  eb09000b          ADD      r0,r9,r11             ;848
000086  fa0ff980          SXTH     r9,r0                 ;848
                  |L32.138|
00008a  1c78              ADDS     r0,r7,#1              ;851
00008c  b207              SXTH     r7,r0                 ;851
00008e  f10a0002          ADD      r0,r10,#2             ;852
000092  fa0ffa80          SXTH     r10,r0                ;852
000096  eb09000a          ADD      r0,r9,r10             ;853
00009a  fa0ff980          SXTH     r9,r0                 ;853
00009e  19a8              ADDS     r0,r5,r6              ;854
0000a0  b202              SXTH     r2,r0                 ;854
0000a2  19e0              ADDS     r0,r4,r7              ;854
0000a4  b201              SXTH     r1,r0                 ;854
0000a6  9b0d              LDR      r3,[sp,#0x34]         ;854
0000a8  9800              LDR      r0,[sp,#0]            ;854
0000aa  f7fffffe          BL       eGFX_PutPixel
0000ae  19a8              ADDS     r0,r5,r6              ;855
0000b0  b202              SXTH     r2,r0                 ;855
0000b2  1be0              SUBS     r0,r4,r7              ;855
0000b4  b201              SXTH     r1,r0                 ;855
0000b6  9b0d              LDR      r3,[sp,#0x34]         ;855
0000b8  9800              LDR      r0,[sp,#0]            ;855
0000ba  f7fffffe          BL       eGFX_PutPixel
0000be  1ba8              SUBS     r0,r5,r6              ;856
0000c0  b202              SXTH     r2,r0                 ;856
0000c2  19e0              ADDS     r0,r4,r7              ;856
0000c4  b201              SXTH     r1,r0                 ;856
0000c6  9b0d              LDR      r3,[sp,#0x34]         ;856
0000c8  9800              LDR      r0,[sp,#0]            ;856
0000ca  f7fffffe          BL       eGFX_PutPixel
0000ce  1ba8              SUBS     r0,r5,r6              ;857
0000d0  b202              SXTH     r2,r0                 ;857
0000d2  1be0              SUBS     r0,r4,r7              ;857
0000d4  b201              SXTH     r1,r0                 ;857
0000d6  9b0d              LDR      r3,[sp,#0x34]         ;857
0000d8  9800              LDR      r0,[sp,#0]            ;857
0000da  f7fffffe          BL       eGFX_PutPixel
0000de  19e8              ADDS     r0,r5,r7              ;858
0000e0  b202              SXTH     r2,r0                 ;858
0000e2  19a0              ADDS     r0,r4,r6              ;858
0000e4  b201              SXTH     r1,r0                 ;858
0000e6  9b0d              LDR      r3,[sp,#0x34]         ;858
0000e8  9800              LDR      r0,[sp,#0]            ;858
0000ea  f7fffffe          BL       eGFX_PutPixel
0000ee  19e8              ADDS     r0,r5,r7              ;859
0000f0  b202              SXTH     r2,r0                 ;859
0000f2  1ba0              SUBS     r0,r4,r6              ;859
0000f4  b201              SXTH     r1,r0                 ;859
0000f6  9b0d              LDR      r3,[sp,#0x34]         ;859
0000f8  9800              LDR      r0,[sp,#0]            ;859
0000fa  f7fffffe          BL       eGFX_PutPixel
0000fe  1be8              SUBS     r0,r5,r7              ;860
000100  b202              SXTH     r2,r0                 ;860
000102  19a0              ADDS     r0,r4,r6              ;860
000104  b201              SXTH     r1,r0                 ;860
000106  9b0d              LDR      r3,[sp,#0x34]         ;860
000108  9800              LDR      r0,[sp,#0]            ;860
00010a  f7fffffe          BL       eGFX_PutPixel
00010e  1be8              SUBS     r0,r5,r7              ;861
000110  b202              SXTH     r2,r0                 ;861
000112  1ba0              SUBS     r0,r4,r6              ;861
000114  b201              SXTH     r1,r0                 ;861
000116  9b0d              LDR      r3,[sp,#0x34]         ;861
000118  9800              LDR      r0,[sp,#0]            ;861
00011a  f7fffffe          BL       eGFX_PutPixel
                  |L32.286|
00011e  42b7              CMP      r7,r6                 ;839
000120  dba6              BLT      |L32.112|
000122  bf00              NOP      
000124  e781              B        |L32.42|
;;;864    
                          ENDP


                          AREA ||i.eGFX_DrawFilledBox||, CODE, READONLY, ALIGN=1

                  eGFX_DrawFilledBox PROC
;;;294    
;;;295    void eGFX_DrawFilledBox(eGFX_ImagePlane *Image,
000000  b5f8              PUSH     {r3-r7,lr}
;;;296                            eGFX_Box *Box,
;;;297                            eGFX_PixelState PS)
;;;298    {
000002  4607              MOV      r7,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;299        uint16_t i;
;;;300    
;;;301        for(i=Box->P1.Y ; i<Box->P2.Y+1 ; i++)
000008  8860              LDRH     r0,[r4,#2]
00000a  b285              UXTH     r5,r0
00000c  e00a              B        |L33.36|
                  |L33.14|
;;;302        {
;;;303            eGFX_DrawHline(Image, Box->P1.X, Box->P2.X,i,PS);
00000e  9600              STR      r6,[sp,#0]
000010  f9b42004          LDRSH    r2,[r4,#4]
000014  f9b41000          LDRSH    r1,[r4,#0]
000018  b22b              SXTH     r3,r5
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       eGFX_DrawHline
000020  1c68              ADDS     r0,r5,#1              ;301
000022  b285              UXTH     r5,r0                 ;301
                  |L33.36|
000024  f9b40006          LDRSH    r0,[r4,#6]            ;301
000028  1c40              ADDS     r0,r0,#1              ;301
00002a  42a8              CMP      r0,r5                 ;301
00002c  dcef              BGT      |L33.14|
;;;304        }
;;;305    }
00002e  bdf8              POP      {r3-r7,pc}
;;;306    
                          ENDP


                          AREA ||i.eGFX_DrawFilledCircle||, CODE, READONLY, ALIGN=1

                  eGFX_DrawFilledCircle PROC
;;;864    
;;;865    void eGFX_DrawFilledCircle(eGFX_ImagePlane *RC,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;866    	int16_t x0,
;;;867    	int16_t y0,
;;;868    	int16_t radius,
;;;869    	eGFX_PixelState PS)
;;;870    {
000004  b082              SUB      sp,sp,#8
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  f8dd903c          LDR      r9,[sp,#0x3c]
;;;871    	int16_t f = 1 - radius;
000010  f1c50001          RSB      r0,r5,#1
000014  fa0ffa80          SXTH     r10,r0
;;;872    	int16_t ddF_x = 1;
000018  f04f0b01          MOV      r11,#1
;;;873    	int16_t ddF_y = -2 * radius;
00001c  0068              LSLS     r0,r5,#1
00001e  4240              RSBS     r0,r0,#0
000020  b200              SXTH     r0,r0
000022  9001              STR      r0,[sp,#4]
;;;874    	int16_t x = 0;
000024  f04f0800          MOV      r8,#0
;;;875    	int16_t y = radius;
000028  462e              MOV      r6,r5
;;;876    
;;;877    	if (radius == 0)
00002a  b915              CBNZ     r5,|L34.50|
                  |L34.44|
;;;878    		return;
;;;879    
;;;880    	eGFX_DrawHline(RC, x0 - radius, x0 + radius , y0, PS);
;;;881    
;;;882    	eGFX_DrawVline(RC, y0 - radius , y0 + radius , x0, PS);
;;;883    
;;;884    	while (x < y)
;;;885    	{
;;;886    		// ddF_x == 2 * x + 1;
;;;887    		// ddF_y == -2 * y;
;;;888    		// f == x*x + y*y - radius*radius + 2*x - y + 1;
;;;889    		if (f >= 0)
;;;890    		{
;;;891    			y--;
;;;892    			ddF_y += 2;
;;;893    			f += ddF_y;
;;;894    		}
;;;895    
;;;896    		x++;
;;;897    		ddF_x += 2;
;;;898    		f += ddF_x;
;;;899    		
;;;900    		eGFX_DrawHline(RC, x0 - x, x0 + x, y0 + y, PS);
;;;901    
;;;902    		eGFX_DrawHline(RC, x0 - x, x0 + x, y0 - y, PS);
;;;903    
;;;904    
;;;905    		eGFX_DrawHline(RC, x0 - y, x0 + y, y0 + x, PS);
;;;906    
;;;907    		eGFX_DrawHline(RC, x0 - y, x0 + y, y0 - x, PS);
;;;908    
;;;909    //		eGFX_PutPixel(RC, x0 + y, y0 + x, PS);
;;;910    	//	eGFX_PutPixel(RC, x0 - y, y0 + x, PS);
;;;911    	//	eGFX_PutPixel(RC, x0 + y, y0 - x, PS);
;;;912    	//	eGFX_PutPixel(RC, x0 - y, y0 - x, PS);
;;;913    	}
;;;914    }
00002c  b006              ADD      sp,sp,#0x18
00002e  e8bd8ff0          POP      {r4-r11,pc}
                  |L34.50|
000032  1960              ADDS     r0,r4,r5              ;880
000034  b202              SXTH     r2,r0                 ;880
000036  1b60              SUBS     r0,r4,r5              ;880
000038  b201              SXTH     r1,r0                 ;880
00003a  463b              MOV      r3,r7                 ;880
00003c  f8cd9000          STR      r9,[sp,#0]            ;880
000040  9802              LDR      r0,[sp,#8]            ;880
000042  f7fffffe          BL       eGFX_DrawHline
000046  1978              ADDS     r0,r7,r5              ;882
000048  b202              SXTH     r2,r0                 ;882
00004a  1b78              SUBS     r0,r7,r5              ;882
00004c  b201              SXTH     r1,r0                 ;882
00004e  4623              MOV      r3,r4                 ;882
000050  f8cd9000          STR      r9,[sp,#0]            ;882
000054  9802              LDR      r0,[sp,#8]            ;882
000056  f7fffffe          BL       eGFX_DrawVline
00005a  e04a              B        |L34.242|
                  |L34.92|
00005c  f1ba0f00          CMP      r10,#0                ;889
000060  db09              BLT      |L34.118|
000062  1e70              SUBS     r0,r6,#1              ;891
000064  b206              SXTH     r6,r0                 ;891
000066  9801              LDR      r0,[sp,#4]            ;892
000068  1c80              ADDS     r0,r0,#2              ;892
00006a  b200              SXTH     r0,r0                 ;892
00006c  9001              STR      r0,[sp,#4]            ;892
00006e  9801              LDR      r0,[sp,#4]            ;893
000070  4450              ADD      r0,r0,r10             ;893
000072  fa0ffa80          SXTH     r10,r0                ;893
                  |L34.118|
000076  f1080001          ADD      r0,r8,#1              ;896
00007a  fa0ff880          SXTH     r8,r0                 ;896
00007e  f10b0002          ADD      r0,r11,#2             ;897
000082  fa0ffb80          SXTH     r11,r0                ;897
000086  eb0a000b          ADD      r0,r10,r11            ;898
00008a  fa0ffa80          SXTH     r10,r0                ;898
00008e  19b8              ADDS     r0,r7,r6              ;900
000090  b203              SXTH     r3,r0                 ;900
000092  eb040008          ADD      r0,r4,r8              ;900
000096  b202              SXTH     r2,r0                 ;900
000098  eba40008          SUB      r0,r4,r8              ;900
00009c  b201              SXTH     r1,r0                 ;900
00009e  f8cd9000          STR      r9,[sp,#0]            ;900
0000a2  9802              LDR      r0,[sp,#8]            ;900
0000a4  f7fffffe          BL       eGFX_DrawHline
0000a8  1bb8              SUBS     r0,r7,r6              ;902
0000aa  b203              SXTH     r3,r0                 ;902
0000ac  eb040008          ADD      r0,r4,r8              ;902
0000b0  b202              SXTH     r2,r0                 ;902
0000b2  eba40008          SUB      r0,r4,r8              ;902
0000b6  b201              SXTH     r1,r0                 ;902
0000b8  f8cd9000          STR      r9,[sp,#0]            ;902
0000bc  9802              LDR      r0,[sp,#8]            ;902
0000be  f7fffffe          BL       eGFX_DrawHline
0000c2  eb070008          ADD      r0,r7,r8              ;905
0000c6  b203              SXTH     r3,r0                 ;905
0000c8  19a0              ADDS     r0,r4,r6              ;905
0000ca  b202              SXTH     r2,r0                 ;905
0000cc  1ba0              SUBS     r0,r4,r6              ;905
0000ce  b201              SXTH     r1,r0                 ;905
0000d0  f8cd9000          STR      r9,[sp,#0]            ;905
0000d4  9802              LDR      r0,[sp,#8]            ;905
0000d6  f7fffffe          BL       eGFX_DrawHline
0000da  eba70008          SUB      r0,r7,r8              ;907
0000de  b203              SXTH     r3,r0                 ;907
0000e0  19a0              ADDS     r0,r4,r6              ;907
0000e2  b202              SXTH     r2,r0                 ;907
0000e4  1ba0              SUBS     r0,r4,r6              ;907
0000e6  b201              SXTH     r1,r0                 ;907
0000e8  f8cd9000          STR      r9,[sp,#0]            ;907
0000ec  9802              LDR      r0,[sp,#8]            ;907
0000ee  f7fffffe          BL       eGFX_DrawHline
                  |L34.242|
0000f2  45b0              CMP      r8,r6                 ;884
0000f4  dbb2              BLT      |L34.92|
0000f6  bf00              NOP      
0000f8  e798              B        |L34.44|
;;;915    
                          ENDP


                          AREA ||i.eGFX_DrawHline||, CODE, READONLY, ALIGN=1

                  eGFX_DrawHline PROC
;;;246    
;;;247    void eGFX_DrawHline(eGFX_ImagePlane *Image,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;248                        int16_t XStart,
;;;249                        int16_t XStop,
;;;250                        int16_t Y,
;;;251                        eGFX_PixelState PS)
;;;252    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8ddb024          LDR      r11,[sp,#0x24]
;;;253        int16_t LineStart;
;;;254        int16_t LineStop;
;;;255        uint16_t i;
;;;256    
;;;257        if((Y<Image->SizeY)  && (Y>=0))
000010  8970              LDRH     r0,[r6,#0xa]
000012  4548              CMP      r0,r9
000014  dd2b              BLE      |L35.110|
000016  f1b90f00          CMP      r9,#0
00001a  db28              BLT      |L35.110|
;;;258        {
;;;259            if(XStart>XStop)
00001c  4547              CMP      r7,r8
00001e  dd02              BLE      |L35.38|
;;;260            {
;;;261                LineStart = XStop;
000020  4644              MOV      r4,r8
;;;262                LineStop = XStart;
000022  463d              MOV      r5,r7
000024  e001              B        |L35.42|
                  |L35.38|
;;;263            }
;;;264            else
;;;265            {
;;;266                LineStart = XStart;
000026  463c              MOV      r4,r7
;;;267                LineStop = XStop;
000028  4645              MOV      r5,r8
                  |L35.42|
;;;268            }
;;;269    
;;;270            if(LineStart<0)
00002a  2c00              CMP      r4,#0
00002c  da00              BGE      |L35.48|
;;;271            {
;;;272                LineStart = 0;
00002e  2400              MOVS     r4,#0
                  |L35.48|
;;;273            }
;;;274    
;;;275            if(LineStop>Image->SizeX)
000030  8930              LDRH     r0,[r6,#8]
000032  42a8              CMP      r0,r5
000034  da02              BGE      |L35.60|
;;;276            {
;;;277                LineStop = 	Image->SizeX-1;
000036  8930              LDRH     r0,[r6,#8]
000038  1e40              SUBS     r0,r0,#1
00003a  b205              SXTH     r5,r0
                  |L35.60|
;;;278            }
;;;279    
;;;280            if(LineStart == LineStop)
00003c  42ac              CMP      r4,r5
00003e  d106              BNE      |L35.78|
;;;281            {
;;;282                eGFX_PutPixel(Image,LineStart,Y,PS);
000040  465b              MOV      r3,r11
000042  464a              MOV      r2,r9
000044  4621              MOV      r1,r4
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       eGFX_PutPixel
00004c  e00f              B        |L35.110|
                  |L35.78|
;;;283            }
;;;284            else
;;;285            {
;;;286                for(i=LineStart; i<=LineStop ; i++)
00004e  fa1ffa84          UXTH     r10,r4
000052  e00a              B        |L35.106|
                  |L35.84|
;;;287                {
;;;288                    eGFX_PutPixel(Image,i,Y,PS);
000054  465b              MOV      r3,r11
000056  464a              MOV      r2,r9
000058  fa0ff18a          SXTH     r1,r10
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       eGFX_PutPixel
000062  f10a0001          ADD      r0,r10,#1             ;286
000066  fa1ffa80          UXTH     r10,r0                ;286
                  |L35.106|
00006a  45aa              CMP      r10,r5                ;286
00006c  ddf2              BLE      |L35.84|
                  |L35.110|
;;;289                }
;;;290            }
;;;291        }
;;;292    }
00006e  e8bd8ff0          POP      {r4-r11,pc}
;;;293    
                          ENDP


                          AREA ||i.eGFX_DrawHorizontalCenteredString||, CODE, READONLY, ALIGN=1

                  eGFX_DrawHorizontalCenteredString PROC
;;;1108   
;;;1109   void eGFX_DrawHorizontalCenteredString(eGFX_ImagePlane *Image,
000000  e92d41f8          PUSH     {r3-r8,lr}
;;;1110   										int16_t StartY,
;;;1111   										char *String,
;;;1112   										const eGFX_Font *MyFont)
;;;1113   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;1114       int16_t StartX = 0;
00000c  f04f0800          MOV      r8,#0
;;;1115       StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth(String,MyFont))>>1;
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       eGFX_GetStringWidth
000018  8931              LDRH     r1,[r6,#8]
00001a  b209              SXTH     r1,r1
00001c  1a08              SUBS     r0,r1,r0
00001e  ea4f0860          ASR      r8,r0,#1
;;;1116       eGFX_DrawString(Image,String,StartX,StartY,MyFont);
000022  463b              MOV      r3,r7
000024  4642              MOV      r2,r8
000026  4621              MOV      r1,r4
000028  4630              MOV      r0,r6
00002a  9500              STR      r5,[sp,#0]
00002c  f7fffffe          BL       eGFX_DrawString
;;;1117   }
000030  e8bd81f8          POP      {r3-r8,pc}
;;;1118   
                          ENDP


                          AREA ||i.eGFX_DrawHorizontalCenteredString_CustomSpacing||, CODE, READONLY, ALIGN=1

                  eGFX_DrawHorizontalCenteredString_CustomSpacing PROC
;;;1133   
;;;1134   void eGFX_DrawHorizontalCenteredString_CustomSpacing(eGFX_ImagePlane *Image,
000000  e92d43fc          PUSH     {r2-r9,lr}
;;;1135           int16_t StartY,
;;;1136           char *String,
;;;1137           const eGFX_Font *MyFont,
;;;1138           uint16_t Spacing)
;;;1139   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8024          LDR      r8,[sp,#0x24]
;;;1140       int16_t StartX = 0;
000010  f04f0900          MOV      r9,#0
;;;1141       StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth_CustomSpacing(String,MyFont,Spacing))>>1;
000014  4642              MOV      r2,r8
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       eGFX_GetStringWidth_CustomSpacing
00001e  8931              LDRH     r1,[r6,#8]
000020  b209              SXTH     r1,r1
000022  1a08              SUBS     r0,r1,r0
000024  ea4f0960          ASR      r9,r0,#1
;;;1142       eGFX_DrawString_CustomSpacing(Image,StartX,StartY,String,MyFont,Spacing);
000028  4623              MOV      r3,r4
00002a  463a              MOV      r2,r7
00002c  4649              MOV      r1,r9
00002e  4630              MOV      r0,r6
000030  e9cd5800          STRD     r5,r8,[sp,#0]
000034  f7fffffe          BL       eGFX_DrawString_CustomSpacing
;;;1143   }
000038  e8bd83fc          POP      {r2-r9,pc}
;;;1144   
                          ENDP


                          AREA ||i.eGFX_DrawLine||, CODE, READONLY, ALIGN=1

                  eGFX_DrawLine PROC
;;;357    
;;;358    void eGFX_DrawLine(eGFX_ImagePlane *Image,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;359                       int16_t X1,
;;;360                       int16_t Y1,
;;;361                       int16_t X2,
;;;362                       int16_t Y2,
;;;363                       eGFX_PixelState PS)
;;;364    {
000004  b084              SUB      sp,sp,#0x10
;;;365        //A simple Implementation of Bresenham's line Algorithm
;;;366        int16_t StartX,StopX,StartY,StopY;
;;;367        int16_t dX,dY;
;;;368        int16_t Y_Numerator;
;;;369        int16_t X_Numerator;
;;;370        int16_t Y;
;;;371        int16_t X;
;;;372        int16_t i;
;;;373        uint8_t YDir = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;374    
;;;375        //First Make sure that it is left to right
;;;376        //If not them flop them
;;;377        if(X2>X1)
00000a  9905              LDR      r1,[sp,#0x14]
00000c  9807              LDR      r0,[sp,#0x1c]
00000e  4288              CMP      r0,r1
000010  dd06              BLE      |L38.32|
;;;378        {
;;;379            StartX = X1;
000012  f8dd9014          LDR      r9,[sp,#0x14]
;;;380            StopX = X2;
000016  9807              LDR      r0,[sp,#0x1c]
000018  9003              STR      r0,[sp,#0xc]
;;;381            StartY = Y1;
00001a  9c06              LDR      r4,[sp,#0x18]
;;;382            StopY = Y2;
00001c  9e11              LDR      r6,[sp,#0x44]
00001e  e005              B        |L38.44|
                  |L38.32|
;;;383        }
;;;384        else
;;;385        {
;;;386            StartX = X2;
000020  f8dd901c          LDR      r9,[sp,#0x1c]
;;;387            StopX = X1;
000024  9805              LDR      r0,[sp,#0x14]
000026  9003              STR      r0,[sp,#0xc]
;;;388            StartY = Y2;
000028  9c11              LDR      r4,[sp,#0x44]
;;;389            StopY = Y1;
00002a  9e06              LDR      r6,[sp,#0x18]
                  |L38.44|
;;;390        }
;;;391    
;;;392        eGFX_PutPixel(Image, StopX,StopY, PS);
00002c  4632              MOV      r2,r6
00002e  9b12              LDR      r3,[sp,#0x48]
000030  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000034  f7fffffe          BL       eGFX_PutPixel
;;;393    
;;;394        if(StopY>=StartY)
000038  42a6              CMP      r6,r4
00003a  db04              BLT      |L38.70|
;;;395        {
;;;396            dY = StopY - StartY;
00003c  1b30              SUBS     r0,r6,r4
00003e  b205              SXTH     r5,r0
;;;397            YDir = 0;
000040  2000              MOVS     r0,#0
000042  9000              STR      r0,[sp,#0]
000044  e003              B        |L38.78|
                  |L38.70|
;;;398        }
;;;399        else
;;;400        {
;;;401            dY = StartY - StopY;
000046  1ba0              SUBS     r0,r4,r6
000048  b205              SXTH     r5,r0
;;;402            YDir = 1;
00004a  2001              MOVS     r0,#1
00004c  9000              STR      r0,[sp,#0]
                  |L38.78|
;;;403        }
;;;404    
;;;405        dX = StopX - StartX;
00004e  9803              LDR      r0,[sp,#0xc]
000050  eba00009          SUB      r0,r0,r9
000054  b207              SXTH     r7,r0
;;;406    
;;;407        //Now, if the slope is less greater than one,  we need to swap all X/Y operations
;;;408        if(dY<=dX)
000056  42bd              CMP      r5,r7
000058  dc2d              BGT      |L38.182|
;;;409        {
;;;410            //Slope is less than one, proceed at normal and step along the x axis
;;;411            Y=StartY;   //start the whole part of the Y value at the starting pixeel.
00005a  46a0              MOV      r8,r4
;;;412            X=StartX;
00005c  46ca              MOV      r10,r9
;;;413            //We need to start the numerator of the fraction half way through the fraction so evertyhing rounds at
;;;414            //fraction midpoint
;;;415            Y_Numerator = dX>>1;   //The fraction demonimator is assumeed to be dX
00005e  1078              ASRS     r0,r7,#1
000060  9002              STR      r0,[sp,#8]
;;;416    
;;;417            // out fixed point Y value is  Y + (Y_Numerator / dX)
;;;418            //Every time we step the X coordinate by one, we need to step
;;;419            //out Y coordinate by dY/dX.  We do this by just adding dY to our
;;;420            //numerator.  When the numerator gets bigger than the
;;;421            //denomiator, the increment the whole part by one and decrement the numerator
;;;422            //by the denominator
;;;423            for(i=0; i<dX; i++)
000062  f04f0b00          MOV      r11,#0
000066  e023              B        |L38.176|
                  |L38.104|
;;;424            {
;;;425                eGFX_PutPixel(Image,X,Y,PS);
000068  4642              MOV      r2,r8
00006a  4651              MOV      r1,r10
00006c  9b12              LDR      r3,[sp,#0x48]
00006e  9804              LDR      r0,[sp,#0x10]
000070  f7fffffe          BL       eGFX_PutPixel
;;;426                X++;
000074  f10a0001          ADD      r0,r10,#1
000078  fa0ffa80          SXTH     r10,r0
;;;427                //Now do all the fractional stuff
;;;428                Y_Numerator += dY;
00007c  9802              LDR      r0,[sp,#8]
00007e  4428              ADD      r0,r0,r5
000080  b200              SXTH     r0,r0
000082  9002              STR      r0,[sp,#8]
;;;429    
;;;430                if(Y_Numerator >= dX)
000084  9802              LDR      r0,[sp,#8]
000086  42b8              CMP      r0,r7
000088  db0e              BLT      |L38.168|
;;;431                {
;;;432                    Y_Numerator-=dX;
00008a  9802              LDR      r0,[sp,#8]
00008c  1bc0              SUBS     r0,r0,r7
00008e  b200              SXTH     r0,r0
000090  9002              STR      r0,[sp,#8]
;;;433    
;;;434                    if(StopY > StartY)
000092  42a6              CMP      r6,r4
000094  dd04              BLE      |L38.160|
;;;435                    {
;;;436                        Y++;
000096  f1080001          ADD      r0,r8,#1
00009a  fa0ff880          SXTH     r8,r0
00009e  e003              B        |L38.168|
                  |L38.160|
;;;437                    }
;;;438                    else
;;;439                    {
;;;440                        Y--;
0000a0  f1a80001          SUB      r0,r8,#1
0000a4  fa0ff880          SXTH     r8,r0
                  |L38.168|
0000a8  f10b0001          ADD      r0,r11,#1             ;423
0000ac  fa0ffb80          SXTH     r11,r0                ;423
                  |L38.176|
0000b0  45bb              CMP      r11,r7                ;423
0000b2  dbd9              BLT      |L38.104|
0000b4  e034              B        |L38.288|
                  |L38.182|
;;;441                    }
;;;442                }
;;;443            }
;;;444        }
;;;445        else
;;;446        {
;;;447            //Same as before by step along the y axis.
;;;448            Y=StartY;
0000b6  46a0              MOV      r8,r4
;;;449            X=StartX;
0000b8  46ca              MOV      r10,r9
;;;450            X_Numerator = dY>>1;
0000ba  1068              ASRS     r0,r5,#1
0000bc  9001              STR      r0,[sp,#4]
;;;451    
;;;452            for(i=0; i<dY; i++)
0000be  f04f0b00          MOV      r11,#0
0000c2  e02b              B        |L38.284|
                  |L38.196|
;;;453            {
;;;454                eGFX_PutPixel(Image,X,Y,PS);
0000c4  4642              MOV      r2,r8
0000c6  4651              MOV      r1,r10
0000c8  9b12              LDR      r3,[sp,#0x48]
0000ca  9804              LDR      r0,[sp,#0x10]
0000cc  f7fffffe          BL       eGFX_PutPixel
;;;455    
;;;456                //Now do all the fractional stuff
;;;457                if(YDir)
0000d0  9800              LDR      r0,[sp,#0]
0000d2  b120              CBZ      r0,|L38.222|
;;;458                {
;;;459                    Y--;
0000d4  f1a80001          SUB      r0,r8,#1
0000d8  fa0ff880          SXTH     r8,r0
0000dc  e003              B        |L38.230|
                  |L38.222|
;;;460                }
;;;461                else
;;;462                {
;;;463                    Y++;
0000de  f1080001          ADD      r0,r8,#1
0000e2  fa0ff880          SXTH     r8,r0
                  |L38.230|
;;;464                }
;;;465    
;;;466                X_Numerator += dX;
0000e6  9801              LDR      r0,[sp,#4]
0000e8  4438              ADD      r0,r0,r7
0000ea  b200              SXTH     r0,r0
0000ec  9001              STR      r0,[sp,#4]
;;;467    
;;;468                if(X_Numerator >= dY)
0000ee  9801              LDR      r0,[sp,#4]
0000f0  42a8              CMP      r0,r5
0000f2  db0f              BLT      |L38.276|
;;;469                {
;;;470                    X_Numerator-=dY;
0000f4  9801              LDR      r0,[sp,#4]
0000f6  1b40              SUBS     r0,r0,r5
0000f8  b200              SXTH     r0,r0
0000fa  9001              STR      r0,[sp,#4]
;;;471    
;;;472                    if(StopX > StartX)
0000fc  9803              LDR      r0,[sp,#0xc]
0000fe  4548              CMP      r0,r9
000100  dd04              BLE      |L38.268|
;;;473                    {
;;;474                        X++;
000102  f10a0001          ADD      r0,r10,#1
000106  fa0ffa80          SXTH     r10,r0
00010a  e003              B        |L38.276|
                  |L38.268|
;;;475                    }
;;;476                    else
;;;477                    {
;;;478                        X--;
00010c  f1aa0001          SUB      r0,r10,#1
000110  fa0ffa80          SXTH     r10,r0
                  |L38.276|
000114  f10b0001          ADD      r0,r11,#1             ;452
000118  fa0ffb80          SXTH     r11,r0                ;452
                  |L38.284|
00011c  45ab              CMP      r11,r5                ;452
00011e  dbd1              BLT      |L38.196|
                  |L38.288|
;;;479                    }
;;;480                }
;;;481            }
;;;482        }
;;;483    }
000120  b008              ADD      sp,sp,#0x20
000122  e8bd8ff0          POP      {r4-r11,pc}
;;;484    
                          ENDP


                          AREA ||i.eGFX_DrawListPrimitive||, CODE, READONLY, ALIGN=1

                  eGFX_DrawListPrimitive PROC
;;;484    
;;;485    void eGFX_DrawListPrimitive(eGFX_ImagePlane *Image,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;486                                eGFX_ListPrimitive *LP ,
;;;487                                eGFX_PixelState PS)
;;;488    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;489        uint8_t Points;
;;;490        uint8_t i;
;;;491    
;;;492        if(LP->NumPoints >1)
00000a  7920              LDRB     r0,[r4,#4]
00000c  2801              CMP      r0,#1
00000e  dd7c              BLE      |L39.266|
;;;493        {
;;;494            switch(LP->DrawMode)
000010  7960              LDRB     r0,[r4,#5]
000012  2807              CMP      r0,#7
000014  d205              BCS      |L39.34|
000016  e8dff000          TBB      [pc,r0]
00001a  0458              DCB      0x04,0x58
00001c  8805fdfc          DCB      0x88,0x05,0xfd,0xfc
000020  bc00              DCB      0xbc,0x00
                  |L39.34|
;;;495            {
;;;496                default:
;;;497                case eGFX_LIST_PRIMITIVE_CLOSED:
000022  bf00              NOP      
;;;498                    for(i=1; i<LP->NumPoints; i++)
000024  2501              MOVS     r5,#1
000026  e027              B        |L39.120|
                  |L39.40|
;;;499                    {
;;;500                        eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(LP->PointList[i-1].Y + LP->Center.Y),
000028  68a0              LDR      r0,[r4,#8]
00002a  eb000085          ADD      r0,r0,r5,LSL #2
00002e  8840              LDRH     r0,[r0,#2]
000030  8861              LDRH     r1,[r4,#2]
000032  4408              ADD      r0,r0,r1
000034  b200              SXTH     r0,r0
000036  e9cd0600          STRD     r0,r6,[sp,#0]
00003a  68a0              LDR      r0,[r4,#8]
00003c  f8300025          LDRH     r0,[r0,r5,LSL #2]
000040  f8b4c000          LDRH     r12,[r4,#0]
000044  4460              ADD      r0,r0,r12
000046  b203              SXTH     r3,r0
000048  1e68              SUBS     r0,r5,#1
00004a  f8d4c008          LDR      r12,[r4,#8]
00004e  eb0c0080          ADD      r0,r12,r0,LSL #2
000052  8840              LDRH     r0,[r0,#2]
000054  f8b4c002          LDRH     r12,[r4,#2]
000058  4460              ADD      r0,r0,r12
00005a  b202              SXTH     r2,r0
00005c  1e68              SUBS     r0,r5,#1
00005e  f8d4c008          LDR      r12,[r4,#8]
000062  f83c0020          LDRH     r0,[r12,r0,LSL #2]
000066  f8b4c000          LDRH     r12,[r4,#0]
00006a  4460              ADD      r0,r0,r12
00006c  b201              SXTH     r1,r0
00006e  4640              MOV      r0,r8
000070  f7fffffe          BL       eGFX_DrawLine
000074  1c68              ADDS     r0,r5,#1              ;498
000076  b2c5              UXTB     r5,r0                 ;498
                  |L39.120|
000078  7920              LDRB     r0,[r4,#4]            ;498
00007a  42a8              CMP      r0,r5                 ;498
00007c  dcd4              BGT      |L39.40|
;;;501                                      (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(LP->PointList[i].Y + LP->Center.Y),PS);
;;;502                    }
;;;503    
;;;504                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[LP->NumPoints-1].X + LP->Center.X),(int16_t)(LP->PointList[LP->NumPoints-1].Y + LP->Center.Y),
00007e  68a0              LDR      r0,[r4,#8]
000080  8840              LDRH     r0,[r0,#2]
000082  8861              LDRH     r1,[r4,#2]
000084  4408              ADD      r0,r0,r1
000086  b200              SXTH     r0,r0
000088  e9cd0600          STRD     r0,r6,[sp,#0]
00008c  68a0              LDR      r0,[r4,#8]
00008e  8800              LDRH     r0,[r0,#0]
000090  f8b4c000          LDRH     r12,[r4,#0]
000094  4460              ADD      r0,r0,r12
000096  b203              SXTH     r3,r0
000098  7920              LDRB     r0,[r4,#4]
00009a  1e40              SUBS     r0,r0,#1
00009c  f8d4c008          LDR      r12,[r4,#8]
0000a0  eb0c0080          ADD      r0,r12,r0,LSL #2
0000a4  8840              LDRH     r0,[r0,#2]
0000a6  f8b4c002          LDRH     r12,[r4,#2]
0000aa  4460              ADD      r0,r0,r12
0000ac  b202              SXTH     r2,r0
0000ae  7920              LDRB     r0,[r4,#4]
0000b0  1e40              SUBS     r0,r0,#1
0000b2  f8d4c008          LDR      r12,[r4,#8]
0000b6  f83c0020          LDRH     r0,[r12,r0,LSL #2]
0000ba  f8b4c000          LDRH     r12,[r4,#0]
0000be  4460              ADD      r0,r0,r12
0000c0  b201              SXTH     r1,r0
0000c2  4640              MOV      r0,r8
0000c4  f7fffffe          BL       eGFX_DrawLine
;;;505                                  (int16_t)(LP->PointList[0].X + LP->Center.X),(int16_t)(LP->PointList[0].Y + LP->Center.Y),PS);
;;;506                    break;
0000c8  e123              B        |L39.786|
;;;507    
;;;508                case eGFX_LIST_PRIMITIVE_CONNECTED:
;;;509                    for(i=1; i<LP->NumPoints; i++)
0000ca  2501              MOVS     r5,#1
0000cc  e029              B        |L39.290|
                  |L39.206|
;;;510                    {
;;;511                        eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(LP->PointList[i-1].Y + LP->Center.Y),
0000ce  68a0              LDR      r0,[r4,#8]
0000d0  eb000085          ADD      r0,r0,r5,LSL #2
0000d4  8840              LDRH     r0,[r0,#2]
0000d6  8861              LDRH     r1,[r4,#2]
0000d8  4408              ADD      r0,r0,r1
0000da  b200              SXTH     r0,r0
0000dc  e9cd0600          STRD     r0,r6,[sp,#0]
0000e0  68a0              LDR      r0,[r4,#8]
0000e2  f8300025          LDRH     r0,[r0,r5,LSL #2]
0000e6  f8b4c000          LDRH     r12,[r4,#0]
0000ea  4460              ADD      r0,r0,r12
0000ec  b203              SXTH     r3,r0
0000ee  1e68              SUBS     r0,r5,#1
0000f0  f8d4c008          LDR      r12,[r4,#8]
0000f4  eb0c0080          ADD      r0,r12,r0,LSL #2
0000f8  8840              LDRH     r0,[r0,#2]
0000fa  f8b4c002          LDRH     r12,[r4,#2]
0000fe  4460              ADD      r0,r0,r12
000100  b202              SXTH     r2,r0
000102  1e68              SUBS     r0,r5,#1
000104  f8d4c008          LDR      r12,[r4,#8]
000108  e000              B        |L39.268|
                  |L39.266|
00010a  e103              B        |L39.788|
                  |L39.268|
00010c  f83c0020          LDRH     r0,[r12,r0,LSL #2]
000110  f8b4c000          LDRH     r12,[r4,#0]
000114  4460              ADD      r0,r0,r12
000116  b201              SXTH     r1,r0
000118  4640              MOV      r0,r8
00011a  f7fffffe          BL       eGFX_DrawLine
00011e  1c68              ADDS     r0,r5,#1              ;509
000120  b2c5              UXTB     r5,r0                 ;509
                  |L39.290|
000122  7920              LDRB     r0,[r4,#4]            ;509
000124  42a8              CMP      r0,r5                 ;509
000126  dcd2              BGT      |L39.206|
;;;512                                      (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(LP->PointList[i].Y + LP->Center.Y),PS);
;;;513                    }
;;;514    
;;;515                    break;
000128  e0f3              B        |L39.786|
;;;516    
;;;517                case eGFX_LIST_PRIMITIVE_DISCONNECTED:
;;;518                    Points = LP->NumPoints>>1;
00012a  7920              LDRB     r0,[r4,#4]
00012c  1047              ASRS     r7,r0,#1
;;;519    
;;;520                    for(i=0; i<Points; i++)
00012e  2500              MOVS     r5,#0
000130  e02c              B        |L39.396|
                  |L39.306|
;;;521                    {
;;;522                        eGFX_DrawLine(Image,(int16_t)(LP->PointList[i*2].X + LP->Center.X),(int16_t)(LP->PointList[i*2].Y + LP->Center.Y),
000132  2101              MOVS     r1,#1
000134  eb010145          ADD      r1,r1,r5,LSL #1
000138  68a0              LDR      r0,[r4,#8]
00013a  eb000081          ADD      r0,r0,r1,LSL #2
00013e  8840              LDRH     r0,[r0,#2]
000140  8861              LDRH     r1,[r4,#2]
000142  4408              ADD      r0,r0,r1
000144  b200              SXTH     r0,r0
000146  e9cd0600          STRD     r0,r6,[sp,#0]
00014a  f04f0c01          MOV      r12,#1
00014e  eb0c0c45          ADD      r12,r12,r5,LSL #1
000152  68a0              LDR      r0,[r4,#8]
000154  f830002c          LDRH     r0,[r0,r12,LSL #2]
000158  f8b4c000          LDRH     r12,[r4,#0]
00015c  4460              ADD      r0,r0,r12
00015e  b203              SXTH     r3,r0
000160  68a0              LDR      r0,[r4,#8]
000162  eb0000c5          ADD      r0,r0,r5,LSL #3
000166  8840              LDRH     r0,[r0,#2]
000168  f8b4c002          LDRH     r12,[r4,#2]
00016c  4460              ADD      r0,r0,r12
00016e  b202              SXTH     r2,r0
000170  ea4f0c45          LSL      r12,r5,#1
000174  68a0              LDR      r0,[r4,#8]
000176  f830002c          LDRH     r0,[r0,r12,LSL #2]
00017a  f8b4c000          LDRH     r12,[r4,#0]
00017e  4460              ADD      r0,r0,r12
000180  b201              SXTH     r1,r0
000182  4640              MOV      r0,r8
000184  f7fffffe          BL       eGFX_DrawLine
000188  1c68              ADDS     r0,r5,#1              ;520
00018a  b2c5              UXTB     r5,r0                 ;520
                  |L39.396|
00018c  42bd              CMP      r5,r7                 ;520
00018e  dbd0              BLT      |L39.306|
;;;523                                      (int16_t)(LP->PointList[i*2+1].X + LP->Center.X),(int16_t)(LP->PointList[i*2+1].Y + LP->Center.Y),PS);
;;;524                    }
;;;525    
;;;526                    break;
000190  e0bf              B        |L39.786|
;;;527    
;;;528                case eGFX_LIST_PRIMITIVE_CLOSED_YFLIPPED:
;;;529                    for(i=1; i<LP->NumPoints; i++)
000192  2501              MOVS     r5,#1
000194  e029              B        |L39.490|
                  |L39.406|
;;;530                    {
;;;531                        eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(-LP->PointList[i-1].Y + LP->Center.Y),
000196  68a0              LDR      r0,[r4,#8]
000198  eb000085          ADD      r0,r0,r5,LSL #2
00019c  8840              LDRH     r0,[r0,#2]
00019e  4240              RSBS     r0,r0,#0
0001a0  8861              LDRH     r1,[r4,#2]
0001a2  4408              ADD      r0,r0,r1
0001a4  b200              SXTH     r0,r0
0001a6  e9cd0600          STRD     r0,r6,[sp,#0]
0001aa  68a0              LDR      r0,[r4,#8]
0001ac  f8300025          LDRH     r0,[r0,r5,LSL #2]
0001b0  f8b4c000          LDRH     r12,[r4,#0]
0001b4  4460              ADD      r0,r0,r12
0001b6  b203              SXTH     r3,r0
0001b8  1e68              SUBS     r0,r5,#1
0001ba  f8d4c008          LDR      r12,[r4,#8]
0001be  eb0c0080          ADD      r0,r12,r0,LSL #2
0001c2  8840              LDRH     r0,[r0,#2]
0001c4  4240              RSBS     r0,r0,#0
0001c6  f8b4c002          LDRH     r12,[r4,#2]
0001ca  4460              ADD      r0,r0,r12
0001cc  b202              SXTH     r2,r0
0001ce  1e68              SUBS     r0,r5,#1
0001d0  f8d4c008          LDR      r12,[r4,#8]
0001d4  f83c0020          LDRH     r0,[r12,r0,LSL #2]
0001d8  f8b4c000          LDRH     r12,[r4,#0]
0001dc  4460              ADD      r0,r0,r12
0001de  b201              SXTH     r1,r0
0001e0  4640              MOV      r0,r8
0001e2  f7fffffe          BL       eGFX_DrawLine
0001e6  1c68              ADDS     r0,r5,#1              ;529
0001e8  b2c5              UXTB     r5,r0                 ;529
                  |L39.490|
0001ea  7920              LDRB     r0,[r4,#4]            ;529
0001ec  42a8              CMP      r0,r5                 ;529
0001ee  dcd2              BGT      |L39.406|
;;;532                                      (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(-LP->PointList[i].Y + LP->Center.Y),PS);
;;;533                    }
;;;534    
;;;535                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[LP->NumPoints-1].X + LP->Center.X),(int16_t)(-LP->PointList[LP->NumPoints-1].Y + LP->Center.Y),
0001f0  68a0              LDR      r0,[r4,#8]
0001f2  8840              LDRH     r0,[r0,#2]
0001f4  4240              RSBS     r0,r0,#0
0001f6  8861              LDRH     r1,[r4,#2]
0001f8  4408              ADD      r0,r0,r1
0001fa  b200              SXTH     r0,r0
0001fc  e9cd0600          STRD     r0,r6,[sp,#0]
000200  68a0              LDR      r0,[r4,#8]
000202  8800              LDRH     r0,[r0,#0]
000204  f8b4c000          LDRH     r12,[r4,#0]
000208  4460              ADD      r0,r0,r12
00020a  b203              SXTH     r3,r0
00020c  7920              LDRB     r0,[r4,#4]
00020e  1e40              SUBS     r0,r0,#1
000210  e001              B        |L39.534|
000212  e048              B        |L39.678|
000214  e017              B        |L39.582|
                  |L39.534|
000216  f8d4c008          LDR      r12,[r4,#8]
00021a  eb0c0080          ADD      r0,r12,r0,LSL #2
00021e  8840              LDRH     r0,[r0,#2]
000220  4240              RSBS     r0,r0,#0
000222  f8b4c002          LDRH     r12,[r4,#2]
000226  4460              ADD      r0,r0,r12
000228  b202              SXTH     r2,r0
00022a  7920              LDRB     r0,[r4,#4]
00022c  1e40              SUBS     r0,r0,#1
00022e  f8d4c008          LDR      r12,[r4,#8]
000232  f83c0020          LDRH     r0,[r12,r0,LSL #2]
000236  f8b4c000          LDRH     r12,[r4,#0]
00023a  4460              ADD      r0,r0,r12
00023c  b201              SXTH     r1,r0
00023e  4640              MOV      r0,r8
000240  f7fffffe          BL       eGFX_DrawLine
;;;536                                  (int16_t)(LP->PointList[0].X + LP->Center.X),(int16_t)(-LP->PointList[0].Y + LP->Center.Y),PS);
;;;537                    break;
000244  e065              B        |L39.786|
                  |L39.582|
;;;538    
;;;539                case eGFX_LIST_PRIMITIVE_CONNECTED_YFLIPPED:
;;;540                    for(i=1; i<LP->NumPoints; i++)
000246  2501              MOVS     r5,#1
000248  e029              B        |L39.670|
                  |L39.586|
;;;541                    {
;;;542                        eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(-LP->PointList[i-1].Y + LP->Center.Y),
00024a  68a0              LDR      r0,[r4,#8]
00024c  eb000085          ADD      r0,r0,r5,LSL #2
000250  8840              LDRH     r0,[r0,#2]
000252  4240              RSBS     r0,r0,#0
000254  8861              LDRH     r1,[r4,#2]
000256  4408              ADD      r0,r0,r1
000258  b200              SXTH     r0,r0
00025a  e9cd0600          STRD     r0,r6,[sp,#0]
00025e  68a0              LDR      r0,[r4,#8]
000260  f8300025          LDRH     r0,[r0,r5,LSL #2]
000264  f8b4c000          LDRH     r12,[r4,#0]
000268  4460              ADD      r0,r0,r12
00026a  b203              SXTH     r3,r0
00026c  1e68              SUBS     r0,r5,#1
00026e  f8d4c008          LDR      r12,[r4,#8]
000272  eb0c0080          ADD      r0,r12,r0,LSL #2
000276  8840              LDRH     r0,[r0,#2]
000278  4240              RSBS     r0,r0,#0
00027a  f8b4c002          LDRH     r12,[r4,#2]
00027e  4460              ADD      r0,r0,r12
000280  b202              SXTH     r2,r0
000282  1e68              SUBS     r0,r5,#1
000284  f8d4c008          LDR      r12,[r4,#8]
000288  f83c0020          LDRH     r0,[r12,r0,LSL #2]
00028c  f8b4c000          LDRH     r12,[r4,#0]
000290  4460              ADD      r0,r0,r12
000292  b201              SXTH     r1,r0
000294  4640              MOV      r0,r8
000296  f7fffffe          BL       eGFX_DrawLine
00029a  1c68              ADDS     r0,r5,#1              ;540
00029c  b2c5              UXTB     r5,r0                 ;540
                  |L39.670|
00029e  7920              LDRB     r0,[r4,#4]            ;540
0002a0  42a8              CMP      r0,r5                 ;540
0002a2  dcd2              BGT      |L39.586|
;;;543                                      (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(-LP->PointList[i].Y + LP->Center.Y),PS);
;;;544                    }
;;;545    
;;;546                    break;
0002a4  e035              B        |L39.786|
                  |L39.678|
;;;547    
;;;548                case eGFX_LIST_PRIMITIVE_DISCONNECTED_YFLIPPED:
;;;549                    Points = LP->NumPoints>>1;
0002a6  7920              LDRB     r0,[r4,#4]
0002a8  1047              ASRS     r7,r0,#1
;;;550    
;;;551                    for(i=0; i<Points; i++)
0002aa  2500              MOVS     r5,#0
0002ac  e02e              B        |L39.780|
                  |L39.686|
;;;552                    {
;;;553                        eGFX_DrawLine(Image,(int16_t)(LP->PointList[i*2].X + LP->Center.X),(int16_t)(-LP->PointList[i*2].Y + LP->Center.Y),
0002ae  2101              MOVS     r1,#1
0002b0  eb010145          ADD      r1,r1,r5,LSL #1
0002b4  68a0              LDR      r0,[r4,#8]
0002b6  eb000081          ADD      r0,r0,r1,LSL #2
0002ba  8840              LDRH     r0,[r0,#2]
0002bc  4240              RSBS     r0,r0,#0
0002be  8861              LDRH     r1,[r4,#2]
0002c0  4408              ADD      r0,r0,r1
0002c2  b200              SXTH     r0,r0
0002c4  e9cd0600          STRD     r0,r6,[sp,#0]
0002c8  f04f0c01          MOV      r12,#1
0002cc  eb0c0c45          ADD      r12,r12,r5,LSL #1
0002d0  68a0              LDR      r0,[r4,#8]
0002d2  f830002c          LDRH     r0,[r0,r12,LSL #2]
0002d6  f8b4c000          LDRH     r12,[r4,#0]
0002da  4460              ADD      r0,r0,r12
0002dc  b203              SXTH     r3,r0
0002de  68a0              LDR      r0,[r4,#8]
0002e0  eb0000c5          ADD      r0,r0,r5,LSL #3
0002e4  8840              LDRH     r0,[r0,#2]
0002e6  4240              RSBS     r0,r0,#0
0002e8  f8b4c002          LDRH     r12,[r4,#2]
0002ec  4460              ADD      r0,r0,r12
0002ee  b202              SXTH     r2,r0
0002f0  ea4f0c45          LSL      r12,r5,#1
0002f4  68a0              LDR      r0,[r4,#8]
0002f6  f830002c          LDRH     r0,[r0,r12,LSL #2]
0002fa  f8b4c000          LDRH     r12,[r4,#0]
0002fe  4460              ADD      r0,r0,r12
000300  b201              SXTH     r1,r0
000302  4640              MOV      r0,r8
000304  f7fffffe          BL       eGFX_DrawLine
000308  1c68              ADDS     r0,r5,#1              ;551
00030a  b2c5              UXTB     r5,r0                 ;551
                  |L39.780|
00030c  42bd              CMP      r5,r7                 ;551
00030e  dbce              BLT      |L39.686|
;;;554                                      (int16_t)(LP->PointList[i*2+1].X + LP->Center.X),(int16_t)(-LP->PointList[i*2+1].Y + LP->Center.Y),PS);
;;;555                    }
;;;556    
;;;557                    break;
000310  bf00              NOP      
                  |L39.786|
000312  bf00              NOP                            ;506
                  |L39.788|
;;;558            }
;;;559        }
;;;560    }
000314  e8bd81fc          POP      {r2-r8,pc}
;;;561    
                          ENDP


                          AREA ||i.eGFX_DrawObject_BoxF||, CODE, READONLY, ALIGN=1

                  eGFX_DrawObject_BoxF PROC
;;;2869   
;;;2870   void	eGFX_DrawObject_BoxF(eGFX_ImagePlane * Image, eGFX_Obj_BoxF *BoxF_Object)
000000  e92d41f8          PUSH     {r3-r8,lr}
;;;2871   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;2872   	int16_t i;
;;;2873   	int16_t Start, End;
;;;2874   
;;;2875   
;;;2876   	if (BoxF_Object->BoxF_RenderOption == eGFX_BOXF_RENDER_OPTION_OUTLINE)
000008  7f20              LDRB     r0,[r4,#0x1c]
00000a  2800              CMP      r0,#0
00000c  d17e              BNE      |L40.268|
;;;2877   	{
;;;2878   		eGFX_DrawHline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.X), ROUND_TO_INT16_T(BoxF_Object->P2.X), ROUND_TO_INT16_T(BoxF_Object->P1.Y), BoxF_Object->PixelState);
00000e  69a0              LDR      r0,[r4,#0x18]
000010  9000              STR      r0,[sp,#0]
000012  ed940a03          VLDR     s0,[r4,#0xc]
000016  eef60a00          VMOV.F32 s1,#0.50000000
00001a  ee300a20          VADD.F32 s0,s0,s1
00001e  eebd0ac0          VCVT.S32.F32 s0,s0
000022  ee100a10          VMOV     r0,s0
000026  b203              SXTH     r3,r0
000028  ed940a04          VLDR     s0,[r4,#0x10]
00002c  eef60a00          VMOV.F32 s1,#0.50000000
000030  ee300a20          VADD.F32 s0,s0,s1
000034  eebd0ac0          VCVT.S32.F32 s0,s0
000038  ee100a10          VMOV     r0,s0
00003c  b202              SXTH     r2,r0
00003e  ed940a02          VLDR     s0,[r4,#8]
000042  eef60a00          VMOV.F32 s1,#0.50000000
000046  ee300a20          VADD.F32 s0,s0,s1
00004a  eebd0ac0          VCVT.S32.F32 s0,s0
00004e  ee100a10          VMOV     r0,s0
000052  b201              SXTH     r1,r0
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       eGFX_DrawHline
;;;2879   		eGFX_DrawHline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.X), ROUND_TO_INT16_T(BoxF_Object->P2.X), ROUND_TO_INT16_T(BoxF_Object->P2.Y), BoxF_Object->PixelState);
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  9000              STR      r0,[sp,#0]
00005e  ed940a05          VLDR     s0,[r4,#0x14]
000062  eef60a00          VMOV.F32 s1,#0.50000000
000066  ee300a20          VADD.F32 s0,s0,s1
00006a  eebd0ac0          VCVT.S32.F32 s0,s0
00006e  ee100a10          VMOV     r0,s0
000072  b203              SXTH     r3,r0
000074  ed940a04          VLDR     s0,[r4,#0x10]
000078  eef60a00          VMOV.F32 s1,#0.50000000
00007c  ee300a20          VADD.F32 s0,s0,s1
000080  eebd0ac0          VCVT.S32.F32 s0,s0
000084  ee100a10          VMOV     r0,s0
000088  b202              SXTH     r2,r0
00008a  ed940a02          VLDR     s0,[r4,#8]
00008e  eef60a00          VMOV.F32 s1,#0.50000000
000092  ee300a20          VADD.F32 s0,s0,s1
000096  eebd0ac0          VCVT.S32.F32 s0,s0
00009a  ee100a10          VMOV     r0,s0
00009e  b201              SXTH     r1,r0
0000a0  4640              MOV      r0,r8
0000a2  f7fffffe          BL       eGFX_DrawHline
;;;2880   		eGFX_DrawVline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.Y), ROUND_TO_INT16_T(BoxF_Object->P2.Y), ROUND_TO_INT16_T(BoxF_Object->P1.X), BoxF_Object->PixelState);
0000a6  69a0              LDR      r0,[r4,#0x18]
0000a8  9000              STR      r0,[sp,#0]
0000aa  ed940a02          VLDR     s0,[r4,#8]
0000ae  eef60a00          VMOV.F32 s1,#0.50000000
0000b2  ee300a20          VADD.F32 s0,s0,s1
0000b6  eebd0ac0          VCVT.S32.F32 s0,s0
0000ba  ee100a10          VMOV     r0,s0
0000be  b203              SXTH     r3,r0
0000c0  ed940a05          VLDR     s0,[r4,#0x14]
0000c4  eef60a00          VMOV.F32 s1,#0.50000000
0000c8  ee300a20          VADD.F32 s0,s0,s1
0000cc  eebd0ac0          VCVT.S32.F32 s0,s0
0000d0  ee100a10          VMOV     r0,s0
0000d4  b202              SXTH     r2,r0
0000d6  ed940a03          VLDR     s0,[r4,#0xc]
0000da  eef60a00          VMOV.F32 s1,#0.50000000
0000de  ee300a20          VADD.F32 s0,s0,s1
0000e2  eebd0ac0          VCVT.S32.F32 s0,s0
0000e6  ee100a10          VMOV     r0,s0
0000ea  b201              SXTH     r1,r0
0000ec  4640              MOV      r0,r8
0000ee  f7fffffe          BL       eGFX_DrawVline
;;;2881   		eGFX_DrawVline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.Y), ROUND_TO_INT16_T(BoxF_Object->P2.Y), ROUND_TO_INT16_T(BoxF_Object->P2.X), BoxF_Object->PixelState);
0000f2  69a0              LDR      r0,[r4,#0x18]
0000f4  9000              STR      r0,[sp,#0]
0000f6  ed940a04          VLDR     s0,[r4,#0x10]
0000fa  eef60a00          VMOV.F32 s1,#0.50000000
0000fe  ee300a20          VADD.F32 s0,s0,s1
000102  eebd0ac0          VCVT.S32.F32 s0,s0
000106  ee100a10          VMOV     r0,s0
00010a  e000              B        |L40.270|
                  |L40.268|
00010c  e01a              B        |L40.324|
                  |L40.270|
00010e  b203              SXTH     r3,r0
000110  ed940a05          VLDR     s0,[r4,#0x14]
000114  eef60a00          VMOV.F32 s1,#0.50000000
000118  ee300a20          VADD.F32 s0,s0,s1
00011c  eebd0ac0          VCVT.S32.F32 s0,s0
000120  ee100a10          VMOV     r0,s0
000124  b202              SXTH     r2,r0
000126  ed940a03          VLDR     s0,[r4,#0xc]
00012a  eef60a00          VMOV.F32 s1,#0.50000000
00012e  ee300a20          VADD.F32 s0,s0,s1
000132  eebd0ac0          VCVT.S32.F32 s0,s0
000136  ee100a10          VMOV     r0,s0
00013a  b201              SXTH     r1,r0
00013c  4640              MOV      r0,r8
00013e  f7fffffe          BL       eGFX_DrawVline
000142  e067              B        |L40.532|
                  |L40.324|
;;;2882   	}
;;;2883   	else
;;;2884   	{
;;;2885   		if ((ROUND_TO_INT16_T(BoxF_Object->P1.Y) > ROUND_TO_INT16_T(BoxF_Object->P2.Y)))
000144  ed940a03          VLDR     s0,[r4,#0xc]
000148  eef60a00          VMOV.F32 s1,#0.50000000
00014c  ee300a20          VADD.F32 s0,s0,s1
000150  eebd0ac0          VCVT.S32.F32 s0,s0
000154  ee100a10          VMOV     r0,s0
000158  b201              SXTH     r1,r0
00015a  ed940a05          VLDR     s0,[r4,#0x14]
00015e  eef60a00          VMOV.F32 s1,#0.50000000
000162  ee300a20          VADD.F32 s0,s0,s1
000166  eebd0ac0          VCVT.S32.F32 s0,s0
00016a  ee100a10          VMOV     r0,s0
00016e  b200              SXTH     r0,r0
000170  4281              CMP      r1,r0
000172  dd16              BLE      |L40.418|
;;;2886   		{
;;;2887   			End = ROUND_TO_INT16_T(BoxF_Object->P1.Y);
000174  ed940a03          VLDR     s0,[r4,#0xc]
000178  eef60a00          VMOV.F32 s1,#0.50000000
00017c  ee300a20          VADD.F32 s0,s0,s1
000180  eebd0ac0          VCVT.S32.F32 s0,s0
000184  ee100a10          VMOV     r0,s0
000188  b207              SXTH     r7,r0
;;;2888   			Start = ROUND_TO_INT16_T(BoxF_Object->P2.Y);
00018a  ed940a05          VLDR     s0,[r4,#0x14]
00018e  eef60a00          VMOV.F32 s1,#0.50000000
000192  ee300a20          VADD.F32 s0,s0,s1
000196  eebd0ac0          VCVT.S32.F32 s0,s0
00019a  ee100a10          VMOV     r0,s0
00019e  b206              SXTH     r6,r0
0001a0  e015              B        |L40.462|
                  |L40.418|
;;;2889   		}
;;;2890   		else 
;;;2891   		{
;;;2892   			End = ROUND_TO_INT16_T(BoxF_Object->P2.Y);
0001a2  ed940a05          VLDR     s0,[r4,#0x14]
0001a6  eef60a00          VMOV.F32 s1,#0.50000000
0001aa  ee300a20          VADD.F32 s0,s0,s1
0001ae  eebd0ac0          VCVT.S32.F32 s0,s0
0001b2  ee100a10          VMOV     r0,s0
0001b6  b207              SXTH     r7,r0
;;;2893   			Start = ROUND_TO_INT16_T(BoxF_Object->P1.Y);
0001b8  ed940a03          VLDR     s0,[r4,#0xc]
0001bc  eef60a00          VMOV.F32 s1,#0.50000000
0001c0  ee300a20          VADD.F32 s0,s0,s1
0001c4  eebd0ac0          VCVT.S32.F32 s0,s0
0001c8  ee100a10          VMOV     r0,s0
0001cc  b206              SXTH     r6,r0
                  |L40.462|
;;;2894   		}
;;;2895   		for (i = Start; i < End + 1; i++)
0001ce  4635              MOV      r5,r6
0001d0  e01d              B        |L40.526|
                  |L40.466|
;;;2896   		{
;;;2897   			eGFX_DrawHline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.X), ROUND_TO_INT16_T(BoxF_Object->P2.X), i, BoxF_Object->PixelState);
0001d2  69a0              LDR      r0,[r4,#0x18]
0001d4  9000              STR      r0,[sp,#0]
0001d6  ed940a04          VLDR     s0,[r4,#0x10]
0001da  eef60a00          VMOV.F32 s1,#0.50000000
0001de  ee300a20          VADD.F32 s0,s0,s1
0001e2  eebd0ac0          VCVT.S32.F32 s0,s0
0001e6  ee100a10          VMOV     r0,s0
0001ea  b202              SXTH     r2,r0
0001ec  ed940a02          VLDR     s0,[r4,#8]
0001f0  eef60a00          VMOV.F32 s1,#0.50000000
0001f4  ee300a20          VADD.F32 s0,s0,s1
0001f8  eebd0ac0          VCVT.S32.F32 s0,s0
0001fc  ee100a10          VMOV     r0,s0
000200  b201              SXTH     r1,r0
000202  462b              MOV      r3,r5
000204  4640              MOV      r0,r8
000206  f7fffffe          BL       eGFX_DrawHline
00020a  1c68              ADDS     r0,r5,#1              ;2895
00020c  b205              SXTH     r5,r0                 ;2895
                  |L40.526|
00020e  1c78              ADDS     r0,r7,#1              ;2895
000210  4285              CMP      r5,r0                 ;2895
000212  dbde              BLT      |L40.466|
                  |L40.532|
;;;2898   		}
;;;2899   	}
;;;2900   
;;;2901   }
000214  e8bd81f8          POP      {r3-r8,pc}
;;;2902   
                          ENDP


                          AREA ||i.eGFX_DrawObject_CircleF||, CODE, READONLY, ALIGN=1

                  eGFX_DrawObject_CircleF PROC
;;;2803   
;;;2804   void	eGFX_DrawObject_CircleF(eGFX_ImagePlane * Image, eGFX_Obj_CircleF *CircleF_Object)
000000  b538              PUSH     {r3-r5,lr}
;;;2805   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2806   	if (CircleF_Object->RenderOption == eGFX_CIRCLEF_RENDER_OPTION_OUTLINE)
000006  7e20              LDRB     r0,[r4,#0x18]
000008  bb30              CBNZ     r0,|L41.88|
;;;2807   	{
;;;2808   		eGFX_DrawCircle(Image, ROUND_TO_INT16_T(CircleF_Object->Position.X), ROUND_TO_INT16_T(CircleF_Object->Position.Y), ROUND_TO_INT16_T(CircleF_Object->Radius), CircleF_Object->PixelState);
00000a  6960              LDR      r0,[r4,#0x14]
00000c  9000              STR      r0,[sp,#0]
00000e  ed940a04          VLDR     s0,[r4,#0x10]
000012  eef60a00          VMOV.F32 s1,#0.50000000
000016  ee300a20          VADD.F32 s0,s0,s1
00001a  eebd0ac0          VCVT.S32.F32 s0,s0
00001e  ee100a10          VMOV     r0,s0
000022  b203              SXTH     r3,r0
000024  ed940a03          VLDR     s0,[r4,#0xc]
000028  eef60a00          VMOV.F32 s1,#0.50000000
00002c  ee300a20          VADD.F32 s0,s0,s1
000030  eebd0ac0          VCVT.S32.F32 s0,s0
000034  ee100a10          VMOV     r0,s0
000038  b202              SXTH     r2,r0
00003a  ed940a02          VLDR     s0,[r4,#8]
00003e  eef60a00          VMOV.F32 s1,#0.50000000
000042  ee300a20          VADD.F32 s0,s0,s1
000046  eebd0ac0          VCVT.S32.F32 s0,s0
00004a  ee100a10          VMOV     r0,s0
00004e  b201              SXTH     r1,r0
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       eGFX_DrawCircle
000056  e025              B        |L41.164|
                  |L41.88|
;;;2809   	}
;;;2810   	else
;;;2811   	{
;;;2812   		eGFX_DrawFilledCircle(Image, ROUND_TO_INT16_T(CircleF_Object->Position.X), ROUND_TO_INT16_T(CircleF_Object->Position.Y), ROUND_TO_INT16_T(CircleF_Object->Radius), CircleF_Object->PixelState);
000058  6960              LDR      r0,[r4,#0x14]
00005a  9000              STR      r0,[sp,#0]
00005c  ed940a04          VLDR     s0,[r4,#0x10]
000060  eef60a00          VMOV.F32 s1,#0.50000000
000064  ee300a20          VADD.F32 s0,s0,s1
000068  eebd0ac0          VCVT.S32.F32 s0,s0
00006c  ee100a10          VMOV     r0,s0
000070  b203              SXTH     r3,r0
000072  ed940a03          VLDR     s0,[r4,#0xc]
000076  eef60a00          VMOV.F32 s1,#0.50000000
00007a  ee300a20          VADD.F32 s0,s0,s1
00007e  eebd0ac0          VCVT.S32.F32 s0,s0
000082  ee100a10          VMOV     r0,s0
000086  b202              SXTH     r2,r0
000088  ed940a02          VLDR     s0,[r4,#8]
00008c  eef60a00          VMOV.F32 s1,#0.50000000
000090  ee300a20          VADD.F32 s0,s0,s1
000094  eebd0ac0          VCVT.S32.F32 s0,s0
000098  ee100a10          VMOV     r0,s0
00009c  b201              SXTH     r1,r0
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       eGFX_DrawFilledCircle
                  |L41.164|
;;;2813   		
;;;2814   	}
;;;2815   
;;;2816   }
0000a4  bd38              POP      {r3-r5,pc}
;;;2817   
                          ENDP


                          AREA ||i.eGFX_DrawObject_LineF||, CODE, READONLY, ALIGN=1

                  eGFX_DrawObject_LineF PROC
;;;2643   
;;;2644   void	eGFX_DrawObject_LineF(eGFX_ImagePlane * Image, eGFX_Obj_LineF *LineF_Object)
000000  b53c              PUSH     {r2-r5,lr}
;;;2645   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2646   	eGFX_DrawLine(Image, 
000006  69a0              LDR      r0,[r4,#0x18]
000008  ed940a05          VLDR     s0,[r4,#0x14]
00000c  eef60a00          VMOV.F32 s1,#0.50000000
000010  ee300a20          VADD.F32 s0,s0,s1
000014  eebd0ac0          VCVT.S32.F32 s0,s0
000018  ee101a10          VMOV     r1,s0
00001c  b209              SXTH     r1,r1
00001e  e9cd1000          STRD     r1,r0,[sp,#0]
000022  ed940a04          VLDR     s0,[r4,#0x10]
000026  eef60a00          VMOV.F32 s1,#0.50000000
00002a  ee300a20          VADD.F32 s0,s0,s1
00002e  eebd0ac0          VCVT.S32.F32 s0,s0
000032  ee100a10          VMOV     r0,s0
000036  b203              SXTH     r3,r0
000038  ed940a03          VLDR     s0,[r4,#0xc]
00003c  eef60a00          VMOV.F32 s1,#0.50000000
000040  ee300a20          VADD.F32 s0,s0,s1
000044  eebd0ac0          VCVT.S32.F32 s0,s0
000048  ee100a10          VMOV     r0,s0
00004c  b202              SXTH     r2,r0
00004e  ed940a02          VLDR     s0,[r4,#8]
000052  eef60a00          VMOV.F32 s1,#0.50000000
000056  ee300a20          VADD.F32 s0,s0,s1
00005a  eebd0ac0          VCVT.S32.F32 s0,s0
00005e  ee100a10          VMOV     r0,s0
000062  b201              SXTH     r1,r0
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       eGFX_DrawLine
;;;2647   		ROUND_TO_INT16_T(LineF_Object->Start.X),
;;;2648   		ROUND_TO_INT16_T(LineF_Object->Start.Y),
;;;2649   		ROUND_TO_INT16_T(LineF_Object->End.X),
;;;2650   		ROUND_TO_INT16_T(LineF_Object->End.Y),
;;;2651   		LineF_Object->PixelState);
;;;2652   
;;;2653   }
00006a  bd3c              POP      {r2-r5,pc}
;;;2654   
                          ENDP


                          AREA ||i.eGFX_DrawObject_ScaledSpriteF||, CODE, READONLY, ALIGN=1

                  eGFX_DrawObject_ScaledSpriteF PROC
;;;2747   
;;;2748   void	eGFX_DrawObject_ScaledSpriteF(eGFX_ImagePlane * Image, eGFX_Obj_ScaledSpriteF *SpriteF_Object)
000000  b530              PUSH     {r4,r5,lr}
;;;2749   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2750   		eGFX_ScaledBlit(Image, 
000006  edd40a05          VLDR     s1,[r4,#0x14]
00000a  eeb00a60          VMOV.F32 s0,s1
00000e  6923              LDR      r3,[r4,#0x10]
000010  edd40a03          VLDR     s1,[r4,#0xc]
000014  eeb61a00          VMOV.F32 s2,#0.50000000
000018  ee700a81          VADD.F32 s1,s1,s2
00001c  eefd0ae0          VCVT.S32.F32 s1,s1
000020  ee100a90          VMOV     r0,s1
000024  b202              SXTH     r2,r0
000026  edd40a02          VLDR     s1,[r4,#8]
00002a  eeb61a00          VMOV.F32 s2,#0.50000000
00002e  ee700a81          VADD.F32 s1,s1,s2
000032  eefd0ae0          VCVT.S32.F32 s1,s1
000036  ee100a90          VMOV     r0,s1
00003a  b201              SXTH     r1,r0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       eGFX_ScaledBlit
;;;2751   			ROUND_TO_INT16_T(SpriteF_Object->Position.X),
;;;2752   			ROUND_TO_INT16_T(SpriteF_Object->Position.Y),
;;;2753   			SpriteF_Object->Sprite, 
;;;2754   			SpriteF_Object->Scale);
;;;2755   }
000042  bd30              POP      {r4,r5,pc}
;;;2756   
                          ENDP


                          AREA ||i.eGFX_DrawObject_ShadedTextF||, CODE, READONLY, ALIGN=1

                  eGFX_DrawObject_ShadedTextF PROC
;;;2587   
;;;2588   void	eGFX_DrawObject_ShadedTextF(eGFX_ImagePlane * Image, eGFX_Obj_ShadedTextF *ShadedTextF_Object)
000000  b578              PUSH     {r3-r6,lr}
;;;2589   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2590   	eGFX_DrawStringShaded(Image,
000006  6960              LDR      r0,[r4,#0x14]
000008  9000              STR      r0,[sp,#0]
00000a  edd40a06          VLDR     s1,[r4,#0x18]
00000e  eeb00a60          VMOV.F32 s0,s1
000012  6966              LDR      r6,[r4,#0x14]
000014  edd40a03          VLDR     s1,[r4,#0xc]
000018  eeb61a00          VMOV.F32 s2,#0.50000000
00001c  ee700a81          VADD.F32 s1,s1,s2
000020  eefd0ae0          VCVT.S32.F32 s1,s1
000024  ee100a90          VMOV     r0,s1
000028  b203              SXTH     r3,r0
00002a  edd40a02          VLDR     s1,[r4,#8]
00002e  eeb61a00          VMOV.F32 s2,#0.50000000
000032  ee700a81          VADD.F32 s1,s1,s2
000036  eefd0ae0          VCVT.S32.F32 s1,s1
00003a  ee100a90          VMOV     r0,s1
00003e  b202              SXTH     r2,r0
000040  4628              MOV      r0,r5
000042  6921              LDR      r1,[r4,#0x10]
000044  f7fffffe          BL       eGFX_DrawStringShaded
;;;2591   		ShadedTextF_Object->String,
;;;2592   		ROUND_TO_INT16_T(ShadedTextF_Object->Position.X),
;;;2593   		ROUND_TO_INT16_T(ShadedTextF_Object->Position.Y),
;;;2594   		ShadedTextF_Object->Font,
;;;2595   		ShadedTextF_Object->Shading);
;;;2596   }
000048  bd78              POP      {r3-r6,pc}
;;;2597   
                          ENDP


                          AREA ||i.eGFX_DrawObject_SpriteF||, CODE, READONLY, ALIGN=1

                  eGFX_DrawObject_SpriteF PROC
;;;2694   
;;;2695   void	eGFX_DrawObject_SpriteF(eGFX_ImagePlane * Image, eGFX_Obj_SpriteF *SpriteF_Object)
000000  b530              PUSH     {r4,r5,lr}
;;;2696   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2697   	eGFX_CenteredBlit(Image,
000006  6923              LDR      r3,[r4,#0x10]
000008  ed940a03          VLDR     s0,[r4,#0xc]
00000c  eef60a00          VMOV.F32 s1,#0.50000000
000010  ee300a20          VADD.F32 s0,s0,s1
000014  eebd0ac0          VCVT.S32.F32 s0,s0
000018  ee100a10          VMOV     r0,s0
00001c  b202              SXTH     r2,r0
00001e  ed940a02          VLDR     s0,[r4,#8]
000022  eef60a00          VMOV.F32 s1,#0.50000000
000026  ee300a20          VADD.F32 s0,s0,s1
00002a  eebd0ac0          VCVT.S32.F32 s0,s0
00002e  ee100a10          VMOV     r0,s0
000032  b201              SXTH     r1,r0
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       eGFX_CenteredBlit
;;;2698   		ROUND_TO_INT16_T(SpriteF_Object->Position.X),
;;;2699   		ROUND_TO_INT16_T(SpriteF_Object->Position.Y),
;;;2700   		SpriteF_Object->Sprite);
;;;2701   
;;;2702   }
00003a  bd30              POP      {r4,r5,pc}
;;;2703   
                          ENDP


                          AREA ||i.eGFX_DrawObject_TextF||, CODE, READONLY, ALIGN=1

                  eGFX_DrawObject_TextF PROC
;;;2522   
;;;2523   void	eGFX_DrawObject_TextF(eGFX_ImagePlane * Image, eGFX_Obj_TextF *TextF_Object)
000000  b538              PUSH     {r3-r5,lr}
;;;2524   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2525   	eGFX_DrawString(Image,
000006  6960              LDR      r0,[r4,#0x14]
000008  9000              STR      r0,[sp,#0]
00000a  ed940a03          VLDR     s0,[r4,#0xc]
00000e  eef60a00          VMOV.F32 s1,#0.50000000
000012  ee300a20          VADD.F32 s0,s0,s1
000016  eebd0ac0          VCVT.S32.F32 s0,s0
00001a  ee100a10          VMOV     r0,s0
00001e  b203              SXTH     r3,r0
000020  ed940a02          VLDR     s0,[r4,#8]
000024  eef60a00          VMOV.F32 s1,#0.50000000
000028  ee300a20          VADD.F32 s0,s0,s1
00002c  eebd0ac0          VCVT.S32.F32 s0,s0
000030  ee100a10          VMOV     r0,s0
000034  b202              SXTH     r2,r0
000036  4628              MOV      r0,r5
000038  6921              LDR      r1,[r4,#0x10]
00003a  f7fffffe          BL       eGFX_DrawString
;;;2526   				TextF_Object->String,
;;;2527   				ROUND_TO_INT16_T(TextF_Object->Position.X),
;;;2528   				ROUND_TO_INT16_T(TextF_Object->Position.Y),
;;;2529   				TextF_Object->Font);
;;;2530   }
00003e  bd38              POP      {r3-r5,pc}
;;;2531   
                          ENDP


                          AREA ||i.eGFX_DrawObjects||, CODE, READONLY, ALIGN=2

                  eGFX_DrawObjects PROC
;;;2910   
;;;2911   void eGFX_DrawObjects(eGFX_ImagePlane *IP)
000000  b530              PUSH     {r4,r5,lr}
;;;2912   {
000002  4605              MOV      r5,r0
;;;2913   	uint32_t i;
;;;2914   
;;;2915   	for (i = 0; i<eGFX_ObjectEndIndex; i++)
000004  2400              MOVS     r4,#0
000006  e04a              B        |L47.158|
                  |L47.8|
;;;2916   	{
;;;2917   		if (eGFX_Objects[i] != NULL)
000008  4827              LDR      r0,|L47.168|
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  2800              CMP      r0,#0
000010  d044              BEQ      |L47.156|
;;;2918   		{
;;;2919   			if (((eGFX_ObjectHeader *)(eGFX_Objects[i]))->State != eGFX_OBJECT_STATE_INACTIVE)
000012  4825              LDR      r0,|L47.168|
000014  f8500024          LDR      r0,[r0,r4,LSL #2]
000018  6840              LDR      r0,[r0,#4]
00001a  2800              CMP      r0,#0
00001c  d03e              BEQ      |L47.156|
;;;2920   			{
;;;2921   			
;;;2922   			//object handlers here!
;;;2923   			switch (((eGFX_ObjectHeader *)(eGFX_Objects[i]))->Type)
00001e  4822              LDR      r0,|L47.168|
000020  f8500024          LDR      r0,[r0,r4,LSL #2]
000024  6800              LDR      r0,[r0,#0]
000026  2807              CMP      r0,#7
000028  d236              BCS      |L47.152|
00002a  e8dff000          TBB      [pc,r0]
00002e  040b              DCB      0x04,0x0b
000030  12192027          DCB      0x12,0x19,0x20,0x27
000034  2e00              DCB      0x2e,0x00
;;;2924   				{
;;;2925   
;;;2926   
;;;2927   				case eGFX_OBJECT_TEXTF:
;;;2928   					eGFX_DrawObject_TextF(IP, (eGFX_Obj_TextF *)eGFX_Objects[i]);
000036  481c              LDR      r0,|L47.168|
000038  f8501024          LDR      r1,[r0,r4,LSL #2]
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       eGFX_DrawObject_TextF
;;;2929   					break;
000042  e02a              B        |L47.154|
;;;2930   
;;;2931   				case eGFX_OBJECT_SHADED_TEXTF:
;;;2932   					eGFX_DrawObject_ShadedTextF(IP, (eGFX_Obj_ShadedTextF *)eGFX_Objects[i]);
000044  4818              LDR      r0,|L47.168|
000046  f8501024          LDR      r1,[r0,r4,LSL #2]
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       eGFX_DrawObject_ShadedTextF
;;;2933   					break;
000050  e023              B        |L47.154|
;;;2934   
;;;2935   				case eGFX_OBJECT_LINEF:
;;;2936   					eGFX_DrawObject_LineF(IP, (eGFX_Obj_LineF *)eGFX_Objects[i]);
000052  4815              LDR      r0,|L47.168|
000054  f8501024          LDR      r1,[r0,r4,LSL #2]
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       eGFX_DrawObject_LineF
;;;2937   					break;
00005e  e01c              B        |L47.154|
;;;2938   				case eGFX_OBJECT_SPRITEF:
;;;2939   					eGFX_DrawObject_SpriteF(IP, (eGFX_Obj_SpriteF *)eGFX_Objects[i]);
000060  4811              LDR      r0,|L47.168|
000062  f8501024          LDR      r1,[r0,r4,LSL #2]
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       eGFX_DrawObject_SpriteF
;;;2940   					break;
00006c  e015              B        |L47.154|
;;;2941   				case eGFX_OBJECT_SCALED_SPRITEF:
;;;2942   					eGFX_DrawObject_ScaledSpriteF(IP, (eGFX_Obj_ScaledSpriteF *)eGFX_Objects[i]);
00006e  480e              LDR      r0,|L47.168|
000070  f8501024          LDR      r1,[r0,r4,LSL #2]
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       eGFX_DrawObject_ScaledSpriteF
;;;2943   					break;
00007a  e00e              B        |L47.154|
;;;2944   
;;;2945   				case eGFX_OBJECT_BOXF:
;;;2946   					eGFX_DrawObject_BoxF(IP, (eGFX_Obj_BoxF *)eGFX_Objects[i]);
00007c  480a              LDR      r0,|L47.168|
00007e  f8501024          LDR      r1,[r0,r4,LSL #2]
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       eGFX_DrawObject_BoxF
;;;2947   					break;
000088  e007              B        |L47.154|
;;;2948   
;;;2949   				case eGFX_OBJECT_CIRCLEF:
;;;2950   					eGFX_DrawObject_CircleF(IP, (eGFX_Obj_CircleF *)eGFX_Objects[i]);
00008a  4807              LDR      r0,|L47.168|
00008c  f8501024          LDR      r1,[r0,r4,LSL #2]
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       eGFX_DrawObject_CircleF
;;;2951   					break;
000096  e000              B        |L47.154|
                  |L47.152|
;;;2952   
;;;2953   				default:
;;;2954   
;;;2955   					break;
000098  bf00              NOP      
                  |L47.154|
00009a  bf00              NOP                            ;2929
                  |L47.156|
00009c  1c64              ADDS     r4,r4,#1              ;2915
                  |L47.158|
00009e  4803              LDR      r0,|L47.172|
0000a0  6800              LDR      r0,[r0,#0]            ;2915  ; eGFX_ObjectEndIndex
0000a2  4284              CMP      r4,r0                 ;2915
0000a4  d3b0              BCC      |L47.8|
;;;2956   				}
;;;2957   			}
;;;2958   
;;;2959   		}
;;;2960   
;;;2961   
;;;2962   	}
;;;2963   }
0000a6  bd30              POP      {r4,r5,pc}
;;;2964   
                          ENDP

                  |L47.168|
                          DCD      eGFX_Objects
                  |L47.172|
                          DCD      eGFX_ObjectEndIndex

                          AREA ||i.eGFX_DrawRightAlignedCenteredString_CustomSpacing||, CODE, READONLY, ALIGN=1

                  eGFX_DrawRightAlignedCenteredString_CustomSpacing PROC
;;;1120   
;;;1121   int16_t eGFX_DrawRightAlignedCenteredString_CustomSpacing(eGFX_ImagePlane *Image,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1122           int16_t StartY,
;;;1123           char *String,
;;;1124           const eGFX_Font *MyFont,
;;;1125           uint16_t CustomCharacterSpacing,
;;;1126           int16_t RightSideBuffer)
;;;1127   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd8a0a          LDRD     r8,r10,[sp,#0x28]
;;;1128       int16_t StartX = 0;
000010  f04f0900          MOV      r9,#0
;;;1129       StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth_CustomSpacing(String,MyFont,CustomCharacterSpacing) - RightSideBuffer);
000014  4642              MOV      r2,r8
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       eGFX_GetStringWidth_CustomSpacing
00001e  8931              LDRH     r1,[r6,#8]
000020  1a08              SUBS     r0,r1,r0
000022  eba0000a          SUB      r0,r0,r10
000026  fa0ff980          SXTH     r9,r0
;;;1130       eGFX_DrawString_CustomSpacing(Image,StartX,StartY,String,MyFont,CustomCharacterSpacing);
00002a  4623              MOV      r3,r4
00002c  463a              MOV      r2,r7
00002e  4649              MOV      r1,r9
000030  4630              MOV      r0,r6
000032  e9cd5800          STRD     r5,r8,[sp,#0]
000036  f7fffffe          BL       eGFX_DrawString_CustomSpacing
;;;1131       return StartX;
00003a  4648              MOV      r0,r9
;;;1132   }
00003c  e8bd87fc          POP      {r2-r10,pc}
;;;1133   
                          ENDP


                          AREA ||i.eGFX_DrawRotatedListPrimitive||, CODE, READONLY, ALIGN=2

                  eGFX_DrawRotatedListPrimitive PROC
;;;625    
;;;626    void eGFX_DrawRotatedListPrimitive(eGFX_ImagePlane *Image,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;627                                       eGFX_ListPrimitive *LP ,
;;;628                                       uint8_t Angle,
;;;629                                       eGFX_PixelState PS)
;;;630    {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;631        uint8_t Points;
;;;632        uint8_t i;
;;;633        eGFX_Point TransformedPoint[2];
;;;634    
;;;635        if(LP->NumPoints >1)
00000c  7920              LDRB     r0,[r4,#4]
00000e  2801              CMP      r0,#1
000010  dd7d              BLE      |L49.270|
;;;636        {
;;;637            //If we are drawing non connected points,  there must be an even number of them.
;;;638            switch(LP->DrawMode)
000012  7960              LDRB     r0,[r4,#5]
000014  2801              CMP      r0,#1
000016  d07b              BEQ      |L49.272|
000018  2802              CMP      r0,#2
00001a  d002              BEQ      |L49.34|
00001c  2803              CMP      r0,#3
00001e  d178              BNE      |L49.274|
000020  e15f              B        |L49.738|
                  |L49.34|
;;;639            {
;;;640                case eGFX_LIST_PRIMITIVE_DISCONNECTED:
;;;641                    Points = LP->NumPoints>>1;
000022  7920              LDRB     r0,[r4,#4]
000024  ea4f0860          ASR      r8,r0,#1
;;;642    
;;;643                    for(i=0; i<Points; i++)
000028  2500              MOVS     r5,#0
00002a  e0b5              B        |L49.408|
                  |L49.44|
;;;644                    {
;;;645                        TransformedPoint[0].X = eGFX_FMul_15_0to1_14((LP->PointList[i*2].X), eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
00002c  006b              LSLS     r3,r5,#1
00002e  68a2              LDR      r2,[r4,#8]
000030  f9320023          LDRSH    r0,[r2,r3,LSL #2]
000034  f1060240          ADD      r2,r6,#0x40
000038  b2d2              UXTB     r2,r2
00003a  4bfe              LDR      r3,|L49.1076|
00003c  f9331012          LDRSH    r1,[r3,r2,LSL #1]
000040  f7fffffe          BL       eGFX_FMul_15_0to1_14
000044  4682              MOV      r10,r0
000046  68a2              LDR      r2,[r4,#8]
000048  eb0202c5          ADD      r2,r2,r5,LSL #3
00004c  f9b20002          LDRSH    r0,[r2,#2]
000050  4af8              LDR      r2,|L49.1076|
000052  f9321016          LDRSH    r1,[r2,r6,LSL #1]
000056  f7fffffe          BL       eGFX_FMul_15_0to1_14
00005a  ebaa0000          SUB      r0,r10,r0
00005e  b200              SXTH     r0,r0
000060  f8ad0008          STRH     r0,[sp,#8]
;;;646                                                eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[Angle]);
;;;647                        TransformedPoint[0].Y = eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[Angle ]) +
000064  006b              LSLS     r3,r5,#1
000066  68a2              LDR      r2,[r4,#8]
000068  f9320023          LDRSH    r0,[r2,r3,LSL #2]
00006c  4af1              LDR      r2,|L49.1076|
00006e  f9321016          LDRSH    r1,[r2,r6,LSL #1]
000072  f7fffffe          BL       eGFX_FMul_15_0to1_14
000076  4682              MOV      r10,r0
000078  68a2              LDR      r2,[r4,#8]
00007a  eb0202c5          ADD      r2,r2,r5,LSL #3
00007e  f9b20002          LDRSH    r0,[r2,#2]
000082  f1060240          ADD      r2,r6,#0x40
000086  b2d2              UXTB     r2,r2
000088  4bea              LDR      r3,|L49.1076|
00008a  f9331012          LDRSH    r1,[r3,r2,LSL #1]
00008e  f7fffffe          BL       eGFX_FMul_15_0to1_14
000092  4450              ADD      r0,r0,r10
000094  b200              SXTH     r0,r0
000096  f8ad000a          STRH     r0,[sp,#0xa]
;;;648                                                eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]);
;;;649                        TransformedPoint[1].X = eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
00009a  2301              MOVS     r3,#1
00009c  eb030345          ADD      r3,r3,r5,LSL #1
0000a0  68a2              LDR      r2,[r4,#8]
0000a2  f9320023          LDRSH    r0,[r2,r3,LSL #2]
0000a6  f1060240          ADD      r2,r6,#0x40
0000aa  b2d2              UXTB     r2,r2
0000ac  4be1              LDR      r3,|L49.1076|
0000ae  f9331012          LDRSH    r1,[r3,r2,LSL #1]
0000b2  f7fffffe          BL       eGFX_FMul_15_0to1_14
0000b6  4682              MOV      r10,r0
0000b8  2301              MOVS     r3,#1
0000ba  eb030345          ADD      r3,r3,r5,LSL #1
0000be  68a2              LDR      r2,[r4,#8]
0000c0  eb020283          ADD      r2,r2,r3,LSL #2
0000c4  f9b20002          LDRSH    r0,[r2,#2]
0000c8  4ada              LDR      r2,|L49.1076|
0000ca  f9321016          LDRSH    r1,[r2,r6,LSL #1]
0000ce  f7fffffe          BL       eGFX_FMul_15_0to1_14
0000d2  ebaa0000          SUB      r0,r10,r0
0000d6  b200              SXTH     r0,r0
0000d8  f8ad000c          STRH     r0,[sp,#0xc]
;;;650                                                eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].Y, eGFX_Fixed_1_14_SineTable[Angle]);
;;;651                        TransformedPoint[1].Y = eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
0000dc  2301              MOVS     r3,#1
0000de  eb030345          ADD      r3,r3,r5,LSL #1
0000e2  68a2              LDR      r2,[r4,#8]
0000e4  f9320023          LDRSH    r0,[r2,r3,LSL #2]
0000e8  4ad2              LDR      r2,|L49.1076|
0000ea  f9321016          LDRSH    r1,[r2,r6,LSL #1]
0000ee  f7fffffe          BL       eGFX_FMul_15_0to1_14
0000f2  4682              MOV      r10,r0
0000f4  2301              MOVS     r3,#1
0000f6  eb030345          ADD      r3,r3,r5,LSL #1
0000fa  68a2              LDR      r2,[r4,#8]
0000fc  eb020283          ADD      r2,r2,r3,LSL #2
000100  f9b20002          LDRSH    r0,[r2,#2]
000104  f1060240          ADD      r2,r6,#0x40
000108  b2d2              UXTB     r2,r2
00010a  4bca              LDR      r3,|L49.1076|
00010c  e002              B        |L49.276|
                  |L49.270|
00010e  e223              B        |L49.1368|
                  |L49.272|
000110  e046              B        |L49.416|
                  |L49.274|
000112  e0e5              B        |L49.736|
                  |L49.276|
000114  f9331012          LDRSH    r1,[r3,r2,LSL #1]
000118  f7fffffe          BL       eGFX_FMul_15_0to1_14
00011c  4450              ADD      r0,r0,r10
00011e  b201              SXTH     r1,r0
000120  f8ad100e          STRH     r1,[sp,#0xe]
;;;652                                                eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]);
;;;653                        TransformedPoint[0].X += LP->Center.X;
000124  f8bd0008          LDRH     r0,[sp,#8]
000128  8821              LDRH     r1,[r4,#0]
00012a  4408              ADD      r0,r0,r1
00012c  b200              SXTH     r0,r0
00012e  f8ad0008          STRH     r0,[sp,#8]
;;;654                        TransformedPoint[0].Y += LP->Center.Y;
000132  f8bd000a          LDRH     r0,[sp,#0xa]
000136  8861              LDRH     r1,[r4,#2]
000138  4408              ADD      r0,r0,r1
00013a  b200              SXTH     r0,r0
00013c  f8ad000a          STRH     r0,[sp,#0xa]
;;;655                        TransformedPoint[1].X += LP->Center.X;
000140  f8bd000c          LDRH     r0,[sp,#0xc]
000144  8821              LDRH     r1,[r4,#0]
000146  4408              ADD      r0,r0,r1
000148  b200              SXTH     r0,r0
00014a  f8ad000c          STRH     r0,[sp,#0xc]
;;;656                        TransformedPoint[1].Y += LP->Center.Y;
00014e  f8bd000e          LDRH     r0,[sp,#0xe]
000152  8861              LDRH     r1,[r4,#2]
000154  4408              ADD      r0,r0,r1
000156  b201              SXTH     r1,r0
000158  f8ad100e          STRH     r1,[sp,#0xe]
;;;657                        eGFX_DrawLine(Image,(TransformedPoint[0].X + LP->Center.X),(TransformedPoint[0].Y  + LP->Center.Y),
00015c  f8bd000e          LDRH     r0,[sp,#0xe]
000160  8861              LDRH     r1,[r4,#2]
000162  4408              ADD      r0,r0,r1
000164  b200              SXTH     r0,r0
000166  e9cd0700          STRD     r0,r7,[sp,#0]
00016a  f8bd000c          LDRH     r0,[sp,#0xc]
00016e  f8b4c000          LDRH     r12,[r4,#0]
000172  4460              ADD      r0,r0,r12
000174  b203              SXTH     r3,r0
000176  f8bd000a          LDRH     r0,[sp,#0xa]
00017a  f8b4c002          LDRH     r12,[r4,#2]
00017e  4460              ADD      r0,r0,r12
000180  b202              SXTH     r2,r0
000182  f8bd0008          LDRH     r0,[sp,#8]
000186  f8b4c000          LDRH     r12,[r4,#0]
00018a  4460              ADD      r0,r0,r12
00018c  b201              SXTH     r1,r0
00018e  4648              MOV      r0,r9
000190  f7fffffe          BL       eGFX_DrawLine
000194  1c68              ADDS     r0,r5,#1              ;643
000196  b2c5              UXTB     r5,r0                 ;643
                  |L49.408|
000198  4545              CMP      r5,r8                 ;643
00019a  f6ffaf47          BLT      |L49.44|
;;;658                                      (TransformedPoint[1].X + LP->Center.X),(TransformedPoint[1].Y + LP->Center.Y),PS);
;;;659                    }
;;;660    
;;;661                    break;
00019e  e1da              B        |L49.1366|
                  |L49.416|
;;;662    
;;;663                case eGFX_LIST_PRIMITIVE_CONNECTED:
;;;664                    for(i=1; i<LP->NumPoints; i++)
0001a0  2501              MOVS     r5,#1
0001a2  e098              B        |L49.726|
                  |L49.420|
;;;665                    {
;;;666                        TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
0001a4  1e6a              SUBS     r2,r5,#1
0001a6  68a3              LDR      r3,[r4,#8]
0001a8  f9330022          LDRSH    r0,[r3,r2,LSL #2]
0001ac  f1060240          ADD      r2,r6,#0x40
0001b0  b2d2              UXTB     r2,r2
0001b2  4ba0              LDR      r3,|L49.1076|
0001b4  f9331012          LDRSH    r1,[r3,r2,LSL #1]
0001b8  f7fffffe          BL       eGFX_FMul_15_0to1_14
0001bc  4682              MOV      r10,r0
0001be  1e6a              SUBS     r2,r5,#1
0001c0  68a3              LDR      r3,[r4,#8]
0001c2  eb030282          ADD      r2,r3,r2,LSL #2
0001c6  f9b20002          LDRSH    r0,[r2,#2]
0001ca  4a9a              LDR      r2,|L49.1076|
0001cc  f9321016          LDRSH    r1,[r2,r6,LSL #1]
0001d0  f7fffffe          BL       eGFX_FMul_15_0to1_14
0001d4  ebaa0000          SUB      r0,r10,r0
0001d8  b200              SXTH     r0,r0
0001da  f8ad0008          STRH     r0,[sp,#8]
;;;667                                                 eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
;;;668                        TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
0001de  1e6a              SUBS     r2,r5,#1
0001e0  68a3              LDR      r3,[r4,#8]
0001e2  f9330022          LDRSH    r0,[r3,r2,LSL #2]
0001e6  4a93              LDR      r2,|L49.1076|
0001e8  f9321016          LDRSH    r1,[r2,r6,LSL #1]
0001ec  f7fffffe          BL       eGFX_FMul_15_0to1_14
0001f0  4682              MOV      r10,r0
0001f2  1e6a              SUBS     r2,r5,#1
0001f4  68a3              LDR      r3,[r4,#8]
0001f6  eb030282          ADD      r2,r3,r2,LSL #2
0001fa  f9b20002          LDRSH    r0,[r2,#2]
0001fe  f1060240          ADD      r2,r6,#0x40
000202  b2d2              UXTB     r2,r2
000204  4b8b              LDR      r3,|L49.1076|
000206  f9331012          LDRSH    r1,[r3,r2,LSL #1]
00020a  f7fffffe          BL       eGFX_FMul_15_0to1_14
00020e  4450              ADD      r0,r0,r10
000210  b200              SXTH     r0,r0
000212  f8ad000a          STRH     r0,[sp,#0xa]
;;;669                                                  eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
;;;670                        TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
000216  68a2              LDR      r2,[r4,#8]
000218  f9320025          LDRSH    r0,[r2,r5,LSL #2]
00021c  f1060240          ADD      r2,r6,#0x40
000220  b2d2              UXTB     r2,r2
000222  4b84              LDR      r3,|L49.1076|
000224  f9331012          LDRSH    r1,[r3,r2,LSL #1]
000228  f7fffffe          BL       eGFX_FMul_15_0to1_14
00022c  4682              MOV      r10,r0
00022e  68a2              LDR      r2,[r4,#8]
000230  eb020285          ADD      r2,r2,r5,LSL #2
000234  f9b20002          LDRSH    r0,[r2,#2]
000238  4a7e              LDR      r2,|L49.1076|
00023a  f9321016          LDRSH    r1,[r2,r6,LSL #1]
00023e  f7fffffe          BL       eGFX_FMul_15_0to1_14
000242  ebaa0000          SUB      r0,r10,r0
000246  b200              SXTH     r0,r0
000248  f8ad000c          STRH     r0,[sp,#0xc]
;;;671                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
;;;672                        TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
00024c  68a2              LDR      r2,[r4,#8]
00024e  f9320025          LDRSH    r0,[r2,r5,LSL #2]
000252  4a78              LDR      r2,|L49.1076|
000254  f9321016          LDRSH    r1,[r2,r6,LSL #1]
000258  f7fffffe          BL       eGFX_FMul_15_0to1_14
00025c  4682              MOV      r10,r0
00025e  68a2              LDR      r2,[r4,#8]
000260  eb020285          ADD      r2,r2,r5,LSL #2
000264  f9b20002          LDRSH    r0,[r2,#2]
000268  f1060240          ADD      r2,r6,#0x40
00026c  b2d2              UXTB     r2,r2
00026e  4b71              LDR      r3,|L49.1076|
000270  f9331012          LDRSH    r1,[r3,r2,LSL #1]
000274  f7fffffe          BL       eGFX_FMul_15_0to1_14
000278  4450              ADD      r0,r0,r10
00027a  b201              SXTH     r1,r0
00027c  f8ad100e          STRH     r1,[sp,#0xe]
;;;673                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
;;;674                        TransformedPoint[0].X +=  LP->Center.X;
000280  f8bd0008          LDRH     r0,[sp,#8]
000284  8821              LDRH     r1,[r4,#0]
000286  4408              ADD      r0,r0,r1
000288  b200              SXTH     r0,r0
00028a  f8ad0008          STRH     r0,[sp,#8]
;;;675                        TransformedPoint[0].Y +=  LP->Center.Y;
00028e  f8bd000a          LDRH     r0,[sp,#0xa]
000292  8861              LDRH     r1,[r4,#2]
000294  4408              ADD      r0,r0,r1
000296  b200              SXTH     r0,r0
000298  f8ad000a          STRH     r0,[sp,#0xa]
;;;676                        TransformedPoint[1].X +=  LP->Center.X;
00029c  f8bd000c          LDRH     r0,[sp,#0xc]
0002a0  8821              LDRH     r1,[r4,#0]
0002a2  4408              ADD      r0,r0,r1
0002a4  b200              SXTH     r0,r0
0002a6  f8ad000c          STRH     r0,[sp,#0xc]
;;;677                        TransformedPoint[1].Y +=  LP->Center.Y;
0002aa  f8bd000e          LDRH     r0,[sp,#0xe]
0002ae  8861              LDRH     r1,[r4,#2]
0002b0  4408              ADD      r0,r0,r1
0002b2  b201              SXTH     r1,r0
0002b4  f8ad100e          STRH     r1,[sp,#0xe]
;;;678                        eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
0002b8  f9bd000e          LDRSH    r0,[sp,#0xe]
0002bc  e9cd0700          STRD     r0,r7,[sp,#0]
0002c0  f9bd300c          LDRSH    r3,[sp,#0xc]
0002c4  f9bd200a          LDRSH    r2,[sp,#0xa]
0002c8  f9bd1008          LDRSH    r1,[sp,#8]
0002cc  4648              MOV      r0,r9
0002ce  f7fffffe          BL       eGFX_DrawLine
0002d2  1c68              ADDS     r0,r5,#1              ;664
0002d4  b2c5              UXTB     r5,r0                 ;664
                  |L49.726|
0002d6  7920              LDRB     r0,[r4,#4]            ;664
0002d8  42a8              CMP      r0,r5                 ;664
0002da  f73faf63          BGT      |L49.420|
;;;679                                      (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
;;;680                    }
;;;681    
;;;682                    break;
0002de  e13a              B        |L49.1366|
                  |L49.736|
;;;683    
;;;684                default:
;;;685                case eGFX_LIST_PRIMITIVE_CLOSED:
0002e0  bf00              NOP      
                  |L49.738|
;;;686                    for(i=1; i<LP->NumPoints; i++)
0002e2  2501              MOVS     r5,#1
0002e4  e098              B        |L49.1048|
                  |L49.742|
;;;687                    {
;;;688                        TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
0002e6  1e6a              SUBS     r2,r5,#1
0002e8  68a3              LDR      r3,[r4,#8]
0002ea  f9330022          LDRSH    r0,[r3,r2,LSL #2]
0002ee  f1060240          ADD      r2,r6,#0x40
0002f2  b2d2              UXTB     r2,r2
0002f4  4b4f              LDR      r3,|L49.1076|
0002f6  f9331012          LDRSH    r1,[r3,r2,LSL #1]
0002fa  f7fffffe          BL       eGFX_FMul_15_0to1_14
0002fe  4682              MOV      r10,r0
000300  1e6a              SUBS     r2,r5,#1
000302  68a3              LDR      r3,[r4,#8]
000304  eb030282          ADD      r2,r3,r2,LSL #2
000308  f9b20002          LDRSH    r0,[r2,#2]
00030c  4a49              LDR      r2,|L49.1076|
00030e  f9321016          LDRSH    r1,[r2,r6,LSL #1]
000312  f7fffffe          BL       eGFX_FMul_15_0to1_14
000316  ebaa0000          SUB      r0,r10,r0
00031a  b200              SXTH     r0,r0
00031c  f8ad0008          STRH     r0,[sp,#8]
;;;689                                                 eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
;;;690                        TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
000320  1e6a              SUBS     r2,r5,#1
000322  68a3              LDR      r3,[r4,#8]
000324  f9330022          LDRSH    r0,[r3,r2,LSL #2]
000328  4a42              LDR      r2,|L49.1076|
00032a  f9321016          LDRSH    r1,[r2,r6,LSL #1]
00032e  f7fffffe          BL       eGFX_FMul_15_0to1_14
000332  4682              MOV      r10,r0
000334  1e6a              SUBS     r2,r5,#1
000336  68a3              LDR      r3,[r4,#8]
000338  eb030282          ADD      r2,r3,r2,LSL #2
00033c  f9b20002          LDRSH    r0,[r2,#2]
000340  f1060240          ADD      r2,r6,#0x40
000344  b2d2              UXTB     r2,r2
000346  4b3b              LDR      r3,|L49.1076|
000348  f9331012          LDRSH    r1,[r3,r2,LSL #1]
00034c  f7fffffe          BL       eGFX_FMul_15_0to1_14
000350  4450              ADD      r0,r0,r10
000352  b200              SXTH     r0,r0
000354  f8ad000a          STRH     r0,[sp,#0xa]
;;;691                                                  eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
;;;692                        TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
000358  68a2              LDR      r2,[r4,#8]
00035a  f9320025          LDRSH    r0,[r2,r5,LSL #2]
00035e  f1060240          ADD      r2,r6,#0x40
000362  b2d2              UXTB     r2,r2
000364  4b33              LDR      r3,|L49.1076|
000366  f9331012          LDRSH    r1,[r3,r2,LSL #1]
00036a  f7fffffe          BL       eGFX_FMul_15_0to1_14
00036e  4682              MOV      r10,r0
000370  68a2              LDR      r2,[r4,#8]
000372  eb020285          ADD      r2,r2,r5,LSL #2
000376  f9b20002          LDRSH    r0,[r2,#2]
00037a  4a2e              LDR      r2,|L49.1076|
00037c  f9321016          LDRSH    r1,[r2,r6,LSL #1]
000380  f7fffffe          BL       eGFX_FMul_15_0to1_14
000384  ebaa0000          SUB      r0,r10,r0
000388  b200              SXTH     r0,r0
00038a  f8ad000c          STRH     r0,[sp,#0xc]
;;;693                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
;;;694                        TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
00038e  68a2              LDR      r2,[r4,#8]
000390  f9320025          LDRSH    r0,[r2,r5,LSL #2]
000394  4a27              LDR      r2,|L49.1076|
000396  f9321016          LDRSH    r1,[r2,r6,LSL #1]
00039a  f7fffffe          BL       eGFX_FMul_15_0to1_14
00039e  4682              MOV      r10,r0
0003a0  68a2              LDR      r2,[r4,#8]
0003a2  eb020285          ADD      r2,r2,r5,LSL #2
0003a6  f9b20002          LDRSH    r0,[r2,#2]
0003aa  f1060240          ADD      r2,r6,#0x40
0003ae  b2d2              UXTB     r2,r2
0003b0  4b20              LDR      r3,|L49.1076|
0003b2  f9331012          LDRSH    r1,[r3,r2,LSL #1]
0003b6  f7fffffe          BL       eGFX_FMul_15_0to1_14
0003ba  4450              ADD      r0,r0,r10
0003bc  b201              SXTH     r1,r0
0003be  f8ad100e          STRH     r1,[sp,#0xe]
;;;695                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
;;;696                        TransformedPoint[0].X +=  LP->Center.X;
0003c2  f8bd0008          LDRH     r0,[sp,#8]
0003c6  8821              LDRH     r1,[r4,#0]
0003c8  4408              ADD      r0,r0,r1
0003ca  b200              SXTH     r0,r0
0003cc  f8ad0008          STRH     r0,[sp,#8]
;;;697                        TransformedPoint[0].Y +=  LP->Center.Y;
0003d0  f8bd000a          LDRH     r0,[sp,#0xa]
0003d4  8861              LDRH     r1,[r4,#2]
0003d6  4408              ADD      r0,r0,r1
0003d8  b200              SXTH     r0,r0
0003da  f8ad000a          STRH     r0,[sp,#0xa]
;;;698                        TransformedPoint[1].X +=  LP->Center.X;
0003de  f8bd000c          LDRH     r0,[sp,#0xc]
0003e2  8821              LDRH     r1,[r4,#0]
0003e4  4408              ADD      r0,r0,r1
0003e6  b200              SXTH     r0,r0
0003e8  f8ad000c          STRH     r0,[sp,#0xc]
;;;699                        TransformedPoint[1].Y +=  LP->Center.Y;
0003ec  f8bd000e          LDRH     r0,[sp,#0xe]
0003f0  8861              LDRH     r1,[r4,#2]
0003f2  4408              ADD      r0,r0,r1
0003f4  b201              SXTH     r1,r0
0003f6  f8ad100e          STRH     r1,[sp,#0xe]
;;;700                        eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
0003fa  f9bd000e          LDRSH    r0,[sp,#0xe]
0003fe  e9cd0700          STRD     r0,r7,[sp,#0]
000402  f9bd300c          LDRSH    r3,[sp,#0xc]
000406  f9bd200a          LDRSH    r2,[sp,#0xa]
00040a  f9bd1008          LDRSH    r1,[sp,#8]
00040e  4648              MOV      r0,r9
000410  f7fffffe          BL       eGFX_DrawLine
000414  1c68              ADDS     r0,r5,#1              ;686
000416  b2c5              UXTB     r5,r0                 ;686
                  |L49.1048|
000418  7920              LDRB     r0,[r4,#4]            ;686
00041a  42a8              CMP      r0,r5                 ;686
00041c  f73faf63          BGT      |L49.742|
;;;701                                      (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
;;;702                    }
;;;703    
;;;704                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
000420  7922              LDRB     r2,[r4,#4]
000422  1e52              SUBS     r2,r2,#1
000424  68a3              LDR      r3,[r4,#8]
000426  f9330022          LDRSH    r0,[r3,r2,LSL #2]
00042a  f1060240          ADD      r2,r6,#0x40
00042e  b2d2              UXTB     r2,r2
000430  4b00              LDR      r3,|L49.1076|
000432  e001              B        |L49.1080|
                  |L49.1076|
                          DCD      eGFX_Fixed_1_14_SineTable
                  |L49.1080|
000438  f9331012          LDRSH    r1,[r3,r2,LSL #1]
00043c  f7fffffe          BL       eGFX_FMul_15_0to1_14
000440  4682              MOV      r10,r0
000442  7922              LDRB     r2,[r4,#4]
000444  1e52              SUBS     r2,r2,#1
000446  68a3              LDR      r3,[r4,#8]
000448  eb030282          ADD      r2,r3,r2,LSL #2
00044c  f9b20002          LDRSH    r0,[r2,#2]
000450  4a42              LDR      r2,|L49.1372|
000452  f9321016          LDRSH    r1,[r2,r6,LSL #1]
000456  f7fffffe          BL       eGFX_FMul_15_0to1_14
00045a  ebaa0000          SUB      r0,r10,r0
00045e  b200              SXTH     r0,r0
000460  f8ad0008          STRH     r0,[sp,#8]
;;;705                                             eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
;;;706                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
000464  7922              LDRB     r2,[r4,#4]
000466  1e52              SUBS     r2,r2,#1
000468  68a3              LDR      r3,[r4,#8]
00046a  f9330022          LDRSH    r0,[r3,r2,LSL #2]
00046e  4a3b              LDR      r2,|L49.1372|
000470  f9321016          LDRSH    r1,[r2,r6,LSL #1]
000474  f7fffffe          BL       eGFX_FMul_15_0to1_14
000478  4682              MOV      r10,r0
00047a  7922              LDRB     r2,[r4,#4]
00047c  1e52              SUBS     r2,r2,#1
00047e  68a3              LDR      r3,[r4,#8]
000480  eb030282          ADD      r2,r3,r2,LSL #2
000484  f9b20002          LDRSH    r0,[r2,#2]
000488  f1060240          ADD      r2,r6,#0x40
00048c  b2d2              UXTB     r2,r2
00048e  4b33              LDR      r3,|L49.1372|
000490  f9331012          LDRSH    r1,[r3,r2,LSL #1]
000494  f7fffffe          BL       eGFX_FMul_15_0to1_14
000498  4450              ADD      r0,r0,r10
00049a  b200              SXTH     r0,r0
00049c  f8ad000a          STRH     r0,[sp,#0xa]
;;;707                                              eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
;;;708                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
0004a0  f1060240          ADD      r2,r6,#0x40
0004a4  b2d2              UXTB     r2,r2
0004a6  4b2d              LDR      r3,|L49.1372|
0004a8  f9331012          LDRSH    r1,[r3,r2,LSL #1]
0004ac  68a2              LDR      r2,[r4,#8]
0004ae  f9b20000          LDRSH    r0,[r2,#0]
0004b2  f7fffffe          BL       eGFX_FMul_15_0to1_14
0004b6  4682              MOV      r10,r0
0004b8  4a28              LDR      r2,|L49.1372|
0004ba  f9321016          LDRSH    r1,[r2,r6,LSL #1]
0004be  68a2              LDR      r2,[r4,#8]
0004c0  f9b20002          LDRSH    r0,[r2,#2]
0004c4  f7fffffe          BL       eGFX_FMul_15_0to1_14
0004c8  ebaa0000          SUB      r0,r10,r0
0004cc  b200              SXTH     r0,r0
0004ce  f8ad000c          STRH     r0,[sp,#0xc]
;;;709                                             eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
;;;710                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[Angle]) +
0004d2  4a22              LDR      r2,|L49.1372|
0004d4  f9321016          LDRSH    r1,[r2,r6,LSL #1]
0004d8  68a2              LDR      r2,[r4,#8]
0004da  f9b20000          LDRSH    r0,[r2,#0]
0004de  f7fffffe          BL       eGFX_FMul_15_0to1_14
0004e2  4682              MOV      r10,r0
0004e4  f1060240          ADD      r2,r6,#0x40
0004e8  b2d2              UXTB     r2,r2
0004ea  4b1c              LDR      r3,|L49.1372|
0004ec  f9331012          LDRSH    r1,[r3,r2,LSL #1]
0004f0  68a2              LDR      r2,[r4,#8]
0004f2  f9b20002          LDRSH    r0,[r2,#2]
0004f6  f7fffffe          BL       eGFX_FMul_15_0to1_14
0004fa  4450              ADD      r0,r0,r10
0004fc  b201              SXTH     r1,r0
0004fe  f8ad100e          STRH     r1,[sp,#0xe]
;;;711                                             eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
;;;712                    TransformedPoint[0].X +=  LP->Center.X;
000502  f8bd0008          LDRH     r0,[sp,#8]
000506  8821              LDRH     r1,[r4,#0]
000508  4408              ADD      r0,r0,r1
00050a  b200              SXTH     r0,r0
00050c  f8ad0008          STRH     r0,[sp,#8]
;;;713                    TransformedPoint[0].Y +=  LP->Center.Y;
000510  f8bd000a          LDRH     r0,[sp,#0xa]
000514  8861              LDRH     r1,[r4,#2]
000516  4408              ADD      r0,r0,r1
000518  b200              SXTH     r0,r0
00051a  f8ad000a          STRH     r0,[sp,#0xa]
;;;714                    TransformedPoint[1].X +=  LP->Center.X;
00051e  f8bd000c          LDRH     r0,[sp,#0xc]
000522  8821              LDRH     r1,[r4,#0]
000524  4408              ADD      r0,r0,r1
000526  b200              SXTH     r0,r0
000528  f8ad000c          STRH     r0,[sp,#0xc]
;;;715                    TransformedPoint[1].Y +=  LP->Center.Y;
00052c  f8bd000e          LDRH     r0,[sp,#0xe]
000530  8861              LDRH     r1,[r4,#2]
000532  4408              ADD      r0,r0,r1
000534  b201              SXTH     r1,r0
000536  f8ad100e          STRH     r1,[sp,#0xe]
;;;716                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
00053a  f9bd000e          LDRSH    r0,[sp,#0xe]
00053e  e9cd0700          STRD     r0,r7,[sp,#0]
000542  f9bd300c          LDRSH    r3,[sp,#0xc]
000546  f9bd200a          LDRSH    r2,[sp,#0xa]
00054a  f9bd1008          LDRSH    r1,[sp,#8]
00054e  4648              MOV      r0,r9
000550  f7fffffe          BL       eGFX_DrawLine
;;;717                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
;;;718                    break;
000554  bf00              NOP      
                  |L49.1366|
000556  bf00              NOP                            ;661
                  |L49.1368|
;;;719            }
;;;720        }
;;;721    }
000558  e8bd87ff          POP      {r0-r10,pc}
;;;722    
                          ENDP

                  |L49.1372|
                          DCD      eGFX_Fixed_1_14_SineTable

                          AREA ||i.eGFX_DrawScaledListPrimitive||, CODE, READONLY, ALIGN=1

                  eGFX_DrawScaledListPrimitive PROC
;;;561    
;;;562    void eGFX_DrawScaledListPrimitive(eGFX_ImagePlane *Image,
000000  e92d43ff          PUSH     {r0-r9,lr}
;;;563                                      eGFX_ListPrimitive *LP ,
;;;564                                      FIXED_7_8 Scale,
;;;565                                      eGFX_PixelState PS)
;;;566    {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
;;;567        uint8_t Points;
;;;568        uint8_t i;
;;;569        eGFX_Point TransformedPoint[2];
;;;570    
;;;571        if(LP->NumPoints >1)
00000c  7920              LDRB     r0,[r4,#4]
00000e  2801              CMP      r0,#1
000010  dd7e              BLE      |L50.272|
;;;572        {
;;;573            switch(LP->DrawMode)
000012  7960              LDRB     r0,[r4,#5]
000014  2801              CMP      r0,#1
000016  d07c              BEQ      |L50.274|
000018  2802              CMP      r0,#2
00001a  d07b              BEQ      |L50.276|
00001c  2803              CMP      r0,#3
00001e  d000              BEQ      |L50.34|
;;;574            {
;;;575                default:
;;;576                case eGFX_LIST_PRIMITIVE_CLOSED:
000020  bf00              NOP      
                  |L50.34|
;;;577                    for(i=1; i<LP->NumPoints; i++)
000022  2501              MOVS     r5,#1
000024  e040              B        |L50.168|
                  |L50.38|
;;;578                    {
;;;579                        TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i-1].X,Scale) 	+ LP->Center.X;
000026  1e69              SUBS     r1,r5,#1
000028  68a2              LDR      r2,[r4,#8]
00002a  f9320021          LDRSH    r0,[r2,r1,LSL #2]
00002e  4639              MOV      r1,r7
000030  f7fffffe          BL       eGFX_FMul_15_0to7_8
000034  8821              LDRH     r1,[r4,#0]
000036  4408              ADD      r0,r0,r1
000038  b200              SXTH     r0,r0
00003a  f8ad0008          STRH     r0,[sp,#8]
;;;580                        TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i-1].Y,Scale)   + LP->Center.Y;
00003e  1e69              SUBS     r1,r5,#1
000040  68a2              LDR      r2,[r4,#8]
000042  eb020181          ADD      r1,r2,r1,LSL #2
000046  f9b10002          LDRSH    r0,[r1,#2]
00004a  4639              MOV      r1,r7
00004c  f7fffffe          BL       eGFX_FMul_15_0to7_8
000050  8861              LDRH     r1,[r4,#2]
000052  4408              ADD      r0,r0,r1
000054  b200              SXTH     r0,r0
000056  f8ad000a          STRH     r0,[sp,#0xa]
;;;581                        TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[i].X,Scale)     + LP->Center.X;
00005a  68a1              LDR      r1,[r4,#8]
00005c  f9310025          LDRSH    r0,[r1,r5,LSL #2]
000060  4639              MOV      r1,r7
000062  f7fffffe          BL       eGFX_FMul_15_0to7_8
000066  8821              LDRH     r1,[r4,#0]
000068  4408              ADD      r0,r0,r1
00006a  b200              SXTH     r0,r0
00006c  f8ad000c          STRH     r0,[sp,#0xc]
;;;582                        TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[i].Y,Scale)     + LP->Center.Y;
000070  68a1              LDR      r1,[r4,#8]
000072  eb010185          ADD      r1,r1,r5,LSL #2
000076  f9b10002          LDRSH    r0,[r1,#2]
00007a  4639              MOV      r1,r7
00007c  f7fffffe          BL       eGFX_FMul_15_0to7_8
000080  8861              LDRH     r1,[r4,#2]
000082  4408              ADD      r0,r0,r1
000084  b201              SXTH     r1,r0
000086  f8ad100e          STRH     r1,[sp,#0xe]
;;;583                        eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
00008a  f9bd000e          LDRSH    r0,[sp,#0xe]
00008e  e9cd0600          STRD     r0,r6,[sp,#0]
000092  f9bd300c          LDRSH    r3,[sp,#0xc]
000096  f9bd200a          LDRSH    r2,[sp,#0xa]
00009a  f9bd1008          LDRSH    r1,[sp,#8]
00009e  4648              MOV      r0,r9
0000a0  f7fffffe          BL       eGFX_DrawLine
0000a4  1c68              ADDS     r0,r5,#1              ;577
0000a6  b2c5              UXTB     r5,r0                 ;577
                  |L50.168|
0000a8  7920              LDRB     r0,[r4,#4]            ;577
0000aa  42a8              CMP      r0,r5                 ;577
0000ac  dcbb              BGT      |L50.38|
;;;584                                      TransformedPoint[1].X,TransformedPoint[1].Y,PS);
;;;585                    }
;;;586    
;;;587                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[LP->NumPoints-1].X,Scale)   + LP->Center.X;
0000ae  7921              LDRB     r1,[r4,#4]
0000b0  1e49              SUBS     r1,r1,#1
0000b2  68a2              LDR      r2,[r4,#8]
0000b4  f9320021          LDRSH    r0,[r2,r1,LSL #2]
0000b8  4639              MOV      r1,r7
0000ba  f7fffffe          BL       eGFX_FMul_15_0to7_8
0000be  8821              LDRH     r1,[r4,#0]
0000c0  4408              ADD      r0,r0,r1
0000c2  b200              SXTH     r0,r0
0000c4  f8ad0008          STRH     r0,[sp,#8]
;;;588                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[LP->NumPoints-1].Y,Scale)   + LP->Center.Y;
0000c8  7921              LDRB     r1,[r4,#4]
0000ca  1e49              SUBS     r1,r1,#1
0000cc  68a2              LDR      r2,[r4,#8]
0000ce  eb020181          ADD      r1,r2,r1,LSL #2
0000d2  f9b10002          LDRSH    r0,[r1,#2]
0000d6  4639              MOV      r1,r7
0000d8  f7fffffe          BL       eGFX_FMul_15_0to7_8
0000dc  8861              LDRH     r1,[r4,#2]
0000de  4408              ADD      r0,r0,r1
0000e0  b200              SXTH     r0,r0
0000e2  f8ad000a          STRH     r0,[sp,#0xa]
;;;589                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[0].X,Scale)				 + LP->Center.X;
0000e6  68a1              LDR      r1,[r4,#8]
0000e8  f9b10000          LDRSH    r0,[r1,#0]
0000ec  4639              MOV      r1,r7
0000ee  f7fffffe          BL       eGFX_FMul_15_0to7_8
0000f2  8821              LDRH     r1,[r4,#0]
0000f4  4408              ADD      r0,r0,r1
0000f6  b200              SXTH     r0,r0
0000f8  f8ad000c          STRH     r0,[sp,#0xc]
;;;590                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[0].Y,Scale)				 + LP->Center.Y;
0000fc  68a1              LDR      r1,[r4,#8]
0000fe  f9b10002          LDRSH    r0,[r1,#2]
000102  4639              MOV      r1,r7
000104  f7fffffe          BL       eGFX_FMul_15_0to7_8
000108  8861              LDRH     r1,[r4,#2]
00010a  4408              ADD      r0,r0,r1
00010c  b201              SXTH     r1,r0
00010e  e002              B        |L50.278|
                  |L50.272|
000110  e0a7              B        |L50.610|
                  |L50.274|
000112  e010              B        |L50.310|
                  |L50.276|
000114  e056              B        |L50.452|
                  |L50.278|
000116  f8ad100e          STRH     r1,[sp,#0xe]
;;;591                    eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
00011a  f9bd000e          LDRSH    r0,[sp,#0xe]
00011e  e9cd0600          STRD     r0,r6,[sp,#0]
000122  f9bd300c          LDRSH    r3,[sp,#0xc]
000126  f9bd200a          LDRSH    r2,[sp,#0xa]
00012a  f9bd1008          LDRSH    r1,[sp,#8]
00012e  4648              MOV      r0,r9
000130  f7fffffe          BL       eGFX_DrawLine
;;;592                                  TransformedPoint[1].X,TransformedPoint[1].Y,PS);
;;;593                    break;
000134  e094              B        |L50.608|
                  |L50.310|
;;;594    
;;;595                case eGFX_LIST_PRIMITIVE_CONNECTED:
;;;596                    for(i=1; i<LP->NumPoints; i++)
000136  2501              MOVS     r5,#1
000138  e040              B        |L50.444|
                  |L50.314|
;;;597                    {
;;;598                        TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i-1].X,Scale) 	+ LP->Center.X;
00013a  1e69              SUBS     r1,r5,#1
00013c  68a2              LDR      r2,[r4,#8]
00013e  f9320021          LDRSH    r0,[r2,r1,LSL #2]
000142  4639              MOV      r1,r7
000144  f7fffffe          BL       eGFX_FMul_15_0to7_8
000148  8821              LDRH     r1,[r4,#0]
00014a  4408              ADD      r0,r0,r1
00014c  b200              SXTH     r0,r0
00014e  f8ad0008          STRH     r0,[sp,#8]
;;;599                        TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i-1].Y,Scale)   + LP->Center.Y;
000152  1e69              SUBS     r1,r5,#1
000154  68a2              LDR      r2,[r4,#8]
000156  eb020181          ADD      r1,r2,r1,LSL #2
00015a  f9b10002          LDRSH    r0,[r1,#2]
00015e  4639              MOV      r1,r7
000160  f7fffffe          BL       eGFX_FMul_15_0to7_8
000164  8861              LDRH     r1,[r4,#2]
000166  4408              ADD      r0,r0,r1
000168  b200              SXTH     r0,r0
00016a  f8ad000a          STRH     r0,[sp,#0xa]
;;;600                        TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[i].X,Scale)     + LP->Center.X;
00016e  68a1              LDR      r1,[r4,#8]
000170  f9310025          LDRSH    r0,[r1,r5,LSL #2]
000174  4639              MOV      r1,r7
000176  f7fffffe          BL       eGFX_FMul_15_0to7_8
00017a  8821              LDRH     r1,[r4,#0]
00017c  4408              ADD      r0,r0,r1
00017e  b200              SXTH     r0,r0
000180  f8ad000c          STRH     r0,[sp,#0xc]
;;;601                        TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[i].Y,Scale)     + LP->Center.Y;
000184  68a1              LDR      r1,[r4,#8]
000186  eb010185          ADD      r1,r1,r5,LSL #2
00018a  f9b10002          LDRSH    r0,[r1,#2]
00018e  4639              MOV      r1,r7
000190  f7fffffe          BL       eGFX_FMul_15_0to7_8
000194  8861              LDRH     r1,[r4,#2]
000196  4408              ADD      r0,r0,r1
000198  b201              SXTH     r1,r0
00019a  f8ad100e          STRH     r1,[sp,#0xe]
;;;602                        eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
00019e  f9bd000e          LDRSH    r0,[sp,#0xe]
0001a2  e9cd0600          STRD     r0,r6,[sp,#0]
0001a6  f9bd300c          LDRSH    r3,[sp,#0xc]
0001aa  f9bd200a          LDRSH    r2,[sp,#0xa]
0001ae  f9bd1008          LDRSH    r1,[sp,#8]
0001b2  4648              MOV      r0,r9
0001b4  f7fffffe          BL       eGFX_DrawLine
0001b8  1c68              ADDS     r0,r5,#1              ;596
0001ba  b2c5              UXTB     r5,r0                 ;596
                  |L50.444|
0001bc  7920              LDRB     r0,[r4,#4]            ;596
0001be  42a8              CMP      r0,r5                 ;596
0001c0  dcbb              BGT      |L50.314|
;;;603                                      TransformedPoint[1].X,TransformedPoint[1].Y,PS);
;;;604                    }
;;;605    
;;;606                    break;
0001c2  e04d              B        |L50.608|
                  |L50.452|
;;;607    
;;;608                case eGFX_LIST_PRIMITIVE_DISCONNECTED:
;;;609                    Points = LP->NumPoints>>1;
0001c4  7920              LDRB     r0,[r4,#4]
0001c6  ea4f0860          ASR      r8,r0,#1
;;;610    
;;;611                    for(i=0; i<Points; i++)
0001ca  2500              MOVS     r5,#0
0001cc  e045              B        |L50.602|
                  |L50.462|
;;;612                    {
;;;613                        TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i*2].X,Scale)		+ LP->Center.X;
0001ce  006a              LSLS     r2,r5,#1
0001d0  68a1              LDR      r1,[r4,#8]
0001d2  f9310022          LDRSH    r0,[r1,r2,LSL #2]
0001d6  4639              MOV      r1,r7
0001d8  f7fffffe          BL       eGFX_FMul_15_0to7_8
0001dc  8821              LDRH     r1,[r4,#0]
0001de  4408              ADD      r0,r0,r1
0001e0  b200              SXTH     r0,r0
0001e2  f8ad0008          STRH     r0,[sp,#8]
;;;614                        TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i*2].Y,Scale)		+ LP->Center.Y;
0001e6  68a1              LDR      r1,[r4,#8]
0001e8  eb0101c5          ADD      r1,r1,r5,LSL #3
0001ec  f9b10002          LDRSH    r0,[r1,#2]
0001f0  4639              MOV      r1,r7
0001f2  f7fffffe          BL       eGFX_FMul_15_0to7_8
0001f6  8861              LDRH     r1,[r4,#2]
0001f8  4408              ADD      r0,r0,r1
0001fa  b200              SXTH     r0,r0
0001fc  f8ad000a          STRH     r0,[sp,#0xa]
;;;615                        TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[(i*2)+1].X,Scale)   + LP->Center.X;
000200  2201              MOVS     r2,#1
000202  eb020245          ADD      r2,r2,r5,LSL #1
000206  68a1              LDR      r1,[r4,#8]
000208  f9310022          LDRSH    r0,[r1,r2,LSL #2]
00020c  4639              MOV      r1,r7
00020e  f7fffffe          BL       eGFX_FMul_15_0to7_8
000212  8821              LDRH     r1,[r4,#0]
000214  4408              ADD      r0,r0,r1
000216  b200              SXTH     r0,r0
000218  f8ad000c          STRH     r0,[sp,#0xc]
;;;616                        TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[(i*2)+1].Y,Scale)   + LP->Center.Y;
00021c  2201              MOVS     r2,#1
00021e  eb020245          ADD      r2,r2,r5,LSL #1
000222  68a1              LDR      r1,[r4,#8]
000224  eb010182          ADD      r1,r1,r2,LSL #2
000228  f9b10002          LDRSH    r0,[r1,#2]
00022c  4639              MOV      r1,r7
00022e  f7fffffe          BL       eGFX_FMul_15_0to7_8
000232  8861              LDRH     r1,[r4,#2]
000234  4408              ADD      r0,r0,r1
000236  b201              SXTH     r1,r0
000238  f8ad100e          STRH     r1,[sp,#0xe]
;;;617                        eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
00023c  f9bd000e          LDRSH    r0,[sp,#0xe]
000240  e9cd0600          STRD     r0,r6,[sp,#0]
000244  f9bd300c          LDRSH    r3,[sp,#0xc]
000248  f9bd200a          LDRSH    r2,[sp,#0xa]
00024c  f9bd1008          LDRSH    r1,[sp,#8]
000250  4648              MOV      r0,r9
000252  f7fffffe          BL       eGFX_DrawLine
000256  1c68              ADDS     r0,r5,#1              ;611
000258  b2c5              UXTB     r5,r0                 ;611
                  |L50.602|
00025a  4545              CMP      r5,r8                 ;611
00025c  dbb7              BLT      |L50.462|
;;;618                                      TransformedPoint[1].X,TransformedPoint[1].Y,PS);
;;;619                    }
;;;620    
;;;621                    break;
00025e  bf00              NOP      
                  |L50.608|
000260  bf00              NOP                            ;593
                  |L50.610|
;;;622            }
;;;623        }
;;;624    }
000262  e8bd83ff          POP      {r0-r9,pc}
;;;625    
                          ENDP


                          AREA ||i.eGFX_DrawScaledRotatedListPrimitive||, CODE, READONLY, ALIGN=2

                  eGFX_DrawScaledRotatedListPrimitive PROC
;;;722    
;;;723    void eGFX_DrawScaledRotatedListPrimitive(eGFX_ImagePlane *Image,
000000  b51f              PUSH     {r0-r4,lr}
;;;724            eGFX_ListPrimitive *LP ,
;;;725            uint8_t Angle,
;;;726            FIXED_7_8 Scale,
;;;727            eGFX_PixelState PS)
;;;728    {
000002  b088              SUB      sp,sp,#0x20
;;;729        uint8_t i;
;;;730        eGFX_Point TransformedPoint[2];
;;;731    
;;;732        if(LP->NumPoints >1)
000004  9809              LDR      r0,[sp,#0x24]
000006  7900              LDRB     r0,[r0,#4]
000008  2801              CMP      r0,#1
00000a  dd7d              BLE      |L51.264|
;;;733        {
;;;734            switch(LP->DrawMode)
00000c  9809              LDR      r0,[sp,#0x24]
00000e  7940              LDRB     r0,[r0,#5]
000010  2801              CMP      r0,#1
000012  d07a              BEQ      |L51.266|
000014  2802              CMP      r0,#2
000016  d079              BEQ      |L51.268|
000018  2803              CMP      r0,#3
00001a  d000              BEQ      |L51.30|
;;;735            {
;;;736                default:
;;;737                case eGFX_LIST_PRIMITIVE_CLOSED:
00001c  bf00              NOP      
                  |L51.30|
;;;738                    for(i=1; i<LP->NumPoints; i++)
00001e  2001              MOVS     r0,#1
000020  9007              STR      r0,[sp,#0x1c]
000022  e0eb              B        |L51.508|
                  |L51.36|
;;;739                    {
;;;740                        TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
000024  9809              LDR      r0,[sp,#0x24]
000026  6881              LDR      r1,[r0,#8]
000028  9807              LDR      r0,[sp,#0x1c]
00002a  1e40              SUBS     r0,r0,#1
00002c  f9310020          LDRSH    r0,[r1,r0,LSL #2]
000030  9003              STR      r0,[sp,#0xc]
000032  980a              LDR      r0,[sp,#0x28]
000034  3040              ADDS     r0,r0,#0x40
000036  b2c0              UXTB     r0,r0
000038  49fe              LDR      r1,|L51.1076|
00003a  f9310010          LDRSH    r0,[r1,r0,LSL #1]
00003e  4601              MOV      r1,r0
000040  9004              STR      r0,[sp,#0x10]
000042  9803              LDR      r0,[sp,#0xc]
000044  f7fffffe          BL       eGFX_FMul_15_0to1_14
000048  4604              MOV      r4,r0
00004a  9809              LDR      r0,[sp,#0x24]
00004c  6881              LDR      r1,[r0,#8]
00004e  9807              LDR      r0,[sp,#0x1c]
000050  1e40              SUBS     r0,r0,#1
000052  eb010080          ADD      r0,r1,r0,LSL #2
000056  f9b00002          LDRSH    r0,[r0,#2]
00005a  49f6              LDR      r1,|L51.1076|
00005c  9003              STR      r0,[sp,#0xc]
00005e  980a              LDR      r0,[sp,#0x28]
000060  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000064  4601              MOV      r1,r0
000066  9004              STR      r0,[sp,#0x10]
000068  9803              LDR      r0,[sp,#0xc]
00006a  f7fffffe          BL       eGFX_FMul_15_0to1_14
00006e  1a20              SUBS     r0,r4,r0
000070  b200              SXTH     r0,r0
000072  f8ad0014          STRH     r0,[sp,#0x14]
;;;741                                                 eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
;;;742                        TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
000076  9809              LDR      r0,[sp,#0x24]
000078  6881              LDR      r1,[r0,#8]
00007a  9807              LDR      r0,[sp,#0x1c]
00007c  1e40              SUBS     r0,r0,#1
00007e  f9310020          LDRSH    r0,[r1,r0,LSL #2]
000082  49ec              LDR      r1,|L51.1076|
000084  9003              STR      r0,[sp,#0xc]
000086  980a              LDR      r0,[sp,#0x28]
000088  f9310010          LDRSH    r0,[r1,r0,LSL #1]
00008c  4601              MOV      r1,r0
00008e  9004              STR      r0,[sp,#0x10]
000090  9803              LDR      r0,[sp,#0xc]
000092  f7fffffe          BL       eGFX_FMul_15_0to1_14
000096  4604              MOV      r4,r0
000098  9809              LDR      r0,[sp,#0x24]
00009a  6881              LDR      r1,[r0,#8]
00009c  9807              LDR      r0,[sp,#0x1c]
00009e  1e40              SUBS     r0,r0,#1
0000a0  eb010080          ADD      r0,r1,r0,LSL #2
0000a4  f9b00002          LDRSH    r0,[r0,#2]
0000a8  9003              STR      r0,[sp,#0xc]
0000aa  980a              LDR      r0,[sp,#0x28]
0000ac  3040              ADDS     r0,r0,#0x40
0000ae  b2c0              UXTB     r0,r0
0000b0  49e0              LDR      r1,|L51.1076|
0000b2  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0000b6  4601              MOV      r1,r0
0000b8  9004              STR      r0,[sp,#0x10]
0000ba  9803              LDR      r0,[sp,#0xc]
0000bc  f7fffffe          BL       eGFX_FMul_15_0to1_14
0000c0  4420              ADD      r0,r0,r4
0000c2  b200              SXTH     r0,r0
0000c4  f8ad0016          STRH     r0,[sp,#0x16]
;;;743                                                  eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
;;;744                        TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
0000c8  9809              LDR      r0,[sp,#0x24]
0000ca  6881              LDR      r1,[r0,#8]
0000cc  9807              LDR      r0,[sp,#0x1c]
0000ce  f9310020          LDRSH    r0,[r1,r0,LSL #2]
0000d2  9003              STR      r0,[sp,#0xc]
0000d4  980a              LDR      r0,[sp,#0x28]
0000d6  3040              ADDS     r0,r0,#0x40
0000d8  b2c0              UXTB     r0,r0
0000da  49d6              LDR      r1,|L51.1076|
0000dc  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0000e0  4601              MOV      r1,r0
0000e2  9004              STR      r0,[sp,#0x10]
0000e4  9803              LDR      r0,[sp,#0xc]
0000e6  f7fffffe          BL       eGFX_FMul_15_0to1_14
0000ea  4604              MOV      r4,r0
0000ec  9809              LDR      r0,[sp,#0x24]
0000ee  6881              LDR      r1,[r0,#8]
0000f0  9807              LDR      r0,[sp,#0x1c]
0000f2  eb010080          ADD      r0,r1,r0,LSL #2
0000f6  f9b00002          LDRSH    r0,[r0,#2]
0000fa  49ce              LDR      r1,|L51.1076|
0000fc  9003              STR      r0,[sp,#0xc]
0000fe  980a              LDR      r0,[sp,#0x28]
000100  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000104  4601              MOV      r1,r0
000106  e002              B        |L51.270|
                  |L51.264|
000108  e34a              B        |L51.1952|
                  |L51.266|
00010a  e256              B        |L51.1466|
                  |L51.268|
00010c  e155              B        |L51.954|
                  |L51.270|
00010e  9004              STR      r0,[sp,#0x10]
000110  9803              LDR      r0,[sp,#0xc]
000112  f7fffffe          BL       eGFX_FMul_15_0to1_14
000116  1a20              SUBS     r0,r4,r0
000118  b200              SXTH     r0,r0
00011a  f8ad0018          STRH     r0,[sp,#0x18]
;;;745                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
;;;746                        TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
00011e  9809              LDR      r0,[sp,#0x24]
000120  6881              LDR      r1,[r0,#8]
000122  9807              LDR      r0,[sp,#0x1c]
000124  f9310020          LDRSH    r0,[r1,r0,LSL #2]
000128  49c2              LDR      r1,|L51.1076|
00012a  9003              STR      r0,[sp,#0xc]
00012c  980a              LDR      r0,[sp,#0x28]
00012e  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000132  4601              MOV      r1,r0
000134  9004              STR      r0,[sp,#0x10]
000136  9803              LDR      r0,[sp,#0xc]
000138  f7fffffe          BL       eGFX_FMul_15_0to1_14
00013c  4604              MOV      r4,r0
00013e  9809              LDR      r0,[sp,#0x24]
000140  6881              LDR      r1,[r0,#8]
000142  9807              LDR      r0,[sp,#0x1c]
000144  eb010080          ADD      r0,r1,r0,LSL #2
000148  f9b00002          LDRSH    r0,[r0,#2]
00014c  9003              STR      r0,[sp,#0xc]
00014e  980a              LDR      r0,[sp,#0x28]
000150  3040              ADDS     r0,r0,#0x40
000152  b2c0              UXTB     r0,r0
000154  49b7              LDR      r1,|L51.1076|
000156  f9310010          LDRSH    r0,[r1,r0,LSL #1]
00015a  4601              MOV      r1,r0
00015c  9004              STR      r0,[sp,#0x10]
00015e  9803              LDR      r0,[sp,#0xc]
000160  f7fffffe          BL       eGFX_FMul_15_0to1_14
000164  4420              ADD      r0,r0,r4
000166  b201              SXTH     r1,r0
000168  f8ad101a          STRH     r1,[sp,#0x1a]
;;;747                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
;;;748                        TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
00016c  f9bd0014          LDRSH    r0,[sp,#0x14]
000170  9004              STR      r0,[sp,#0x10]
000172  990b              LDR      r1,[sp,#0x2c]
000174  f7fffffe          BL       eGFX_FMul_15_0to7_8
000178  9909              LDR      r1,[sp,#0x24]
00017a  8809              LDRH     r1,[r1,#0]
00017c  4408              ADD      r0,r0,r1
00017e  b200              SXTH     r0,r0
000180  f8ad0014          STRH     r0,[sp,#0x14]
;;;749                        TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
000184  f9bd0016          LDRSH    r0,[sp,#0x16]
000188  9004              STR      r0,[sp,#0x10]
00018a  990b              LDR      r1,[sp,#0x2c]
00018c  f7fffffe          BL       eGFX_FMul_15_0to7_8
000190  9909              LDR      r1,[sp,#0x24]
000192  8849              LDRH     r1,[r1,#2]
000194  4408              ADD      r0,r0,r1
000196  b200              SXTH     r0,r0
000198  f8ad0016          STRH     r0,[sp,#0x16]
;;;750                        TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
00019c  f9bd0018          LDRSH    r0,[sp,#0x18]
0001a0  9004              STR      r0,[sp,#0x10]
0001a2  990b              LDR      r1,[sp,#0x2c]
0001a4  f7fffffe          BL       eGFX_FMul_15_0to7_8
0001a8  9909              LDR      r1,[sp,#0x24]
0001aa  8809              LDRH     r1,[r1,#0]
0001ac  4408              ADD      r0,r0,r1
0001ae  b200              SXTH     r0,r0
0001b0  f8ad0018          STRH     r0,[sp,#0x18]
;;;751                        TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
0001b4  f9bd001a          LDRSH    r0,[sp,#0x1a]
0001b8  9004              STR      r0,[sp,#0x10]
0001ba  990b              LDR      r1,[sp,#0x2c]
0001bc  f7fffffe          BL       eGFX_FMul_15_0to7_8
0001c0  9909              LDR      r1,[sp,#0x24]
0001c2  8849              LDRH     r1,[r1,#2]
0001c4  4408              ADD      r0,r0,r1
0001c6  b201              SXTH     r1,r0
0001c8  f8ad101a          STRH     r1,[sp,#0x1a]
;;;752                        eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
0001cc  f9bd101a          LDRSH    r1,[sp,#0x1a]
0001d0  980e              LDR      r0,[sp,#0x38]
0001d2  e9cd1000          STRD     r1,r0,[sp,#0]
0001d6  f9bd0018          LDRSH    r0,[sp,#0x18]
0001da  9004              STR      r0,[sp,#0x10]
0001dc  f9bd0016          LDRSH    r0,[sp,#0x16]
0001e0  9003              STR      r0,[sp,#0xc]
0001e2  f9bd0014          LDRSH    r0,[sp,#0x14]
0001e6  9002              STR      r0,[sp,#8]
0001e8  4601              MOV      r1,r0
0001ea  e9dd2303          LDRD     r2,r3,[sp,#0xc]
0001ee  9808              LDR      r0,[sp,#0x20]
0001f0  f7fffffe          BL       eGFX_DrawLine
0001f4  9807              LDR      r0,[sp,#0x1c]         ;738
0001f6  1c40              ADDS     r0,r0,#1              ;738
0001f8  b2c0              UXTB     r0,r0                 ;738
0001fa  9007              STR      r0,[sp,#0x1c]         ;738
                  |L51.508|
0001fc  9809              LDR      r0,[sp,#0x24]         ;738
0001fe  7901              LDRB     r1,[r0,#4]            ;738
000200  9807              LDR      r0,[sp,#0x1c]         ;738
000202  4281              CMP      r1,r0                 ;738
000204  f73faf0e          BGT      |L51.36|
;;;753                                      (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
;;;754                    }
;;;755    
;;;756                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
000208  9809              LDR      r0,[sp,#0x24]
00020a  6881              LDR      r1,[r0,#8]
00020c  7900              LDRB     r0,[r0,#4]
00020e  1e40              SUBS     r0,r0,#1
000210  f9310020          LDRSH    r0,[r1,r0,LSL #2]
000214  9003              STR      r0,[sp,#0xc]
000216  980a              LDR      r0,[sp,#0x28]
000218  3040              ADDS     r0,r0,#0x40
00021a  b2c0              UXTB     r0,r0
00021c  4985              LDR      r1,|L51.1076|
00021e  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000222  4601              MOV      r1,r0
000224  9004              STR      r0,[sp,#0x10]
000226  9803              LDR      r0,[sp,#0xc]
000228  f7fffffe          BL       eGFX_FMul_15_0to1_14
00022c  4604              MOV      r4,r0
00022e  9809              LDR      r0,[sp,#0x24]
000230  6881              LDR      r1,[r0,#8]
000232  7900              LDRB     r0,[r0,#4]
000234  1e40              SUBS     r0,r0,#1
000236  eb010080          ADD      r0,r1,r0,LSL #2
00023a  f9b00002          LDRSH    r0,[r0,#2]
00023e  497d              LDR      r1,|L51.1076|
000240  9003              STR      r0,[sp,#0xc]
000242  980a              LDR      r0,[sp,#0x28]
000244  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000248  4601              MOV      r1,r0
00024a  9004              STR      r0,[sp,#0x10]
00024c  9803              LDR      r0,[sp,#0xc]
00024e  f7fffffe          BL       eGFX_FMul_15_0to1_14
000252  1a20              SUBS     r0,r4,r0
000254  b200              SXTH     r0,r0
000256  f8ad0014          STRH     r0,[sp,#0x14]
;;;757                                             eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
;;;758                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
00025a  9809              LDR      r0,[sp,#0x24]
00025c  6881              LDR      r1,[r0,#8]
00025e  7900              LDRB     r0,[r0,#4]
000260  1e40              SUBS     r0,r0,#1
000262  f9310020          LDRSH    r0,[r1,r0,LSL #2]
000266  4973              LDR      r1,|L51.1076|
000268  9003              STR      r0,[sp,#0xc]
00026a  980a              LDR      r0,[sp,#0x28]
00026c  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000270  4601              MOV      r1,r0
000272  9004              STR      r0,[sp,#0x10]
000274  9803              LDR      r0,[sp,#0xc]
000276  f7fffffe          BL       eGFX_FMul_15_0to1_14
00027a  4604              MOV      r4,r0
00027c  9809              LDR      r0,[sp,#0x24]
00027e  6881              LDR      r1,[r0,#8]
000280  7900              LDRB     r0,[r0,#4]
000282  1e40              SUBS     r0,r0,#1
000284  eb010080          ADD      r0,r1,r0,LSL #2
000288  f9b00002          LDRSH    r0,[r0,#2]
00028c  9003              STR      r0,[sp,#0xc]
00028e  980a              LDR      r0,[sp,#0x28]
000290  3040              ADDS     r0,r0,#0x40
000292  b2c0              UXTB     r0,r0
000294  4967              LDR      r1,|L51.1076|
000296  f9310010          LDRSH    r0,[r1,r0,LSL #1]
00029a  4601              MOV      r1,r0
00029c  9004              STR      r0,[sp,#0x10]
00029e  9803              LDR      r0,[sp,#0xc]
0002a0  f7fffffe          BL       eGFX_FMul_15_0to1_14
0002a4  4420              ADD      r0,r0,r4
0002a6  b200              SXTH     r0,r0
0002a8  f8ad0016          STRH     r0,[sp,#0x16]
;;;759                                              eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
;;;760                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
0002ac  980a              LDR      r0,[sp,#0x28]
0002ae  3040              ADDS     r0,r0,#0x40
0002b0  b2c0              UXTB     r0,r0
0002b2  4960              LDR      r1,|L51.1076|
0002b4  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0002b8  9004              STR      r0,[sp,#0x10]
0002ba  9809              LDR      r0,[sp,#0x24]
0002bc  6880              LDR      r0,[r0,#8]
0002be  f9b00000          LDRSH    r0,[r0,#0]
0002c2  9003              STR      r0,[sp,#0xc]
0002c4  9904              LDR      r1,[sp,#0x10]
0002c6  f7fffffe          BL       eGFX_FMul_15_0to1_14
0002ca  4604              MOV      r4,r0
0002cc  4959              LDR      r1,|L51.1076|
0002ce  980a              LDR      r0,[sp,#0x28]
0002d0  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0002d4  9004              STR      r0,[sp,#0x10]
0002d6  9809              LDR      r0,[sp,#0x24]
0002d8  6880              LDR      r0,[r0,#8]
0002da  f9b00002          LDRSH    r0,[r0,#2]
0002de  9003              STR      r0,[sp,#0xc]
0002e0  9904              LDR      r1,[sp,#0x10]
0002e2  f7fffffe          BL       eGFX_FMul_15_0to1_14
0002e6  1a20              SUBS     r0,r4,r0
0002e8  b200              SXTH     r0,r0
0002ea  f8ad0018          STRH     r0,[sp,#0x18]
;;;761                                             eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
;;;762                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[Angle]) +
0002ee  4951              LDR      r1,|L51.1076|
0002f0  980a              LDR      r0,[sp,#0x28]
0002f2  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0002f6  9004              STR      r0,[sp,#0x10]
0002f8  9809              LDR      r0,[sp,#0x24]
0002fa  6880              LDR      r0,[r0,#8]
0002fc  f9b00000          LDRSH    r0,[r0,#0]
000300  9003              STR      r0,[sp,#0xc]
000302  9904              LDR      r1,[sp,#0x10]
000304  f7fffffe          BL       eGFX_FMul_15_0to1_14
000308  4604              MOV      r4,r0
00030a  980a              LDR      r0,[sp,#0x28]
00030c  3040              ADDS     r0,r0,#0x40
00030e  b2c0              UXTB     r0,r0
000310  4948              LDR      r1,|L51.1076|
000312  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000316  9004              STR      r0,[sp,#0x10]
000318  9809              LDR      r0,[sp,#0x24]
00031a  6880              LDR      r0,[r0,#8]
00031c  f9b00002          LDRSH    r0,[r0,#2]
000320  9003              STR      r0,[sp,#0xc]
000322  9904              LDR      r1,[sp,#0x10]
000324  f7fffffe          BL       eGFX_FMul_15_0to1_14
000328  4420              ADD      r0,r0,r4
00032a  b201              SXTH     r1,r0
00032c  f8ad101a          STRH     r1,[sp,#0x1a]
;;;763                                             eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
;;;764                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
000330  f9bd0014          LDRSH    r0,[sp,#0x14]
000334  9004              STR      r0,[sp,#0x10]
000336  990b              LDR      r1,[sp,#0x2c]
000338  f7fffffe          BL       eGFX_FMul_15_0to7_8
00033c  9909              LDR      r1,[sp,#0x24]
00033e  8809              LDRH     r1,[r1,#0]
000340  4408              ADD      r0,r0,r1
000342  b200              SXTH     r0,r0
000344  f8ad0014          STRH     r0,[sp,#0x14]
;;;765                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
000348  f9bd0016          LDRSH    r0,[sp,#0x16]
00034c  9004              STR      r0,[sp,#0x10]
00034e  990b              LDR      r1,[sp,#0x2c]
000350  f7fffffe          BL       eGFX_FMul_15_0to7_8
000354  9909              LDR      r1,[sp,#0x24]
000356  8849              LDRH     r1,[r1,#2]
000358  4408              ADD      r0,r0,r1
00035a  b200              SXTH     r0,r0
00035c  f8ad0016          STRH     r0,[sp,#0x16]
;;;766                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
000360  f9bd0018          LDRSH    r0,[sp,#0x18]
000364  9004              STR      r0,[sp,#0x10]
000366  990b              LDR      r1,[sp,#0x2c]
000368  f7fffffe          BL       eGFX_FMul_15_0to7_8
00036c  9909              LDR      r1,[sp,#0x24]
00036e  8809              LDRH     r1,[r1,#0]
000370  4408              ADD      r0,r0,r1
000372  b200              SXTH     r0,r0
000374  f8ad0018          STRH     r0,[sp,#0x18]
;;;767                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
000378  f9bd001a          LDRSH    r0,[sp,#0x1a]
00037c  9004              STR      r0,[sp,#0x10]
00037e  990b              LDR      r1,[sp,#0x2c]
000380  f7fffffe          BL       eGFX_FMul_15_0to7_8
000384  9909              LDR      r1,[sp,#0x24]
000386  8849              LDRH     r1,[r1,#2]
000388  4408              ADD      r0,r0,r1
00038a  b201              SXTH     r1,r0
00038c  f8ad101a          STRH     r1,[sp,#0x1a]
;;;768                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
000390  f9bd101a          LDRSH    r1,[sp,#0x1a]
000394  980e              LDR      r0,[sp,#0x38]
000396  e9cd1000          STRD     r1,r0,[sp,#0]
00039a  f9bd0018          LDRSH    r0,[sp,#0x18]
00039e  9004              STR      r0,[sp,#0x10]
0003a0  f9bd0016          LDRSH    r0,[sp,#0x16]
0003a4  9003              STR      r0,[sp,#0xc]
0003a6  f9bd0014          LDRSH    r0,[sp,#0x14]
0003aa  9002              STR      r0,[sp,#8]
0003ac  4601              MOV      r1,r0
0003ae  e9dd2303          LDRD     r2,r3,[sp,#0xc]
0003b2  9808              LDR      r0,[sp,#0x20]
0003b4  f7fffffe          BL       eGFX_DrawLine
;;;769                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
;;;770                    break;
0003b8  e1f1              B        |L51.1950|
                  |L51.954|
;;;771    
;;;772                case eGFX_LIST_PRIMITIVE_DISCONNECTED:
;;;773                    for(i=0; i<LP->NumPoints>>1; i++)
0003ba  2000              MOVS     r0,#0
0003bc  9007              STR      r0,[sp,#0x1c]
0003be  e0f4              B        |L51.1450|
                  |L51.960|
;;;774                    {
;;;775                        TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
0003c0  9809              LDR      r0,[sp,#0x24]
0003c2  6881              LDR      r1,[r0,#8]
0003c4  9807              LDR      r0,[sp,#0x1c]
0003c6  0040              LSLS     r0,r0,#1
0003c8  f9310020          LDRSH    r0,[r1,r0,LSL #2]
0003cc  9003              STR      r0,[sp,#0xc]
0003ce  980a              LDR      r0,[sp,#0x28]
0003d0  3040              ADDS     r0,r0,#0x40
0003d2  b2c0              UXTB     r0,r0
0003d4  4917              LDR      r1,|L51.1076|
0003d6  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0003da  4601              MOV      r1,r0
0003dc  9004              STR      r0,[sp,#0x10]
0003de  9803              LDR      r0,[sp,#0xc]
0003e0  f7fffffe          BL       eGFX_FMul_15_0to1_14
0003e4  4604              MOV      r4,r0
0003e6  9809              LDR      r0,[sp,#0x24]
0003e8  6881              LDR      r1,[r0,#8]
0003ea  9807              LDR      r0,[sp,#0x1c]
0003ec  eb0100c0          ADD      r0,r1,r0,LSL #3
0003f0  f9b00002          LDRSH    r0,[r0,#2]
0003f4  490f              LDR      r1,|L51.1076|
0003f6  9003              STR      r0,[sp,#0xc]
0003f8  980a              LDR      r0,[sp,#0x28]
0003fa  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0003fe  4601              MOV      r1,r0
000400  9004              STR      r0,[sp,#0x10]
000402  9803              LDR      r0,[sp,#0xc]
000404  f7fffffe          BL       eGFX_FMul_15_0to1_14
000408  1a20              SUBS     r0,r4,r0
00040a  b200              SXTH     r0,r0
00040c  f8ad0014          STRH     r0,[sp,#0x14]
;;;776                                                 eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
;;;777                        TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[Angle]) +
000410  9809              LDR      r0,[sp,#0x24]
000412  6881              LDR      r1,[r0,#8]
000414  9807              LDR      r0,[sp,#0x1c]
000416  0040              LSLS     r0,r0,#1
000418  f9310020          LDRSH    r0,[r1,r0,LSL #2]
00041c  4905              LDR      r1,|L51.1076|
00041e  9003              STR      r0,[sp,#0xc]
000420  980a              LDR      r0,[sp,#0x28]
000422  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000426  4601              MOV      r1,r0
000428  9004              STR      r0,[sp,#0x10]
00042a  9803              LDR      r0,[sp,#0xc]
00042c  f7fffffe          BL       eGFX_FMul_15_0to1_14
000430  4604              MOV      r4,r0
000432  e001              B        |L51.1080|
                  |L51.1076|
                          DCD      eGFX_Fixed_1_14_SineTable
                  |L51.1080|
000438  9809              LDR      r0,[sp,#0x24]
00043a  6881              LDR      r1,[r0,#8]
00043c  9807              LDR      r0,[sp,#0x1c]
00043e  eb0100c0          ADD      r0,r1,r0,LSL #3
000442  f9b00002          LDRSH    r0,[r0,#2]
000446  9003              STR      r0,[sp,#0xc]
000448  980a              LDR      r0,[sp,#0x28]
00044a  3040              ADDS     r0,r0,#0x40
00044c  b2c0              UXTB     r0,r0
00044e  49d5              LDR      r1,|L51.1956|
000450  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000454  4601              MOV      r1,r0
000456  9004              STR      r0,[sp,#0x10]
000458  9803              LDR      r0,[sp,#0xc]
00045a  f7fffffe          BL       eGFX_FMul_15_0to1_14
00045e  4420              ADD      r0,r0,r4
000460  b200              SXTH     r0,r0
000462  f8ad0016          STRH     r0,[sp,#0x16]
;;;778                                                  eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
;;;779                        TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
000466  9809              LDR      r0,[sp,#0x24]
000468  6881              LDR      r1,[r0,#8]
00046a  2201              MOVS     r2,#1
00046c  9807              LDR      r0,[sp,#0x1c]
00046e  eb020040          ADD      r0,r2,r0,LSL #1
000472  f9310020          LDRSH    r0,[r1,r0,LSL #2]
000476  9003              STR      r0,[sp,#0xc]
000478  980a              LDR      r0,[sp,#0x28]
00047a  3040              ADDS     r0,r0,#0x40
00047c  b2c0              UXTB     r0,r0
00047e  49c9              LDR      r1,|L51.1956|
000480  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000484  4601              MOV      r1,r0
000486  9004              STR      r0,[sp,#0x10]
000488  9803              LDR      r0,[sp,#0xc]
00048a  f7fffffe          BL       eGFX_FMul_15_0to1_14
00048e  4604              MOV      r4,r0
000490  9809              LDR      r0,[sp,#0x24]
000492  6881              LDR      r1,[r0,#8]
000494  2201              MOVS     r2,#1
000496  9807              LDR      r0,[sp,#0x1c]
000498  eb020040          ADD      r0,r2,r0,LSL #1
00049c  eb010080          ADD      r0,r1,r0,LSL #2
0004a0  f9b00002          LDRSH    r0,[r0,#2]
0004a4  49bf              LDR      r1,|L51.1956|
0004a6  9003              STR      r0,[sp,#0xc]
0004a8  980a              LDR      r0,[sp,#0x28]
0004aa  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0004ae  4601              MOV      r1,r0
0004b0  9004              STR      r0,[sp,#0x10]
0004b2  9803              LDR      r0,[sp,#0xc]
0004b4  f7fffffe          BL       eGFX_FMul_15_0to1_14
0004b8  1a20              SUBS     r0,r4,r0
0004ba  b200              SXTH     r0,r0
0004bc  f8ad0018          STRH     r0,[sp,#0x18]
;;;780                                                 eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
;;;781                        TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
0004c0  9809              LDR      r0,[sp,#0x24]
0004c2  6881              LDR      r1,[r0,#8]
0004c4  2201              MOVS     r2,#1
0004c6  9807              LDR      r0,[sp,#0x1c]
0004c8  eb020040          ADD      r0,r2,r0,LSL #1
0004cc  f9310020          LDRSH    r0,[r1,r0,LSL #2]
0004d0  49b4              LDR      r1,|L51.1956|
0004d2  9003              STR      r0,[sp,#0xc]
0004d4  980a              LDR      r0,[sp,#0x28]
0004d6  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0004da  4601              MOV      r1,r0
0004dc  9004              STR      r0,[sp,#0x10]
0004de  9803              LDR      r0,[sp,#0xc]
0004e0  f7fffffe          BL       eGFX_FMul_15_0to1_14
0004e4  4604              MOV      r4,r0
0004e6  9809              LDR      r0,[sp,#0x24]
0004e8  6881              LDR      r1,[r0,#8]
0004ea  2201              MOVS     r2,#1
0004ec  9807              LDR      r0,[sp,#0x1c]
0004ee  eb020040          ADD      r0,r2,r0,LSL #1
0004f2  eb010080          ADD      r0,r1,r0,LSL #2
0004f6  f9b00002          LDRSH    r0,[r0,#2]
0004fa  9003              STR      r0,[sp,#0xc]
0004fc  980a              LDR      r0,[sp,#0x28]
0004fe  3040              ADDS     r0,r0,#0x40
000500  b2c0              UXTB     r0,r0
000502  49a8              LDR      r1,|L51.1956|
000504  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000508  4601              MOV      r1,r0
00050a  9004              STR      r0,[sp,#0x10]
00050c  9803              LDR      r0,[sp,#0xc]
00050e  f7fffffe          BL       eGFX_FMul_15_0to1_14
000512  4420              ADD      r0,r0,r4
000514  b201              SXTH     r1,r0
000516  f8ad101a          STRH     r1,[sp,#0x1a]
;;;782                                                 eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
;;;783                        TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
00051a  f9bd0014          LDRSH    r0,[sp,#0x14]
00051e  9004              STR      r0,[sp,#0x10]
000520  990b              LDR      r1,[sp,#0x2c]
000522  f7fffffe          BL       eGFX_FMul_15_0to7_8
000526  9909              LDR      r1,[sp,#0x24]
000528  8809              LDRH     r1,[r1,#0]
00052a  4408              ADD      r0,r0,r1
00052c  b200              SXTH     r0,r0
00052e  f8ad0014          STRH     r0,[sp,#0x14]
;;;784                        TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
000532  f9bd0016          LDRSH    r0,[sp,#0x16]
000536  9004              STR      r0,[sp,#0x10]
000538  990b              LDR      r1,[sp,#0x2c]
00053a  f7fffffe          BL       eGFX_FMul_15_0to7_8
00053e  9909              LDR      r1,[sp,#0x24]
000540  8849              LDRH     r1,[r1,#2]
000542  4408              ADD      r0,r0,r1
000544  b200              SXTH     r0,r0
000546  f8ad0016          STRH     r0,[sp,#0x16]
;;;785                        TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
00054a  f9bd0018          LDRSH    r0,[sp,#0x18]
00054e  9004              STR      r0,[sp,#0x10]
000550  990b              LDR      r1,[sp,#0x2c]
000552  f7fffffe          BL       eGFX_FMul_15_0to7_8
000556  9909              LDR      r1,[sp,#0x24]
000558  8809              LDRH     r1,[r1,#0]
00055a  4408              ADD      r0,r0,r1
00055c  b200              SXTH     r0,r0
00055e  f8ad0018          STRH     r0,[sp,#0x18]
;;;786                        TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
000562  f9bd001a          LDRSH    r0,[sp,#0x1a]
000566  9004              STR      r0,[sp,#0x10]
000568  990b              LDR      r1,[sp,#0x2c]
00056a  f7fffffe          BL       eGFX_FMul_15_0to7_8
00056e  9909              LDR      r1,[sp,#0x24]
000570  8849              LDRH     r1,[r1,#2]
000572  4408              ADD      r0,r0,r1
000574  b201              SXTH     r1,r0
000576  f8ad101a          STRH     r1,[sp,#0x1a]
;;;787                        eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
00057a  f9bd101a          LDRSH    r1,[sp,#0x1a]
00057e  980e              LDR      r0,[sp,#0x38]
000580  e9cd1000          STRD     r1,r0,[sp,#0]
000584  f9bd0018          LDRSH    r0,[sp,#0x18]
000588  9004              STR      r0,[sp,#0x10]
00058a  f9bd0016          LDRSH    r0,[sp,#0x16]
00058e  9003              STR      r0,[sp,#0xc]
000590  f9bd0014          LDRSH    r0,[sp,#0x14]
000594  9002              STR      r0,[sp,#8]
000596  4601              MOV      r1,r0
000598  e9dd2303          LDRD     r2,r3,[sp,#0xc]
00059c  9808              LDR      r0,[sp,#0x20]
00059e  f7fffffe          BL       eGFX_DrawLine
0005a2  9807              LDR      r0,[sp,#0x1c]         ;773
0005a4  1c40              ADDS     r0,r0,#1              ;773
0005a6  b2c0              UXTB     r0,r0                 ;773
0005a8  9007              STR      r0,[sp,#0x1c]         ;773
                  |L51.1450|
0005aa  9809              LDR      r0,[sp,#0x24]         ;773
0005ac  7901              LDRB     r1,[r0,#4]            ;773
0005ae  9807              LDR      r0,[sp,#0x1c]         ;773
0005b0  ebb00f61          CMP      r0,r1,ASR #1          ;773
0005b4  f6ffaf04          BLT      |L51.960|
;;;788                                      (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
;;;789                    }
;;;790    
;;;791                    break;
0005b8  e0f1              B        |L51.1950|
                  |L51.1466|
;;;792    
;;;793                case eGFX_LIST_PRIMITIVE_CONNECTED:
;;;794                    for(i=1; i<LP->NumPoints; i++)
0005ba  2001              MOVS     r0,#1
0005bc  9007              STR      r0,[sp,#0x1c]
0005be  e0e7              B        |L51.1936|
                  |L51.1472|
;;;795                    {
;;;796                        TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
0005c0  9809              LDR      r0,[sp,#0x24]
0005c2  6881              LDR      r1,[r0,#8]
0005c4  9807              LDR      r0,[sp,#0x1c]
0005c6  1e40              SUBS     r0,r0,#1
0005c8  f9310020          LDRSH    r0,[r1,r0,LSL #2]
0005cc  9003              STR      r0,[sp,#0xc]
0005ce  980a              LDR      r0,[sp,#0x28]
0005d0  3040              ADDS     r0,r0,#0x40
0005d2  b2c0              UXTB     r0,r0
0005d4  4973              LDR      r1,|L51.1956|
0005d6  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0005da  4601              MOV      r1,r0
0005dc  9004              STR      r0,[sp,#0x10]
0005de  9803              LDR      r0,[sp,#0xc]
0005e0  f7fffffe          BL       eGFX_FMul_15_0to1_14
0005e4  4604              MOV      r4,r0
0005e6  9809              LDR      r0,[sp,#0x24]
0005e8  6881              LDR      r1,[r0,#8]
0005ea  9807              LDR      r0,[sp,#0x1c]
0005ec  1e40              SUBS     r0,r0,#1
0005ee  eb010080          ADD      r0,r1,r0,LSL #2
0005f2  f9b00002          LDRSH    r0,[r0,#2]
0005f6  496b              LDR      r1,|L51.1956|
0005f8  9003              STR      r0,[sp,#0xc]
0005fa  980a              LDR      r0,[sp,#0x28]
0005fc  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000600  4601              MOV      r1,r0
000602  9004              STR      r0,[sp,#0x10]
000604  9803              LDR      r0,[sp,#0xc]
000606  f7fffffe          BL       eGFX_FMul_15_0to1_14
00060a  1a20              SUBS     r0,r4,r0
00060c  b200              SXTH     r0,r0
00060e  f8ad0014          STRH     r0,[sp,#0x14]
;;;797                                                 eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
;;;798                        TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
000612  9809              LDR      r0,[sp,#0x24]
000614  6881              LDR      r1,[r0,#8]
000616  9807              LDR      r0,[sp,#0x1c]
000618  1e40              SUBS     r0,r0,#1
00061a  f9310020          LDRSH    r0,[r1,r0,LSL #2]
00061e  4961              LDR      r1,|L51.1956|
000620  9003              STR      r0,[sp,#0xc]
000622  980a              LDR      r0,[sp,#0x28]
000624  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000628  4601              MOV      r1,r0
00062a  9004              STR      r0,[sp,#0x10]
00062c  9803              LDR      r0,[sp,#0xc]
00062e  f7fffffe          BL       eGFX_FMul_15_0to1_14
000632  4604              MOV      r4,r0
000634  9809              LDR      r0,[sp,#0x24]
000636  6881              LDR      r1,[r0,#8]
000638  9807              LDR      r0,[sp,#0x1c]
00063a  1e40              SUBS     r0,r0,#1
00063c  eb010080          ADD      r0,r1,r0,LSL #2
000640  f9b00002          LDRSH    r0,[r0,#2]
000644  9003              STR      r0,[sp,#0xc]
000646  980a              LDR      r0,[sp,#0x28]
000648  3040              ADDS     r0,r0,#0x40
00064a  b2c0              UXTB     r0,r0
00064c  4955              LDR      r1,|L51.1956|
00064e  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000652  4601              MOV      r1,r0
000654  9004              STR      r0,[sp,#0x10]
000656  9803              LDR      r0,[sp,#0xc]
000658  f7fffffe          BL       eGFX_FMul_15_0to1_14
00065c  4420              ADD      r0,r0,r4
00065e  b200              SXTH     r0,r0
000660  f8ad0016          STRH     r0,[sp,#0x16]
;;;799                                                  eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
;;;800                        TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
000664  9809              LDR      r0,[sp,#0x24]
000666  6881              LDR      r1,[r0,#8]
000668  9807              LDR      r0,[sp,#0x1c]
00066a  f9310020          LDRSH    r0,[r1,r0,LSL #2]
00066e  9003              STR      r0,[sp,#0xc]
000670  980a              LDR      r0,[sp,#0x28]
000672  3040              ADDS     r0,r0,#0x40
000674  b2c0              UXTB     r0,r0
000676  494b              LDR      r1,|L51.1956|
000678  f9310010          LDRSH    r0,[r1,r0,LSL #1]
00067c  4601              MOV      r1,r0
00067e  9004              STR      r0,[sp,#0x10]
000680  9803              LDR      r0,[sp,#0xc]
000682  f7fffffe          BL       eGFX_FMul_15_0to1_14
000686  4604              MOV      r4,r0
000688  9809              LDR      r0,[sp,#0x24]
00068a  6881              LDR      r1,[r0,#8]
00068c  9807              LDR      r0,[sp,#0x1c]
00068e  eb010080          ADD      r0,r1,r0,LSL #2
000692  f9b00002          LDRSH    r0,[r0,#2]
000696  4943              LDR      r1,|L51.1956|
000698  9003              STR      r0,[sp,#0xc]
00069a  980a              LDR      r0,[sp,#0x28]
00069c  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0006a0  4601              MOV      r1,r0
0006a2  9004              STR      r0,[sp,#0x10]
0006a4  9803              LDR      r0,[sp,#0xc]
0006a6  f7fffffe          BL       eGFX_FMul_15_0to1_14
0006aa  1a20              SUBS     r0,r4,r0
0006ac  b200              SXTH     r0,r0
0006ae  f8ad0018          STRH     r0,[sp,#0x18]
;;;801                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
;;;802                        TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
0006b2  9809              LDR      r0,[sp,#0x24]
0006b4  6881              LDR      r1,[r0,#8]
0006b6  9807              LDR      r0,[sp,#0x1c]
0006b8  f9310020          LDRSH    r0,[r1,r0,LSL #2]
0006bc  4939              LDR      r1,|L51.1956|
0006be  9003              STR      r0,[sp,#0xc]
0006c0  980a              LDR      r0,[sp,#0x28]
0006c2  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0006c6  4601              MOV      r1,r0
0006c8  9004              STR      r0,[sp,#0x10]
0006ca  9803              LDR      r0,[sp,#0xc]
0006cc  f7fffffe          BL       eGFX_FMul_15_0to1_14
0006d0  4604              MOV      r4,r0
0006d2  9809              LDR      r0,[sp,#0x24]
0006d4  6881              LDR      r1,[r0,#8]
0006d6  9807              LDR      r0,[sp,#0x1c]
0006d8  eb010080          ADD      r0,r1,r0,LSL #2
0006dc  f9b00002          LDRSH    r0,[r0,#2]
0006e0  9003              STR      r0,[sp,#0xc]
0006e2  980a              LDR      r0,[sp,#0x28]
0006e4  3040              ADDS     r0,r0,#0x40
0006e6  b2c0              UXTB     r0,r0
0006e8  492e              LDR      r1,|L51.1956|
0006ea  f9310010          LDRSH    r0,[r1,r0,LSL #1]
0006ee  4601              MOV      r1,r0
0006f0  9004              STR      r0,[sp,#0x10]
0006f2  9803              LDR      r0,[sp,#0xc]
0006f4  f7fffffe          BL       eGFX_FMul_15_0to1_14
0006f8  4420              ADD      r0,r0,r4
0006fa  b201              SXTH     r1,r0
0006fc  f8ad101a          STRH     r1,[sp,#0x1a]
;;;803                                                 eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
;;;804                        TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
000700  f9bd0014          LDRSH    r0,[sp,#0x14]
000704  9004              STR      r0,[sp,#0x10]
000706  990b              LDR      r1,[sp,#0x2c]
000708  f7fffffe          BL       eGFX_FMul_15_0to7_8
00070c  9909              LDR      r1,[sp,#0x24]
00070e  8809              LDRH     r1,[r1,#0]
000710  4408              ADD      r0,r0,r1
000712  b200              SXTH     r0,r0
000714  f8ad0014          STRH     r0,[sp,#0x14]
;;;805                        TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
000718  f9bd0016          LDRSH    r0,[sp,#0x16]
00071c  9004              STR      r0,[sp,#0x10]
00071e  990b              LDR      r1,[sp,#0x2c]
000720  f7fffffe          BL       eGFX_FMul_15_0to7_8
000724  9909              LDR      r1,[sp,#0x24]
000726  8849              LDRH     r1,[r1,#2]
000728  4408              ADD      r0,r0,r1
00072a  b200              SXTH     r0,r0
00072c  f8ad0016          STRH     r0,[sp,#0x16]
;;;806                        TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
000730  f9bd0018          LDRSH    r0,[sp,#0x18]
000734  9004              STR      r0,[sp,#0x10]
000736  990b              LDR      r1,[sp,#0x2c]
000738  f7fffffe          BL       eGFX_FMul_15_0to7_8
00073c  9909              LDR      r1,[sp,#0x24]
00073e  8809              LDRH     r1,[r1,#0]
000740  4408              ADD      r0,r0,r1
000742  b200              SXTH     r0,r0
000744  f8ad0018          STRH     r0,[sp,#0x18]
;;;807                        TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
000748  f9bd001a          LDRSH    r0,[sp,#0x1a]
00074c  9004              STR      r0,[sp,#0x10]
00074e  990b              LDR      r1,[sp,#0x2c]
000750  f7fffffe          BL       eGFX_FMul_15_0to7_8
000754  9909              LDR      r1,[sp,#0x24]
000756  8849              LDRH     r1,[r1,#2]
000758  4408              ADD      r0,r0,r1
00075a  b201              SXTH     r1,r0
00075c  f8ad101a          STRH     r1,[sp,#0x1a]
;;;808                        eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
000760  f9bd101a          LDRSH    r1,[sp,#0x1a]
000764  980e              LDR      r0,[sp,#0x38]
000766  e9cd1000          STRD     r1,r0,[sp,#0]
00076a  f9bd0018          LDRSH    r0,[sp,#0x18]
00076e  9004              STR      r0,[sp,#0x10]
000770  f9bd0016          LDRSH    r0,[sp,#0x16]
000774  9003              STR      r0,[sp,#0xc]
000776  f9bd0014          LDRSH    r0,[sp,#0x14]
00077a  9002              STR      r0,[sp,#8]
00077c  4601              MOV      r1,r0
00077e  e9dd2303          LDRD     r2,r3,[sp,#0xc]
000782  9808              LDR      r0,[sp,#0x20]
000784  f7fffffe          BL       eGFX_DrawLine
000788  9807              LDR      r0,[sp,#0x1c]         ;794
00078a  1c40              ADDS     r0,r0,#1              ;794
00078c  b2c0              UXTB     r0,r0                 ;794
00078e  9007              STR      r0,[sp,#0x1c]         ;794
                  |L51.1936|
000790  9809              LDR      r0,[sp,#0x24]         ;794
000792  7901              LDRB     r1,[r0,#4]            ;794
000794  9807              LDR      r0,[sp,#0x1c]         ;794
000796  4281              CMP      r1,r0                 ;794
000798  f73faf12          BGT      |L51.1472|
;;;809                                      (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
;;;810                    }
;;;811    
;;;812                    break;
00079c  bf00              NOP      
                  |L51.1950|
00079e  bf00              NOP                            ;770
                  |L51.1952|
;;;813            }
;;;814        }
;;;815    }
0007a0  b00c              ADD      sp,sp,#0x30
0007a2  bd10              POP      {r4,pc}
;;;816    
                          ENDP

                  |L51.1956|
                          DCD      eGFX_Fixed_1_14_SineTable

                          AREA ||i.eGFX_DrawString||, CODE, READONLY, ALIGN=1

                  eGFX_DrawString PROC
;;;1187   
;;;1188   int16_t  eGFX_DrawString(eGFX_ImagePlane *Image,
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;1189   	char *String,
;;;1190   	int16_t StartX,
;;;1191   	int16_t StartY,
;;;1192   
;;;1193   	const eGFX_Font *MyFont)
;;;1194   {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8024          LDR      r8,[sp,#0x24]
;;;1195       uint8_t Ptr = 0;
000010  2500              MOVS     r5,#0
;;;1196       uint8_t NextChar;
;;;1197       NextChar = String[Ptr];
000012  f8169005          LDRB     r9,[r6,r5]
;;;1198   
;;;1199       while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
000016  e010              B        |L52.58|
                  |L52.24|
;;;1200       {
;;;1201           StartX = eGFX_DrawCharacter(Image,StartX,StartY,NextChar,MyFont);
000018  464b              MOV      r3,r9
00001a  463a              MOV      r2,r7
00001c  4621              MOV      r1,r4
00001e  4650              MOV      r0,r10
000020  f8cd8000          STR      r8,[sp,#0]
000024  f7fffffe          BL       eGFX_DrawCharacter
000028  4604              MOV      r4,r0
;;;1202           StartX += MyFont->InterCharacterSpacing;
00002a  f898018d          LDRB     r0,[r8,#0x18d]
00002e  4420              ADD      r0,r0,r4
000030  b204              SXTH     r4,r0
;;;1203           Ptr++;
000032  1c68              ADDS     r0,r5,#1
000034  b2c5              UXTB     r5,r0
;;;1204           NextChar = String[Ptr];
000036  f8169005          LDRB     r9,[r6,r5]
                  |L52.58|
00003a  f1b90f00          CMP      r9,#0                 ;1199
00003e  d001              BEQ      |L52.68|
000040  2d40              CMP      r5,#0x40              ;1199
000042  dbe9              BLT      |L52.24|
                  |L52.68|
;;;1205       }
;;;1206   
;;;1207       return StartX + 1;
000044  1c60              ADDS     r0,r4,#1
000046  b200              SXTH     r0,r0
;;;1208   }
000048  e8bd87f8          POP      {r3-r10,pc}
;;;1209   
                          ENDP


                          AREA ||i.eGFX_DrawStringColored||, CODE, READONLY, ALIGN=1

                  eGFX_DrawStringColored PROC
;;;1253   
;;;1254   int16_t  eGFX_DrawStringColored(eGFX_ImagePlane *Image,
000000  e92d4ffc          PUSH     {r2-r11,lr}
;;;1255   	char *String,
;;;1256   	int16_t StartX,
;;;1257   	int16_t StartY,
;;;1258   	const eGFX_Font *MyFont,
;;;1259   	uint32_t Color)
;;;1260   {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  e9dd8b0b          LDRD     r8,r11,[sp,#0x2c]
;;;1261   	uint8_t Ptr = 0;
000010  2500              MOVS     r5,#0
;;;1262   	uint8_t NextChar;
;;;1263   	NextChar = String[Ptr];
000012  f8169005          LDRB     r9,[r6,r5]
;;;1264   
;;;1265   	while ((NextChar != 0) && (Ptr <eGFX_MAX_STRING_LEN))
000016  e010              B        |L53.58|
                  |L53.24|
;;;1266   	{
;;;1267   		StartX = eGFX_DrawCharacterColored(Image, StartX, StartY, NextChar, MyFont, Color);
000018  464b              MOV      r3,r9
00001a  463a              MOV      r2,r7
00001c  4621              MOV      r1,r4
00001e  4650              MOV      r0,r10
000020  e9cd8b00          STRD     r8,r11,[sp,#0]
000024  f7fffffe          BL       eGFX_DrawCharacterColored
000028  4604              MOV      r4,r0
;;;1268   		StartX += MyFont->InterCharacterSpacing;
00002a  f898018d          LDRB     r0,[r8,#0x18d]
00002e  4420              ADD      r0,r0,r4
000030  b204              SXTH     r4,r0
;;;1269   		Ptr++;
000032  1c68              ADDS     r0,r5,#1
000034  b2c5              UXTB     r5,r0
;;;1270   		NextChar = String[Ptr];
000036  f8169005          LDRB     r9,[r6,r5]
                  |L53.58|
00003a  f1b90f00          CMP      r9,#0                 ;1265
00003e  d001              BEQ      |L53.68|
000040  2d40              CMP      r5,#0x40              ;1265
000042  dbe9              BLT      |L53.24|
                  |L53.68|
;;;1271   	}
;;;1272   
;;;1273   	return StartX + 1;
000044  1c60              ADDS     r0,r4,#1
000046  b200              SXTH     r0,r0
;;;1274   }
000048  e8bd8ffc          POP      {r2-r11,pc}
;;;1275   
                          ENDP


                          AREA ||i.eGFX_DrawStringFaded||, CODE, READONLY, ALIGN=1

                  eGFX_DrawStringFaded PROC
;;;1209   
;;;1210   int16_t  eGFX_DrawStringFaded(eGFX_ImagePlane *Image,
000000  e92d4ffc          PUSH     {r2-r11,lr}
;;;1211   	char *String,
;;;1212   	int16_t StartX,
;;;1213   	int16_t StartY,
;;;1214   	const eGFX_Font *MyFont, 
;;;1215   	eGFX_PixelState PS)
;;;1216   {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  e9dd8b0b          LDRD     r8,r11,[sp,#0x2c]
;;;1217       uint8_t Ptr = 0;
000010  2500              MOVS     r5,#0
;;;1218       uint8_t NextChar;
;;;1219       NextChar = String[Ptr];
000012  f8169005          LDRB     r9,[r6,r5]
;;;1220   
;;;1221       while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
000016  e010              B        |L54.58|
                  |L54.24|
;;;1222       {
;;;1223           StartX = eGFX_DrawCharacterFaded(Image,StartX,StartY,NextChar,MyFont,PS);
000018  464b              MOV      r3,r9
00001a  463a              MOV      r2,r7
00001c  4621              MOV      r1,r4
00001e  4650              MOV      r0,r10
000020  e9cd8b00          STRD     r8,r11,[sp,#0]
000024  f7fffffe          BL       eGFX_DrawCharacterFaded
000028  4604              MOV      r4,r0
;;;1224           StartX += MyFont->InterCharacterSpacing;
00002a  f898018d          LDRB     r0,[r8,#0x18d]
00002e  4420              ADD      r0,r0,r4
000030  b204              SXTH     r4,r0
;;;1225           Ptr++;
000032  1c68              ADDS     r0,r5,#1
000034  b2c5              UXTB     r5,r0
;;;1226           NextChar = String[Ptr];
000036  f8169005          LDRB     r9,[r6,r5]
                  |L54.58|
00003a  f1b90f00          CMP      r9,#0                 ;1221
00003e  d001              BEQ      |L54.68|
000040  2d40              CMP      r5,#0x40              ;1221
000042  dbe9              BLT      |L54.24|
                  |L54.68|
;;;1227       }
;;;1228   
;;;1229       return StartX + 1;
000044  1c60              ADDS     r0,r4,#1
000046  b200              SXTH     r0,r0
;;;1230   }
000048  e8bd8ffc          POP      {r2-r11,pc}
;;;1231   
                          ENDP


                          AREA ||i.eGFX_DrawStringShaded||, CODE, READONLY, ALIGN=1

                  eGFX_DrawStringShaded PROC
;;;1231   
;;;1232   int16_t  eGFX_DrawStringShaded(eGFX_ImagePlane *Image,
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;1233   	char *String,
;;;1234   	int16_t StartX,
;;;1235   	int16_t StartY,
;;;1236   	const eGFX_Font *MyFont,
;;;1237   	float Shading)
;;;1238   {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  eef01a40          VMOV.F32 s3,s0
000010  f8dd8024          LDR      r8,[sp,#0x24]
;;;1239   	uint8_t Ptr = 0;
000014  2500              MOVS     r5,#0
;;;1240   	uint8_t NextChar;
;;;1241   	NextChar = String[Ptr];
000016  f8169005          LDRB     r9,[r6,r5]
;;;1242   
;;;1243   	while ((NextChar != 0) && (Ptr <eGFX_MAX_STRING_LEN))
00001a  e012              B        |L55.66|
                  |L55.28|
;;;1244   	{
;;;1245   		StartX = eGFX_DrawCharacterShaded(Image, StartX, StartY, NextChar, MyFont, Shading);
00001c  eeb00a61          VMOV.F32 s0,s3
000020  464b              MOV      r3,r9
000022  463a              MOV      r2,r7
000024  4621              MOV      r1,r4
000026  4650              MOV      r0,r10
000028  f8cd8000          STR      r8,[sp,#0]
00002c  f7fffffe          BL       eGFX_DrawCharacterShaded
000030  4604              MOV      r4,r0
;;;1246   		StartX += MyFont->InterCharacterSpacing;
000032  f898018d          LDRB     r0,[r8,#0x18d]
000036  4420              ADD      r0,r0,r4
000038  b204              SXTH     r4,r0
;;;1247   		Ptr++;
00003a  1c68              ADDS     r0,r5,#1
00003c  b2c5              UXTB     r5,r0
;;;1248   		NextChar = String[Ptr];
00003e  f8169005          LDRB     r9,[r6,r5]
                  |L55.66|
000042  f1b90f00          CMP      r9,#0                 ;1243
000046  d001              BEQ      |L55.76|
000048  2d40              CMP      r5,#0x40              ;1243
00004a  dbe7              BLT      |L55.28|
                  |L55.76|
;;;1249   	}
;;;1250   
;;;1251   	return StartX + 1;
00004c  1c60              ADDS     r0,r4,#1
00004e  b200              SXTH     r0,r0
;;;1252   }
000050  e8bd87f8          POP      {r3-r10,pc}
;;;1253   
                          ENDP


                          AREA ||i.eGFX_DrawString_CustomSpacing||, CODE, READONLY, ALIGN=1

                  eGFX_DrawString_CustomSpacing PROC
;;;1343   
;;;1344   int16_t eGFX_DrawString_CustomSpacing(eGFX_ImagePlane *Image,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1345                                         int16_t StartX,
;;;1346                                         int16_t StartY,
;;;1347                                         char *String,
;;;1348                                         const eGFX_Font *MyFont,
;;;1349                                         uint16_t Spacing)
;;;1350   {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;1351       uint8_t Ptr = 0;
000010  2400              MOVS     r4,#0
;;;1352       uint8_t NextChar;
;;;1353       NextChar = String[Ptr];
000012  5d37              LDRB     r7,[r6,r4]
;;;1354   
;;;1355       while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
000014  e00e              B        |L56.52|
                  |L56.22|
;;;1356       {
;;;1357           StartX = eGFX_DrawCharacter(Image,StartX,StartY,NextChar,MyFont);
000016  463b              MOV      r3,r7
000018  464a              MOV      r2,r9
00001a  4629              MOV      r1,r5
00001c  4640              MOV      r0,r8
00001e  f8cda000          STR      r10,[sp,#0]
000022  f7fffffe          BL       eGFX_DrawCharacter
000026  4605              MOV      r5,r0
;;;1358           StartX += Spacing;
000028  eb05000b          ADD      r0,r5,r11
00002c  b205              SXTH     r5,r0
;;;1359           Ptr++;
00002e  1c60              ADDS     r0,r4,#1
000030  b2c4              UXTB     r4,r0
;;;1360           NextChar = String[Ptr];
000032  5d37              LDRB     r7,[r6,r4]
                  |L56.52|
000034  b10f              CBZ      r7,|L56.58|
000036  2c40              CMP      r4,#0x40              ;1355
000038  dbed              BLT      |L56.22|
                  |L56.58|
;;;1361       }
;;;1362   
;;;1363       return StartX+1;
00003a  1c68              ADDS     r0,r5,#1
00003c  b200              SXTH     r0,r0
;;;1364   }
00003e  e8bd8ff8          POP      {r3-r11,pc}
;;;1365   
                          ENDP


                          AREA ||i.eGFX_DrawVline||, CODE, READONLY, ALIGN=1

                  eGFX_DrawVline PROC
;;;317    
;;;318    void eGFX_DrawVline(eGFX_ImagePlane *Image,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;319                        int16_t YStart,
;;;320                        int16_t YStop,
;;;321                        int16_t X,
;;;322                        eGFX_PixelState PS)
;;;323    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb024          LDR      r11,[sp,#0x24]
;;;324        int16_t LineStart;
;;;325        int16_t LineStop;
;;;326        int16_t i;
;;;327    
;;;328        if((X<Image->SizeX) && (X>=0))
000010  8920              LDRH     r0,[r4,#8]
000012  42b8              CMP      r0,r7
000014  dd22              BLE      |L57.92|
000016  2f00              CMP      r7,#0
000018  db20              BLT      |L57.92|
;;;329        {
;;;330            if(YStart>YStop)
00001a  42b5              CMP      r5,r6
00001c  dd02              BLE      |L57.36|
;;;331            {
;;;332                LineStart = YStop;
00001e  46b0              MOV      r8,r6
;;;333                LineStop = YStart;
000020  46a9              MOV      r9,r5
000022  e001              B        |L57.40|
                  |L57.36|
;;;334            }
;;;335            else
;;;336            {
;;;337                LineStart = YStart;
000024  46a8              MOV      r8,r5
;;;338                LineStop = YStop;
000026  46b1              MOV      r9,r6
                  |L57.40|
;;;339            }
;;;340    
;;;341            if(LineStart<0)
000028  f1b80f00          CMP      r8,#0
00002c  da01              BGE      |L57.50|
;;;342            {
;;;343                LineStart = 0;
00002e  f04f0800          MOV      r8,#0
                  |L57.50|
;;;344            }
;;;345    
;;;346            if(LineStop>Image->SizeY)
000032  8960              LDRH     r0,[r4,#0xa]
000034  4548              CMP      r0,r9
000036  da03              BGE      |L57.64|
;;;347            {
;;;348                LineStop = 	Image->SizeY-1;
000038  8960              LDRH     r0,[r4,#0xa]
00003a  1e40              SUBS     r0,r0,#1
00003c  fa0ff980          SXTH     r9,r0
                  |L57.64|
;;;349            }
;;;350    
;;;351            for(i=LineStart; i<=LineStop ; i++)
000040  46c2              MOV      r10,r8
000042  e009              B        |L57.88|
                  |L57.68|
;;;352            {
;;;353                eGFX_PutPixel(Image,X,i,PS);
000044  465b              MOV      r3,r11
000046  4652              MOV      r2,r10
000048  4639              MOV      r1,r7
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       eGFX_PutPixel
000050  f10a0001          ADD      r0,r10,#1             ;351
000054  fa0ffa80          SXTH     r10,r0                ;351
                  |L57.88|
000058  45ca              CMP      r10,r9                ;351
00005a  ddf3              BLE      |L57.68|
                  |L57.92|
;;;354            }
;;;355        }
;;;356    }
00005c  e8bd8ff0          POP      {r4-r11,pc}
;;;357    
                          ENDP


                          AREA ||i.eGFX_EnableObject||, CODE, READONLY, ALIGN=1

                  eGFX_EnableObject PROC
;;;2459   
;;;2460   void eGFX_EnableObject(void * Object)
000000  b108              CBZ      r0,|L58.6|
;;;2461   {
;;;2462   	if(Object!=NULL)
;;;2463   	{
;;;2464   		((eGFX_ObjectHeader *)Object)->State = eGFX_OBJECT_STATE_ACTIVE;
000002  2101              MOVS     r1,#1
000004  6041              STR      r1,[r0,#4]
                  |L58.6|
;;;2465   	}
;;;2466   }
000006  4770              BX       lr
;;;2467   
                          ENDP


                          AREA ||i.eGFX_FLOAT_TO_FIXED_7_8||, CODE, READONLY, ALIGN=2

                  eGFX_FLOAT_TO_FIXED_7_8 PROC
;;;1798   
;;;1799   FIXED_7_8 eGFX_FLOAT_TO_FIXED_7_8(float A)
000000  eddf0a0e          VLDR     s1,|L59.60|
;;;1800   {
;;;1801       if(A>(float)((FIXED_7_8)(32767)>>8))
000004  eeb40ae0          VCMPE.F32 s0,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  dd01              BLE      |L59.18|
;;;1802   		return 	(FIXED_7_8)((float)(32767) / (float)(256));
00000e  207f              MOVS     r0,#0x7f
                  |L59.16|
;;;1803       else if(A<(float)((FIXED_7_8)(-32768)>>8))
;;;1804   		return (FIXED_7_8)((float)(-32768) / (float)256);
;;;1805       else
;;;1806           return (FIXED_7_8)(A * 256);
;;;1807   }
000010  4770              BX       lr
                  |L59.18|
000012  eddf0a0b          VLDR     s1,|L59.64|
000016  eeb40ae0          VCMPE.F32 s0,s1                 ;1803
00001a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1803
00001e  d202              BCS      |L59.38|
000020  f06f007f          MVN      r0,#0x7f              ;1804
000024  e7f4              B        |L59.16|
                  |L59.38|
000026  eddf0a07          VLDR     s1,|L59.68|
00002a  ee600a20          VMUL.F32 s1,s0,s1              ;1806
00002e  eefd0ae0          VCVT.S32.F32 s1,s1                 ;1806
000032  ee100a90          VMOV     r0,s1                 ;1806
000036  b200              SXTH     r0,r0                 ;1806
000038  e7ea              B        |L59.16|
;;;1808   
                          ENDP

00003a  0000              DCW      0x0000
                  |L59.60|
00003c  42fe0000          DCFS     0x42fe0000 ; 127
                  |L59.64|
000040  c3000000          DCFS     0xc3000000 ; -128
                  |L59.68|
000044  43800000          DCFS     0x43800000 ; 256

                          AREA ||i.eGFX_FMul_15_0to0_15||, CODE, READONLY, ALIGN=1

                  eGFX_FMul_15_0to0_15 PROC
;;;1808   
;;;1809   int16_t eGFX_FMul_15_0to0_15(int16_t A, int16_t B)
000000  4602              MOV      r2,r0
;;;1810   {
;;;1811       return  (((long)(A) * (long)(B))>>15);
000002  fb02f001          MUL      r0,r2,r1
000006  13c0              ASRS     r0,r0,#15
000008  b200              SXTH     r0,r0
;;;1812   }
00000a  4770              BX       lr
;;;1813   
                          ENDP


                          AREA ||i.eGFX_FMul_15_0to1_14||, CODE, READONLY, ALIGN=1

                  eGFX_FMul_15_0to1_14 PROC
;;;1823   
;;;1824   int16_t eGFX_FMul_15_0to1_14(int16_t A,int16_t B)
000000  4602              MOV      r2,r0
;;;1825   {
000002  460b              MOV      r3,r1
;;;1826       long temp;
;;;1827       temp = (((long)(A) * (long)(B))>>13);
000004  fb02f003          MUL      r0,r2,r3
000008  1341              ASRS     r1,r0,#13
;;;1828   
;;;1829       if(temp&0x01)
00000a  f0010001          AND      r0,r1,#1
00000e  b110              CBZ      r0,|L61.22|
;;;1830       {
;;;1831           temp = temp>>1;
000010  1049              ASRS     r1,r1,#1
;;;1832           temp = temp +1;
000012  1c49              ADDS     r1,r1,#1
000014  e000              B        |L61.24|
                  |L61.22|
;;;1833       }
;;;1834       else
;;;1835       {
;;;1836           temp = temp>>1;
000016  1049              ASRS     r1,r1,#1
                  |L61.24|
;;;1837       }
;;;1838   
;;;1839       return  (int16_t)temp;
000018  b208              SXTH     r0,r1
;;;1840   }
00001a  4770              BX       lr
;;;1841   
                          ENDP


                          AREA ||i.eGFX_FMul_15_0to7_8||, CODE, READONLY, ALIGN=1

                  eGFX_FMul_15_0to7_8 PROC
;;;1818   
;;;1819   int16_t eGFX_FMul_15_0to7_8(int16_t A,int16_t B)
000000  4602              MOV      r2,r0
;;;1820   {
;;;1821       return  (((long)(A) * (long)(B))>>8);
000002  fb02f001          MUL      r0,r2,r1
000006  1200              ASRS     r0,r0,#8
000008  b200              SXTH     r0,r0
;;;1822   }
00000a  4770              BX       lr
;;;1823   
                          ENDP


                          AREA ||i.eGFX_FMul_7_8to0_15||, CODE, READONLY, ALIGN=1

                  eGFX_FMul_7_8to0_15 PROC
;;;1813   
;;;1814   int16_t eGFX_FMul_7_8to0_15(int16_t A, int16_t B)
000000  4602              MOV      r2,r0
;;;1815   {
;;;1816       return  (((long)(A) * (long)(B))>>15);
000002  fb02f001          MUL      r0,r2,r1
000006  13c0              ASRS     r0,r0,#15
000008  b200              SXTH     r0,r0
;;;1817   }
00000a  4770              BX       lr
;;;1818   
                          ENDP


                          AREA ||i.eGFX_GET_INT_FROM_FIXED_7_8_ROUND_TO_NEAREST||, CODE, READONLY, ALIGN=1

                  eGFX_GET_INT_FROM_FIXED_7_8_ROUND_TO_NEAREST PROC
;;;1787   
;;;1788   FIXED_7_8 eGFX_GET_INT_FROM_FIXED_7_8_ROUND_TO_NEAREST(FIXED_7_8 A)
000000  4601              MOV      r1,r0
;;;1789   {
;;;1790       FIXED_7_8 RetVal = 0;
000002  2000              MOVS     r0,#0
;;;1791   
;;;1792       if(A&0x0080)
000004  f0010280          AND      r2,r1,#0x80
000008  b102              CBZ      r2,|L64.12|
;;;1793           RetVal = 1;
00000a  2001              MOVS     r0,#1
                  |L64.12|
;;;1794   
;;;1795       RetVal += A>>8;
00000c  eb002221          ADD      r2,r0,r1,ASR #8
000010  b210              SXTH     r0,r2
;;;1796       return RetVal;
;;;1797   }
000012  4770              BX       lr
;;;1798   
                          ENDP


                          AREA ||i.eGFX_GetAnimatorCount||, CODE, READONLY, ALIGN=2

                  eGFX_GetAnimatorCount PROC
;;;1885   
;;;1886   uint32_t eGFX_GetAnimatorCount()
000000  4801              LDR      r0,|L65.8|
;;;1887   {
;;;1888   	return eGFX_AnimatorEndIndex;
000002  6800              LDR      r0,[r0,#0]  ; eGFX_AnimatorEndIndex
;;;1889   }
000004  4770              BX       lr
;;;1890   
                          ENDP

000006  0000              DCW      0x0000
                  |L65.8|
                          DCD      eGFX_AnimatorEndIndex

                          AREA ||i.eGFX_GetBitFromArray||, CODE, READONLY, ALIGN=1

                  eGFX_GetBitFromArray PROC
;;;1541   
;;;1542   uint8_t eGFX_GetBitFromArray(uint8_t *DataArray,uint16_t Bit)
000000  b510              PUSH     {r4,lr}
;;;1543   {
000002  4602              MOV      r2,r0
;;;1544       uint8_t Mask;
;;;1545       Mask = 1 << (7-(Bit&0x7));
000004  f0010007          AND      r0,r1,#7
000008  f1c00407          RSB      r4,r0,#7
00000c  2001              MOVS     r0,#1
00000e  40a0              LSLS     r0,r0,r4
000010  b2c3              UXTB     r3,r0
;;;1546   
;;;1547       if(DataArray[Bit>>3] & Mask)
000012  eb0200e1          ADD      r0,r2,r1,ASR #3
000016  7800              LDRB     r0,[r0,#0]
000018  4018              ANDS     r0,r0,r3
00001a  b108              CBZ      r0,|L66.32|
;;;1548           return 1;
00001c  2001              MOVS     r0,#1
                  |L66.30|
;;;1549       else
;;;1550           return 0;
;;;1551   }
00001e  bd10              POP      {r4,pc}
                  |L66.32|
000020  2000              MOVS     r0,#0                 ;1550
000022  e7fc              B        |L66.30|
;;;1552   
                          ENDP


                          AREA ||i.eGFX_GetObjectCount||, CODE, READONLY, ALIGN=2

                  eGFX_GetObjectCount PROC
;;;2472   
;;;2473   uint32_t eGFX_GetObjectCount()
000000  4801              LDR      r0,|L67.8|
;;;2474   {
;;;2475   	return eGFX_ObjectEndIndex;
000002  6800              LDR      r0,[r0,#0]  ; eGFX_ObjectEndIndex
;;;2476   }
000004  4770              BX       lr
;;;2477    
                          ENDP

000006  0000              DCW      0x0000
                  |L67.8|
                          DCD      eGFX_ObjectEndIndex

                          AREA ||i.eGFX_GetPixel||, CODE, READONLY, ALIGN=1

                  eGFX_GetPixel PROC
;;;144    
;;;145    eGFX_PixelState eGFX_GetPixel(const eGFX_ImagePlane *Image,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;146                             int16_t x,
;;;147                             int16_t y)
;;;148    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;149    	uint32_t Offset = 0;
00000a  f04f0800          MOV      r8,#0
;;;150        uint8_t Mask;
;;;151        uint32_t MemWidthInBytes;
;;;152    	eGFX_PixelState PS = 0;
00000e  46c1              MOV      r9,r8
;;;153    
;;;154        if((x<Image->SizeX) && (y<Image->SizeY) && (x>=0) && (y>=0))
000010  8920              LDRH     r0,[r4,#8]
000012  42a8              CMP      r0,r5
                  |L68.20|
000014  dd73              BLE      |L68.254|
000016  8960              LDRH     r0,[r4,#0xa]
000018  42b8              CMP      r0,r7
00001a  ddfb              BLE      |L68.20|
00001c  2d00              CMP      r5,#0
                  |L68.30|
00001e  db6e              BLT      |L68.254|
000020  2f00              CMP      r7,#0
000022  dbfc              BLT      |L68.30|
;;;155        {
;;;156            switch(Image->Type)
000024  7820              LDRB     r0,[r4,#0]
000026  2807              CMP      r0,#7
000028  d26a              BCS      |L68.256|
00002a  e8dff000          TBB      [pc,r0]
00002e  041d              DCB      0x04,0x1d
000030  41575e6a          DCB      0x41,0x57,0x5e,0x6a
000034  8100              DCB      0x81,0x00
;;;157            {
;;;158                case  eGFX_IMAGE_PLANE_1BPP:
;;;159                    //Properly Implement Rounding  for odd bit plane sizes
;;;160    				MemWidthInBytes = eGFX_CALCULATE_1BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
000036  8920              LDRH     r0,[r4,#8]
000038  1dc0              ADDS     r0,r0,#7
00003a  10c6              ASRS     r6,r0,#3
;;;161    
;;;162                    Offset = (y * (MemWidthInBytes)) + (x>>3);
00003c  fb07f006          MUL      r0,r7,r6
000040  eb0008e5          ADD      r8,r0,r5,ASR #3
;;;163                    Mask = 0x01 << (x & 0x07);
000044  f0050107          AND      r1,r5,#7
000048  2001              MOVS     r0,#1
00004a  4088              LSLS     r0,r0,r1
00004c  f0000bff          AND      r11,r0,#0xff
;;;164    
;;;165                    if(Image->Data[Offset] & Mask)
000050  6860              LDR      r0,[r4,#4]
000052  f8100008          LDRB     r0,[r0,r8]
000056  ea00000b          AND      r0,r0,r11
00005a  b110              CBZ      r0,|L68.98|
;;;166                        PS = eGFX_PIXEL_ON;
00005c  f04f39ff          MOV      r9,#0xffffffff
000060  e001              B        |L68.102|
                  |L68.98|
;;;167                    else
;;;168                        PS = eGFX_PIXEL_OFF;
000062  f04f0900          MOV      r9,#0
                  |L68.102|
;;;169    
;;;170                    break;
000066  e06e              B        |L68.326|
;;;171    
;;;172                case  eGFX_IMAGE_PLANE_3BPP_RGB:
;;;173                		{
;;;174                     	//This image plane type is an odd ball case for the 3-color sharp memory LCD.
;;;175                     	uint32_t BitStreamPosition = x*3 + y*Image->SizeX*3;
000068  eb050145          ADD      r1,r5,r5,LSL #1
00006c  8920              LDRH     r0,[r4,#8]
00006e  4378              MULS     r0,r7,r0
000070  eb000040          ADD      r0,r0,r0,LSL #1
000074  eb010a00          ADD      r10,r1,r0
;;;176                     	if(eGFX_BitStreamGet((uint8_t *)Image->Data, BitStreamPosition++))
000078  4651              MOV      r1,r10
00007a  f10a0a01          ADD      r10,r10,#1
00007e  6860              LDR      r0,[r4,#4]
000080  f7fffffe          BL       eGFX_BitStreamGet
000084  b108              CBZ      r0,|L68.138|
;;;177                     			PS |= 0x01;
000086  f0490901          ORR      r9,r9,#1
                  |L68.138|
;;;178                     	if(eGFX_BitStreamGet((uint8_t *)Image->Data, BitStreamPosition++))
00008a  4651              MOV      r1,r10
00008c  f10a0a01          ADD      r10,r10,#1
000090  6860              LDR      r0,[r4,#4]
000092  f7fffffe          BL       eGFX_BitStreamGet
000096  b108              CBZ      r0,|L68.156|
;;;179                     			PS |= 0x02;
000098  f0490902          ORR      r9,r9,#2
                  |L68.156|
;;;180                     	if(eGFX_BitStreamGet((uint8_t *)Image->Data, BitStreamPosition++))
00009c  4651              MOV      r1,r10
00009e  f10a0a01          ADD      r10,r10,#1
0000a2  6860              LDR      r0,[r4,#4]
0000a4  f7fffffe          BL       eGFX_BitStreamGet
0000a8  b108              CBZ      r0,|L68.174|
;;;181                     	  		PS |= 0x04;
0000aa  f0490904          ORR      r9,r9,#4
                  |L68.174|
;;;182                		}
;;;183    
;;;184                        break;
0000ae  e04a              B        |L68.326|
;;;185    
;;;186                case  eGFX_IMAGE_PLANE_4BPP:
;;;187                    //Properly Implement Rounding  for odd bit plane sizes
;;;188    				MemWidthInBytes = eGFX_CALCULATE_4BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
0000b0  8920              LDRH     r0,[r4,#8]
0000b2  1c40              ADDS     r0,r0,#1
0000b4  1046              ASRS     r6,r0,#1
;;;189    
;;;190    				Offset = (y * (MemWidthInBytes)) + (x>>1);
0000b6  fb07f006          MUL      r0,r7,r6
0000ba  eb000865          ADD      r8,r0,r5,ASR #1
;;;191    
;;;192                    if(x&0x01)
0000be  f0050001          AND      r0,r5,#1
0000c2  b128              CBZ      r0,|L68.208|
;;;193                        PS = Image->Data[Offset] & 0x0F;
0000c4  6860              LDR      r0,[r4,#4]
0000c6  f8100008          LDRB     r0,[r0,r8]
0000ca  f000090f          AND      r9,r0,#0xf
0000ce  e004              B        |L68.218|
                  |L68.208|
;;;194                    else
;;;195                        PS = ((Image->Data[Offset])>>4) & 0x0F;
0000d0  6860              LDR      r0,[r4,#4]
0000d2  f8100008          LDRB     r0,[r0,r8]
0000d6  ea4f1910          LSR      r9,r0,#4
                  |L68.218|
;;;196    
;;;197                    break;
0000da  e034              B        |L68.326|
;;;198    
;;;199                case  eGFX_IMAGE_PLANE_8BPP:
;;;200                    MemWidthInBytes  = Image->SizeX;
0000dc  8926              LDRH     r6,[r4,#8]
;;;201                    Offset = (y * MemWidthInBytes) + x;
0000de  fb075806          MLA      r8,r7,r6,r5
;;;202                    PS = Image->Data[Offset];
0000e2  6860              LDR      r0,[r4,#4]
0000e4  f8109008          LDRB     r9,[r0,r8]
;;;203                    break;
0000e8  e02d              B        |L68.326|
;;;204    
;;;205                case  eGFX_IMAGE_PLANE_16BPP_565:
;;;206                    MemWidthInBytes  = Image->SizeX <<1;
0000ea  8920              LDRH     r0,[r4,#8]
0000ec  0046              LSLS     r6,r0,#1
;;;207                    Offset = (y * MemWidthInBytes) + (x << 1);
0000ee  fb07f006          MUL      r0,r7,r6
0000f2  eb000845          ADD      r8,r0,r5,LSL #1
;;;208                    PS = *(uint16_t *)(Image->Data + Offset);
0000f6  6860              LDR      r0,[r4,#4]
0000f8  f8309008          LDRH     r9,[r0,r8]
;;;209                    break;
0000fc  e023              B        |L68.326|
                  |L68.254|
0000fe  e023              B        |L68.328|
                  |L68.256|
000100  e020              B        |L68.324|
;;;210                
;;;211    
;;;212                case  eGFX_IMAGE_PLANE_24BPP:
;;;213                    MemWidthInBytes  = Image->SizeX * 3;
000102  8920              LDRH     r0,[r4,#8]
000104  eb000640          ADD      r6,r0,r0,LSL #1
;;;214                    Offset = (y * MemWidthInBytes) + (x*3);
000108  eb050045          ADD      r0,r5,r5,LSL #1
00010c  fb070806          MLA      r8,r7,r6,r0
;;;215                    PS  = ((int32_t)Image->Data[Offset]);
000110  6860              LDR      r0,[r4,#4]
000112  f8109008          LDRB     r9,[r0,r8]
;;;216                    PS |= ((int32_t)Image->Data[Offset+1])<<8;
000116  f1080001          ADD      r0,r8,#1
00011a  6861              LDR      r1,[r4,#4]
00011c  5c08              LDRB     r0,[r1,r0]
00011e  ea492900          ORR      r9,r9,r0,LSL #8
;;;217                    PS |= ((int32_t)Image->Data[Offset+2])<<16;
000122  f1080002          ADD      r0,r8,#2
000126  6861              LDR      r1,[r4,#4]
000128  5c08              LDRB     r0,[r1,r0]
00012a  ea494900          ORR      r9,r9,r0,LSL #16
;;;218                    break;
00012e  e00a              B        |L68.326|
;;;219    
;;;220                case  eGFX_IMAGE_PLANE_32BPP:
;;;221                    MemWidthInBytes  = Image->SizeX << 2;
000130  8920              LDRH     r0,[r4,#8]
000132  0086              LSLS     r6,r0,#2
;;;222                    Offset = (y * MemWidthInBytes) + (x<<2);
000134  fb07f006          MUL      r0,r7,r6
000138  eb000885          ADD      r8,r0,r5,LSL #2
;;;223                    PS = *(uint32_t *)(Image->Data + Offset);
00013c  6860              LDR      r0,[r4,#4]
00013e  f8509008          LDR      r9,[r0,r8]
;;;224                    break;
000142  e000              B        |L68.326|
                  |L68.324|
;;;225    				
;;;226    
;;;227                default:
;;;228                    break;
000144  bf00              NOP      
                  |L68.326|
000146  bf00              NOP                            ;170
                  |L68.328|
;;;229            }
;;;230        }
;;;231    
;;;232        return PS;
000148  4648              MOV      r0,r9
;;;233    }
00014a  e8bd8ff0          POP      {r4-r11,pc}
;;;234    
                          ENDP


                          AREA ||i.eGFX_GetStringWidth||, CODE, READONLY, ALIGN=1

                  eGFX_GetStringWidth PROC
;;;1060   
;;;1061   int16_t eGFX_GetStringWidth(char *String,
000000  b570              PUSH     {r4-r6,lr}
;;;1062                               const eGFX_Font *MyFont)
;;;1063   {
000002  4604              MOV      r4,r0
000004  460a              MOV      r2,r1
;;;1064       uint8_t Ptr = 0;
000006  2100              MOVS     r1,#0
;;;1065       uint8_t NextChar;
;;;1066       int16_t StringSize = 0;
000008  2500              MOVS     r5,#0
;;;1067       NextChar = String[Ptr];
00000a  5c63              LDRB     r3,[r4,r1]
;;;1068       Ptr++;
00000c  1c49              ADDS     r1,r1,#1
;;;1069   
;;;1070       while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
00000e  e010              B        |L69.50|
                  |L69.16|
;;;1071       {
;;;1072           if(NextChar>=0x20 && NextChar<0x80)
000010  2b20              CMP      r3,#0x20
000012  db0e              BLT      |L69.50|
000014  2b80              CMP      r3,#0x80
000016  da0c              BGE      |L69.50|
;;;1073           {
;;;1074               //Remember that we don't endcode the wide space characters in the FONT table!
;;;1075               StringSize += MyFont->CharacterSprites[NextChar - 0x20]->SizeX + MyFont->InterCharacterSpacing;
000018  f1a30020          SUB      r0,r3,#0x20
00001c  f8520020          LDR      r0,[r2,r0,LSL #2]
000020  8900              LDRH     r0,[r0,#8]
000022  f892618d          LDRB     r6,[r2,#0x18d]
000026  4430              ADD      r0,r0,r6
000028  4428              ADD      r0,r0,r5
00002a  b205              SXTH     r5,r0
;;;1076               NextChar = String[Ptr];
00002c  5c63              LDRB     r3,[r4,r1]
;;;1077               Ptr++;
00002e  1c48              ADDS     r0,r1,#1
000030  b2c1              UXTB     r1,r0
                  |L69.50|
000032  b10b              CBZ      r3,|L69.56|
000034  2940              CMP      r1,#0x40              ;1070
000036  dbeb              BLT      |L69.16|
                  |L69.56|
;;;1078           }
;;;1079       }
;;;1080   
;;;1081       return StringSize - MyFont->InterCharacterSpacing; //Remove the last intra character space!
000038  f892018d          LDRB     r0,[r2,#0x18d]
00003c  1a28              SUBS     r0,r5,r0
00003e  b200              SXTH     r0,r0
;;;1082   }
000040  bd70              POP      {r4-r6,pc}
;;;1083   
                          ENDP


                          AREA ||i.eGFX_GetStringWidth_CustomSpacing||, CODE, READONLY, ALIGN=1

                  eGFX_GetStringWidth_CustomSpacing PROC
;;;1084   
;;;1085   int16_t eGFX_GetStringWidth_CustomSpacing(char *String,
000000  b570              PUSH     {r4-r6,lr}
;;;1086           const eGFX_Font *MyFont,
;;;1087           uint16_t Spacing)
;;;1088   {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;1089       uint8_t Ptr = 0;
000008  2100              MOVS     r1,#0
;;;1090       uint8_t NextChar;
;;;1091       int16_t StringSize = 0;
00000a  2600              MOVS     r6,#0
;;;1092       NextChar = String[Ptr];
00000c  5c5a              LDRB     r2,[r3,r1]
;;;1093       Ptr++;
00000e  1c49              ADDS     r1,r1,#1
;;;1094   
;;;1095       while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
000010  e00e              B        |L70.48|
                  |L70.18|
;;;1096       {
;;;1097           if(NextChar>=0x20 && NextChar<0x80)
000012  2a20              CMP      r2,#0x20
000014  db0c              BLT      |L70.48|
000016  2a80              CMP      r2,#0x80
000018  da0a              BGE      |L70.48|
;;;1098           {
;;;1099               StringSize += MyFont->CharacterSprites[NextChar - 0x20]->SizeX + Spacing;
00001a  f1a20020          SUB      r0,r2,#0x20
00001e  f8550020          LDR      r0,[r5,r0,LSL #2]
000022  8900              LDRH     r0,[r0,#8]
000024  4420              ADD      r0,r0,r4
000026  4430              ADD      r0,r0,r6
000028  b206              SXTH     r6,r0
;;;1100               NextChar = String[Ptr];
00002a  5c5a              LDRB     r2,[r3,r1]
;;;1101               Ptr++;
00002c  1c48              ADDS     r0,r1,#1
00002e  b2c1              UXTB     r1,r0
                  |L70.48|
000030  b10a              CBZ      r2,|L70.54|
000032  2940              CMP      r1,#0x40              ;1095
000034  dbed              BLT      |L70.18|
                  |L70.54|
;;;1102           }
;;;1103       }
;;;1104   
;;;1105       return StringSize - Spacing; //Remove the last inter character space!
000036  1b30              SUBS     r0,r6,r4
000038  b200              SXTH     r0,r0
;;;1106   }
00003a  bd70              POP      {r4-r6,pc}
;;;1107   
                          ENDP


                          AREA ||i.eGFX_ImagePlaneInit||, CODE, READONLY, ALIGN=1

                  eGFX_ImagePlaneInit PROC
;;;1626   
;;;1627   void eGFX_ImagePlaneInit(eGFX_ImagePlane   *Image,uint8_t * Store, int16_t SizeX,int16_t SizeY,uint8_t Type)
000000  b530              PUSH     {r4,r5,lr}
;;;1628   {
000002  9c03              LDR      r4,[sp,#0xc]
;;;1629   	Image->Data = Store;
000004  6041              STR      r1,[r0,#4]
;;;1630   	Image->SizeX = SizeX;
000006  8102              STRH     r2,[r0,#8]
;;;1631   	Image->SizeY = SizeY;
000008  8143              STRH     r3,[r0,#0xa]
;;;1632   	Image->Type = Type;
00000a  7004              STRB     r4,[r0,#0]
;;;1633   
;;;1634   }
00000c  bd30              POP      {r4,r5,pc}
;;;1635   
                          ENDP


                          AREA ||i.eGFX_ImagePlane_Clear||, CODE, READONLY, ALIGN=1

                  eGFX_ImagePlane_Clear PROC
;;;1635   
;;;1636   void eGFX_ImagePlane_Clear(eGFX_ImagePlane   *Image)
000000  b510              PUSH     {r4,lr}
;;;1637   {
;;;1638       uint32_t PlaneSpaceSize = 0;
000002  2200              MOVS     r2,#0
;;;1639       uint32_t i = 0;
000004  2100              MOVS     r1,#0
;;;1640   
;;;1641       switch(Image->Type)
000006  7803              LDRB     r3,[r0,#0]
000008  2b07              CMP      r3,#7
00000a  d25d              BCS      |L72.200|
00000c  e8dff003          TBB      [pc,r3]
000010  045c1322          DCB      0x04,0x5c,0x13,0x22
000014  2f3f4e00          DCB      0x2f,0x3f,0x4e,0x00
;;;1642       {
;;;1643           case  eGFX_IMAGE_PLANE_1BPP:
;;;1644               PlaneSpaceSize = eGFX_CALCULATE_1BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
000018  8903              LDRH     r3,[r0,#8]
00001a  1ddb              ADDS     r3,r3,#7
00001c  10db              ASRS     r3,r3,#3
00001e  8944              LDRH     r4,[r0,#0xa]
000020  fb03f204          MUL      r2,r3,r4
;;;1645   
;;;1646               for(i=0; i<PlaneSpaceSize; i++)
000024  2100              MOVS     r1,#0
000026  e003              B        |L72.48|
                  |L72.40|
;;;1647               {
;;;1648                   Image->Data[i] = 0;
000028  2300              MOVS     r3,#0
00002a  6844              LDR      r4,[r0,#4]
00002c  5463              STRB     r3,[r4,r1]
00002e  1c49              ADDS     r1,r1,#1              ;1646
                  |L72.48|
000030  4291              CMP      r1,r2                 ;1646
000032  d3f9              BCC      |L72.40|
;;;1649               }
;;;1650   
;;;1651               break;
000034  e049              B        |L72.202|
;;;1652   
;;;1653           case  eGFX_IMAGE_PLANE_4BPP:
;;;1654               PlaneSpaceSize = eGFX_CALCULATE_4BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
000036  8903              LDRH     r3,[r0,#8]
000038  1c5b              ADDS     r3,r3,#1
00003a  105b              ASRS     r3,r3,#1
00003c  8944              LDRH     r4,[r0,#0xa]
00003e  fb03f204          MUL      r2,r3,r4
;;;1655   
;;;1656               for(i=0; i<PlaneSpaceSize; i++)
000042  2100              MOVS     r1,#0
000044  e003              B        |L72.78|
                  |L72.70|
;;;1657               {
;;;1658                   Image->Data[i] = 0;
000046  2300              MOVS     r3,#0
000048  6844              LDR      r4,[r0,#4]
00004a  5463              STRB     r3,[r4,r1]
00004c  1c49              ADDS     r1,r1,#1              ;1656
                  |L72.78|
00004e  4291              CMP      r1,r2                 ;1656
000050  d3f9              BCC      |L72.70|
;;;1659               }
;;;1660   
;;;1661               break;
000052  e03a              B        |L72.202|
;;;1662   
;;;1663           case  eGFX_IMAGE_PLANE_8BPP:
;;;1664               PlaneSpaceSize = eGFX_CALCULATE_8BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
000054  8903              LDRH     r3,[r0,#8]
000056  8944              LDRH     r4,[r0,#0xa]
000058  fb03f204          MUL      r2,r3,r4
;;;1665   
;;;1666               for(i=0; i<PlaneSpaceSize; i++)
00005c  2100              MOVS     r1,#0
00005e  e003              B        |L72.104|
                  |L72.96|
;;;1667               {
;;;1668                   Image->Data[i] = 0;
000060  2300              MOVS     r3,#0
000062  6844              LDR      r4,[r0,#4]
000064  5463              STRB     r3,[r4,r1]
000066  1c49              ADDS     r1,r1,#1              ;1666
                  |L72.104|
000068  4291              CMP      r1,r2                 ;1666
00006a  d3f9              BCC      |L72.96|
;;;1669               }
;;;1670   
;;;1671               break;
00006c  e02d              B        |L72.202|
;;;1672   
;;;1673           case  eGFX_IMAGE_PLANE_16BPP_565:
;;;1674               PlaneSpaceSize = eGFX_CALCULATE_16BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
00006e  8903              LDRH     r3,[r0,#8]
000070  005b              LSLS     r3,r3,#1
000072  8944              LDRH     r4,[r0,#0xa]
000074  fb03f204          MUL      r2,r3,r4
;;;1675   
;;;1676               for(i=0; i<PlaneSpaceSize>>1; i++)
000078  2100              MOVS     r1,#0
00007a  e004              B        |L72.134|
                  |L72.124|
;;;1677               {
;;;1678                    ((uint16_t *)(Image->Data))[i] = 0;
00007c  2300              MOVS     r3,#0
00007e  6844              LDR      r4,[r0,#4]
000080  f8243011          STRH     r3,[r4,r1,LSL #1]
000084  1c49              ADDS     r1,r1,#1              ;1676
                  |L72.134|
000086  ebb10f52          CMP      r1,r2,LSR #1          ;1676
00008a  d3f7              BCC      |L72.124|
;;;1679               }
;;;1680   
;;;1681               break;
00008c  e01d              B        |L72.202|
;;;1682    
;;;1683           case  eGFX_IMAGE_PLANE_24BPP:
;;;1684               PlaneSpaceSize = eGFX_CALCULATE_24BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
00008e  8903              LDRH     r3,[r0,#8]
000090  eb030343          ADD      r3,r3,r3,LSL #1
000094  8944              LDRH     r4,[r0,#0xa]
000096  fb03f204          MUL      r2,r3,r4
;;;1685                               
;;;1686               for(i=0; i<PlaneSpaceSize; i++)
00009a  2100              MOVS     r1,#0
00009c  e003              B        |L72.166|
                  |L72.158|
;;;1687               {
;;;1688                   Image->Data[i] = 0;
00009e  2300              MOVS     r3,#0
0000a0  6844              LDR      r4,[r0,#4]
0000a2  5463              STRB     r3,[r4,r1]
0000a4  1c49              ADDS     r1,r1,#1              ;1686
                  |L72.166|
0000a6  4291              CMP      r1,r2                 ;1686
0000a8  d3f9              BCC      |L72.158|
;;;1689               }
;;;1690           
;;;1691               break;
0000aa  e00e              B        |L72.202|
;;;1692           
;;;1693           case  eGFX_IMAGE_PLANE_32BPP:
;;;1694            
;;;1695               PlaneSpaceSize = eGFX_CALCULATE_32BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
0000ac  8903              LDRH     r3,[r0,#8]
0000ae  009b              LSLS     r3,r3,#2
0000b0  8944              LDRH     r4,[r0,#0xa]
0000b2  fb03f204          MUL      r2,r3,r4
;;;1696   
;;;1697               for(i=0; i<PlaneSpaceSize; i++)
0000b6  2100              MOVS     r1,#0
0000b8  e003              B        |L72.194|
                  |L72.186|
;;;1698               {
;;;1699                   Image->Data[i] = 0;
0000ba  2300              MOVS     r3,#0
0000bc  6844              LDR      r4,[r0,#4]
0000be  5463              STRB     r3,[r4,r1]
0000c0  1c49              ADDS     r1,r1,#1              ;1697
                  |L72.194|
0000c2  4291              CMP      r1,r2                 ;1697
0000c4  d3f9              BCC      |L72.186|
;;;1700               }
;;;1701   
;;;1702               break;
0000c6  e000              B        |L72.202|
                  |L72.200|
;;;1703   			
;;;1704           default:
;;;1705               break;
0000c8  bf00              NOP      
                  |L72.202|
0000ca  bf00              NOP                            ;1651
;;;1706       }
;;;1707   }
0000cc  bd10              POP      {r4,pc}
;;;1708   
                          ENDP


                          AREA ||i.eGFX_ImagePlane_GetByte||, CODE, READONLY, ALIGN=1

                  eGFX_ImagePlane_GetByte PROC
;;;1557   
;;;1558   uint8_t eGFX_ImagePlane_GetByte(eGFX_ImagePlane   *Image,
000000  b570              PUSH     {r4-r6,lr}
;;;1559                                   uint16_t X,
;;;1560                                   uint16_t Y)
;;;1561   {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;1562       uint32_t Offset;
;;;1563       uint32_t MemWidthInBytes;
;;;1564       uint8_t RetVal = 0;
000006  2000              MOVS     r0,#0
;;;1565   
;;;1566       switch(Image->Type)
000008  781e              LDRB     r6,[r3,#0]
00000a  b1ee              CBZ      r6,|L73.72|
00000c  2e02              CMP      r6,#2
00000e  d137              BNE      |L73.128|
;;;1567       {
;;;1568       	case eGFX_IMAGE_PLANE_4BPP:
;;;1569   
;;;1570       		  if(X > Image->SizeX)   //Make sure we aren't asking for a chunk greater than the width of one row
000010  891e              LDRH     r6,[r3,#8]
000012  428e              CMP      r6,r1
000014  da02              BGE      |L73.28|
;;;1571       		    {
;;;1572       	  		        X = (Image->SizeX - 1);
000016  891e              LDRH     r6,[r3,#8]
000018  1e76              SUBS     r6,r6,#1
00001a  b2b1              UXTH     r1,r6
                  |L73.28|
;;;1573       		    }
;;;1574       		  if(Y > Image->SizeY)
00001c  895e              LDRH     r6,[r3,#0xa]
00001e  42a6              CMP      r6,r4
000020  da02              BGE      |L73.40|
;;;1575       		    {
;;;1576       		  		  X = (Image->SizeY- - 1);
000022  895e              LDRH     r6,[r3,#0xa]
000024  1c76              ADDS     r6,r6,#1
000026  b2b1              UXTH     r1,r6
                  |L73.40|
;;;1577       		    }
;;;1578   
;;;1579       		    X &= ~((uint16_t)0x1); // Make sure we are on a byte boundary
000028  f0210101          BIC      r1,r1,#1
;;;1580   
;;;1581       		    //Properly Implement Rounding for odd bit plane sizes
;;;1582       		      MemWidthInBytes  = (Image->SizeX)>>1;
00002c  891e              LDRH     r6,[r3,#8]
00002e  1072              ASRS     r2,r6,#1
;;;1583   
;;;1584       		      if(Image->SizeX & 0x1)
000030  7a1e              LDRB     r6,[r3,#8]
000032  f0060601          AND      r6,r6,#1
000036  b106              CBZ      r6,|L73.58|
;;;1585       		  	        MemWidthInBytes++;
000038  1c52              ADDS     r2,r2,#1
                  |L73.58|
;;;1586   
;;;1587       		      Offset = (Y * MemWidthInBytes) + (X>>1);
00003a  fb04f602          MUL      r6,r4,r2
00003e  eb060561          ADD      r5,r6,r1,ASR #1
;;;1588       		      RetVal = Image->Data[Offset];
000042  685e              LDR      r6,[r3,#4]
000044  5d70              LDRB     r0,[r6,r5]
;;;1589   
;;;1590       		break;
000046  e01c              B        |L73.130|
                  |L73.72|
;;;1591   
;;;1592       	case eGFX_IMAGE_PLANE_1BPP:
;;;1593   
;;;1594       		  if(X > Image->SizeX)   //Make sure we aren't asking for a chunk greater than the width of one row
000048  891e              LDRH     r6,[r3,#8]
00004a  428e              CMP      r6,r1
00004c  da02              BGE      |L73.84|
;;;1595       		    {
;;;1596       		        X = (Image->SizeX - 1);
00004e  891e              LDRH     r6,[r3,#8]
000050  1e76              SUBS     r6,r6,#1
000052  b2b1              UXTH     r1,r6
                  |L73.84|
;;;1597       		    }
;;;1598   
;;;1599       		  if(Y > Image->SizeY)
000054  895e              LDRH     r6,[r3,#0xa]
000056  42a6              CMP      r6,r4
000058  da02              BGE      |L73.96|
;;;1600       		  {
;;;1601       			  X = (Image->SizeY- - 1);
00005a  895e              LDRH     r6,[r3,#0xa]
00005c  1c76              ADDS     r6,r6,#1
00005e  b2b1              UXTH     r1,r6
                  |L73.96|
;;;1602       		  }
;;;1603   
;;;1604       		    X &= ~((uint16_t)0x7); // Make sure we are on a byte boundary
000060  f0210107          BIC      r1,r1,#7
;;;1605       		    //Properly Implement Rounding for odd bit plane sizes
;;;1606       		    MemWidthInBytes  = (Image->SizeX)>>3;
000064  891e              LDRH     r6,[r3,#8]
000066  10f2              ASRS     r2,r6,#3
;;;1607   
;;;1608       		    if(Image->SizeX & 0x7)
000068  7a1e              LDRB     r6,[r3,#8]
00006a  f0060607          AND      r6,r6,#7
00006e  b106              CBZ      r6,|L73.114|
;;;1609       		        MemWidthInBytes++;
000070  1c52              ADDS     r2,r2,#1
                  |L73.114|
;;;1610   
;;;1611       		    Offset = (Y * MemWidthInBytes) + (X>>3);
000072  fb04f602          MUL      r6,r4,r2
000076  eb0605e1          ADD      r5,r6,r1,ASR #3
;;;1612       		    RetVal = Image->Data[Offset];
00007a  685e              LDR      r6,[r3,#4]
00007c  5d70              LDRB     r0,[r6,r5]
;;;1613   
;;;1614       		    break;
00007e  e000              B        |L73.130|
                  |L73.128|
;;;1615   
;;;1616       	default:
;;;1617   
;;;1618       		// Other image planes not supported
;;;1619       		
;;;1620   
;;;1621       		break;
000080  bf00              NOP      
                  |L73.130|
000082  bf00              NOP                            ;1590
;;;1622       }
;;;1623   		
;;;1624   		return RetVal;
;;;1625   }
000084  bd70              POP      {r4-r6,pc}
;;;1626   
                          ENDP


                          AREA ||i.eGFX_InitObjectBoxF||, CODE, READONLY, ALIGN=1

                  eGFX_InitObjectBoxF PROC
;;;2828   
;;;2829   void eGFX_InitObjectBoxF(eGFX_Obj_BoxF * BF,
000000  b517              PUSH     {r0-r2,r4,lr}
;;;2830   	eGFX_PointF P1,
;;;2831   	eGFX_PointF P2,
;;;2832   	eGFX_PixelState PS,
;;;2833   	uint8_t BoxF_RenderOption
;;;2834   	)
;;;2835   {
000002  ed2d0b04          VPUSH    {d0-d1}
;;;2836   	BF->Type = eGFX_OBJECT_BOXF;
000006  2305              MOVS     r3,#5
000008  6003              STR      r3,[r0,#0]
;;;2837   
;;;2838   	BF->State = eGFX_OBJECT_STATE_ACTIVE;
00000a  2301              MOVS     r3,#1
00000c  6043              STR      r3,[r0,#4]
;;;2839   
;;;2840   	BF->P1 = P1;
00000e  e9dd3400          LDRD     r3,r4,[sp,#0]
000012  e9c03402          STRD     r3,r4,[r0,#8]
;;;2841   
;;;2842   	BF->P2 = P2;
000016  e9dd3402          LDRD     r3,r4,[sp,#8]
00001a  e9c03404          STRD     r3,r4,[r0,#0x10]
;;;2843   
;;;2844   	BF->BoxF_RenderOption = BoxF_RenderOption;
00001e  7702              STRB     r2,[r0,#0x1c]
;;;2845   
;;;2846   	BF->PixelState = PS;
000020  6181              STR      r1,[r0,#0x18]
;;;2847   
;;;2848   }
000022  b007              ADD      sp,sp,#0x1c
000024  bd10              POP      {r4,pc}
;;;2849   
                          ENDP


                          AREA ||i.eGFX_InitObjectCircleF||, CODE, READONLY, ALIGN=1

                  eGFX_InitObjectCircleF PROC
;;;2764   
;;;2765   void eGFX_InitObjectCircleF(eGFX_Obj_CircleF * CF,
000000  b517              PUSH     {r0-r2,r4,lr}
;;;2766   							eGFX_PointF Position,
;;;2767   							float Radius,
;;;2768   							eGFX_PixelState PS,
;;;2769   							uint8_t CircleF_RenderOption
;;;2770   							)
;;;2771   {
000002  ed2d0b04          VPUSH    {d0-d1}
;;;2772   	CF->Type = eGFX_OBJECT_CIRCLEF;
000006  2306              MOVS     r3,#6
000008  6003              STR      r3,[r0,#0]
;;;2773   
;;;2774   	CF->State = eGFX_OBJECT_STATE_ACTIVE;
00000a  2301              MOVS     r3,#1
00000c  6043              STR      r3,[r0,#4]
;;;2775   
;;;2776   	CF->Position = Position;
00000e  e9dd3400          LDRD     r3,r4,[sp,#0]
000012  e9c03402          STRD     r3,r4,[r0,#8]
;;;2777   
;;;2778   	CF->Radius = Radius;
000016  ed801a04          VSTR     s2,[r0,#0x10]
;;;2779   
;;;2780   	CF->RenderOption = CircleF_RenderOption;
00001a  7602              STRB     r2,[r0,#0x18]
;;;2781   
;;;2782   	CF->PixelState = PS;
00001c  6141              STR      r1,[r0,#0x14]
;;;2783   }
00001e  b007              ADD      sp,sp,#0x1c
000020  bd10              POP      {r4,pc}
;;;2784   
                          ENDP


                          AREA ||i.eGFX_InitObjectLineF||, CODE, READONLY, ALIGN=1

                  eGFX_InitObjectLineF PROC
;;;2605   
;;;2606   void eGFX_InitObjectLineF(eGFX_Obj_LineF * LF,
000000  b503              PUSH     {r0,r1,lr}
;;;2607   	eGFX_PointF Start,
;;;2608   	eGFX_PointF End,
;;;2609   	eGFX_PixelState PS
;;;2610   	)
;;;2611   
;;;2612   {
000002  ed2d0b04          VPUSH    {d0-d1}
;;;2613   	LF->Type = eGFX_OBJECT_LINEF;
000006  2202              MOVS     r2,#2
000008  6002              STR      r2,[r0,#0]
;;;2614   	
;;;2615   	LF->State = eGFX_OBJECT_STATE_ACTIVE;
00000a  2201              MOVS     r2,#1
00000c  6042              STR      r2,[r0,#4]
;;;2616   
;;;2617   	LF->Start = Start;
00000e  e9dd2300          LDRD     r2,r3,[sp,#0]
000012  e9c02302          STRD     r2,r3,[r0,#8]
;;;2618   
;;;2619   	LF->End = End;
000016  e9dd2302          LDRD     r2,r3,[sp,#8]
00001a  e9c02304          STRD     r2,r3,[r0,#0x10]
;;;2620   
;;;2621   	LF->PixelState = PS;
00001e  6181              STR      r1,[r0,#0x18]
;;;2622   
;;;2623   	
;;;2624   }
000020  b006              ADD      sp,sp,#0x18
000022  bd00              POP      {pc}
;;;2625   
                          ENDP


                          AREA ||i.eGFX_InitObjectScaledSpriteF||, CODE, READONLY, ALIGN=1

                  eGFX_InitObjectScaledSpriteF PROC
;;;2712   
;;;2713   void eGFX_InitObjectScaledSpriteF(eGFX_Obj_ScaledSpriteF * S,
000000  b503              PUSH     {r0,r1,lr}
;;;2714   	eGFX_PointF Position,
;;;2715   	eGFX_ImagePlane *	Sprite,
;;;2716   	float Scale
;;;2717   	)
;;;2718   
;;;2719   {
000002  ed2d0b04          VPUSH    {d0-d1}
;;;2720   	S->Type = eGFX_OBJECT_SCALED_SPRITEF;
000006  2204              MOVS     r2,#4
000008  6002              STR      r2,[r0,#0]
;;;2721   
;;;2722   	S->State = eGFX_OBJECT_STATE_ACTIVE;
00000a  2201              MOVS     r2,#1
00000c  6042              STR      r2,[r0,#4]
;;;2723   
;;;2724   	S->Position = Position;
00000e  e9dd2300          LDRD     r2,r3,[sp,#0]
000012  e9c02302          STRD     r2,r3,[r0,#8]
;;;2725   
;;;2726   	S->Sprite = Sprite;
000016  6101              STR      r1,[r0,#0x10]
;;;2727   
;;;2728   }
000018  b006              ADD      sp,sp,#0x18
00001a  bd00              POP      {pc}
;;;2729   
                          ENDP


                          AREA ||i.eGFX_InitObjectShadedTextF||, CODE, READONLY, ALIGN=2

                  eGFX_InitObjectShadedTextF PROC
;;;2539   
;;;2540   void eGFX_InitObjectShadedTextF(eGFX_Obj_ShadedTextF * TF,
000000  b517              PUSH     {r0-r2,r4,lr}
;;;2541   	eGFX_PointF Position,
;;;2542   	eGFX_Font *Font,
;;;2543   	char * String,
;;;2544   	float Shading
;;;2545   	)
;;;2546   
;;;2547   {
000002  ed2d0b04          VPUSH    {d0-d1}
;;;2548   	TF->Type = eGFX_OBJECT_SHADED_TEXTF;
000006  2301              MOVS     r3,#1
000008  6003              STR      r3,[r0,#0]
;;;2549   	TF->State = eGFX_OBJECT_STATE_ACTIVE;
00000a  6043              STR      r3,[r0,#4]
;;;2550   
;;;2551   	if (String != NULL)
00000c  b102              CBZ      r2,|L78.16|
;;;2552   		TF->String = String;
00000e  6102              STR      r2,[r0,#0x10]
                  |L78.16|
;;;2553   
;;;2554   	TF->Position = Position;
000010  e9dd3400          LDRD     r3,r4,[sp,#0]
000014  e9c03402          STRD     r3,r4,[r0,#8]
;;;2555   
;;;2556   
;;;2557   	if (Shading > 1.0f)
000018  eeb70a00          VMOV.F32 s0,#1.00000000
00001c  eeb41ac0          VCMPE.F32 s2,s0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  dd03              BLE      |L78.46|
;;;2558   		Shading = 1.0f;
000026  eeb70a00          VMOV.F32 s0,#1.00000000
00002a  eeb01a40          VMOV.F32 s2,s0
                  |L78.46|
;;;2559   	if (Shading < 0.0f)
00002e  eeb51ac0          VCMPE.F32 s2,#0.0
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d203              BCS      |L78.64|
;;;2560   		Shading = 0.0f;
000038  ed9f0a04          VLDR     s0,|L78.76|
00003c  eeb01a40          VMOV.F32 s2,s0
                  |L78.64|
;;;2561   
;;;2562   	TF->Shading = Shading;
000040  ed801a06          VSTR     s2,[r0,#0x18]
;;;2563   
;;;2564   	if (Font != NULL)
000044  b101              CBZ      r1,|L78.72|
;;;2565   		TF->Font = Font;
000046  6141              STR      r1,[r0,#0x14]
                  |L78.72|
;;;2566   }
000048  b007              ADD      sp,sp,#0x1c
00004a  bd10              POP      {r4,pc}
;;;2567   
                          ENDP

                  |L78.76|
00004c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.eGFX_InitObjectSpriteF||, CODE, READONLY, ALIGN=1

                  eGFX_InitObjectSpriteF PROC
;;;2662   
;;;2663   void eGFX_InitObjectSpriteF(eGFX_Obj_SpriteF * S,
000000  b503              PUSH     {r0,r1,lr}
;;;2664   							eGFX_PointF Position,
;;;2665   							eGFX_ImagePlane *	Sprite
;;;2666   	)
;;;2667   
;;;2668   {
000002  ed2d0b02          VPUSH    {d0}
;;;2669   	S->Type = eGFX_OBJECT_SPRITEF;
000006  2203              MOVS     r2,#3
000008  6002              STR      r2,[r0,#0]
;;;2670   	
;;;2671   	S->State = eGFX_OBJECT_STATE_ACTIVE;
00000a  2201              MOVS     r2,#1
00000c  6042              STR      r2,[r0,#4]
;;;2672   
;;;2673   	S->Position = Position;
00000e  e9dd2300          LDRD     r2,r3,[sp,#0]
000012  e9c02302          STRD     r2,r3,[r0,#8]
;;;2674   
;;;2675   	S->Sprite = Sprite;
000016  6101              STR      r1,[r0,#0x10]
;;;2676   	
;;;2677   }
000018  bd0f              POP      {r0-r3,pc}
;;;2678   
                          ENDP


                          AREA ||i.eGFX_InitObjectTextF||, CODE, READONLY, ALIGN=1

                  eGFX_InitObjectTextF PROC
;;;2485   
;;;2486   void eGFX_InitObjectTextF(eGFX_Obj_TextF * TF,
000000  b517              PUSH     {r0-r2,r4,lr}
;;;2487   	eGFX_PointF Position,
;;;2488   	eGFX_Font *Font,
;;;2489   	char * String
;;;2490   	)
;;;2491   
;;;2492   {
000002  ed2d0b02          VPUSH    {d0}
;;;2493   	TF->Type = eGFX_OBJECT_TEXTF;
000006  2300              MOVS     r3,#0
000008  6003              STR      r3,[r0,#0]
;;;2494   	TF->State = eGFX_OBJECT_STATE_ACTIVE;
00000a  2301              MOVS     r3,#1
00000c  6043              STR      r3,[r0,#4]
;;;2495   
;;;2496   	if (String!=NULL)
00000e  b102              CBZ      r2,|L80.18|
;;;2497   		TF->String = String;
000010  6102              STR      r2,[r0,#0x10]
                  |L80.18|
;;;2498   	
;;;2499   	TF->Position = Position;
000012  e9dd3400          LDRD     r3,r4,[sp,#0]
000016  e9c03402          STRD     r3,r4,[r0,#8]
;;;2500   	
;;;2501   	if (Font!=NULL)
00001a  b101              CBZ      r1,|L80.30|
;;;2502   		TF->Font = Font;
00001c  6141              STR      r1,[r0,#0x14]
                  |L80.30|
;;;2503   }
00001e  b005              ADD      sp,sp,#0x14
000020  bd10              POP      {r4,pc}
;;;2504   
                          ENDP


                          AREA ||i.eGFX_InitPointF_BisectAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_InitPointF_BisectAnimator PROC
;;;1980   //Initializes the data struct
;;;1981   uint32_t eGFX_InitPointF_BisectAnimator(eGFX_PointF_BisectAnimator *P,
000000  b517              PUSH     {r0-r2,r4,lr}
;;;1982   								  eGFX_PointF Target,
;;;1983   								  eGFX_PointF *Current,
;;;1984   							      uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;1985   								  float FractionalBisect) //The amount of percentage of the distance the point should move each step. Values <=0 or >= 1 are set to 0.5
;;;1986   
;;;1987   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4603              MOV      r3,r0
;;;1988   	if (P != NULL)
000008  b34b              CBZ      r3,|L81.94|
;;;1989   	{
;;;1990   		P->Target = Target;
00000a  e9dd0400          LDRD     r0,r4,[sp,#0]
00000e  e9c30404          STRD     r0,r4,[r3,#0x10]
;;;1991   		P->Current = Current;
000012  6199              STR      r1,[r3,#0x18]
;;;1992   		P->LastStep = LastStep;
000014  60da              STR      r2,[r3,#0xc]
;;;1993   		P->FractionalBisect = FractionalBisect;
000016  ed831a07          VSTR     s2,[r3,#0x1c]
;;;1994   
;;;1995   		if (P->FractionalBisect <= 0.0f)
00001a  ed930a07          VLDR     s0,[r3,#0x1c]
00001e  eeb50ac0          VCMPE.F32 s0,#0.0
000022  eef1fa10          VMRS     APSR_nzcv,FPSCR
000026  d804              BHI      |L81.50|
;;;1996   			P->FractionalBisect = 0.5f;
000028  eeb60a00          VMOV.F32 s0,#0.50000000
00002c  ed830a07          VSTR     s0,[r3,#0x1c]
000030  e00c              B        |L81.76|
                  |L81.50|
;;;1997   		else if (P->FractionalBisect >= 1.0f)
000032  ed930a07          VLDR     s0,[r3,#0x1c]
000036  eef70a00          VMOV.F32 s1,#1.00000000
00003a  eeb40ae0          VCMPE.F32 s0,s1
00003e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000042  db03              BLT      |L81.76|
;;;1998   			P->FractionalBisect = 0.5f;
000044  eeb60a00          VMOV.F32 s0,#0.50000000
000048  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L81.76|
;;;1999   
;;;2000   		P->Type = eGFX_OBJECT_POINTF_BISECT_ANIMATOR;
00004c  20f0              MOVS     r0,#0xf0
00004e  6018              STR      r0,[r3,#0]
;;;2001   		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
000050  2002              MOVS     r0,#2
000052  6058              STR      r0,[r3,#4]
;;;2002   		P->CurrentStep = 0;
000054  2000              MOVS     r0,#0
000056  6098              STR      r0,[r3,#8]
;;;2003   
;;;2004   		return TRUE;
000058  2001              MOVS     r0,#1
                  |L81.90|
;;;2005   	}
;;;2006   	else
;;;2007   		return FALSE;
;;;2008   }
00005a  b007              ADD      sp,sp,#0x1c
00005c  bd10              POP      {r4,pc}
                  |L81.94|
00005e  2000              MOVS     r0,#0                 ;2007
000060  e7fb              B        |L81.90|
;;;2009   
                          ENDP


                          AREA ||i.eGFX_InitPointF_LinearAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_InitPointF_LinearAnimator PROC
;;;2249   //Initializes the data struct
;;;2250   uint32_t eGFX_InitPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P,
000000  b517              PUSH     {r0-r2,r4,lr}
;;;2251   	eGFX_PointF Target,
;;;2252   	eGFX_PointF *Current,
;;;2253   	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;2254   	float IncrementX,
;;;2255   	float IncrementY)
;;;2256   
;;;2257   {
000002  ed2d0b04          VPUSH    {d0-d1}
000006  4603              MOV      r3,r0
;;;2258   	if (P != NULL)
000008  2b00              CMP      r3,#0
00000a  d06a              BEQ      |L82.226|
;;;2259   	{
;;;2260   		P->Target = Target;
00000c  e9dd0400          LDRD     r0,r4,[sp,#0]
000010  e9c30404          STRD     r0,r4,[r3,#0x10]
;;;2261   		P->Current = Current;
000014  6199              STR      r1,[r3,#0x18]
;;;2262   		P->LastStep = LastStep;
000016  60da              STR      r2,[r3,#0xc]
;;;2263   		P->IncrementX = IncrementX;
000018  ed831a07          VSTR     s2,[r3,#0x1c]
;;;2264   		P->IncrementY = IncrementY;
00001c  edc31a08          VSTR     s3,[r3,#0x20]
;;;2265   
;;;2266   		P->Type = eGFX_OBJECT_POINTF_LINEAR_ANIMATOR;
000020  20f1              MOVS     r0,#0xf1
000022  6018              STR      r0,[r3,#0]
;;;2267   		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
000024  2002              MOVS     r0,#2
000026  6058              STR      r0,[r3,#4]
;;;2268   		P->CurrentStep = 0;
000028  2000              MOVS     r0,#0
00002a  6098              STR      r0,[r3,#8]
;;;2269   
;;;2270   		//Some sanity checking to see if an invalid increment was entered.  If so,  make the animator inactive
;;;2271   		if (P->IncrementX < 0)
00002c  ed930a07          VLDR     s0,[r3,#0x1c]
000030  eeb50ac0          VCMPE.F32 s0,#0.0
000034  eef1fa10          VMRS     APSR_nzcv,FPSCR
000038  d212              BCS      |L82.96|
;;;2272   		{
;;;2273   			if (P->Target.X > P->Current->X)
00003a  ed930a04          VLDR     s0,[r3,#0x10]
00003e  6998              LDR      r0,[r3,#0x18]
000040  edd00a00          VLDR     s1,[r0,#0]
000044  eeb40ae0          VCMPE.F32 s0,s1
000048  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004c  dd1a              BLE      |L82.132|
;;;2274   			{
;;;2275   				P->IncrementX = P->IncrementX * - 1.0f;
00004e  ed930a07          VLDR     s0,[r3,#0x1c]
000052  eeff0a00          VMOV.F32 s1,#-1.00000000
000056  ee200a20          VMUL.F32 s0,s0,s1
00005a  ed830a07          VSTR     s0,[r3,#0x1c]
00005e  e011              B        |L82.132|
                  |L82.96|
;;;2276   			}
;;;2277   		}
;;;2278   
;;;2279   		else
;;;2280   		{
;;;2281   			if (P->Target.X < P->Current->X)
000060  ed930a04          VLDR     s0,[r3,#0x10]
000064  6998              LDR      r0,[r3,#0x18]
000066  edd00a00          VLDR     s1,[r0,#0]
00006a  eeb40ae0          VCMPE.F32 s0,s1
00006e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000072  d207              BCS      |L82.132|
;;;2282   			{
;;;2283   				P->IncrementX = P->IncrementX * -1.0f;
000074  ed930a07          VLDR     s0,[r3,#0x1c]
000078  eeff0a00          VMOV.F32 s1,#-1.00000000
00007c  ee200a20          VMUL.F32 s0,s0,s1
000080  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L82.132|
;;;2284   			}
;;;2285   		}
;;;2286   
;;;2287   		if (P->IncrementY < 0)
000084  ed930a08          VLDR     s0,[r3,#0x20]
000088  eeb50ac0          VCMPE.F32 s0,#0.0
00008c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000090  d212              BCS      |L82.184|
;;;2288   		{
;;;2289   			if (P->Target.Y > P->Current->Y)
000092  ed930a05          VLDR     s0,[r3,#0x14]
000096  6998              LDR      r0,[r3,#0x18]
000098  edd00a01          VLDR     s1,[r0,#4]
00009c  eeb40ae0          VCMPE.F32 s0,s1
0000a0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000a4  dd1a              BLE      |L82.220|
;;;2290   			{
;;;2291   				P->IncrementY = P->IncrementY * -1.0f;
0000a6  ed930a08          VLDR     s0,[r3,#0x20]
0000aa  eeff0a00          VMOV.F32 s1,#-1.00000000
0000ae  ee200a20          VMUL.F32 s0,s0,s1
0000b2  ed830a08          VSTR     s0,[r3,#0x20]
0000b6  e011              B        |L82.220|
                  |L82.184|
;;;2292   			}
;;;2293   		}
;;;2294   
;;;2295   		else
;;;2296   		{
;;;2297   			if (P->Target.Y < P->Current->Y)
0000b8  ed930a05          VLDR     s0,[r3,#0x14]
0000bc  6998              LDR      r0,[r3,#0x18]
0000be  edd00a01          VLDR     s1,[r0,#4]
0000c2  eeb40ae0          VCMPE.F32 s0,s1
0000c6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000ca  d207              BCS      |L82.220|
;;;2298   			{
;;;2299   				P->IncrementY = P->IncrementY * -1.0f;
0000cc  ed930a08          VLDR     s0,[r3,#0x20]
0000d0  eeff0a00          VMOV.F32 s1,#-1.00000000
0000d4  ee200a20          VMUL.F32 s0,s0,s1
0000d8  ed830a08          VSTR     s0,[r3,#0x20]
                  |L82.220|
;;;2300   			}
;;;2301   		}
;;;2302   
;;;2303   
;;;2304   		return TRUE;
0000dc  2001              MOVS     r0,#1
                  |L82.222|
;;;2305   	}
;;;2306   	else
;;;2307   		return FALSE;
;;;2308   }
0000de  b007              ADD      sp,sp,#0x1c
0000e0  bd10              POP      {r4,pc}
                  |L82.226|
0000e2  2000              MOVS     r0,#0                 ;2307
0000e4  e7fb              B        |L82.222|
;;;2309   
                          ENDP


                          AREA ||i.eGFX_InitScalarF_BisectAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_InitScalarF_BisectAnimator PROC
;;;2062   //Initializes the data struct
;;;2063   uint32_t eGFX_InitScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P,
000000  4603              MOV      r3,r0
;;;2064   	float Target,
;;;2065   	float *Current,
;;;2066   	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;2067   	float FractionalBisect) //The amount of percentage of the distance the point should move each step. Values <=0 or >= 1 are set to 0.5
;;;2068   
;;;2069   {
;;;2070   	if (P != NULL)
000002  b333              CBZ      r3,|L83.82|
;;;2071   	{
;;;2072   		P->Target = Target;
000004  ed830a04          VSTR     s0,[r3,#0x10]
;;;2073   		P->Current = Current;
000008  6159              STR      r1,[r3,#0x14]
;;;2074   		P->LastStep = LastStep;
00000a  60da              STR      r2,[r3,#0xc]
;;;2075   		P->FractionalBisect = FractionalBisect;
00000c  edc30a06          VSTR     s1,[r3,#0x18]
;;;2076   
;;;2077   		if (P->FractionalBisect <= 0.0f)
000010  ed931a06          VLDR     s2,[r3,#0x18]
000014  eeb51ac0          VCMPE.F32 s2,#0.0
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001c  d804              BHI      |L83.40|
;;;2078   			P->FractionalBisect = 0.5f;
00001e  eeb61a00          VMOV.F32 s2,#0.50000000
000022  ed831a06          VSTR     s2,[r3,#0x18]
000026  e00c              B        |L83.66|
                  |L83.40|
;;;2079   		else if (P->FractionalBisect >= 1.0f)
000028  ed931a06          VLDR     s2,[r3,#0x18]
00002c  eef71a00          VMOV.F32 s3,#1.00000000
000030  eeb41ae1          VCMPE.F32 s2,s3
000034  eef1fa10          VMRS     APSR_nzcv,FPSCR
000038  db03              BLT      |L83.66|
;;;2080   			P->FractionalBisect = 0.5f;
00003a  eeb61a00          VMOV.F32 s2,#0.50000000
00003e  ed831a06          VSTR     s2,[r3,#0x18]
                  |L83.66|
;;;2081   
;;;2082   		P->Type = eGFX_OBJECT_SCALARF_BISECT_ANIMATOR;
000042  20f2              MOVS     r0,#0xf2
000044  6018              STR      r0,[r3,#0]
;;;2083   		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
000046  2002              MOVS     r0,#2
000048  6058              STR      r0,[r3,#4]
;;;2084   		P->CurrentStep = 0;
00004a  2000              MOVS     r0,#0
00004c  6098              STR      r0,[r3,#8]
;;;2085   
;;;2086   		return TRUE;
00004e  2001              MOVS     r0,#1
                  |L83.80|
;;;2087   	}
;;;2088   	else
;;;2089   		return FALSE;
;;;2090   }
000050  4770              BX       lr
                  |L83.82|
000052  2000              MOVS     r0,#0                 ;2089
000054  e7fc              B        |L83.80|
;;;2091   
                          ENDP


                          AREA ||i.eGFX_InitScalarF_LinearAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_InitScalarF_LinearAnimator PROC
;;;2145   //Initializes the data struct
;;;2146   uint32_t eGFX_InitScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P,
000000  4603              MOV      r3,r0
;;;2147   										float Target,
;;;2148   										float *Current,
;;;2149   										uint32_t LastStep,			//Maximum Allow Steps before forced convergence
;;;2150   										float Increment) 
;;;2151   
;;;2152   {
;;;2153   	if (P != NULL)
000002  b383              CBZ      r3,|L84.102|
;;;2154   	{
;;;2155   		P->Target = Target;
000004  ed830a04          VSTR     s0,[r3,#0x10]
;;;2156   		P->Current = Current;
000008  6159              STR      r1,[r3,#0x14]
;;;2157   		P->LastStep = LastStep;
00000a  60da              STR      r2,[r3,#0xc]
;;;2158   		P->Increment = Increment;
00000c  edc30a06          VSTR     s1,[r3,#0x18]
;;;2159   
;;;2160   		P->Type = eGFX_OBJECT_SCALARF_LINEAR_ANIMATOR;
000010  20f3              MOVS     r0,#0xf3
000012  6018              STR      r0,[r3,#0]
;;;2161   		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
000014  2002              MOVS     r0,#2
000016  6058              STR      r0,[r3,#4]
;;;2162   		P->CurrentStep = 0;
000018  2000              MOVS     r0,#0
00001a  6098              STR      r0,[r3,#8]
;;;2163   		
;;;2164   		//Some sanity checking to see if an invalid increment was entered.  If so,  make the animator inactive
;;;2165   		if (P->Increment < 0)
00001c  ed931a06          VLDR     s2,[r3,#0x18]
000020  eeb51ac0          VCMPE.F32 s2,#0.0
000024  eef1fa10          VMRS     APSR_nzcv,FPSCR
000028  d20a              BCS      |L84.64|
;;;2166   		{
;;;2167   			if (Target > *Current)
00002a  ed911a00          VLDR     s2,[r1,#0]
00002e  eeb41ac0          VCMPE.F32 s2,s0
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d21b              BCS      |L84.112|
;;;2168   			{
;;;2169   
;;;2170   				*Current = Target;
000038  ed810a00          VSTR     s0,[r1,#0]
;;;2171   				P->State = eGFX_OBJECT_STATE_INACTIVE;
00003c  6058              STR      r0,[r3,#4]
00003e  e017              B        |L84.112|
                  |L84.64|
;;;2172   			}
;;;2173   		}
;;;2174   
;;;2175   		else if (P->Increment > 0)
000040  ed931a06          VLDR     s2,[r3,#0x18]
000044  eeb51ac0          VCMPE.F32 s2,#0.0
000048  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004c  dd0c              BLE      |L84.104|
;;;2176   		{
;;;2177   			if (Target < *Current)
00004e  ed911a00          VLDR     s2,[r1,#0]
000052  eeb41ac0          VCMPE.F32 s2,s0
000056  eef1fa10          VMRS     APSR_nzcv,FPSCR
00005a  dd09              BLE      |L84.112|
;;;2178   			{
;;;2179   				*Current = Target;
00005c  ed810a00          VSTR     s0,[r1,#0]
;;;2180   				P->State = eGFX_OBJECT_STATE_INACTIVE;
000060  2000              MOVS     r0,#0
000062  6058              STR      r0,[r3,#4]
000064  e004              B        |L84.112|
                  |L84.102|
000066  e005              B        |L84.116|
                  |L84.104|
;;;2181   			}
;;;2182   			
;;;2183   		}
;;;2184   
;;;2185   		else
;;;2186   		{
;;;2187   			*Current = Target;
000068  ed810a00          VSTR     s0,[r1,#0]
;;;2188   			P->State = eGFX_OBJECT_STATE_INACTIVE;
00006c  2000              MOVS     r0,#0
00006e  6058              STR      r0,[r3,#4]
                  |L84.112|
;;;2189   		}
;;;2190   		
;;;2191   		return TRUE;
000070  2001              MOVS     r0,#1
                  |L84.114|
;;;2192   	}
;;;2193   	else
;;;2194   		return FALSE;
;;;2195   }
000072  4770              BX       lr
                  |L84.116|
000074  2000              MOVS     r0,#0                 ;2194
000076  e7fc              B        |L84.114|
;;;2196   
                          ENDP


                          AREA ||i.eGFX_PauseAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_PauseAnimator PROC
;;;1920   
;;;1921   void eGFX_PauseAnimator(void * A)
000000  2100              MOVS     r1,#0
;;;1922   {
;;;1923   	((eGFX_AnimatorHeader *)(A))->State = eGFX_OBJECT_STATE_INACTIVE;
000002  6041              STR      r1,[r0,#4]
;;;1924   }
000004  4770              BX       lr
;;;1925   
                          ENDP


                          AREA ||i.eGFX_PauseAnimators||, CODE, READONLY, ALIGN=2

                  eGFX_PauseAnimators PROC
;;;1946   
;;;1947   void eGFX_PauseAnimators()
000000  b500              PUSH     {lr}
;;;1948   {
;;;1949   	uint32_t i;
;;;1950   
;;;1951   	for (i = 0; i<eGFX_AnimatorEndIndex; i++)
000002  2200              MOVS     r2,#0
000004  e009              B        |L86.26|
                  |L86.6|
;;;1952   	{
;;;1953   		if (eGFX_Animators[i]!=NULL)
000006  4807              LDR      r0,|L86.36|
000008  f8500022          LDR      r0,[r0,r2,LSL #2]
00000c  b120              CBZ      r0,|L86.24|
;;;1954   			 eGFX_PauseAnimator(eGFX_Animators[i]);
00000e  4905              LDR      r1,|L86.36|
000010  f8510022          LDR      r0,[r1,r2,LSL #2]
000014  f7fffffe          BL       eGFX_PauseAnimator
                  |L86.24|
000018  1c52              ADDS     r2,r2,#1              ;1951
                  |L86.26|
00001a  4803              LDR      r0,|L86.40|
00001c  6800              LDR      r0,[r0,#0]            ;1951  ; eGFX_AnimatorEndIndex
00001e  4282              CMP      r2,r0                 ;1951
000020  d3f1              BCC      |L86.6|
;;;1955   	}
;;;1956   
;;;1957   }
000022  bd00              POP      {pc}
;;;1958   
                          ENDP

                  |L86.36|
                          DCD      eGFX_Animators
                  |L86.40|
                          DCD      eGFX_AnimatorEndIndex

                          AREA ||i.eGFX_ProcessAnimators||, CODE, READONLY, ALIGN=2

                  eGFX_ProcessAnimators PROC
;;;2375   
;;;2376   void eGFX_ProcessAnimators()
000000  b510              PUSH     {r4,lr}
;;;2377   {
;;;2378   	uint32_t i;
;;;2379   
;;;2380   	for (i = 0; i<eGFX_AnimatorEndIndex; i++)
000002  2400              MOVS     r4,#0
000004  e02b              B        |L87.94|
                  |L87.6|
;;;2381   	{
;;;2382   		if (eGFX_Animators[i] != NULL)
000006  4818              LDR      r0,|L87.104|
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  b330              CBZ      r0,|L87.92|
;;;2383   		{
;;;2384   
;;;2385   			switch (((eGFX_ObjectHeader *)(eGFX_Animators[i]))->Type)
00000e  4816              LDR      r0,|L87.104|
000010  f8500024          LDR      r0,[r0,r4,LSL #2]
000014  6800              LDR      r0,[r0,#0]
000016  28f0              CMP      r0,#0xf0
000018  d006              BEQ      |L87.40|
00001a  28f1              CMP      r0,#0xf1
00001c  d010              BEQ      |L87.64|
00001e  28f2              CMP      r0,#0xf2
000020  d014              BEQ      |L87.76|
000022  28f3              CMP      r0,#0xf3
000024  d118              BNE      |L87.88|
000026  e005              B        |L87.52|
                  |L87.40|
;;;2386   			{
;;;2387   			case eGFX_OBJECT_POINTF_BISECT_ANIMATOR:
;;;2388   				eGFX_ProcessPointF_BisectAnimator(eGFX_Animators[i]);
000028  490f              LDR      r1,|L87.104|
00002a  f8510024          LDR      r0,[r1,r4,LSL #2]
00002e  f7fffffe          BL       eGFX_ProcessPointF_BisectAnimator
;;;2389   				break;
000032  e012              B        |L87.90|
                  |L87.52|
;;;2390   
;;;2391   			case eGFX_OBJECT_SCALARF_LINEAR_ANIMATOR:
;;;2392   				eGFX_ProcessScalarF_LinearAnimator(eGFX_Animators[i]);
000034  490c              LDR      r1,|L87.104|
000036  f8510024          LDR      r0,[r1,r4,LSL #2]
00003a  f7fffffe          BL       eGFX_ProcessScalarF_LinearAnimator
;;;2393   				break;
00003e  e00c              B        |L87.90|
                  |L87.64|
;;;2394   
;;;2395   			case eGFX_OBJECT_POINTF_LINEAR_ANIMATOR:
;;;2396   				
;;;2397   				eGFX_ProcessPointF_LinearAnimator(eGFX_Animators[i]);
000040  4909              LDR      r1,|L87.104|
000042  f8510024          LDR      r0,[r1,r4,LSL #2]
000046  f7fffffe          BL       eGFX_ProcessPointF_LinearAnimator
;;;2398   
;;;2399   					break;
00004a  e006              B        |L87.90|
                  |L87.76|
;;;2400   
;;;2401   			case eGFX_OBJECT_SCALARF_BISECT_ANIMATOR:
;;;2402   
;;;2403   				eGFX_ProcessScalarF_BisectAnimator(eGFX_Animators[i]);
00004c  4906              LDR      r1,|L87.104|
00004e  f8510024          LDR      r0,[r1,r4,LSL #2]
000052  f7fffffe          BL       eGFX_ProcessScalarF_BisectAnimator
;;;2404   
;;;2405   				break;
000056  e000              B        |L87.90|
                  |L87.88|
;;;2406   
;;;2407   			default:
;;;2408   				break;
000058  bf00              NOP      
                  |L87.90|
00005a  bf00              NOP                            ;2389
                  |L87.92|
00005c  1c64              ADDS     r4,r4,#1              ;2380
                  |L87.94|
00005e  4803              LDR      r0,|L87.108|
000060  6800              LDR      r0,[r0,#0]            ;2380  ; eGFX_AnimatorEndIndex
000062  4284              CMP      r4,r0                 ;2380
000064  d3cf              BCC      |L87.6|
;;;2409   			}
;;;2410   
;;;2411   		}
;;;2412   	}
;;;2413   }
000066  bd10              POP      {r4,pc}
;;;2414   
                          ENDP

                  |L87.104|
                          DCD      eGFX_Animators
                  |L87.108|
                          DCD      eGFX_AnimatorEndIndex

                          AREA ||i.eGFX_ProcessPointF_BisectAnimator||, CODE, READONLY, ALIGN=2

                  eGFX_ProcessPointF_BisectAnimator PROC
;;;2028   
;;;2029   void eGFX_ProcessPointF_BisectAnimator(eGFX_PointF_BisectAnimator *P)
000000  b510              PUSH     {r4,lr}
;;;2030   {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  4604              MOV      r4,r0
;;;2031   
;;;2032   	if (P->Current == NULL)
000008  69a0              LDR      r0,[r4,#0x18]
00000a  b910              CBNZ     r0,|L88.18|
                  |L88.12|
;;;2033   		return;
;;;2034   
;;;2035   	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
;;;2036   	{
;;;2037   		//Move a fraction of a distance towards the target
;;;2038   		P->Current->X += (P->Target.X - P->Current->X) * P->FractionalBisect;
;;;2039   		P->Current->Y += (P->Target.Y - P->Current->Y) * P->FractionalBisect;
;;;2040   
;;;2041   		P->CurrentStep++;
;;;2042   
;;;2043   		//See if we have converged or beyond the max number of steps
;;;2044   		if ((P->CurrentStep >= P->LastStep) ||
;;;2045   			((fabs((P->Target.Y) - (P->Current->Y)) <= 0.5) && (fabs((P->Target.X) - (P->Current->X)) <= 0.5)))
;;;2046   		{
;;;2047   			*(P->Current) = P->Target;
;;;2048   
;;;2049   			P->State = eGFX_OBJECT_STATE_INACTIVE;
;;;2050   		}
;;;2051   	}
;;;2052   }
00000c  ecbd8b04          VPOP     {d8-d9}
000010  bd10              POP      {r4,pc}
                  |L88.18|
000012  6860              LDR      r0,[r4,#4]            ;2035
000014  2800              CMP      r0,#0                 ;2035
000016  d06c              BEQ      |L88.242|
000018  ed940a04          VLDR     s0,[r4,#0x10]         ;2038
00001c  69a0              LDR      r0,[r4,#0x18]         ;2038
00001e  edd00a00          VLDR     s1,[r0,#0]            ;2038
000022  ee700a60          VSUB.F32 s1,s0,s1              ;2038
000026  ed941a07          VLDR     s2,[r4,#0x1c]         ;2038
00002a  ed900a00          VLDR     s0,[r0,#0]            ;2038
00002e  ee000a81          VMLA.F32 s0,s1,s2              ;2038
000032  ed800a00          VSTR     s0,[r0,#0]            ;2038
000036  ed940a05          VLDR     s0,[r4,#0x14]         ;2039
00003a  69a0              LDR      r0,[r4,#0x18]         ;2039
00003c  edd00a01          VLDR     s1,[r0,#4]            ;2039
000040  ee700a60          VSUB.F32 s1,s0,s1              ;2039
000044  ed941a07          VLDR     s2,[r4,#0x1c]         ;2039
000048  ed900a01          VLDR     s0,[r0,#4]            ;2039
00004c  ee000a81          VMLA.F32 s0,s1,s2              ;2039
000050  ed800a01          VSTR     s0,[r0,#4]            ;2039
000054  68a0              LDR      r0,[r4,#8]            ;2041
000056  1c40              ADDS     r0,r0,#1              ;2041
000058  60a0              STR      r0,[r4,#8]            ;2041
00005a  e9d40102          LDRD     r0,r1,[r4,#8]         ;2044
00005e  4288              CMP      r0,r1                 ;2044
000060  d241              BCS      |L88.230|
000062  ed940a05          VLDR     s0,[r4,#0x14]         ;2045
000066  69a0              LDR      r0,[r4,#0x18]         ;2045
000068  edd00a01          VLDR     s1,[r0,#4]            ;2045
00006c  ee300a60          VSUB.F32 s0,s0,s1              ;2045
000070  ee101a10          VMOV     r1,s0                 ;2045
000074  4608              MOV      r0,r1                 ;2045
000076  f7fffffe          BL       __aeabi_f2d
00007a  ec410b19          VMOV     d9,r0,r1              ;2045
00007e  eeb00a49          VMOV.F32 s0,s18                ;2045
000082  eef00a69          VMOV.F32 s1,s19                ;2045
000086  f7fffffe          BL       __hardfp_fabs
00008a  eeb08a40          VMOV.F32 s16,s0                ;2045
00008e  eef08a60          VMOV.F32 s17,s1                ;2045
000092  ed9f0b19          VLDR     d0,|L88.248|
000096  ec532b10          VMOV     r2,r3,d0              ;2045
00009a  ec510b18          VMOV     r0,r1,d8              ;2045
00009e  f7fffffe          BL       __aeabi_cdcmple
0000a2  d826              BHI      |L88.242|
0000a4  ed940a04          VLDR     s0,[r4,#0x10]         ;2045
0000a8  69a0              LDR      r0,[r4,#0x18]         ;2045
0000aa  edd00a00          VLDR     s1,[r0,#0]            ;2045
0000ae  ee300a60          VSUB.F32 s0,s0,s1              ;2045
0000b2  ee101a10          VMOV     r1,s0                 ;2045
0000b6  4608              MOV      r0,r1                 ;2045
0000b8  f7fffffe          BL       __aeabi_f2d
0000bc  ec410b19          VMOV     d9,r0,r1              ;2045
0000c0  eeb00a49          VMOV.F32 s0,s18                ;2045
0000c4  eef00a69          VMOV.F32 s1,s19                ;2045
0000c8  f7fffffe          BL       __hardfp_fabs
0000cc  eeb08a40          VMOV.F32 s16,s0                ;2045
0000d0  eef08a60          VMOV.F32 s17,s1                ;2045
0000d4  ed9f0b08          VLDR     d0,|L88.248|
0000d8  ec532b10          VMOV     r2,r3,d0              ;2045
0000dc  ec510b18          VMOV     r0,r1,d8              ;2045
0000e0  f7fffffe          BL       __aeabi_cdcmple
0000e4  d805              BHI      |L88.242|
                  |L88.230|
0000e6  e9d41204          LDRD     r1,r2,[r4,#0x10]      ;2047
0000ea  69a0              LDR      r0,[r4,#0x18]         ;2047
0000ec  c006              STM      r0!,{r1,r2}           ;2047
0000ee  2000              MOVS     r0,#0                 ;2049
0000f0  6060              STR      r0,[r4,#4]            ;2049
                  |L88.242|
0000f2  bf00              NOP      
0000f4  e78a              B        |L88.12|
;;;2053   
                          ENDP

0000f6  0000              DCW      0x0000
                  |L88.248|
0000f8  00000000          DCFD     0x3fe0000000000000 ; 0.5
0000fc  3fe00000

                          AREA ||i.eGFX_ProcessPointF_LinearAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_ProcessPointF_LinearAnimator PROC
;;;2330   
;;;2331   void eGFX_ProcessPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P)
000000  b510              PUSH     {r4,lr}
;;;2332   {
000002  ed2d8b06          VPUSH    {d8-d10}
000006  4604              MOV      r4,r0
;;;2333   
;;;2334   	if (P->Current == NULL)
000008  69a0              LDR      r0,[r4,#0x18]
00000a  b910              CBNZ     r0,|L89.18|
                  |L89.12|
;;;2335   		return;
;;;2336   
;;;2337   	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
;;;2338   	{
;;;2339   		
;;;2340   		P->CurrentStep++;
;;;2341   
;;;2342   		if (fabs((P->Target.X) - (P->Current->X)) >= fabs(P->IncrementX))
;;;2343   		{
;;;2344   			P->Current->X += P->IncrementX;
;;;2345   		}
;;;2346   		
;;;2347   		if (fabs((P->Target.Y) - (P->Current->Y)) >= fabs(P->IncrementY))
;;;2348   		{
;;;2349   			P->Current->Y += P->IncrementY;
;;;2350   		}
;;;2351   
;;;2352   		//See if we have converged or beyond the max number of steps
;;;2353   		if ((P->CurrentStep >= P->LastStep) ||
;;;2354   												(
;;;2355   													(fabs((P->Target.X) - (P->Current->X)) < fabs(P->IncrementX)) && 
;;;2356   													(fabs((P->Target.Y) - (P->Current->Y)) < fabs(P->IncrementY))
;;;2357   												)
;;;2358   			)
;;;2359   			
;;;2360   		{
;;;2361   			*(P->Current) = P->Target;
;;;2362   
;;;2363   			P->State = eGFX_OBJECT_STATE_INACTIVE;
;;;2364   		}
;;;2365   	}
;;;2366   }
00000c  ecbd8b06          VPOP     {d8-d10}
000010  bd10              POP      {r4,pc}
                  |L89.18|
000012  6860              LDR      r0,[r4,#4]            ;2337
000014  2800              CMP      r0,#0                 ;2337
000016  d07d              BEQ      |L89.276|
000018  68a0              LDR      r0,[r4,#8]            ;2340
00001a  1c40              ADDS     r0,r0,#1              ;2340
00001c  60a0              STR      r0,[r4,#8]            ;2340
00001e  ed940a07          VLDR     s0,[r4,#0x1c]         ;2342
000022  ee101a10          VMOV     r1,s0                 ;2342
000026  4608              MOV      r0,r1                 ;2342
000028  f7fffffe          BL       __aeabi_f2d
00002c  ec410b1a          VMOV     d10,r0,r1             ;2342
000030  eeb00a4a          VMOV.F32 s0,s20                ;2342
000034  eef00a6a          VMOV.F32 s1,s21                ;2342
000038  f7fffffe          BL       __hardfp_fabs
00003c  eeb08a40          VMOV.F32 s16,s0                ;2342
000040  eef08a60          VMOV.F32 s17,s1                ;2342
000044  ed940a04          VLDR     s0,[r4,#0x10]         ;2342
000048  69a0              LDR      r0,[r4,#0x18]         ;2342
00004a  edd00a00          VLDR     s1,[r0,#0]            ;2342
00004e  ee300a60          VSUB.F32 s0,s0,s1              ;2342
000052  ee101a10          VMOV     r1,s0                 ;2342
000056  4608              MOV      r0,r1                 ;2342
000058  f7fffffe          BL       __aeabi_f2d
00005c  ec410b1a          VMOV     d10,r0,r1             ;2342
000060  eeb00a4a          VMOV.F32 s0,s20                ;2342
000064  eef00a6a          VMOV.F32 s1,s21                ;2342
000068  f7fffffe          BL       __hardfp_fabs
00006c  eeb09a40          VMOV.F32 s18,s0                ;2342
000070  eef09a60          VMOV.F32 s19,s1                ;2342
000074  ec532b18          VMOV     r2,r3,d8              ;2342
000078  ec510b19          VMOV     r0,r1,d9              ;2342
00007c  f7fffffe          BL       __aeabi_cdrcmple
000080  d808              BHI      |L89.148|
000082  69a0              LDR      r0,[r4,#0x18]         ;2344
000084  ed900a00          VLDR     s0,[r0,#0]            ;2344
000088  edd40a07          VLDR     s1,[r4,#0x1c]         ;2344
00008c  ee300a20          VADD.F32 s0,s0,s1              ;2344
000090  ed800a00          VSTR     s0,[r0,#0]            ;2344
                  |L89.148|
000094  ed940a08          VLDR     s0,[r4,#0x20]         ;2347
000098  ee101a10          VMOV     r1,s0                 ;2347
00009c  4608              MOV      r0,r1                 ;2347
00009e  f7fffffe          BL       __aeabi_f2d
0000a2  ec410b1a          VMOV     d10,r0,r1             ;2347
0000a6  eeb00a4a          VMOV.F32 s0,s20                ;2347
0000aa  eef00a6a          VMOV.F32 s1,s21                ;2347
0000ae  f7fffffe          BL       __hardfp_fabs
0000b2  eeb09a40          VMOV.F32 s18,s0                ;2347
0000b6  eef09a60          VMOV.F32 s19,s1                ;2347
0000ba  ed940a05          VLDR     s0,[r4,#0x14]         ;2347
0000be  69a0              LDR      r0,[r4,#0x18]         ;2347
0000c0  edd00a01          VLDR     s1,[r0,#4]            ;2347
0000c4  ee300a60          VSUB.F32 s0,s0,s1              ;2347
0000c8  ee101a10          VMOV     r1,s0                 ;2347
0000cc  4608              MOV      r0,r1                 ;2347
0000ce  f7fffffe          BL       __aeabi_f2d
0000d2  ec410b1a          VMOV     d10,r0,r1             ;2347
0000d6  eeb00a4a          VMOV.F32 s0,s20                ;2347
0000da  eef00a6a          VMOV.F32 s1,s21                ;2347
0000de  f7fffffe          BL       __hardfp_fabs
0000e2  eeb08a40          VMOV.F32 s16,s0                ;2347
0000e6  eef08a60          VMOV.F32 s17,s1                ;2347
0000ea  ec532b19          VMOV     r2,r3,d9              ;2347
0000ee  ec510b18          VMOV     r0,r1,d8              ;2347
0000f2  f7fffffe          BL       __aeabi_cdrcmple
0000f6  d808              BHI      |L89.266|
0000f8  69a0              LDR      r0,[r4,#0x18]         ;2349
0000fa  ed900a01          VLDR     s0,[r0,#4]            ;2349
0000fe  edd40a08          VLDR     s1,[r4,#0x20]         ;2349
000102  ee300a20          VADD.F32 s0,s0,s1              ;2349
000106  ed800a01          VSTR     s0,[r0,#4]            ;2349
                  |L89.266|
00010a  e9d40102          LDRD     r0,r1,[r4,#8]         ;2353
00010e  4288              CMP      r0,r1                 ;2353
000110  d265              BCS      |L89.478|
000112  e000              B        |L89.278|
                  |L89.276|
000114  e069              B        |L89.490|
                  |L89.278|
000116  ed940a07          VLDR     s0,[r4,#0x1c]         ;2355
00011a  ee101a10          VMOV     r1,s0                 ;2355
00011e  4608              MOV      r0,r1                 ;2355
000120  f7fffffe          BL       __aeabi_f2d
000124  ec410b1a          VMOV     d10,r0,r1             ;2355
000128  eeb00a4a          VMOV.F32 s0,s20                ;2355
00012c  eef00a6a          VMOV.F32 s1,s21                ;2355
000130  f7fffffe          BL       __hardfp_fabs
000134  eeb08a40          VMOV.F32 s16,s0                ;2355
000138  eef08a60          VMOV.F32 s17,s1                ;2355
00013c  ed940a04          VLDR     s0,[r4,#0x10]         ;2355
000140  69a0              LDR      r0,[r4,#0x18]         ;2355
000142  edd00a00          VLDR     s1,[r0,#0]            ;2355
000146  ee300a60          VSUB.F32 s0,s0,s1              ;2355
00014a  ee101a10          VMOV     r1,s0                 ;2355
00014e  4608              MOV      r0,r1                 ;2355
000150  f7fffffe          BL       __aeabi_f2d
000154  ec410b1a          VMOV     d10,r0,r1             ;2355
000158  eeb00a4a          VMOV.F32 s0,s20                ;2355
00015c  eef00a6a          VMOV.F32 s1,s21                ;2355
000160  f7fffffe          BL       __hardfp_fabs
000164  eeb09a40          VMOV.F32 s18,s0                ;2355
000168  eef09a60          VMOV.F32 s19,s1                ;2355
00016c  ec532b18          VMOV     r2,r3,d8              ;2355
000170  ec510b19          VMOV     r0,r1,d9              ;2355
000174  f7fffffe          BL       __aeabi_cdcmple
000178  d237              BCS      |L89.490|
00017a  ed940a08          VLDR     s0,[r4,#0x20]         ;2356
00017e  ee101a10          VMOV     r1,s0                 ;2356
000182  4608              MOV      r0,r1                 ;2356
000184  f7fffffe          BL       __aeabi_f2d
000188  ec410b1a          VMOV     d10,r0,r1             ;2356
00018c  eeb00a4a          VMOV.F32 s0,s20                ;2356
000190  eef00a6a          VMOV.F32 s1,s21                ;2356
000194  f7fffffe          BL       __hardfp_fabs
000198  eeb09a40          VMOV.F32 s18,s0                ;2356
00019c  eef09a60          VMOV.F32 s19,s1                ;2356
0001a0  ed940a05          VLDR     s0,[r4,#0x14]         ;2356
0001a4  69a0              LDR      r0,[r4,#0x18]         ;2356
0001a6  edd00a01          VLDR     s1,[r0,#4]            ;2356
0001aa  ee300a60          VSUB.F32 s0,s0,s1              ;2356
0001ae  ee101a10          VMOV     r1,s0                 ;2356
0001b2  4608              MOV      r0,r1                 ;2356
0001b4  f7fffffe          BL       __aeabi_f2d
0001b8  ec410b1a          VMOV     d10,r0,r1             ;2356
0001bc  eeb00a4a          VMOV.F32 s0,s20                ;2356
0001c0  eef00a6a          VMOV.F32 s1,s21                ;2356
0001c4  f7fffffe          BL       __hardfp_fabs
0001c8  eeb08a40          VMOV.F32 s16,s0                ;2356
0001cc  eef08a60          VMOV.F32 s17,s1                ;2356
0001d0  ec532b19          VMOV     r2,r3,d9              ;2356
0001d4  ec510b18          VMOV     r0,r1,d8              ;2356
0001d8  f7fffffe          BL       __aeabi_cdcmple
0001dc  d205              BCS      |L89.490|
                  |L89.478|
0001de  e9d41204          LDRD     r1,r2,[r4,#0x10]      ;2361
0001e2  69a0              LDR      r0,[r4,#0x18]         ;2361
0001e4  c006              STM      r0!,{r1,r2}           ;2361
0001e6  2000              MOVS     r0,#0                 ;2363
0001e8  6060              STR      r0,[r4,#4]            ;2363
                  |L89.490|
0001ea  bf00              NOP      
0001ec  e70e              B        |L89.12|
;;;2367   
                          ENDP


                          AREA ||i.eGFX_ProcessScalarF_BisectAnimator||, CODE, READONLY, ALIGN=2

                  eGFX_ProcessScalarF_BisectAnimator PROC
;;;2110   
;;;2111   void eGFX_ProcessScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P)
000000  b510              PUSH     {r4,lr}
;;;2112   {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  4604              MOV      r4,r0
;;;2113   
;;;2114   	if (P->Current == NULL)
000008  6960              LDR      r0,[r4,#0x14]
00000a  b910              CBNZ     r0,|L90.18|
                  |L90.12|
;;;2115   		return;
;;;2116   
;;;2117   	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
;;;2118   	{
;;;2119   		//Move a fraction of a distance towards the target
;;;2120   		*P->Current += (P->Target - (*P->Current)) * P->FractionalBisect;
;;;2121   		
;;;2122   		P->CurrentStep++;
;;;2123   
;;;2124   		//See if we have converged or beyond the max number of steps
;;;2125   		if ((P->CurrentStep >= P->LastStep) ||
;;;2126   			((fabs((P->Target) - (*P->Current)) <= 0.5))
;;;2127   			)
;;;2128   		{
;;;2129   			*(P->Current) = P->Target;
;;;2130   
;;;2131   			P->State = eGFX_OBJECT_STATE_INACTIVE;
;;;2132   		}
;;;2133   	}
;;;2134   }
00000c  ecbd8b04          VPOP     {d8-d9}
000010  bd10              POP      {r4,pc}
                  |L90.18|
000012  6860              LDR      r0,[r4,#4]            ;2117
000014  b3e8              CBZ      r0,|L90.146|
000016  ed940a04          VLDR     s0,[r4,#0x10]         ;2120
00001a  6960              LDR      r0,[r4,#0x14]         ;2120
00001c  edd00a00          VLDR     s1,[r0,#0]            ;2120
000020  ee700a60          VSUB.F32 s1,s0,s1              ;2120
000024  ed941a06          VLDR     s2,[r4,#0x18]         ;2120
000028  ed900a00          VLDR     s0,[r0,#0]            ;2120
00002c  ee000a81          VMLA.F32 s0,s1,s2              ;2120
000030  ed800a00          VSTR     s0,[r0,#0]            ;2120
000034  68a0              LDR      r0,[r4,#8]            ;2122
000036  1c40              ADDS     r0,r0,#1              ;2122
000038  60a0              STR      r0,[r4,#8]            ;2122
00003a  e9d40102          LDRD     r0,r1,[r4,#8]         ;2125
00003e  4288              CMP      r0,r1                 ;2125
000040  d220              BCS      |L90.132|
000042  ed940a04          VLDR     s0,[r4,#0x10]         ;2126
000046  6960              LDR      r0,[r4,#0x14]         ;2126
000048  edd00a00          VLDR     s1,[r0,#0]            ;2126
00004c  ee300a60          VSUB.F32 s0,s0,s1              ;2126
000050  ee101a10          VMOV     r1,s0                 ;2126
000054  4608              MOV      r0,r1                 ;2126
000056  f7fffffe          BL       __aeabi_f2d
00005a  ec410b19          VMOV     d9,r0,r1              ;2126
00005e  eeb00a49          VMOV.F32 s0,s18                ;2126
000062  eef00a69          VMOV.F32 s1,s19                ;2126
000066  f7fffffe          BL       __hardfp_fabs
00006a  eeb08a40          VMOV.F32 s16,s0                ;2126
00006e  eef08a60          VMOV.F32 s17,s1                ;2126
000072  ed9f0b09          VLDR     d0,|L90.152|
000076  ec532b10          VMOV     r2,r3,d0              ;2126
00007a  ec510b18          VMOV     r0,r1,d8              ;2126
00007e  f7fffffe          BL       __aeabi_cdcmple
000082  d806              BHI      |L90.146|
                  |L90.132|
000084  ed940a04          VLDR     s0,[r4,#0x10]         ;2129
000088  6960              LDR      r0,[r4,#0x14]         ;2129
00008a  ed800a00          VSTR     s0,[r0,#0]            ;2129
00008e  2000              MOVS     r0,#0                 ;2131
000090  6060              STR      r0,[r4,#4]            ;2131
                  |L90.146|
000092  bf00              NOP      
000094  e7ba              B        |L90.12|
;;;2135   
                          ENDP

000096  0000              DCW      0x0000
                  |L90.152|
000098  00000000          DCFD     0x3fe0000000000000 ; 0.5
00009c  3fe00000

                          AREA ||i.eGFX_ProcessScalarF_LinearAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_ProcessScalarF_LinearAnimator PROC
;;;2216   
;;;2217   void eGFX_ProcessScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P)
000000  b510              PUSH     {r4,lr}
;;;2218   {
000002  ed2d8b06          VPUSH    {d8-d10}
000006  4604              MOV      r4,r0
;;;2219   
;;;2220   	if (P->Current == NULL)
000008  6960              LDR      r0,[r4,#0x14]
00000a  b910              CBNZ     r0,|L91.18|
                  |L91.12|
;;;2221   		return;
;;;2222   
;;;2223   	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
;;;2224   	{
;;;2225   		//Move a fraction of a distance towards the target
;;;2226   		*P->Current += P->Increment;
;;;2227   
;;;2228   		P->CurrentStep++;
;;;2229   
;;;2230   		//See if we have converged or beyond the max number of steps
;;;2231   		if ((P->CurrentStep >= P->LastStep) ||
;;;2232   			((fabs((P->Target) - (*P->Current)) < P->Increment)))
;;;2233   		{
;;;2234   			*(P->Current) = P->Target;
;;;2235   
;;;2236   			P->State = eGFX_OBJECT_STATE_INACTIVE;
;;;2237   		}
;;;2238   	}
;;;2239   }
00000c  ecbd8b06          VPOP     {d8-d10}
000010  bd10              POP      {r4,pc}
                  |L91.18|
000012  6860              LDR      r0,[r4,#4]            ;2223
000014  b3f0              CBZ      r0,|L91.148|
000016  6960              LDR      r0,[r4,#0x14]         ;2226
000018  ed900a00          VLDR     s0,[r0,#0]            ;2226
00001c  edd40a06          VLDR     s1,[r4,#0x18]         ;2226
000020  ee300a20          VADD.F32 s0,s0,s1              ;2226
000024  ed800a00          VSTR     s0,[r0,#0]            ;2226
000028  68a0              LDR      r0,[r4,#8]            ;2228
00002a  1c40              ADDS     r0,r0,#1              ;2228
00002c  60a0              STR      r0,[r4,#8]            ;2228
00002e  e9d40102          LDRD     r0,r1,[r4,#8]         ;2231
000032  4288              CMP      r0,r1                 ;2231
000034  d227              BCS      |L91.134|
000036  ed940a06          VLDR     s0,[r4,#0x18]         ;2232
00003a  ee101a10          VMOV     r1,s0                 ;2232
00003e  4608              MOV      r0,r1                 ;2232
000040  f7fffffe          BL       __aeabi_f2d
000044  ec410b18          VMOV     d8,r0,r1              ;2232
000048  ed940a04          VLDR     s0,[r4,#0x10]         ;2232
00004c  6960              LDR      r0,[r4,#0x14]         ;2232
00004e  edd00a00          VLDR     s1,[r0,#0]            ;2232
000052  ee300a60          VSUB.F32 s0,s0,s1              ;2232
000056  ee101a10          VMOV     r1,s0                 ;2232
00005a  4608              MOV      r0,r1                 ;2232
00005c  f7fffffe          BL       __aeabi_f2d
000060  ec410b1a          VMOV     d10,r0,r1             ;2232
000064  eeb00a4a          VMOV.F32 s0,s20                ;2232
000068  eef00a6a          VMOV.F32 s1,s21                ;2232
00006c  f7fffffe          BL       __hardfp_fabs
000070  eeb09a40          VMOV.F32 s18,s0                ;2232
000074  eef09a60          VMOV.F32 s19,s1                ;2232
000078  ec532b18          VMOV     r2,r3,d8              ;2232
00007c  ec510b19          VMOV     r0,r1,d9              ;2232
000080  f7fffffe          BL       __aeabi_cdcmple
000084  d208              BCS      |L91.152|
                  |L91.134|
000086  ed940a04          VLDR     s0,[r4,#0x10]         ;2234
00008a  6960              LDR      r0,[r4,#0x14]         ;2234
00008c  ed800a00          VSTR     s0,[r0,#0]            ;2234
000090  2000              MOVS     r0,#0                 ;2236
000092  e000              B        |L91.150|
                  |L91.148|
000094  e000              B        |L91.152|
                  |L91.150|
000096  6060              STR      r0,[r4,#4]            ;2236
                  |L91.152|
000098  bf00              NOP      
00009a  e7b7              B        |L91.12|
;;;2240   
                          ENDP


                          AREA ||i.eGFX_PutPixel||, CODE, READONLY, ALIGN=1

                  eGFX_PutPixel PROC
;;;51     
;;;52     void eGFX_PutPixel(const eGFX_ImagePlane *Image,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;53                        int16_t x,
;;;54                        int16_t y,
;;;55                        eGFX_PixelState PS)
;;;56     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
;;;57         uint32_t Offset;
;;;58         uint8_t Mask;
;;;59         uint32_t MemWidthInBytes;
;;;60     
;;;61         if((x<Image->SizeX) && (y<Image->SizeY) && (x>=0) && (y>=0))
00000a  8920              LDRH     r0,[r4,#8]
00000c  42b0              CMP      r0,r6
                  |L92.14|
00000e  dd75              BLE      |L92.252|
000010  8960              LDRH     r0,[r4,#0xa]
000012  4540              CMP      r0,r8
000014  ddfb              BLE      |L92.14|
000016  2e00              CMP      r6,#0
                  |L92.24|
000018  db70              BLT      |L92.252|
00001a  f1b80f00          CMP      r8,#0
00001e  dbfb              BLT      |L92.24|
;;;62         {
;;;63             switch(Image->Type)
000020  7820              LDRB     r0,[r4,#0]
000022  2807              CMP      r0,#7
000024  d26b              BCS      |L92.254|
000026  e8dff000          TBB      [pc,r0]
00002a  0421              DCB      0x04,0x21
00002c  426b727c          DCB      0x42,0x6b,0x72,0x7c
000030  8c00              DCB      0x8c,0x00
;;;64             {
;;;65                 case  eGFX_IMAGE_PLANE_1BPP:
;;;66                     //Properly Implement Rounding  for odd bit plane sizes
;;;67     				MemWidthInBytes = eGFX_CALCULATE_1BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
000032  8920              LDRH     r0,[r4,#8]
000034  1dc0              ADDS     r0,r0,#7
000036  10c7              ASRS     r7,r0,#3
;;;68     
;;;69                     Offset = (y * (MemWidthInBytes)) + (x>>3);
000038  fb08f007          MUL      r0,r8,r7
00003c  eb0005e6          ADD      r5,r0,r6,ASR #3
;;;70                     Mask = 0x01 << (x & 0x07);
000040  f0060107          AND      r1,r6,#7
000044  2001              MOVS     r0,#1
000046  4088              LSLS     r0,r0,r1
000048  f00009ff          AND      r9,r0,#0xff
;;;71     
;;;72                     if(PS)
00004c  9803              LDR      r0,[sp,#0xc]
00004e  b130              CBZ      r0,|L92.94|
;;;73                     {
;;;74                         Image->Data[Offset] |= Mask;
000050  6860              LDR      r0,[r4,#4]
000052  5d40              LDRB     r0,[r0,r5]
000054  ea400009          ORR      r0,r0,r9
000058  6861              LDR      r1,[r4,#4]
00005a  5548              STRB     r0,[r1,r5]
00005c  e005              B        |L92.106|
                  |L92.94|
;;;75                     }
;;;76                     else
;;;77                     {
;;;78                         Image->Data[Offset] &= ~Mask;
00005e  6860              LDR      r0,[r4,#4]
000060  5d40              LDRB     r0,[r0,r5]
000062  ea200009          BIC      r0,r0,r9
000066  6861              LDR      r1,[r4,#4]
000068  5548              STRB     r0,[r1,r5]
                  |L92.106|
;;;79                     }
;;;80     
;;;81                     break;
00006a  e075              B        |L92.344|
;;;82     
;;;83                 case  eGFX_IMAGE_PLANE_3BPP_RGB:
;;;84     
;;;85     				{
;;;86     					//This image plane type is an odd ball case for the 3-color sharp memory LCD.
;;;87     				    uint32_t BitStreamPosition = x*3 + y*(Image->SizeX*3);
00006c  eb060046          ADD      r0,r6,r6,LSL #1
000070  8921              LDRH     r1,[r4,#8]
000072  eb010141          ADD      r1,r1,r1,LSL #1
000076  fb080a01          MLA      r10,r8,r1,r0
;;;88     					eGFX_BitStreamPut((uint8_t *)Image->Data, BitStreamPosition++, PS&0x01);
00007a  9b03              LDR      r3,[sp,#0xc]
00007c  f0030201          AND      r2,r3,#1
000080  4651              MOV      r1,r10
000082  f10a0a01          ADD      r10,r10,#1
000086  6860              LDR      r0,[r4,#4]
000088  f7fffffe          BL       eGFX_BitStreamPut
;;;89     					eGFX_BitStreamPut((uint8_t *)Image->Data, BitStreamPosition++, PS&0x02);
00008c  9b03              LDR      r3,[sp,#0xc]
00008e  f0030202          AND      r2,r3,#2
000092  4651              MOV      r1,r10
000094  f10a0a01          ADD      r10,r10,#1
000098  6860              LDR      r0,[r4,#4]
00009a  f7fffffe          BL       eGFX_BitStreamPut
;;;90     				    eGFX_BitStreamPut((uint8_t *)Image->Data, BitStreamPosition,   PS&0x04);
00009e  9903              LDR      r1,[sp,#0xc]
0000a0  f0010204          AND      r2,r1,#4
0000a4  4651              MOV      r1,r10
0000a6  6860              LDR      r0,[r4,#4]
0000a8  f7fffffe          BL       eGFX_BitStreamPut
;;;91     				}
;;;92                    break;
0000ac  e054              B        |L92.344|
;;;93     
;;;94     
;;;95                 case  eGFX_IMAGE_PLANE_4BPP:
;;;96                     //Properly Implement Rounding  for odd bit plane sizes
;;;97     				MemWidthInBytes = eGFX_CALCULATE_4BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
0000ae  8920              LDRH     r0,[r4,#8]
0000b0  1c40              ADDS     r0,r0,#1
0000b2  1047              ASRS     r7,r0,#1
;;;98     
;;;99                     Offset = (y * (MemWidthInBytes)) + (x>>1);
0000b4  fb08f007          MUL      r0,r8,r7
0000b8  eb000566          ADD      r5,r0,r6,ASR #1
;;;100    
;;;101                    if(x&0x01)
0000bc  f0060001          AND      r0,r6,#1
0000c0  b170              CBZ      r0,|L92.224|
;;;102                    {
;;;103                        Image->Data[Offset] &= ~0x0F;
0000c2  6860              LDR      r0,[r4,#4]
0000c4  5d40              LDRB     r0,[r0,r5]
0000c6  f020000f          BIC      r0,r0,#0xf
0000ca  6861              LDR      r1,[r4,#4]
0000cc  5548              STRB     r0,[r1,r5]
;;;104                        Image->Data[Offset] |= ((uint8_t)(PS&0xF));
0000ce  6860              LDR      r0,[r4,#4]
0000d0  5d40              LDRB     r0,[r0,r5]
0000d2  9903              LDR      r1,[sp,#0xc]
0000d4  f001010f          AND      r1,r1,#0xf
0000d8  4308              ORRS     r0,r0,r1
0000da  6861              LDR      r1,[r4,#4]
0000dc  5548              STRB     r0,[r1,r5]
0000de  e00c              B        |L92.250|
                  |L92.224|
;;;105                    }
;;;106                    else
;;;107                    {
;;;108                        Image->Data[Offset] &= ~0xF0;
0000e0  6860              LDR      r0,[r4,#4]
0000e2  5d40              LDRB     r0,[r0,r5]
0000e4  f02000f0          BIC      r0,r0,#0xf0
0000e8  6861              LDR      r1,[r4,#4]
0000ea  5548              STRB     r0,[r1,r5]
;;;109                        Image->Data[Offset] |= ((uint8_t)(PS&0xF)<<4);
0000ec  6860              LDR      r0,[r4,#4]
0000ee  5d40              LDRB     r0,[r0,r5]
0000f0  9903              LDR      r1,[sp,#0xc]
0000f2  ea401001          ORR      r0,r0,r1,LSL #4
0000f6  6861              LDR      r1,[r4,#4]
0000f8  5548              STRB     r0,[r1,r5]
                  |L92.250|
;;;110                    }
;;;111    
;;;112                    break;
0000fa  e02d              B        |L92.344|
                  |L92.252|
0000fc  e02d              B        |L92.346|
                  |L92.254|
0000fe  e02a              B        |L92.342|
;;;113    
;;;114                case  eGFX_IMAGE_PLANE_8BPP:
;;;115                    MemWidthInBytes  = Image->SizeX;
000100  8927              LDRH     r7,[r4,#8]
;;;116                    Offset = (y * MemWidthInBytes) + x;
000102  fb086507          MLA      r5,r8,r7,r6
;;;117                    Image->Data[Offset] = ((uint8_t)PS);
000106  9803              LDR      r0,[sp,#0xc]
000108  6861              LDR      r1,[r4,#4]
00010a  5548              STRB     r0,[r1,r5]
;;;118                    break;
00010c  e024              B        |L92.344|
;;;119    
;;;120                case  eGFX_IMAGE_PLANE_16BPP_565:
;;;121                    MemWidthInBytes  = Image->SizeX <<1;
00010e  8920              LDRH     r0,[r4,#8]
000110  0047              LSLS     r7,r0,#1
;;;122                    Offset = (y * MemWidthInBytes) + (x << 1);
000112  fb08f007          MUL      r0,r8,r7
000116  eb000546          ADD      r5,r0,r6,LSL #1
;;;123                    *(uint16_t *)(Image->Data + Offset) = (uint16_t)(PS);
00011a  9803              LDR      r0,[sp,#0xc]
00011c  6861              LDR      r1,[r4,#4]
00011e  5348              STRH     r0,[r1,r5]
;;;124                    break;
000120  e01a              B        |L92.344|
;;;125    
;;;126                case  eGFX_IMAGE_PLANE_24BPP:
;;;127        
;;;128                    MemWidthInBytes  = Image->SizeX * 3;
000122  8920              LDRH     r0,[r4,#8]
000124  eb000740          ADD      r7,r0,r0,LSL #1
;;;129                    Offset = (y * MemWidthInBytes) + (x*3);
000128  eb060046          ADD      r0,r6,r6,LSL #1
00012c  fb080507          MLA      r5,r8,r7,r0
;;;130                    memcpy(&Image->Data[Offset],&PS,3);
000130  6860              LDR      r0,[r4,#4]
000132  4428              ADD      r0,r0,r5
000134  f8bd100c          LDRH     r1,[sp,#0xc]
000138  8001              STRH     r1,[r0,#0]
00013a  f89d100e          LDRB     r1,[sp,#0xe]
00013e  7081              STRB     r1,[r0,#2]
;;;131        
;;;132                case  eGFX_IMAGE_PLANE_32BPP:
000140  bf00              NOP      
;;;133                    MemWidthInBytes  = Image->SizeX << 2;
000142  8920              LDRH     r0,[r4,#8]
000144  0087              LSLS     r7,r0,#2
;;;134                    Offset = (y * MemWidthInBytes) + (x<<2);
000146  fb08f007          MUL      r0,r8,r7
00014a  eb000586          ADD      r5,r0,r6,LSL #2
;;;135                    *(uint32_t *)(Image->Data + Offset) = (uint32_t)(PS);
00014e  9803              LDR      r0,[sp,#0xc]
000150  6861              LDR      r1,[r4,#4]
000152  5148              STR      r0,[r1,r5]
;;;136                   break;
000154  e000              B        |L92.344|
                  |L92.342|
;;;137    				
;;;138                default:
;;;139                    break;
000156  bf00              NOP      
                  |L92.344|
000158  bf00              NOP                            ;81
                  |L92.346|
;;;140            }
;;;141        }
;;;142    }
00015a  e8bd87ff          POP      {r0-r10,pc}
;;;143    
                          ENDP


                          AREA ||i.eGFX_ResetAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_ResetAnimator PROC
;;;1930   
;;;1931   void eGFX_ResetAnimator(void * A)
000000  4601              MOV      r1,r0
;;;1932   {
;;;1933   
;;;1934   	eGFX_AnimatorHeader *AH = A;
;;;1935   	AH->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
000002  2202              MOVS     r2,#2
000004  604a              STR      r2,[r1,#4]
;;;1936   	AH->CurrentStep= 0;
000006  2200              MOVS     r2,#0
000008  608a              STR      r2,[r1,#8]
;;;1937   }
00000a  4770              BX       lr
;;;1938   
                          ENDP


                          AREA ||i.eGFX_ResetAnimators||, CODE, READONLY, ALIGN=2

                  eGFX_ResetAnimators PROC
;;;1938   
;;;1939   void eGFX_ResetAnimators()
000000  b500              PUSH     {lr}
;;;1940   {
;;;1941   	for(int i=0;i<eGFX_AnimatorEndIndex;i++)
000002  2300              MOVS     r3,#0
000004  e005              B        |L94.18|
                  |L94.6|
;;;1942   		{
;;;1943       		 eGFX_ResetAnimator(eGFX_Animators[i]);
000006  4905              LDR      r1,|L94.28|
000008  f8510023          LDR      r0,[r1,r3,LSL #2]
00000c  f7fffffe          BL       eGFX_ResetAnimator
000010  1c5b              ADDS     r3,r3,#1              ;1941
                  |L94.18|
000012  4803              LDR      r0,|L94.32|
000014  6800              LDR      r0,[r0,#0]            ;1941  ; eGFX_AnimatorEndIndex
000016  4283              CMP      r3,r0                 ;1941
000018  d3f5              BCC      |L94.6|
;;;1944   		}
;;;1945   }
00001a  bd00              POP      {pc}
;;;1946   
                          ENDP

                  |L94.28|
                          DCD      eGFX_Animators
                  |L94.32|
                          DCD      eGFX_AnimatorEndIndex

                          AREA ||i.eGFX_ScaledBlit||, CODE, READONLY, ALIGN=2

                  eGFX_ScaledBlit PROC
;;;1476   //Draws a sprite that is scaled.   x,y is a center point, not a corner
;;;1477   void eGFX_ScaledBlit(eGFX_ImagePlane *Destination,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1478   					int16_t x,
;;;1479   					int16_t y,
;;;1480   					const eGFX_ImagePlane *Sprite,
;;;1481   					float ScaleFactor)
;;;1482   {
000004  ed2d0b02          VPUSH    {d0}
000008  b082              SUB      sp,sp,#8
00000a  4689              MOV      r9,r1
00000c  4692              MOV      r10,r2
00000e  461c              MOV      r4,r3
;;;1483       uint16_t i,j;
;;;1484       uint16_t DestinationSizeX;
;;;1485       uint16_t DestinationSizeY;
;;;1486   	float StepX;
;;;1487   	float StepY;
;;;1488       float SourcePixelX;
;;;1489       float SourcePixelY;
;;;1490   	int16_t CenterOffsetX;
;;;1491   	int16_t CenterOffsetY;
;;;1492   
;;;1493   
;;;1494   	if (ScaleFactor <= 0.0f)
000010  eeb50ac0          VCMPE.F32 s0,#0.0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d802              BHI      |L95.32|
                  |L95.26|
;;;1495   		return;
;;;1496   	
;;;1497   	DestinationSizeX = (uint16_t)((ScaleFactor * (float)Sprite->SizeX)+0.5f);
;;;1498       DestinationSizeY = (uint16_t)((ScaleFactor * (float)Sprite->SizeY)+0.5f);
;;;1499   
;;;1500   	CenterOffsetX = (uint16_t)(((ScaleFactor * (float)Sprite->SizeX)/2.0f) + 0.5f);
;;;1501   	CenterOffsetY = (uint16_t)(((ScaleFactor * (float)Sprite->SizeY)/2.0f) + 0.5f);
;;;1502   
;;;1503   	StepX = (float)Sprite->SizeX / (float)DestinationSizeX;
;;;1504   	StepY = (float)Sprite->SizeY / (float)DestinationSizeY;
;;;1505   
;;;1506   	SourcePixelY = 0;
;;;1507   
;;;1508       for(j=0; j<DestinationSizeY; j++)
;;;1509       {
;;;1510           SourcePixelX = 0;
;;;1511   
;;;1512           for(i=0; i<DestinationSizeX; i++)
;;;1513           {
;;;1514   			eGFX_PutPixel(Destination, 
;;;1515   							x + i - CenterOffsetX,
;;;1516   							y + j - CenterOffsetY,
;;;1517   							eGFX_GetPixel(Sprite,
;;;1518   										 (int16_t)(SourcePixelX + 0.5f),
;;;1519   										 (int16_t)(SourcePixelY + 0.5f)
;;;1520   										 )
;;;1521   							);
;;;1522            
;;;1523   			SourcePixelX += StepX;
;;;1524           }
;;;1525   
;;;1526          
;;;1527   		SourcePixelY += StepY;
;;;1528       }
;;;1529   }
00001a  b008              ADD      sp,sp,#0x20
00001c  e8bd8ff0          POP      {r4-r11,pc}
                  |L95.32|
000020  8920              LDRH     r0,[r4,#8]            ;1497
000022  ee020a90          VMOV     s5,r0                 ;1497
000026  eeb83a62          VCVT.F32.U32 s6,s5                 ;1497
00002a  eef62a00          VMOV.F32 s5,#0.50000000        ;1497
00002e  ee402a03          VMLA.F32 s5,s0,s6              ;1497
000032  eefc2ae2          VCVT.U32.F32 s5,s5                 ;1497
000036  ee120a90          VMOV     r0,s5                 ;1497
00003a  b286              UXTH     r6,r0                 ;1497
00003c  8960              LDRH     r0,[r4,#0xa]          ;1498
00003e  ee020a90          VMOV     s5,r0                 ;1498
000042  eeb83a62          VCVT.F32.U32 s6,s5                 ;1498
000046  eef62a00          VMOV.F32 s5,#0.50000000        ;1498
00004a  ee402a03          VMLA.F32 s5,s0,s6              ;1498
00004e  eefc2ae2          VCVT.U32.F32 s5,s5                 ;1498
000052  ee120a90          VMOV     r0,s5                 ;1498
000056  b287              UXTH     r7,r0                 ;1498
000058  8920              LDRH     r0,[r4,#8]            ;1500
00005a  ee020a90          VMOV     s5,r0                 ;1500
00005e  eef82a62          VCVT.F32.U32 s5,s5                 ;1500
000062  ee223a80          VMUL.F32 s6,s5,s0              ;1500
000066  eef03a00          VMOV.F32 s7,#2.00000000        ;1500
00006a  eec32a23          VDIV.F32 s5,s6,s7              ;1500
00006e  eeb63a00          VMOV.F32 s6,#0.50000000        ;1500
000072  ee722a83          VADD.F32 s5,s5,s6              ;1500
000076  eefc2ae2          VCVT.U32.F32 s5,s5                 ;1500
00007a  ee120a90          VMOV     r0,s5                 ;1500
00007e  b200              SXTH     r0,r0                 ;1500
000080  9001              STR      r0,[sp,#4]            ;1500
000082  8960              LDRH     r0,[r4,#0xa]          ;1501
000084  ee020a90          VMOV     s5,r0                 ;1501
000088  eef82a62          VCVT.F32.U32 s5,s5                 ;1501
00008c  ee622a80          VMUL.F32 s5,s5,s0              ;1501
000090  eef03a00          VMOV.F32 s7,#2.00000000        ;1501
000094  ee823aa3          VDIV.F32 s6,s5,s7              ;1501
000098  eef62a00          VMOV.F32 s5,#0.50000000        ;1501
00009c  ee732a22          VADD.F32 s5,s6,s5              ;1501
0000a0  eefc2ae2          VCVT.U32.F32 s5,s5                 ;1501
0000a4  ee120a90          VMOV     r0,s5                 ;1501
0000a8  fa0ffb80          SXTH     r11,r0                ;1501
0000ac  8920              LDRH     r0,[r4,#8]            ;1503
0000ae  ee020a90          VMOV     s5,r0                 ;1503
0000b2  eeb83a62          VCVT.F32.U32 s6,s5                 ;1503
0000b6  ee026a90          VMOV     s5,r6                 ;1503
0000ba  eef82a62          VCVT.F32.U32 s5,s5                 ;1503
0000be  ee831a22          VDIV.F32 s2,s6,s5              ;1503
0000c2  8960              LDRH     r0,[r4,#0xa]          ;1504
0000c4  ee020a90          VMOV     s5,r0                 ;1504
0000c8  eeb83a62          VCVT.F32.U32 s6,s5                 ;1504
0000cc  ee027a90          VMOV     s5,r7                 ;1504
0000d0  eef82a62          VCVT.F32.U32 s5,s5                 ;1504
0000d4  eec31a22          VDIV.F32 s3,s6,s5              ;1504
0000d8  eddf0a21          VLDR     s1,|L95.352|
0000dc  2500              MOVS     r5,#0                 ;1508
0000de  e03a              B        |L95.342|
                  |L95.224|
0000e0  eddf2a1f          VLDR     s5,|L95.352|
0000e4  eeb02a62          VMOV.F32 s4,s5                 ;1510
0000e8  f04f0800          MOV      r8,#0                 ;1512
0000ec  e02b              B        |L95.326|
                  |L95.238|
0000ee  eef62a00          VMOV.F32 s5,#0.50000000        ;1514
0000f2  ee702aa2          VADD.F32 s5,s1,s5              ;1514
0000f6  eefd2ae2          VCVT.S32.F32 s5,s5                 ;1514
0000fa  ee120a90          VMOV     r0,s5                 ;1514
0000fe  b202              SXTH     r2,r0                 ;1514
000100  eef62a00          VMOV.F32 s5,#0.50000000        ;1514
000104  ee722a22          VADD.F32 s5,s4,s5              ;1514
000108  eefd2ae2          VCVT.S32.F32 s5,s5                 ;1514
00010c  ee120a90          VMOV     r0,s5                 ;1514
000110  b201              SXTH     r1,r0                 ;1514
000112  4620              MOV      r0,r4                 ;1514
000114  f7fffffe          BL       eGFX_GetPixel
000118  9000              STR      r0,[sp,#0]            ;1514
00011a  eb0a0005          ADD      r0,r10,r5             ;1514
00011e  eba0000b          SUB      r0,r0,r11             ;1514
000122  b202              SXTH     r2,r0                 ;1514
000124  eb090308          ADD      r3,r9,r8              ;1514
000128  9801              LDR      r0,[sp,#4]            ;1514
00012a  1a18              SUBS     r0,r3,r0              ;1514
00012c  b201              SXTH     r1,r0                 ;1514
00012e  9b00              LDR      r3,[sp,#0]            ;1514
000130  9804              LDR      r0,[sp,#0x10]         ;1514
000132  f7fffffe          BL       eGFX_PutPixel
000136  ee722a01          VADD.F32 s5,s4,s2              ;1523
00013a  eeb02a62          VMOV.F32 s4,s5                 ;1523
00013e  f1080001          ADD      r0,r8,#1              ;1512
000142  fa1ff880          UXTH     r8,r0                 ;1512
                  |L95.326|
000146  45b0              CMP      r8,r6                 ;1512
000148  dbd1              BLT      |L95.238|
00014a  ee702aa1          VADD.F32 s5,s1,s3              ;1527
00014e  eef00a62          VMOV.F32 s1,s5                 ;1527
000152  1c68              ADDS     r0,r5,#1              ;1508
000154  b285              UXTH     r5,r0                 ;1508
                  |L95.342|
000156  42bd              CMP      r5,r7                 ;1508
000158  dbc2              BLT      |L95.224|
00015a  bf00              NOP      
00015c  e75d              B        |L95.26|
;;;1530   
                          ENDP

00015e  0000              DCW      0x0000
                  |L95.352|
000160  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.eGFX_ScaledDrawCharacter||, CODE, READONLY, ALIGN=1

                  eGFX_ScaledDrawCharacter PROC
;;;928    
;;;929    int16_t eGFX_ScaledDrawCharacter(eGFX_ImagePlane *Image,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;930    								int16_t StartX,
;;;931    								int16_t StartY,
;;;932    								uint8_t Character,
;;;933    								const eGFX_Font *MyFont,
;;;934    								float ScaleFactor)
;;;935                                     
;;;936    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  eeb04a40          VMOV.F32 s8,s0
000010  9e06              LDR      r6,[sp,#0x18]
;;;937        //eGFX_Font does not contain any of the ASCII control codes
;;;938        if(Character<0x20)
000012  2c20              CMP      r4,#0x20
000014  da02              BGE      |L96.28|
;;;939            return StartX;
000016  4628              MOV      r0,r5
                  |L96.24|
;;;940    
;;;941        Character = Character - 0x20;
;;;942    
;;;943        if(Character == 0x00)
;;;944        {
;;;945            return StartX +  (uint16_t)((MyFont->CharacterSprites[0]->SizeX * ScaleFactor)+0.5f); // No need to render anything....
;;;946        }
;;;947        else
;;;948        {
;;;949            eGFX_ScaledBlit(Image,StartX,StartY,MyFont->CharacterSprites[Character],ScaleFactor);
;;;950        }
;;;951    
;;;952        StartX += MyFont->CharacterSprites[Character]->SizeX * (int16_t)(ScaleFactor+.5f);
;;;953        return StartX;
;;;954    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L96.28|
00001c  f1a40020          SUB      r0,r4,#0x20           ;941
000020  b2c4              UXTB     r4,r0                 ;941
000022  b984              CBNZ     r4,|L96.70|
000024  6830              LDR      r0,[r6,#0]            ;945
000026  8900              LDRH     r0,[r0,#8]            ;945
000028  ee000a10          VMOV     s0,r0                 ;945
00002c  eef80a40          VCVT.F32.U32 s1,s0                 ;945
000030  eeb60a00          VMOV.F32 s0,#0.50000000        ;945
000034  ee000a84          VMLA.F32 s0,s1,s8              ;945
000038  eebc0ac0          VCVT.U32.F32 s0,s0                 ;945
00003c  ee100a10          VMOV     r0,s0                 ;945
000040  4428              ADD      r0,r0,r5              ;945
000042  b200              SXTH     r0,r0                 ;945
000044  e7e8              B        |L96.24|
                  |L96.70|
000046  f8563024          LDR      r3,[r6,r4,LSL #2]     ;949
00004a  eeb00a44          VMOV.F32 s0,s8                 ;949
00004e  4642              MOV      r2,r8                 ;949
000050  4629              MOV      r1,r5                 ;949
000052  4638              MOV      r0,r7                 ;949
000054  f7fffffe          BL       eGFX_ScaledBlit
000058  f8560024          LDR      r0,[r6,r4,LSL #2]     ;952
00005c  8901              LDRH     r1,[r0,#8]            ;952
00005e  eeb60a00          VMOV.F32 s0,#0.50000000        ;952
000062  ee340a00          VADD.F32 s0,s8,s0              ;952
000066  eebd0ac0          VCVT.S32.F32 s0,s0                 ;952
00006a  ee100a10          VMOV     r0,s0                 ;952
00006e  b200              SXTH     r0,r0                 ;952
000070  fb015000          MLA      r0,r1,r0,r5           ;952
000074  b205              SXTH     r5,r0                 ;952
000076  4628              MOV      r0,r5                 ;953
000078  e7ce              B        |L96.24|
;;;955    
                          ENDP


                          AREA ||i.eGFX_ScaledDrawString||, CODE, READONLY, ALIGN=1

                  eGFX_ScaledDrawString PROC
;;;1145   
;;;1146   void eGFX_ScaledDrawString(eGFX_ImagePlane *Image,
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;1147   	int16_t StartX,
;;;1148   	int16_t StartY,
;;;1149   	char *String,
;;;1150   	const eGFX_Font *MyFont,
;;;1151   	float ScaleFactor)
;;;1152   {
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4692              MOV      r10,r2
00000a  461d              MOV      r5,r3
00000c  eef04a40          VMOV.F32 s9,s0
000010  9f09              LDR      r7,[sp,#0x24]
;;;1153       uint8_t Ptr = 0;
000012  2400              MOVS     r4,#0
;;;1154       uint8_t NextChar;
;;;1155       NextChar = String[Ptr];
000014  f8158004          LDRB     r8,[r5,r4]
;;;1156   
;;;1157       while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
000018  e01a              B        |L97.80|
                  |L97.26|
;;;1158       {
;;;1159           StartX = eGFX_ScaledDrawCharacter(Image,StartX,StartY,NextChar,MyFont,ScaleFactor);
00001a  eeb00a64          VMOV.F32 s0,s9
00001e  4643              MOV      r3,r8
000020  4652              MOV      r2,r10
000022  4631              MOV      r1,r6
000024  4648              MOV      r0,r9
000026  9700              STR      r7,[sp,#0]
000028  f7fffffe          BL       eGFX_ScaledDrawCharacter
00002c  4606              MOV      r6,r0
;;;1160           StartX += MyFont->InterCharacterSpacing * (int16_t)(ScaleFactor+.5f);
00002e  f897118d          LDRB     r1,[r7,#0x18d]
000032  eeb60a00          VMOV.F32 s0,#0.50000000
000036  ee340a80          VADD.F32 s0,s9,s0
00003a  eebd0ac0          VCVT.S32.F32 s0,s0
00003e  ee100a10          VMOV     r0,s0
000042  fb116000          SMLABB   r0,r1,r0,r6
000046  b206              SXTH     r6,r0
;;;1161           Ptr++;
000048  1c60              ADDS     r0,r4,#1
00004a  b2c4              UXTB     r4,r0
;;;1162           NextChar = String[Ptr];
00004c  f8158004          LDRB     r8,[r5,r4]
                  |L97.80|
000050  f1b80f00          CMP      r8,#0                 ;1157
000054  d001              BEQ      |L97.90|
000056  2c40              CMP      r4,#0x40              ;1157
000058  dbdf              BLT      |L97.26|
                  |L97.90|
;;;1163       }
;;;1164   }
00005a  e8bd87f8          POP      {r3-r10,pc}
;;;1165   
                          ENDP


                          AREA ||i.eGFX_ScaledDrawString_CustomSpacing||, CODE, READONLY, ALIGN=1

                  eGFX_ScaledDrawString_CustomSpacing PROC
;;;1166   
;;;1167   void eGFX_ScaledDrawString_CustomSpacing(eGFX_ImagePlane *Image,
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;1168   	int16_t StartX,
;;;1169   	int16_t StartY,
;;;1170   	char *String,
;;;1171   	const eGFX_Font *MyFont,
;;;1172   	float ScaleFactor,
;;;1173   	uint16_t Spacing)
;;;1174   {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461d              MOV      r5,r3
00000c  eef04a40          VMOV.F32 s9,s0
000010  f8dda024          LDR      r10,[sp,#0x24]
000014  ed9d5a0a          VLDR     s10,[sp,#0x28]
;;;1175       uint8_t Ptr = 0;
000018  2400              MOVS     r4,#0
;;;1176       uint8_t NextChar;
;;;1177       NextChar = String[Ptr];
00001a  5d2f              LDRB     r7,[r5,r4]
;;;1178   
;;;1179       while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
00001c  e019              B        |L98.82|
                  |L98.30|
;;;1180       {
;;;1181           StartX = eGFX_ScaledDrawCharacter(Image,StartX,StartY,NextChar,MyFont,ScaleFactor);
00001e  eeb00a64          VMOV.F32 s0,s9
000022  463b              MOV      r3,r7
000024  464a              MOV      r2,r9
000026  4631              MOV      r1,r6
000028  4640              MOV      r0,r8
00002a  f8cda000          STR      r10,[sp,#0]
00002e  f7fffffe          BL       eGFX_ScaledDrawCharacter
000032  4606              MOV      r6,r0
;;;1182           StartX += (int16_t)((ScaleFactor * Spacing) +.5f);
000034  eef80a45          VCVT.F32.U32 s1,s10
000038  eeb60a00          VMOV.F32 s0,#0.50000000
00003c  ee040aa0          VMLA.F32 s0,s9,s1
000040  eebd0ac0          VCVT.S32.F32 s0,s0
000044  ee100a10          VMOV     r0,s0
000048  4430              ADD      r0,r0,r6
00004a  b206              SXTH     r6,r0
;;;1183           Ptr++;
00004c  1c60              ADDS     r0,r4,#1
00004e  b2c4              UXTB     r4,r0
;;;1184           NextChar = String[Ptr];
000050  5d2f              LDRB     r7,[r5,r4]
                  |L98.82|
000052  b10f              CBZ      r7,|L98.88|
000054  2c40              CMP      r4,#0x40              ;1179
000056  dbe2              BLT      |L98.30|
                  |L98.88|
;;;1185       }
;;;1186   }
000058  e8bd87f8          POP      {r3-r10,pc}
;;;1187   
                          ENDP


                          AREA ||i.eGFX_StartAnimator||, CODE, READONLY, ALIGN=1

                  eGFX_StartAnimator PROC
;;;1925   
;;;1926   void eGFX_StartAnimator(void * A)
000000  2102              MOVS     r1,#2
;;;1927   {
;;;1928   	(*((eGFX_AnimatorHeader *)(A))).State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
000002  6041              STR      r1,[r0,#4]
;;;1929   }
000004  4770              BX       lr
;;;1930   
                          ENDP


                          AREA ||i.eGFX_StartAnimators||, CODE, READONLY, ALIGN=2

                  eGFX_StartAnimators PROC
;;;1958   
;;;1959   void eGFX_StartAnimators()
000000  b500              PUSH     {lr}
;;;1960   {
;;;1961   	uint32_t i;
;;;1962   
;;;1963   	for (i = 0; i<eGFX_AnimatorEndIndex; i++)
000002  2200              MOVS     r2,#0
000004  e009              B        |L100.26|
                  |L100.6|
;;;1964   	{
;;;1965   		if (eGFX_Animators[i] != NULL)
000006  4807              LDR      r0,|L100.36|
000008  f8500022          LDR      r0,[r0,r2,LSL #2]
00000c  b120              CBZ      r0,|L100.24|
;;;1966   			eGFX_StartAnimator(&eGFX_Animators[i]);
00000e  4905              LDR      r1,|L100.36|
000010  eb010082          ADD      r0,r1,r2,LSL #2
000014  f7fffffe          BL       eGFX_StartAnimator
                  |L100.24|
000018  1c52              ADDS     r2,r2,#1              ;1963
                  |L100.26|
00001a  4803              LDR      r0,|L100.40|
00001c  6800              LDR      r0,[r0,#0]            ;1963  ; eGFX_AnimatorEndIndex
00001e  4282              CMP      r2,r0                 ;1963
000020  d3f1              BCC      |L100.6|
;;;1967   	}
;;;1968   }
000022  bd00              POP      {pc}
;;;1969   
                          ENDP

                  |L100.36|
                          DCD      eGFX_Animators
                  |L100.40|
                          DCD      eGFX_AnimatorEndIndex

                          AREA ||i.eGFX_printf||, CODE, READONLY, ALIGN=2

                  eGFX_printf PROC
;;;1276   
;;;1277   int16_t  eGFX_printf(eGFX_ImagePlane *Image,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1278                        int16_t StartX,
;;;1279                        int16_t StartY,
;;;1280                        const eGFX_Font *MyFont,
;;;1281                        char *FormatString,...)
;;;1282   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;1283       int16_t End;
;;;1284       va_list argptr;
;;;1285       va_start(argptr,FormatString);
00000c  a809              ADD      r0,sp,#0x24
00000e  9001              STR      r0,[sp,#4]
;;;1286   #ifdef WIN32
;;;1287       sprintf_s((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
;;;1288   #else
;;;1289       vsnprintf((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
000010  2140              MOVS     r1,#0x40
000012  480c              LDR      r0,|L101.68|
000014  9b01              LDR      r3,[sp,#4]
000016  9a08              LDR      r2,[sp,#0x20]
000018  f7fffffe          BL       vsnprintf
;;;1290   #endif
;;;1291       va_end(argptr);
00001c  2000              MOVS     r0,#0
00001e  9001              STR      r0,[sp,#4]
;;;1292       End = StartX + eGFX_GetStringWidth(eGFX_StringBuf,MyFont) + 1;
000020  4629              MOV      r1,r5
000022  4808              LDR      r0,|L101.68|
000024  f7fffffe          BL       eGFX_GetStringWidth
000028  4420              ADD      r0,r0,r4
00002a  1c40              ADDS     r0,r0,#1
00002c  fa0ff880          SXTH     r8,r0
;;;1293   	eGFX_DrawString(Image, eGFX_StringBuf, StartX, StartY, MyFont);
000030  4633              MOV      r3,r6
000032  4622              MOV      r2,r4
000034  4903              LDR      r1,|L101.68|
000036  4638              MOV      r0,r7
000038  9500              STR      r5,[sp,#0]
00003a  f7fffffe          BL       eGFX_DrawString
;;;1294       return End;
00003e  4640              MOV      r0,r8
;;;1295   }
000040  e8bd81fc          POP      {r2-r8,pc}
;;;1296   
                          ENDP

                  |L101.68|
                          DCD      eGFX_StringBuf

                          AREA ||i.eGFX_printf_Colored||, CODE, READONLY, ALIGN=2

                  eGFX_printf_Colored PROC
;;;1296   
;;;1297   int16_t  eGFX_printf_Colored(eGFX_ImagePlane *Image,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;1298                        int16_t StartX,
;;;1299                        int16_t StartY,
;;;1300                        const eGFX_Font *MyFont,
;;;1301   											uint32_t Color,
;;;1302                        char *FormatString,...)
;;;1303   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;1304       int16_t End;
;;;1305       va_list argptr;
;;;1306       va_start(argptr,FormatString);
000010  a80c              ADD      r0,sp,#0x30
000012  9002              STR      r0,[sp,#8]
;;;1307   #ifdef WIN32
;;;1308       sprintf_s((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
;;;1309   #else
;;;1310       vsnprintf((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
000014  2140              MOVS     r1,#0x40
000016  480d              LDR      r0,|L102.76|
000018  9b02              LDR      r3,[sp,#8]
00001a  9a0b              LDR      r2,[sp,#0x2c]
00001c  f7fffffe          BL       vsnprintf
;;;1311   #endif
;;;1312       va_end(argptr);
000020  2000              MOVS     r0,#0
000022  9002              STR      r0,[sp,#8]
;;;1313       End = StartX + eGFX_GetStringWidth(eGFX_StringBuf,MyFont) + 1;
000024  4629              MOV      r1,r5
000026  4809              LDR      r0,|L102.76|
000028  f7fffffe          BL       eGFX_GetStringWidth
00002c  4420              ADD      r0,r0,r4
00002e  1c40              ADDS     r0,r0,#1
000030  fa0ff980          SXTH     r9,r0
;;;1314      	eGFX_DrawStringColored(Image, eGFX_StringBuf, StartX, StartY, MyFont,Color);
000034  4633              MOV      r3,r6
000036  4622              MOV      r2,r4
000038  4904              LDR      r1,|L102.76|
00003a  4638              MOV      r0,r7
00003c  e9cd5800          STRD     r5,r8,[sp,#0]
000040  f7fffffe          BL       eGFX_DrawStringColored
;;;1315       return End;
000044  4648              MOV      r0,r9
;;;1316   }
000046  e8bd83fe          POP      {r1-r9,pc}
;;;1317   
                          ENDP

00004a  0000              DCW      0x0000
                  |L102.76|
                          DCD      eGFX_StringBuf

                          AREA ||i.eGFX_printf_HorizontalCentered_Colored||, CODE, READONLY, ALIGN=2

                  eGFX_printf_HorizontalCentered_Colored PROC
;;;1317   
;;;1318   int16_t  eGFX_printf_HorizontalCentered_Colored(eGFX_ImagePlane *Image,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;1319                                            int16_t StartY,
;;;1320                                           const eGFX_Font *MyFont,
;;;1321                                           uint32_t Color,
;;;1322                                           char *FormatString,...)
;;;1323   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;1324       int16_t End;
;;;1325       int16_t StartX;
;;;1326       va_list argptr;
;;;1327       va_start(argptr,FormatString);
00000c  a80b              ADD      r0,sp,#0x2c
00000e  9002              STR      r0,[sp,#8]
;;;1328   #ifdef WIN32
;;;1329       sprintf_s((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
;;;1330   #else
;;;1331       vsnprintf((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
000010  2140              MOVS     r1,#0x40
000012  4811              LDR      r0,|L103.88|
000014  9b02              LDR      r3,[sp,#8]
000016  9a0a              LDR      r2,[sp,#0x28]
000018  f7fffffe          BL       vsnprintf
;;;1332   #endif
;;;1333       va_end(argptr);
00001c  2000              MOVS     r0,#0
00001e  9002              STR      r0,[sp,#8]
;;;1334       
;;;1335       StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth(eGFX_StringBuf,MyFont))>>1;
000020  4621              MOV      r1,r4
000022  480d              LDR      r0,|L103.88|
000024  f7fffffe          BL       eGFX_GetStringWidth
000028  8929              LDRH     r1,[r5,#8]
00002a  b209              SXTH     r1,r1
00002c  1a08              SUBS     r0,r1,r0
00002e  ea4f0860          ASR      r8,r0,#1
;;;1336       End = StartX + eGFX_GetStringWidth(eGFX_StringBuf,MyFont) + 1;
000032  4621              MOV      r1,r4
000034  4808              LDR      r0,|L103.88|
000036  f7fffffe          BL       eGFX_GetStringWidth
00003a  4440              ADD      r0,r0,r8
00003c  1c40              ADDS     r0,r0,#1
00003e  fa0ff980          SXTH     r9,r0
;;;1337       
;;;1338   	eGFX_DrawStringColored(Image, eGFX_StringBuf, StartX, StartY, MyFont,Color);
000042  4633              MOV      r3,r6
000044  4642              MOV      r2,r8
000046  4904              LDR      r1,|L103.88|
000048  4628              MOV      r0,r5
00004a  e9cd4700          STRD     r4,r7,[sp,#0]
00004e  f7fffffe          BL       eGFX_DrawStringColored
;;;1339       return End;
000052  4648              MOV      r0,r9
;;;1340   }
000054  e8bd83fe          POP      {r1-r9,pc}
;;;1341   
                          ENDP

                  |L103.88|
                          DCD      eGFX_StringBuf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  eGFX_StringBuf
                          %        64
                  eGFX_Animators
                          %        128
                  eGFX_Objects
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  eGFX_Fixed_1_14_SineTable
000000  00000192          DCW      0x0000,0x0192
000004  032404b5          DCW      0x0324,0x04b5
000008  064607d6          DCW      0x0646,0x07d6
00000c  09640af1          DCW      0x0964,0x0af1
000010  0c7c0e06          DCW      0x0c7c,0x0e06
000014  0f8d1112          DCW      0x0f8d,0x1112
000018  12941413          DCW      0x1294,0x1413
00001c  15901709          DCW      0x1590,0x1709
000020  187e19ef          DCW      0x187e,0x19ef
000024  1b5d1cc6          DCW      0x1b5d,0x1cc6
000028  1e2b1f8c          DCW      0x1e2b,0x1f8c
00002c  20e7223d          DCW      0x20e7,0x223d
000030  238e24da          DCW      0x238e,0x24da
000034  26202760          DCW      0x2620,0x2760
000038  289a29ce          DCW      0x289a,0x29ce
00003c  2afb2c21          DCW      0x2afb,0x2c21
000040  2d412e5a          DCW      0x2d41,0x2e5a
000044  2f6c3076          DCW      0x2f6c,0x3076
000048  31793274          DCW      0x3179,0x3274
00004c  33683453          DCW      0x3368,0x3453
000050  35373612          DCW      0x3537,0x3612
000054  36e537b0          DCW      0x36e5,0x37b0
000058  3871392b          DCW      0x3871,0x392b
00005c  39db3a82          DCW      0x39db,0x3a82
000060  3b213bb6          DCW      0x3b21,0x3bb6
000064  3c423cc5          DCW      0x3c42,0x3cc5
000068  3d3f3daf          DCW      0x3d3f,0x3daf
00006c  3e153e72          DCW      0x3e15,0x3e72
000070  3ec53f0f          DCW      0x3ec5,0x3f0f
000074  3f4f3f85          DCW      0x3f4f,0x3f85
000078  3fb13fd4          DCW      0x3fb1,0x3fd4
00007c  3fec3ffb          DCW      0x3fec,0x3ffb
000080  40003ffb          DCW      0x4000,0x3ffb
000084  3fec3fd4          DCW      0x3fec,0x3fd4
000088  3fb13f85          DCW      0x3fb1,0x3f85
00008c  3f4f3f0f          DCW      0x3f4f,0x3f0f
000090  3ec53e72          DCW      0x3ec5,0x3e72
000094  3e153daf          DCW      0x3e15,0x3daf
000098  3d3f3cc5          DCW      0x3d3f,0x3cc5
00009c  3c423bb6          DCW      0x3c42,0x3bb6
0000a0  3b213a82          DCW      0x3b21,0x3a82
0000a4  39db392b          DCW      0x39db,0x392b
0000a8  387137b0          DCW      0x3871,0x37b0
0000ac  36e53612          DCW      0x36e5,0x3612
0000b0  35373453          DCW      0x3537,0x3453
0000b4  33683274          DCW      0x3368,0x3274
0000b8  31793076          DCW      0x3179,0x3076
0000bc  2f6c2e5a          DCW      0x2f6c,0x2e5a
0000c0  2d412c21          DCW      0x2d41,0x2c21
0000c4  2afb29ce          DCW      0x2afb,0x29ce
0000c8  289a2760          DCW      0x289a,0x2760
0000cc  262024da          DCW      0x2620,0x24da
0000d0  238e223d          DCW      0x238e,0x223d
0000d4  20e71f8c          DCW      0x20e7,0x1f8c
0000d8  1e2b1cc6          DCW      0x1e2b,0x1cc6
0000dc  1b5d19ef          DCW      0x1b5d,0x19ef
0000e0  187e1709          DCW      0x187e,0x1709
0000e4  15901413          DCW      0x1590,0x1413
0000e8  12941112          DCW      0x1294,0x1112
0000ec  0f8d0e06          DCW      0x0f8d,0x0e06
0000f0  0c7c0af1          DCW      0x0c7c,0x0af1
0000f4  096407d6          DCW      0x0964,0x07d6
0000f8  064604b5          DCW      0x0646,0x04b5
0000fc  03240192          DCW      0x0324,0x0192
000100  0000fe6e          DCW      0x0000,0xfe6e
000104  fcdcfb4b          DCW      0xfcdc,0xfb4b
000108  f9baf82a          DCW      0xf9ba,0xf82a
00010c  f69cf50f          DCW      0xf69c,0xf50f
000110  f384f1fa          DCW      0xf384,0xf1fa
000114  f073eeee          DCW      0xf073,0xeeee
000118  ed6cebed          DCW      0xed6c,0xebed
00011c  ea70e8f7          DCW      0xea70,0xe8f7
000120  e782e611          DCW      0xe782,0xe611
000124  e4a3e33a          DCW      0xe4a3,0xe33a
000128  e1d5e074          DCW      0xe1d5,0xe074
00012c  df19ddc3          DCW      0xdf19,0xddc3
000130  dc72db26          DCW      0xdc72,0xdb26
000134  d9e0d8a0          DCW      0xd9e0,0xd8a0
000138  d766d632          DCW      0xd766,0xd632
00013c  d505d3df          DCW      0xd505,0xd3df
000140  d2bfd1a6          DCW      0xd2bf,0xd1a6
000144  d094cf8a          DCW      0xd094,0xcf8a
000148  ce87cd8c          DCW      0xce87,0xcd8c
00014c  cc98cbad          DCW      0xcc98,0xcbad
000150  cac9c9ee          DCW      0xcac9,0xc9ee
000154  c91bc850          DCW      0xc91b,0xc850
000158  c78fc6d5          DCW      0xc78f,0xc6d5
00015c  c625c57e          DCW      0xc625,0xc57e
000160  c4dfc44a          DCW      0xc4df,0xc44a
000164  c3bec33b          DCW      0xc3be,0xc33b
000168  c2c1c251          DCW      0xc2c1,0xc251
00016c  c1ebc18e          DCW      0xc1eb,0xc18e
000170  c13bc0f1          DCW      0xc13b,0xc0f1
000174  c0b1c07b          DCW      0xc0b1,0xc07b
000178  c04fc02c          DCW      0xc04f,0xc02c
00017c  c014c005          DCW      0xc014,0xc005
000180  c000c005          DCW      0xc000,0xc005
000184  c014c02c          DCW      0xc014,0xc02c
000188  c04fc07b          DCW      0xc04f,0xc07b
00018c  c0b1c0f1          DCW      0xc0b1,0xc0f1
000190  c13bc18e          DCW      0xc13b,0xc18e
000194  c1ebc251          DCW      0xc1eb,0xc251
000198  c2c1c33b          DCW      0xc2c1,0xc33b
00019c  c3bec44a          DCW      0xc3be,0xc44a
0001a0  c4dfc57e          DCW      0xc4df,0xc57e
0001a4  c625c6d5          DCW      0xc625,0xc6d5
0001a8  c78fc850          DCW      0xc78f,0xc850
0001ac  c91bc9ee          DCW      0xc91b,0xc9ee
0001b0  cac9cbad          DCW      0xcac9,0xcbad
0001b4  cc98cd8c          DCW      0xcc98,0xcd8c
0001b8  ce87cf8a          DCW      0xce87,0xcf8a
0001bc  d094d1a6          DCW      0xd094,0xd1a6
0001c0  d2bfd3df          DCW      0xd2bf,0xd3df
0001c4  d505d632          DCW      0xd505,0xd632
0001c8  d766d8a0          DCW      0xd766,0xd8a0
0001cc  d9e0db26          DCW      0xd9e0,0xdb26
0001d0  dc72ddc3          DCW      0xdc72,0xddc3
0001d4  df19e074          DCW      0xdf19,0xe074
0001d8  e1d5e33a          DCW      0xe1d5,0xe33a
0001dc  e4a3e611          DCW      0xe4a3,0xe611
0001e0  e782e8f7          DCW      0xe782,0xe8f7
0001e4  ea70ebed          DCW      0xea70,0xebed
0001e8  ed6ceeee          DCW      0xed6c,0xeeee
0001ec  f073f1fa          DCW      0xf073,0xf1fa
0001f0  f384f50f          DCW      0xf384,0xf50f
0001f4  f69cf82a          DCW      0xf69c,0xf82a
0001f8  f9bafb4b          DCW      0xf9ba,0xfb4b
0001fc  fcdcfe6e          DCW      0xfcdc,0xfe6e
                  eGFX_Fixed_7_8_SineTable
000200  00000006          DCW      0x0000,0x0006
000204  000d0013          DCW      0x000d,0x0013
000208  0019001f          DCW      0x0019,0x001f
00020c  0026002c          DCW      0x0026,0x002c
000210  00320038          DCW      0x0032,0x0038
000214  003e0044          DCW      0x003e,0x0044
000218  004a0050          DCW      0x004a,0x0050
00021c  0056005c          DCW      0x0056,0x005c
000220  00620068          DCW      0x0062,0x0068
000224  006d0073          DCW      0x006d,0x0073
000228  0079007e          DCW      0x0079,0x007e
00022c  00840089          DCW      0x0084,0x0089
000230  008e0093          DCW      0x008e,0x0093
000234  0098009d          DCW      0x0098,0x009d
000238  00a200a7          DCW      0x00a2,0x00a7
00023c  00ac00b1          DCW      0x00ac,0x00b1
000240  00b500b9          DCW      0x00b5,0x00b9
000244  00be00c2          DCW      0x00be,0x00c2
000248  00c600ca          DCW      0x00c6,0x00ca
00024c  00ce00d1          DCW      0x00ce,0x00d1
000250  00d500d8          DCW      0x00d5,0x00d8
000254  00dc00df          DCW      0x00dc,0x00df
000258  00e200e5          DCW      0x00e2,0x00e5
00025c  00e700ea          DCW      0x00e7,0x00ea
000260  00ed00ef          DCW      0x00ed,0x00ef
000264  00f100f3          DCW      0x00f1,0x00f3
000268  00f500f7          DCW      0x00f5,0x00f7
00026c  00f800fa          DCW      0x00f8,0x00fa
000270  00fb00fc          DCW      0x00fb,0x00fc
000274  00fd00fe          DCW      0x00fd,0x00fe
000278  00ff00ff          DCW      0x00ff,0x00ff
00027c  01000100          DCW      0x0100,0x0100
000280  01000100          DCW      0x0100,0x0100
000284  010000ff          DCW      0x0100,0x00ff
000288  00ff00fe          DCW      0x00ff,0x00fe
00028c  00fd00fc          DCW      0x00fd,0x00fc
000290  00fb00fa          DCW      0x00fb,0x00fa
000294  00f800f7          DCW      0x00f8,0x00f7
000298  00f500f3          DCW      0x00f5,0x00f3
00029c  00f100ef          DCW      0x00f1,0x00ef
0002a0  00ed00ea          DCW      0x00ed,0x00ea
0002a4  00e700e5          DCW      0x00e7,0x00e5
0002a8  00e200df          DCW      0x00e2,0x00df
0002ac  00dc00d8          DCW      0x00dc,0x00d8
0002b0  00d500d1          DCW      0x00d5,0x00d1
0002b4  00ce00ca          DCW      0x00ce,0x00ca
0002b8  00c600c2          DCW      0x00c6,0x00c2
0002bc  00be00b9          DCW      0x00be,0x00b9
0002c0  00b500b1          DCW      0x00b5,0x00b1
0002c4  00ac00a7          DCW      0x00ac,0x00a7
0002c8  00a2009d          DCW      0x00a2,0x009d
0002cc  00980093          DCW      0x0098,0x0093
0002d0  008e0089          DCW      0x008e,0x0089
0002d4  0084007e          DCW      0x0084,0x007e
0002d8  00790073          DCW      0x0079,0x0073
0002dc  006d0068          DCW      0x006d,0x0068
0002e0  0062005c          DCW      0x0062,0x005c
0002e4  00560050          DCW      0x0056,0x0050
0002e8  004a0044          DCW      0x004a,0x0044
0002ec  003e0038          DCW      0x003e,0x0038
0002f0  0032002c          DCW      0x0032,0x002c
0002f4  0026001f          DCW      0x0026,0x001f
0002f8  00190013          DCW      0x0019,0x0013
0002fc  000d0006          DCW      0x000d,0x0006
000300  0000fffa          DCW      0x0000,0xfffa
000304  fff3ffed          DCW      0xfff3,0xffed
000308  ffe7ffe1          DCW      0xffe7,0xffe1
00030c  ffdaffd4          DCW      0xffda,0xffd4
000310  ffceffc8          DCW      0xffce,0xffc8
000314  ffc2ffbc          DCW      0xffc2,0xffbc
000318  ffb6ffb0          DCW      0xffb6,0xffb0
00031c  ffaaffa4          DCW      0xffaa,0xffa4
000320  ff9eff98          DCW      0xff9e,0xff98
000324  ff93ff8d          DCW      0xff93,0xff8d
000328  ff87ff82          DCW      0xff87,0xff82
00032c  ff7cff77          DCW      0xff7c,0xff77
000330  ff72ff6d          DCW      0xff72,0xff6d
000334  ff68ff63          DCW      0xff68,0xff63
000338  ff5eff59          DCW      0xff5e,0xff59
00033c  ff54ff4f          DCW      0xff54,0xff4f
000340  ff4bff47          DCW      0xff4b,0xff47
000344  ff42ff3e          DCW      0xff42,0xff3e
000348  ff3aff36          DCW      0xff3a,0xff36
00034c  ff32ff2f          DCW      0xff32,0xff2f
000350  ff2bff28          DCW      0xff2b,0xff28
000354  ff24ff21          DCW      0xff24,0xff21
000358  ff1eff1b          DCW      0xff1e,0xff1b
00035c  ff19ff16          DCW      0xff19,0xff16
000360  ff13ff11          DCW      0xff13,0xff11
000364  ff0fff0d          DCW      0xff0f,0xff0d
000368  ff0bff09          DCW      0xff0b,0xff09
00036c  ff08ff06          DCW      0xff08,0xff06
000370  ff05ff04          DCW      0xff05,0xff04
000374  ff03ff02          DCW      0xff03,0xff02
000378  ff01ff01          DCW      0xff01,0xff01
00037c  ff00ff00          DCW      0xff00,0xff00
000380  ff00ff00          DCW      0xff00,0xff00
000384  ff00ff01          DCW      0xff00,0xff01
000388  ff01ff02          DCW      0xff01,0xff02
00038c  ff03ff04          DCW      0xff03,0xff04
000390  ff05ff06          DCW      0xff05,0xff06
000394  ff08ff09          DCW      0xff08,0xff09
000398  ff0bff0d          DCW      0xff0b,0xff0d
00039c  ff0fff11          DCW      0xff0f,0xff11
0003a0  ff13ff16          DCW      0xff13,0xff16
0003a4  ff19ff1b          DCW      0xff19,0xff1b
0003a8  ff1eff21          DCW      0xff1e,0xff21
0003ac  ff24ff28          DCW      0xff24,0xff28
0003b0  ff2bff2f          DCW      0xff2b,0xff2f
0003b4  ff32ff36          DCW      0xff32,0xff36
0003b8  ff3aff3e          DCW      0xff3a,0xff3e
0003bc  ff42ff47          DCW      0xff42,0xff47
0003c0  ff4bff4f          DCW      0xff4b,0xff4f
0003c4  ff54ff59          DCW      0xff54,0xff59
0003c8  ff5eff63          DCW      0xff5e,0xff63
0003cc  ff68ff6d          DCW      0xff68,0xff6d
0003d0  ff72ff77          DCW      0xff72,0xff77
0003d4  ff7cff82          DCW      0xff7c,0xff82
0003d8  ff87ff8d          DCW      0xff87,0xff8d
0003dc  ff93ff98          DCW      0xff93,0xff98
0003e0  ff9effa4          DCW      0xff9e,0xffa4
0003e4  ffaaffb0          DCW      0xffaa,0xffb0
0003e8  ffb6ffbc          DCW      0xffb6,0xffbc
0003ec  ffc2ffc8          DCW      0xffc2,0xffc8
0003f0  ffceffd4          DCW      0xffce,0xffd4
0003f4  ffdaffe1          DCW      0xffda,0xffe1
0003f8  ffe7ffed          DCW      0xffe7,0xffed
0003fc  fff3fffa          DCW      0xfff3,0xfffa

                          AREA ||.data||, DATA, ALIGN=2

                  eGFX_AnimatorEndIndex
                          DCD      0x00000000
                  eGFX_ObjectEndIndex
                          DCD      0x00000000

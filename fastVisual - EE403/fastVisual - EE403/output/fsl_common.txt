; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_common.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_common.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\SRC\eGFX\Fonts\Arial__23px__Regular__SystemDefault_1BPP -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_common.crf SRC\Drivers\fsl_common.c]
                          THUMB

                          AREA ||i.DisableDeepSleepIRQ||, CODE, READONLY, ALIGN=2

                  DisableDeepSleepIRQ PROC
;;;117    
;;;118    void DisableDeepSleepIRQ(IRQn_Type interrupt)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4601              MOV      r1,r0
;;;120        uint32_t index = 0;
000004  2300              MOVS     r3,#0
;;;121        uint32_t intNumber = (uint32_t)interrupt;
000006  460a              MOV      r2,r1
;;;122        while (intNumber >= 32u)
000008  e001              B        |L1.14|
                  |L1.10|
;;;123        {
;;;124            index++;
00000a  1c5b              ADDS     r3,r3,#1
;;;125            intNumber -= 32u;
00000c  3a20              SUBS     r2,r2,#0x20
                  |L1.14|
00000e  2a20              CMP      r2,#0x20              ;122
000010  d2fb              BCS      |L1.10|
;;;126        }
;;;127    
;;;128        DisableIRQ(interrupt); /* also disable interrupt at NVIC */
000012  4608              MOV      r0,r1
000014  f1100f80          CMN      r0,#0x80
000018  d100              BNE      |L1.28|
00001a  e00a              B        |L1.50|
                  |L1.28|
00001c  bf00              NOP      
00001e  f000051f          AND      r5,r0,#0x1f
000022  2401              MOVS     r4,#1
000024  40ac              LSLS     r4,r4,r5
000026  4d06              LDR      r5,|L1.64|
000028  0946              LSRS     r6,r0,#5
00002a  f8454026          STR      r4,[r5,r6,LSL #2]
00002e  bf00              NOP      
000030  bf00              NOP      
                  |L1.50|
;;;129        SYSCON->STARTERCLR[index] = 1u << intNumber;
000032  2001              MOVS     r0,#1
000034  4090              LSLS     r0,r0,r2
000036  4c03              LDR      r4,|L1.68|
000038  f8440023          STR      r0,[r4,r3,LSL #2]
;;;130    }
00003c  bd70              POP      {r4-r6,pc}
;;;131    #endif /* FSL_FEATURE_SOC_SYSCON_COUNT */
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      0xe000e180
                  |L1.68|
                          DCD      0x400006c0

                          AREA ||i.EnableDeepSleepIRQ||, CODE, READONLY, ALIGN=2

                  EnableDeepSleepIRQ PROC
;;;103    
;;;104    void EnableDeepSleepIRQ(IRQn_Type interrupt)
000000  b530              PUSH     {r4,r5,lr}
;;;105    {
000002  4601              MOV      r1,r0
;;;106        uint32_t index = 0;
000004  2300              MOVS     r3,#0
;;;107        uint32_t intNumber = (uint32_t)interrupt;
000006  460a              MOV      r2,r1
;;;108        while (intNumber >= 32u)
000008  e001              B        |L2.14|
                  |L2.10|
;;;109        {
;;;110            index++;
00000a  1c5b              ADDS     r3,r3,#1
;;;111            intNumber -= 32u;
00000c  3a20              SUBS     r2,r2,#0x20
                  |L2.14|
00000e  2a20              CMP      r2,#0x20              ;108
000010  d2fb              BCS      |L2.10|
;;;112        }
;;;113    
;;;114        SYSCON->STARTERSET[index] = 1u << intNumber;
000012  2001              MOVS     r0,#1
000014  4090              LSLS     r0,r0,r2
000016  4c0b              LDR      r4,|L2.68|
000018  f8440023          STR      r0,[r4,r3,LSL #2]
;;;115        EnableIRQ(interrupt); /* also enable interrupt at NVIC */
00001c  4608              MOV      r0,r1
00001e  f1100f80          CMN      r0,#0x80
000022  d100              BNE      |L2.38|
000024  e00c              B        |L2.64|
                  |L2.38|
000026  bf00              NOP      
000028  f000051f          AND      r5,r0,#0x1f
00002c  2401              MOVS     r4,#1
00002e  40ac              LSLS     r4,r4,r5
000030  0945              LSRS     r5,r0,#5
000032  00ad              LSLS     r5,r5,#2
000034  f10525e0          ADD      r5,r5,#0xe000e000
000038  f8c54100          STR      r4,[r5,#0x100]
00003c  bf00              NOP      
00003e  bf00              NOP      
                  |L2.64|
;;;116    }
000040  bd30              POP      {r4,r5,pc}
;;;117    
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0x400006a0

                          AREA ||i.InstallIRQHandler||, CODE, READONLY, ALIGN=2

                  InstallIRQHandler PROC
;;;55     
;;;56     uint32_t InstallIRQHandler(IRQn_Type irq, uint32_t irqHandler)
000000  b5f0              PUSH     {r4-r7,lr}
;;;57     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;58     /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */
;;;59     #if defined(__CC_ARM)
;;;60         extern uint32_t Image$$VECTOR_ROM$$Base[];
;;;61         extern uint32_t Image$$VECTOR_RAM$$Base[];
;;;62         extern uint32_t Image$$RW_m_data$$Base[];
;;;63     
;;;64     #define __VECTOR_TABLE Image$$VECTOR_ROM$$Base
;;;65     #define __VECTOR_RAM Image$$VECTOR_RAM$$Base
;;;66     #define __RAM_VECTOR_TABLE_SIZE (((uint32_t)Image$$RW_m_data$$Base - (uint32_t)Image$$VECTOR_RAM$$Base))
;;;67     #elif defined(__ICCARM__)
;;;68         extern uint32_t __RAM_VECTOR_TABLE_SIZE[];
;;;69         extern uint32_t __VECTOR_TABLE[];
;;;70         extern uint32_t __VECTOR_RAM[];
;;;71     #elif defined(__GNUC__)
;;;72         extern uint32_t __VECTOR_TABLE[];
;;;73         extern uint32_t __VECTOR_RAM[];
;;;74         extern uint32_t __RAM_VECTOR_TABLE_SIZE_BYTES[];
;;;75         uint32_t __RAM_VECTOR_TABLE_SIZE = (uint32_t)(__RAM_VECTOR_TABLE_SIZE_BYTES);
;;;76     #endif /* defined(__CC_ARM) */
;;;77         uint32_t n;
;;;78         uint32_t ret;
;;;79         uint32_t irqMaskValue;    
;;;80     
;;;81         irqMaskValue = DisableGlobalIRQ();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f3ef8610          MRS      r6,PRIMASK
00000e  4635              MOV      r5,r6
000010  b672              CPSID    i
000012  bf00              NOP      
000014  462a              MOV      r2,r5
;;;82         if (SCB->VTOR != (uint32_t)__VECTOR_RAM)
000016  4d12              LDR      r5,|L3.96|
000018  682d              LDR      r5,[r5,#0]
00001a  4e12              LDR      r6,|L3.100|
00001c  42b5              CMP      r5,r6
00001e  d011              BEQ      |L3.68|
;;;83         {
;;;84             /* Copy the vector table from ROM to RAM */
;;;85             for (n = 0; n < ((uint32_t)__RAM_VECTOR_TABLE_SIZE) / sizeof(uint32_t); n++)
000020  2100              MOVS     r1,#0
000022  e006              B        |L3.50|
                  |L3.36|
;;;86             {
;;;87                 __VECTOR_RAM[n] = __VECTOR_TABLE[n];
000024  4d10              LDR      r5,|L3.104|
000026  f8555021          LDR      r5,[r5,r1,LSL #2]
00002a  4e0e              LDR      r6,|L3.100|
00002c  f8465021          STR      r5,[r6,r1,LSL #2]
000030  1c49              ADDS     r1,r1,#1              ;85
                  |L3.50|
000032  4d0e              LDR      r5,|L3.108|
000034  4e0b              LDR      r6,|L3.100|
000036  1bad              SUBS     r5,r5,r6              ;85
000038  ebb10f95          CMP      r1,r5,LSR #2          ;85
00003c  d3f2              BCC      |L3.36|
;;;88             }
;;;89             /* Point the VTOR to the position of vector table */
;;;90             SCB->VTOR = (uint32_t)__VECTOR_RAM;
00003e  4635              MOV      r5,r6
000040  4e07              LDR      r6,|L3.96|
000042  6035              STR      r5,[r6,#0]
                  |L3.68|
;;;91         }
;;;92     
;;;93         ret = __VECTOR_RAM[irq + 16];
000044  4e07              LDR      r6,|L3.100|
000046  f1030510          ADD      r5,r3,#0x10
00004a  f8560025          LDR      r0,[r6,r5,LSL #2]
;;;94         /* make sure the __VECTOR_RAM is noncachable */
;;;95         __VECTOR_RAM[irq + 16] = irqHandler;
00004e  f8464025          STR      r4,[r6,r5,LSL #2]
;;;96     
;;;97         EnableGlobalIRQ(irqMaskValue);
000052  bf00              NOP      
000054  bf00              NOP      
000056  f3828810          MSR      PRIMASK,r2
00005a  bf00              NOP      
00005c  bf00              NOP      
;;;98     
;;;99         return ret;
;;;100    }
00005e  bdf0              POP      {r4-r7,pc}
;;;101    #ifndef CPU_QN908X
                          ENDP

                  |L3.96|
                          DCD      0xe000ed08
                  |L3.100|
                          DCD      ||Image$$VECTOR_RAM$$Base||
                  |L3.104|
                          DCD      ||Image$$VECTOR_ROM$$Base||
                  |L3.108|
                          DCD      ||Image$$RW_m_data$$Base||

                          AREA ||i.__aeabi_assert||, CODE, READONLY, ALIGN=2

                  __aeabi_assert PROC
;;;35     #if (defined(__CC_ARM)) || (defined(__ICCARM__))
;;;36     void __aeabi_assert(const char *failedExpr, const char *file, int line)
000000  4604              MOV      r4,r0
;;;37     {
000002  460d              MOV      r5,r1
000004  4616              MOV      r6,r2
;;;38         PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" \n", failedExpr, file, line);
000006  4633              MOV      r3,r6
000008  462a              MOV      r2,r5
00000a  4621              MOV      r1,r4
00000c  a002              ADR      r0,|L4.24|
00000e  f7fffffe          BL       DbgConsole_Printf
;;;39         for (;;)
000012  bf00              NOP      
                  |L4.20|
;;;40         {
;;;41             __asm("bkpt #0");
000014  be00              BKPT     #0
000016  e7fd              B        |L4.20|
;;;42         }
;;;43     }
;;;44     #elif(defined(__GNUC__))
                          ENDP

                  |L4.24|
000018  41535345          DCB      "ASSERT ERROR "" %s "": file ""%s"" Line ""%d"" \n",0
00001c  52542045
000020  52524f52
000024  20222025
000028  7320223a
00002c  2066696c
000030  65202225
000034  7322204c
000038  696e6520
00003c  22256422
000040  200a00  
000043  00                DCB      0

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_common.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_fsl_common_c_4a0ef45f____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_fsl_common_c_4a0ef45f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_fsl_common_c_4a0ef45f____REVSH|
#line 402
|__asm___12_fsl_common_c_4a0ef45f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_fsl_common_c_4a0ef45f____RRX|
#line 587
|__asm___12_fsl_common_c_4a0ef45f____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

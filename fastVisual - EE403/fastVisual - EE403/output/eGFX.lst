L 1 "SRC\eGFX\eGFX.c"
N
N#include "eGFX.h"
L 1 "SRC\eGFX\eGFX.h" 1
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N#include <stdlib.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060019
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 8 "SRC\eGFX\eGFX.h" 2
N
N#include "eGFX_DataTypes.h"
L 1 "SRC\eGFX\eGFX_DataTypes.h" 1
N#include "stdint.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 2 "SRC\eGFX\eGFX_DataTypes.h" 2
N
N
N#ifndef eGFX_DATA_TYPES_H
N#define eGFX_DATA_TYPES_H
N
N
Ntypedef int16_t FIXED_7_8;
Ntypedef int16_t FIXED_9_6;
N
Ntypedef int16_t FIXED_0_15;
Ntypedef int16_t FIXED_1_14;
N
N
N#define eGFX_IMAGE_PLANE_1BPP		 0
N#define eGFX_IMAGE_PLANE_3BPP_RGB    	 1
N#define eGFX_IMAGE_PLANE_4BPP		    2
N#define eGFX_IMAGE_PLANE_8BPP		   3
N#define eGFX_IMAGE_PLANE_16BPP_565    4
N#define eGFX_IMAGE_PLANE_24BPP        5
N#define eGFX_IMAGE_PLANE_32BPP        6
N
N
N
Ntypedef struct
N{
N    uint8_t Type;
N    uint8_t *Data;
N    uint16_t SizeX;
N    uint16_t SizeY;
N
N} eGFX_ImagePlane;
N
Ntypedef struct
N{
N    int16_t X;
N    int16_t Y;
N} eGFX_Point;
N
Ntypedef struct
N{
N    float X; 	
N    float Y;  
N} eGFX_PointF;
N
Ntypedef struct
N{
N    eGFX_Point P1;
N    eGFX_Point P2;
N} eGFX_Box;
N
Ntypedef struct
N{
N    eGFX_Point Center;
N    uint8_t NumPoints;
N    uint8_t DrawMode;
N    const eGFX_Point *PointList;
N
N} eGFX_ListPrimitive;
N
N
N
N#define eGFX_LIST_PRIMITIVE_CONNECTED                              0x01
N#define eGFX_LIST_PRIMITIVE_DISCONNECTED                           0x02
N#define eGFX_LIST_PRIMITIVE_CLOSED								   0x03
N#define eGFX_LIST_PRIMITIVE_CONNECTED_YFLIPPED			 		   0x04
N#define eGFX_LIST_PRIMITIVE_DISCONNECTED_YFLIPPED		   		   0x05
N#define eGFX_LIST_PRIMITIVE_CLOSED_YFLIPPED			   			   0x06
N
Ntypedef struct
N{
N    const eGFX_ImagePlane *CharacterSprites[0x80-0x20];
N  
N	//Some TT Metrics
N	int32_t Ascent; //Ascent scaled up by 65536 to store fractional value		(Q15.16)
N	int32_t Descent; //Descent scaled up by 65536 to store fractional value		(Q15.16)
N	int32_t LineSpacing; //Linespacing scaled up by 65536 to store fractional value  (Q15.16)
N	
N	uint8_t  SpacesPerTab;
N    uint8_t  InterCharacterSpacing;
N   
N	uint8_t  Padding[2];
N
N} eGFX_Font;
N
N
N#define eGFX_PIXEL_ON     0xFFFFFFFF
N#define eGFX_PIXEL_OFF    0
N
Ntypedef uint32_t eGFX_PixelState;
N
N/***
N*       ____  _     _           _
N*      / __ \| |   (_)         | |
N*     | |  | | |__  _  ___  ___| |_ ___
N*     | |  | | '_ \| |/ _ \/ __| __/ __|
N*     | |__| | |_) | |  __/ (__| |_\__ \
N*      \____/|_.__/| |\___|\___|\__|___/
X
N*                 _/ |
N*                |__/
N*/
N
Ntypedef struct 
N{
N	uint32_t Type;
N	uint32_t State;
N	
N}	eGFX_ObjectHeader;
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	uint32_t CurrentStep;
N	uint32_t LastStep;
N}	eGFX_AnimatorHeader;
N
N#define eGFX_OBJECT_STATE_ACTIVE							        	1
N#define eGFX_OBJECT_STATE_ANIMATION_ACTIVE								2
N#define eGFX_OBJECT_STATE_INACTIVE										0
N
N/***
N*                     _                 _                ____  _     _           _
N*         /\         (_)               | |              / __ \| |   (_)         | |
N*        /  \   _ __  _ _ __ ___   __ _| |_ ___  _ __  | |  | | |__  _  ___  ___| |_ ___
N*       / /\ \ | '_ \| | '_ ` _ \ / _` | __/ _ \| '__| | |  | | '_ \| |/ _ \/ __| __/ __|
N*      / ____ \| | | | | | | | | | (_| | || (_) | |    | |__| | |_) | |  __/ (__| |_\__ \
N*     /_/    \_\_| |_|_|_| |_| |_|\__,_|\__\___/|_|     \____/|_.__/| |\___|\___|\__|___/
X
N*                                                                  _/ |
N*                                                                 |__/
N*/
N
N
N
N#define eGFX_OBJECT_POINTF_BISECT_ANIMATOR								0xF0
N#define eGFX_OBJECT_POINTF_LINEAR_ANIMATOR								0xF1
N
N#define eGFX_OBJECT_SCALARF_BISECT_ANIMATOR								0xF2
N#define eGFX_OBJECT_SCALARF_LINEAR_ANIMATOR								0xF3
N
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	uint32_t CurrentStep;
N	uint32_t LastStep;
N	eGFX_PointF Target;
N	eGFX_PointF *Current;
N
N	float FractionalBisect; //The amount of percentage of the distance the point should move each step. must between a number between zero and 1
N
N} eGFX_PointF_BisectAnimator;
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	uint32_t CurrentStep;
N	uint32_t LastStep;
N	eGFX_PointF Target;
N	eGFX_PointF *Current;
N	float IncrementX;
N	float IncrementY;
N
N} eGFX_PointF_LinearAnimator;
N
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	uint32_t CurrentStep;
N	uint32_t LastStep;
N	float Target;
N	float *Current;
N	float Increment; //Increment we should make each step
N
N} eGFX_ScalarF_LinearAnimator;
N
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	uint32_t CurrentStep;
N	uint32_t LastStep;
N	float Target;
N	float *Current;
N	float FractionalBisect; //The amount of percentage of the distance the point should move each step. must between a number between zero and 1
N
N} eGFX_ScalarF_BisectAnimator;
N
N/***
N*       _____                 _     _         ____  _     _           _
N*      / ____|               | |   (_)       / __ \| |   (_)         | |
N*     | |  __ _ __ __ _ _ __ | |__  _  ___  | |  | | |__  _  ___  ___| |_ ___
N*     | | |_ | '__/ _` | '_ \| '_ \| |/ __| | |  | | '_ \| |/ _ \/ __| __/ __|
N*     | |__| | | | (_| | |_) | | | | | (__  | |__| | |_) | |  __/ (__| |_\__ \
N*      \_____|_|  \__,_| .__/|_| |_|_|\___|  \____/|_.__/| |\___|\___|\__|___/
X
N*                      | |                              _/ |
N*                      |_|                             |__/
N*/
N
N#define eGFX_OBJECT_TEXTF												0x0000
N#define eGFX_OBJECT_SHADED_TEXTF										0x0001
N#define eGFX_OBJECT_LINEF												0x0002
N#define eGFX_OBJECT_SPRITEF												0x0003
N#define eGFX_OBJECT_SCALED_SPRITEF										0x0004
N#define eGFX_OBJECT_BOXF												0x0005
N#define eGFX_OBJECT_CIRCLEF												0x0006
N
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	eGFX_PointF Position;
N	char *String;
N	eGFX_Font *Font;
N	
N} eGFX_Obj_TextF;
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	eGFX_PointF Position;
N	char *String;
N	eGFX_Font *Font;
N	float Shading;
N
N} eGFX_Obj_ShadedTextF;
N
N
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	eGFX_PointF Start;
N	eGFX_PointF End;
N	eGFX_PixelState PixelState; 
N} eGFX_Obj_LineF;
N
N#define eGFX_CIRCLEF_RENDER_OPTION_OUTLINE	0x00
N#define eGFX_CIRCLEF_RENDER_OPTION_FILLED	0x01
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	eGFX_PointF Position;
N	float Radius;
N	eGFX_PixelState PixelState; 
N	uint8_t RenderOption;
N} eGFX_Obj_CircleF;
N
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	eGFX_PointF Position;
N	eGFX_ImagePlane * Sprite;
N	
N} eGFX_Obj_SpriteF;
N
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N	
N	eGFX_PointF Position;
N	eGFX_ImagePlane * Sprite;
N
N	float Scale;
N
N} eGFX_Obj_ScaledSpriteF;
N
N
N#define eGFX_BOXF_RENDER_OPTION_OUTLINE	0x00
N#define eGFX_BOXF_RENDER_OPTION_FILLED	0x01
N
Ntypedef struct
N{
N	uint32_t Type;
N	uint32_t State;
N
N	eGFX_PointF P1;
N	eGFX_PointF P2;
N
N	eGFX_PixelState PixelState;
N
N	uint8_t BoxF_RenderOption;
N
N} eGFX_Obj_BoxF;
N
N
N#endif
L 10 "SRC\eGFX\eGFX.h" 2
N
N
N#ifndef _eGFX_H__
N#define _eGFX_H__
N
N#define eGFX_MAX_ANIMATORS										  32
N#define eGFX_MAX_OBJECTS										  64
N
N#define eGFX_SPACES_PER_TAB                                        4
N#define eGFX_MAX_STRING_LEN                                        64
N#define eGFX_MAX_PRINTF_BUF_LENGTH                                 64
N
N#define eGFX_API_LEVEL											   1
N#define eGFX_REVISION											   2
N
N
N#define eGFX_CALCULATE_1BPP_BUFFER_ROW_BYTE_SIZE(x)			 ((x+7)>>3) //We add 8 to round up to the next even byte boundary
N#define eGFX_CALCULATE_4BPP_BUFFER_ROW_BYTE_SIZE(x)			 ((x+1)>>1) //We add 1 to round up to the next even byte boundary
N#define eGFX_CALCULATE_8BPP_BUFFER_ROW_BYTE_SIZE(x)			 (x)
N#define eGFX_CALCULATE_16BPP_BUFFER_ROW_BYTE_SIZE(x)		 (x*2)
N#define eGFX_CALCULATE_24BPP_BUFFER_ROW_BYTE_SIZE(x)	 	 (x*3)
N#define	eGFX_CALCULATE_32BPP_BUFFER_ROW_BYTE_SIZE(x)	 	 (x*4)
N
N#define eGFX_CALCULATE_1BPP_IMAGE_STORAGE_SPACE_SIZE(x,y)    (eGFX_CALCULATE_1BPP_BUFFER_ROW_BYTE_SIZE(x)	* y)
N#define eGFX_CALCULATE_3BPP_IMAGE_STORAGE_SPACE_SIZE(x,y)    (((x * y * 3))/8) //This is a special type  for sharp 8 color memory LCDs.   Packing is done in the data buffer so the dump to the screen is simple
N#define eGFX_CALCULATE_4BPP_IMAGE_STORAGE_SPACE_SIZE(x,y)    (eGFX_CALCULATE_4BPP_BUFFER_ROW_BYTE_SIZE(x)	* y)
N#define eGFX_CALCULATE_8BPP_IMAGE_STORAGE_SPACE_SIZE(x,y)    (eGFX_CALCULATE_8BPP_BUFFER_ROW_BYTE_SIZE(x)	* y)
N#define eGFX_CALCULATE_16BPP_IMAGE_STORAGE_SPACE_SIZE(x,y)   (eGFX_CALCULATE_16BPP_BUFFER_ROW_BYTE_SIZE(x)	* y)
N#define eGFX_CALCULATE_24BPP_IMAGE_STORAGE_SPACE_SIZE(x,y)   (eGFX_CALCULATE_24BPP_BUFFER_ROW_BYTE_SIZE(x)	* y)
N#define eGFX_CALCULATE_32BPP_IMAGE_STORAGE_SPACE_SIZE(x,y)   (eGFX_CALCULATE_32BPP_BUFFER_ROW_BYTE_SIZE(x)	* y)
N
N#define ROUND_TO_INT16_T(x)	((int16_t)(x + 0.5f))
N
Nextern const FIXED_1_14 eGFX_Fixed_1_14_SineTable [256];
Nextern const FIXED_7_8 eGFX_Fixed_7_8_SineTable[256];
N
N#define eGFX_GET_INT_FROM_FIXED_7_8(A)				(int16_t)(A>>8)
N#define eGFX_INT_TO_FIXED_7_8(A)					((FIXED_7_8)(A)<<8)
N#define eGFX_GET_FRAC_FROM_FIXED_7_8(A)				(FIXED_7_8)(A&0xFF)
N
N#define eGFX_GET_INT_FROM_FIXED_9_6_(A)				(int16_t)(A>>6)
N#define eGFX_INT_TO_FIXED_9_6(A)					((FIXED_9_6)(A)<<6)
N#define eGFX_GET_FRAC_FROM_FIXED_6_9(A)				(FIXED_9_6)(A&0x3F)
N
NFIXED_7_8 eGFX_GET_INT_FROM_FIXED_7_8_ROUND_TO_NEAREST(FIXED_7_8 A);
NFIXED_7_8 eGFX_FLOAT_TO_FIXED_7_8(float A);
Nint16_t eGFX_FMul_15_0to0_15(int16_t A, int16_t B);
Nint16_t eGFX_FMul_7_8to0_15(int16_t A, int16_t B);
Nint16_t eGFX_FMul_15_0to7_8(int16_t A,int16_t B);
Nint16_t eGFX_FMul_15_0to1_14(int16_t A,int16_t B);
Nint16_t eGFX_ABS(int16_t A);
N
N
N#define eGFX_RGB888_TO_RGB565(R,G,B)	 ( ((R>>2)<<11) | ((G>>2)<<5) | (B>>3))
N
N
N#ifndef TRUE
N	#define TRUE 1
N#endif
N
N#ifndef FALSE
N	#define FALSE 0
N#endif
N
N
N/***
N *      _____ _          _    ____                       _   _
N *     |  __ (_)        | |  / __ \                     | | (_)
N *     | |__) |__  _____| | | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *     |  ___/ \ \/ / _ \ | | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *     | |   | |>  <  __/ | | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_|   |_/_/\_\___|_|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                                 | |
N *                                 |_|
N */
Nvoid eGFX_PutPixel(const eGFX_ImagePlane *Image,
N                   int16_t x,
N                   int16_t y,
N                   eGFX_PixelState PS);
N
NeGFX_PixelState eGFX_GetPixel(const eGFX_ImagePlane *Image,
N                         int16_t x,
N                         int16_t y);
N
N
N
N
N/***
N *      _____      _           _ _   _              ____                       _   _
N *     |  __ \    (_)         (_) | (_)            / __ \                     | | (_)
N *     | |__) | __ _ _ __ ___  _| |_ ___   _____  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *     |  ___/ '__| | '_ ` _ \| | __| \ \ / / _ \ | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *     | |   | |  | | | | | | | | |_| |\ V /  __/ | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_|   |_|  |_|_| |_| |_|_|\__|_| \_/ \___|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                                                       | |
N *                                                       |_|
N */
N
N 
Nvoid eGFX_DrawHline(eGFX_ImagePlane *Image,
N                    int16_t XStart,
N                    int16_t XStop,
N                    int16_t Y,
N                    eGFX_PixelState PS);
N
Nvoid eGFX_DrawFilledBox(eGFX_ImagePlane *Image,
N                        eGFX_Box *Box,
N                        eGFX_PixelState PS);
N
Nvoid eGFX_DrawBox(eGFX_ImagePlane *Image,
N                  eGFX_Box *Box,
N                  eGFX_PixelState PS);
N
Nvoid eGFX_DrawVline(eGFX_ImagePlane *Image,
N                    int16_t YStart,
N                    int16_t YStop,
N                    int16_t X,
N                    eGFX_PixelState PS);
N
Nvoid eGFX_DrawLine(eGFX_ImagePlane *Image,
N                   int16_t X1,
N                   int16_t Y1,
N                   int16_t X2,
N                   int16_t Y2,
N                   eGFX_PixelState PS);
N
Nvoid eGFX_DrawListPrimitive(eGFX_ImagePlane *Image,
N                            eGFX_ListPrimitive *LP ,
N                            eGFX_PixelState PS);
N
Nvoid eGFX_DrawScaledListPrimitive(eGFX_ImagePlane *Image,
N                                  eGFX_ListPrimitive *LP ,
N                                  FIXED_7_8 Scale,
N                                  eGFX_PixelState PS);
N
Nvoid eGFX_DrawRotatedListPrimitive(eGFX_ImagePlane *Image,
N                                   eGFX_ListPrimitive *LP ,
N                                   uint8_t Angle,
N                                   eGFX_PixelState PS);
N
Nvoid eGFX_DrawScaledRotatedListPrimitive(eGFX_ImagePlane *Image,
N        eGFX_ListPrimitive *LP ,
N        uint8_t Angle,
N        FIXED_7_8 Scale,
N        eGFX_PixelState PS);
N
Nvoid eGFX_DrawCircle(eGFX_ImagePlane *RC,
N                     int16_t x0,
N                     int16_t y0,
N                     int16_t radius,
N                     eGFX_PixelState PS);
N
Nvoid eGFX_DrawFilledCircle(eGFX_ImagePlane *RC,
N	int16_t x0,
N	int16_t y0,
N	int16_t radius,
N	eGFX_PixelState PS);
N
N
N
N/***
N *       _____ _        _                ____                       _   _
N *      / ____| |      (_)              / __ \                     | | (_)
N *     | (___ | |_ _ __ _ _ __   __ _  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *      \___ \| __| '__| | '_ \ / _` | | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *      ____) | |_| |  | | | | | (_| | | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_____/ \__|_|  |_|_| |_|\__, |  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                               __/ |        | |
N *                              |___/         |_|
N */
N
Nint16_t eGFX_ScaledDrawCharacter(eGFX_ImagePlane *Image,
N                                 int16_t StartX,
N                                 int16_t StartY,
N                                 uint8_t Character,
N                                 const eGFX_Font *MyFont,
N                                 float ScaleFactor);
N
Nint16_t eGFX_DrawCharacter(eGFX_ImagePlane *Image,
N                           int16_t StartX,
N                           int16_t StartY,
N                           uint8_t Character,
N                           const eGFX_Font *MyFont);
N
Nint16_t eGFX_DrawCharacterFaded(eGFX_ImagePlane *Image,
N                           int16_t StartX,
N                           int16_t StartY,
N                           uint8_t Character,
N                           const eGFX_Font *MyFont,
N                           eGFX_PixelState PS);
N
Nint16_t eGFX_DrawCharacterShaded(eGFX_ImagePlane *Image,
N									int16_t StartX,
N									int16_t StartY,
N									uint8_t Character,
N									const eGFX_Font *MyFont,
N									float Shading);
N
N
Nint16_t eGFX_GetStringWidth(char *String,
N                            const eGFX_Font *MyFont);
N
Nint16_t eGFX_GetStringWidth_CustomSpacing(char *String,
N											const eGFX_Font *MyFont,
N											uint16_t Spacing);
N
N
Nvoid eGFX_DrawHorizontalCenteredString(eGFX_ImagePlane *Image,
N                                       int16_t StartY,
N                                       char *String,
N                                       const eGFX_Font *MyFont);
N
Nint16_t eGFX_DrawRightAlignedCenteredString_CustomSpacing(eGFX_ImagePlane *Image,
N        int16_t StartY,
N        char *String,
N        const eGFX_Font *MyFont,
N        uint16_t CustomCharacterSpacing,
N        int16_t RightSideBuffer);
N
Nvoid eGFX_DrawHorizontalCenteredString_CustomSpacing(eGFX_ImagePlane *Image,
N        int16_t StartY,
N        char *String,
N        const eGFX_Font *MyFont,
N        uint16_t Spacing);
N
Nvoid eGFX_ScaledDrawString(eGFX_ImagePlane *Image,
N                           int16_t StartX,
N                           int16_t StartY,
N                           char *String,
N                           const eGFX_Font *MyFont,
N                           float ScaleFactor);
N
Nint16_t  eGFX_DrawStringFaded(eGFX_ImagePlane *Image,
N						 char *String,
N                         int16_t StartX,
N                         int16_t StartY,
N                         const eGFX_Font *MyFont,
N						eGFX_PixelState PS
N                         );
N
N
Nint16_t  eGFX_DrawStringShaded(eGFX_ImagePlane *Image,
N								char *String,
N								int16_t StartX,
N								int16_t StartY,
N								const eGFX_Font *MyFont,
N								float Shading
N								);
N
Nvoid eGFX_ScaledDrawString_CustomSpacing(eGFX_ImagePlane *Image,
N        int16_t StartX,
N        int16_t StartY,
N        char *String,
N        const eGFX_Font *MyFont,
N        float ScaleFactor ,
N        uint16_t Spacing);
N
Nint16_t  eGFX_DrawString(eGFX_ImagePlane *Image,
N						char * String,
N                         int16_t StartX,
N                         int16_t StartY,
N
N                         const eGFX_Font *MyFont
N                         );
N
Nint16_t  eGFX_printf(eGFX_ImagePlane *Image,
N                     int16_t StartX,
N                     int16_t StartY,
N                     const eGFX_Font *MyFont,
N                     
N                     char *FormatString,...);
N
Nint16_t eGFX_DrawString_CustomSpacing(eGFX_ImagePlane *Image,
N                                      int16_t StartX,
N                                      int16_t StartY,
N                                      char *String,
N                                      const eGFX_Font *MyFont,uint16_t Spacing);
N                                      
Nint16_t  eGFX_printf_Colored(eGFX_ImagePlane *Image,
N                     int16_t StartX,
N                     int16_t StartY,
N                     const eGFX_Font *MyFont,
N											uint32_t Color,
N                     char *FormatString,...);
N
Nint16_t  eGFX_printf_HorizontalCentered_Colored(eGFX_ImagePlane *Image,
N                                         int16_t StartY,
N                                        const eGFX_Font *MyFont,
N                                        uint32_t Color,
N                                        char *FormatString,...);
N/***
N*      _____  _                     ____                       _   _
N*     |  __ \| |                   / __ \                     | | (_)
N*     | |__) | | __ _ _ __   ___  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N*     |  ___/| |/ _` | '_ \ / _ \ | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N*     | |    | | (_| | | | |  __/ | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N*     |_|    |_|\__,_|_| |_|\___|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N*                                        | |
N*                                        |_|
N*/
N
Nvoid eGFX_Blit(eGFX_ImagePlane *Destination,
N               int16_t x,
N               int16_t y,
N               const eGFX_ImagePlane *Sprite);
N
Nvoid eGFX_CenteredBlit(eGFX_ImagePlane *Destination,
N			int16_t x,
N			int16_t y,
N			const eGFX_ImagePlane *Sprite);
N
Nvoid eGFX_BlitFaded(eGFX_ImagePlane *Destination,
N               int16_t x,
N               int16_t y,
N               const eGFX_ImagePlane *Sprite,
N               eGFX_PixelState PS);
N
Nvoid eGFX_BlitShaded(eGFX_ImagePlane *Destination,
N					int16_t x,
N					int16_t y,
N					const eGFX_ImagePlane *Sprite,
N					float Shading);
N                    
Nvoid eGFX_BlitColored(eGFX_ImagePlane *Destination,
N                    int16_t x,
N                    int16_t y,
N                    const eGFX_ImagePlane *Sprite,
N                    uint32_t Color);
N
Nvoid eGFX_ScaledBlit(eGFX_ImagePlane *Destination,
N                     int16_t x,
N                     int16_t y,
N                     const eGFX_ImagePlane *Sprite,
N                     float ScaleFactor);
N
Nuint8_t eGFX_GetBitFromArray(uint8_t *DataArray,uint16_t Bit);
N
N
Nuint8_t eGFX_ImagePlane_GetByte(eGFX_ImagePlane   *Image,
N                                uint16_t X,
N                                uint16_t Y);
N
N
Nvoid eGFX_ImagePlaneInit(eGFX_ImagePlane   *Image, uint8_t * Store, int16_t SizeX, int16_t SizeY, uint8_t Type);
N
Nvoid eGFX_ImagePlane_Clear(eGFX_ImagePlane   *Image);
N
N
N
N/***
N*                     _                 _                        _____ _____
N*         /\         (_)               | |                 /\   |  __ \_   _|
N*        /  \   _ __  _ _ __ ___   __ _| |_ ___  _ __     /  \  | |__) || |
N*       / /\ \ | '_ \| | '_ ` _ \ / _` | __/ _ \| '__|   / /\ \ |  ___/ | |
N*      / ____ \| | | | | | | | | | (_| | || (_) | |     / ____ \| |    _| |_
N*     /_/    \_\_| |_|_|_| |_| |_|\__,_|\__\___/|_|    /_/    \_\_|   |_____|
N*
N*
N*/
N
N//Call this in the main loop.   Animators will be stepped at the rate that this is called!
Nvoid eGFX_ProcessAnimators(void);
N
N//Adds an animator object to the list.  returns TRUE if successful.
Nuint32_t eGFX_AddAnimator(void * Animator);
N
N//Clears all animators from the list
Nvoid eGFX_ClearAnimators(void);
N
N//Gets the number of animator objects in the list
Nuint32_t eGFX_GetAnimatorCount(void);
N
N//Returns True if the animator is complete
Nuint32_t eGFX_AnimatorIsComplete(void * A);
N
N//returns TRUE if all of the animators are complete
Nuint32_t eGFX_AnimatorsAreComplete(void);
N
N//Pauses all the animators (sets the state to inactive)
Nvoid eGFX_PauseAnimators(void);
N
N//Starts all the Animators in the list.  (Sets the State to Active)
Nvoid eGFX_StartAnimators(void);
N
N//Resets and Animator to step 0 and starts it again.
Nvoid eGFX_ResetAnimator(void * A);
N
N//Resets and restarts all animators
Nvoid eGFX_ResetAnimators(void);
N
N/***
N*      ___     _     _   ___   ___ _            _
N*     | _ \___(_)_ _| |_| __| | _ |_)___ ___ __| |_
N*     |  _/ _ \ | ' \  _| _|  | _ \ (_-</ -_) _|  _|
N*     |_| \___/_|_||_\__|_|   |___/_/__/\___\__|\__|
N*
N*/
N
N//Initializes  a point bisect animator.  It does not add it to the list
N//returns true if successful, false if not
Nuint32_t eGFX_InitPointF_BisectAnimator(  eGFX_PointF_BisectAnimator *P,
N										eGFX_PointF Target,
N										eGFX_PointF *Current,
N										uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N										float FractionalBisect		//The amount of percentage of the distance the point should move each step.   Range is 0 to 1.0.    values of 0 or less will map to 0.5.   Value of 1 or greater will map to 0.5
N);
N
N//Initializes and adds a point bisect animator to the list.
N//returns true if successful, false if not
Nuint32_t eGFX_AddPointF_BisectAnimator(   eGFX_PointF_BisectAnimator *P,
N										eGFX_PointF Target,
N										eGFX_PointF *Current,
N										uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N										float FractionalBisect //The amount of percentage of the distance the point should move each step.   Range is 0 to 1.0.    values of 0 or less will map to 0.5.   Value of 1 or greater will map to 0.5
N										);
N
Nvoid eGFX_ProcessPointF_BisectAnimator(eGFX_PointF_BisectAnimator *P);
N
N
N/***
N*      ___          _          ___   ___ _            _
N*     / __| __ __ _| |__ _ _ _| __| | _ |_)___ ___ __| |_
N*     \__ \/ _/ _` | / _` | '_| _|  | _ \ (_-</ -_) _|  _|
N*     |___/\__\__,_|_\__,_|_| |_|   |___/_/__/\___\__|\__|
N*
N*/
N
N//Initializes the data struct
Nuint32_t eGFX_InitScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P,
N	float Target,
N	float *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float FractionalBisect);
N
Nuint32_t eGFX_AddScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P,
N	float Target,
N	float *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float FractionalBisect);
N
N
Nvoid eGFX_ProcessScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P);
N
N
N
N
N/***
N*      ___          _            _    _
N*     / __| __ __ _| |__ _ _ _  | |  (_)_ _  ___ __ _ _ _
N*     \__ \/ _/ _` | / _` | '_| | |__| | ' \/ -_) _` | '_|
N*     |___/\__\__,_|_\__,_|_|   |____|_|_||_\___\__,_|_|
N*
N*/
N
N//Initializes the data struct
Nuint32_t eGFX_InitScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P,
N										float Target,
N										float *Current,
N										uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N										float Increment
N										);
N
N
N
N//Initializes and adds a scalarf linear animator and adds it to the list
N//returns true if successful, false if not
Nuint32_t eGFX_AddScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P,
N										float Target,
N										float *Current,
N										uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N										float Increment
N										);
N
N										
Nvoid eGFX_ProcessScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P);
N
N
N/***
N*      ___     _     _   ___   _    _
N*     | _ \___(_)_ _| |_| __| | |  (_)_ _  ___ __ _ _ _
N*     |  _/ _ \ | ' \  _| _|  | |__| | ' \/ -_) _` | '_|
N*     |_| \___/_|_||_\__|_|   |____|_|_||_\___\__,_|_|
N*
N*/
N
N//Initializes the data struct
Nuint32_t eGFX_InitPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P,
N	eGFX_PointF Target,
N	eGFX_PointF *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float IncrementX,
N	float IncrementY
N	);
N
N
N
N//Initializes and adds a scalarf linear animator and adds it to the list
N//returns true if successful, false if not
Nuint32_t eGFX_AddPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P,
N	eGFX_PointF Target,
N	eGFX_PointF *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float IncrementX,
N	float IncrementY
N	);
N
N
Nvoid eGFX_ProcessPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P);
N
N
N
N
N
N										
N/***
N *       ____  ____       _ ______ _____ _______            _____ _____ 
N *      / __ \|  _ \     | |  ____/ ____|__   __|     /\   |  __ \_   _|
N *     | |  | | |_) |    | | |__ | |       | |       /  \  | |__) || |  
N *     | |  | |  _ < _   | |  __|| |       | |      / /\ \ |  ___/ | |  
N *     | |__| | |_) | |__| | |___| |____   | |     / ____ \| |    _| |_ 
N *      \____/|____/ \____/|______\_____|  |_|    /_/    \_\_|   |_____|
N *                                                                      
N *                                                                      
N */
N		
N//Call this when you are ready to draw all the objects on the list
Nvoid eGFX_DrawObjects(eGFX_ImagePlane * Image);
N
N//Adds a eGFX object to the list
Nuint32_t eGFX_AddObject(void * Object);
N
N//Clears all objects from the list
Nvoid eGFX_ClearObjects(void);
N
N//Gets the number of objects in the object list
Nuint32_t eGFX_GetAnimatorCount(void);
N
N//Disables rendering/processing of the object
Nvoid eGFX_DisableObject(void * Object);
N
N//enable rendering/processing of the object
Nvoid eGFX_EnableObject(void * Object);
N
N/***
N*      _____        _   ___
N*     |_   _|____ _| |_| __|
N*       | |/ -_) \ /  _| _|
N*       |_|\___/_\_\\__|_|
N*
N*/
N
N//Draws a TextF object onto an image Plane
Nvoid eGFX_DrawObject_TextF(eGFX_ImagePlane * Image, eGFX_Obj_TextF *TextF_Object);
N
N//Initializes a TextF object
Nvoid eGFX_InitObjectTextF(eGFX_Obj_TextF * TF,
N							eGFX_PointF Position,
N							eGFX_Font *Font,
N							char * String
N							);	
N
N//Initializes a TextF object and also adds it to the current draw list
Nvoid eGFX_AddObjectTextF(eGFX_Obj_TextF * TF,
N						eGFX_PointF Position,
N						eGFX_Font *Font,
N						char * String
N						);
N
N/***
N*      ___ _            _        _   _____        _   ___
N*     / __| |_  __ _ __| |___ __| | |_   _|____ _| |_| __|
N*     \__ \ ' \/ _` / _` / -_) _` |   | |/ -_) \ /  _| _|
N*     |___/_||_\__,_\__,_\___\__,_|   |_|\___/_\_\\__|_|
N*
N*/
N
Nvoid eGFX_InitObjectShadedTextF(eGFX_Obj_ShadedTextF * TF,
N	eGFX_PointF Position,
N	eGFX_Font *Font,
N	char * String,
N	float Shading
N	);
N
N
Nvoid eGFX_AddObjectShadedTextF(eGFX_Obj_ShadedTextF * TF,
N	eGFX_PointF Position,
N	eGFX_Font *Font,
N	char * String,
N	float Shading
N	);
N
Nvoid	eGFX_DrawObject_ShadedTextF(eGFX_ImagePlane * Image, eGFX_Obj_ShadedTextF *ShadedTextF_Object);
N
N						
N/***
N*      _    _          ___
N*     | |  (_)_ _  ___| __|
N*     | |__| | ' \/ -_) _|
N*     |____|_|_||_\___|_|
N*
N*/
N
N//Initializes a LineF object
Nvoid eGFX_InitObjectLineF(eGFX_Obj_LineF * LF,
N	eGFX_PointF Start,
N	eGFX_PointF End,
N	eGFX_PixelState PS
N	);
N
N
N//Initializes a LineF object and also adds it to the current draw list
Nvoid eGFX_AddObjectLineF(eGFX_Obj_LineF * LF,
N	eGFX_PointF Start,
N	eGFX_PointF End,
N	eGFX_PixelState PS
N	);
N
N
N//Draws a LineF object onto an image Plane
Nvoid	eGFX_DrawObject_LineF(eGFX_ImagePlane * Image, eGFX_Obj_LineF *LineF_Object);
N
N/***
N*      ___          _ _       ___
N*     / __|_ __ _ _(_) |_ ___| __|
N*     \__ \ '_ \ '_| |  _/ -_) _|
N*     |___/ .__/_| |_|\__\___|_|
N*         |_|
N*/
N
N//Initializes a SpriteF object
Nvoid eGFX_InitObjectSpriteF(eGFX_Obj_SpriteF * S,
N							eGFX_PointF Position,
N							eGFX_ImagePlane *	Sprite
N							);
N
N//Initializes a SpriteF object and adds it to the object list
Nvoid eGFX_AddObjectSpriteF(eGFX_Obj_SpriteF * S,
N							eGFX_PointF Position,
N							eGFX_ImagePlane *	Sprite
N							);
N
N//draws a spritef onto an image plane
Nvoid	eGFX_DrawObject_SpriteF(eGFX_ImagePlane * Image, eGFX_Obj_SpriteF *SpriteF_Object);
N
N/***
N*      ___          _ _       ___   ___          _        _
N*     / __|_ __ _ _(_) |_ ___| __| / __| __ __ _| |___ __| |
N*     \__ \ '_ \ '_| |  _/ -_) _|  \__ \/ _/ _` | / -_) _` |
N*     |___/ .__/_| |_|\__\___|_|   |___/\__\__,_|_\___\__,_|
N*         |_|
N*/
N
N//Initializes a scaled sprited object
Nvoid eGFX_InitObjectScaledSpriteF(eGFX_Obj_ScaledSpriteF * S,
N	eGFX_PointF Position,
N	eGFX_ImagePlane *	Sprite,
N	float Scale
N	);
N
N
N//Initializes a scaled sprited object and adds it to the object list
Nvoid eGFX_AddObjectScaledSpriteF(eGFX_Obj_ScaledSpriteF * S,
N	eGFX_PointF Position,
N	eGFX_ImagePlane *	Sprite,
N	float Scale
N	);
N
N//draws a scaled spritef onto an image plane
Nvoid	eGFX_DrawObject_ScaledSpriteF(eGFX_ImagePlane * Image, eGFX_Obj_ScaledSpriteF *SpriteF_Object);
N
N
N/***
N*       ___          ___
N*      | _ ) _____ _| __|
N*      | _ \/ _ \ \ / _|
N*      |___/\___/_\_\_|
N*
N*/
N
N
Nvoid eGFX_InitObjectBoxF(eGFX_Obj_BoxF * BF,
N	eGFX_PointF P1,
N	eGFX_PointF P2,
N	eGFX_PixelState PS,
N	uint8_t BoxF_RenderOption
N	);
N
N
Nvoid eGFX_AddObjectBoxF(eGFX_Obj_BoxF * BF,
N	eGFX_PointF P1,
N	eGFX_PointF P2,
N	eGFX_PixelState PS,
N	uint8_t BoxF_RenderOption
N	);
N
N
Nvoid	eGFX_DrawObject_BoxF(eGFX_ImagePlane * Image, eGFX_Obj_BoxF *BoxF_Object);
N
N
N/***
N*       ___ _        _     ___
N*      / __(_)_ _ __| |___| __|
N*     | (__| | '_/ _| / -_) _|
N*      \___|_|_| \__|_\___|_|
N*
N*/
N
N
Nvoid eGFX_InitObjectCircleF(eGFX_Obj_CircleF * CF,
N	eGFX_PointF Position,
N	float Radius,
N	eGFX_PixelState PS,
N	uint8_t CircleF_RenderOption
N	);
N
N
Nvoid eGFX_AddObjectCircleF(eGFX_Obj_CircleF * CF,
N	eGFX_PointF Position,
N	float Radius,
N	eGFX_PixelState PS,
N	uint8_t CircleF_RenderOption
N	);
N
Nvoid	eGFX_DrawObject_CircleF(eGFX_ImagePlane * Image, eGFX_Obj_CircleF *CircleF_Object);
N
N
N#endif
N
N
N#ifdef __cplusplus
S }
N#endif
N
L 3 "SRC\eGFX\eGFX.c" 2
N#include <stdio.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060019
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 4 "SRC\eGFX\eGFX.c" 2
N#include <stdarg.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 5 "SRC\eGFX\eGFX.c" 2
N#include <stdint.h>
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 7 "SRC\eGFX\eGFX.c" 2
N#include "math.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\math.h" 1
N/*
N * math.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.5
N * Copyright (C) Codemist Ltd., 1988
N * Copyright 1991-1998,2004-2006,2014 ARM Limited. All rights reserved
N */
N
N/*
N * RCS $Revision$ Codemist 0.03
N * Checkin $Date$
N * Revising $Author: statham $
N */
N
N/*
N * Parts of this file are based upon fdlibm:
N *
N * ====================================================
N * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
N *
N * Developed at SunSoft, a Sun Microsystems, Inc. business.
N * Permission to use, copy, modify, and distribute this
N * software is freely granted, provided that this notice
N * is preserved.
N * ====================================================
N */
N
N#ifndef __math_h
N#define __math_h
N#define __ARMCLIB_VERSION 5060019
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N/*
N * Some of these declarations are new in C99.  To access them in C++
N * you can use -D__USE_C99_MATH (or -D__USE_C99_ALL).
N */
N#ifndef __USE_C99_MATH
N  #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X  #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N    #define __USE_C99_MATH 1
N  #endif
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#ifdef __TARGET_ARCH_AARCH64
S# define _ARMABI_SOFTFP __declspec(__nothrow)
N#else
N# define _ARMABI_SOFTFP __declspec(__nothrow) __attribute__((__pcs__("aapcs")))
N# define __HAVE_LONGDOUBLE 1
N#endif
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#ifdef __FP_FENV_EXCEPTIONS
S# define _ARMABI_FPEXCEPT _ARMABI
N#else
N# define _ARMABI_FPEXCEPT _ARMABI __attribute__((const))
N#endif
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF inline
S#elif defined __GNUC__ || defined _USE_STATIC_INLINE
X#elif 0L || 0L
S#define _ARMABI_INLINE static __inline
S#define _ARMABI_INLINE_DEF static __inline
N#elif (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif (1L && 199901L <= 199901L)
N#define _ARMABI_INLINE inline
N#define _ARMABI_INLINE_DEF static inline
N#else
S#define _ARMABI_INLINE __inline
S#define _ARMABI_INLINE_DEF __inline
N#endif
N
N#ifdef __TARGET_ARCH_AARCH64
S#  define _SOFTFP
N#else
N#  define _SOFTFP __attribute__((__pcs__("aapcs")))
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain the nans function, as well as the
N    * FP_NANS and FP_NANQ classification macros.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
N/*
N * Macros for our inline functions down below.
N * unsigned& __FLT(float x) - returns the bit pattern of x
N * unsigned& __HI(double x) - returns the bit pattern of the high part of x
N *                            (high part has exponent & sign bit in it)
N * unsigned& __LO(double x) - returns the bit pattern of the low part of x
N *
N * We can assign to __FLT, __HI, and __LO and the appropriate bits get set in
N * the floating point variable used.
N *
N * __HI & __LO are affected by the endianness and the target FPU.
N */
N#define __FLT(x) (*(unsigned *)&(x))
N#if defined(__ARM_BIG_ENDIAN) || defined(__BIG_ENDIAN)
X#if 0L || 0L
S#  define __LO(x) (*(1 + (unsigned *)&(x)))
S#  define __HI(x) (*(unsigned *)&(x))
N#else /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N#  define __HI(x) (*(1 + (unsigned *)&(x)))
N#  define __LO(x) (*(unsigned *)&(x))
N#endif /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N
N#   ifndef __MATH_DECLS
N#   define __MATH_DECLS
N
N
N/*
N * A set of functions that we don't actually want to put in the standard
N * namespace ever.  These are all called by the C99 macros.  As they're
N * not specified by any standard they can't belong in ::std::.  The
N * macro #defines are below amongst the standard function declarations.
N * We only include these if we actually need them later on
N */
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N#   ifdef __cplusplus
S      extern "C" {
N#   endif /* __cplusplus */
N
Nextern _SOFTFP unsigned __ARM_dcmp4(double /*x*/, double /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double  , double  );
Nextern _SOFTFP unsigned __ARM_fcmp4(float /*x*/, float /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float  , float  );
N    /*
N     * Compare x and y and return the CPSR in r0.  These means we can test for
N     * result types with bit pattern matching.
N     *
N     * These are a copy of the declarations in rt_fp.h keep in sync.
N     */
N
Nextern _ARMABI_SOFTFP int __ARM_fpclassifyf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float  );
Nextern _ARMABI_SOFTFP int __ARM_fpclassify(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double  );
N    /* Classify x into NaN, infinite, normal, subnormal, zero */
N    /* Used by fpclassify macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinitef(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
N{
N    return ((__FLT(__x) >> 23) & 0xff) != 0xff;
X    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinite(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
N{
N    return ((__HI(__x) >> 20) & 0x7ff) != 0x7ff;
X    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
N}
N    /* Return 1 if __x is finite, 0 otherwise */
N    /* Used by isfinite macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinff(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
N{
N    return (__FLT(__x) << 1) == 0xff000000;
X    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinf(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
N{
N    return ((__HI(__x) << 1) == 0xffe00000) && (__LO(__x) == 0);
X    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
N}
N    /* Return 1 if __x is infinite, 0 otherwise */
N    /* Used by isinf macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreaterf(float __x, float __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
N{
N    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreater(double __x, double __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
N{
N    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N    /*
N     * Compare __x and __y and return 1 if __x < __y or __x > __y, 0 otherwise
N     * Used by islessgreater macro
N     */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnanf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
N{
N    return (0x7f800000 - (__FLT(__x) & 0x7fffffff)) >> 31;
X    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnan(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
N{
N    unsigned __xf = __HI(__x) | ((__LO(__x) == 0) ? 0 : 1);
X    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
N    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
N}
N    /* Return 1 if __x is a NaN, 0 otherwise */
N    /* Used by isnan macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormalf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
N{
N    unsigned __xe = (__FLT(__x) >> 23) & 0xff;
X    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
N    return (__xe != 0xff) && (__xe != 0);
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormal(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
N{
N    unsigned __xe = (__HI(__x) >> 20) & 0x7ff;
X    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
N    return (__xe != 0x7ff) && (__xe != 0);
N}
N    /* Return 1 if __x is a normalised number, 0 otherwise */
N    /* used by isnormal macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbitf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
N{
N    return __FLT(__x) >> 31;
X    return (*(unsigned *)&(__x)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbit(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
N{
N    return __HI(__x) >> 31;
X    return (*(1 + (unsigned *)&(__x))) >> 31;
N}
N    /* Return signbit of __x */
N    /* Used by signbit macro */
N
N#   ifdef __cplusplus
S      } /* extern "C" */
N#   endif /* __cplusplus */
N#endif /* Strict ANSI */
N
N#   undef __CLIBNS
N
N#   ifdef __cplusplus
S      namespace std {
S#       define __CLIBNS ::std::
S        extern "C" {
N#   else
N#       define __CLIBNS
N#   endif  /* __cplusplus */
N
N
N#ifndef __has_builtin
N  #define __has_builtin(x) 0
N#endif
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N  /* C99 additions */
N  typedef float float_t;
N  typedef double double_t;
N#if __has_builtin(__builtin_inf)
X#if 0
S#   define HUGE_VALF __builtin_inff()
S#   define HUGE_VALL __builtin_infl()
S#   define INFINITY __builtin_inff()
S#   define NAN __builtin_nanf("")
N# else
N#   define HUGE_VALF ((float)__INFINITY__)
N#   define HUGE_VALL ((long double)__INFINITY__)
N#   define INFINITY ((float)__INFINITY__)
N#   define NAN (__ESCAPE__(0f_7FC00000))
N#endif
N
N#   define MATH_ERRNO 1
N#   define MATH_ERREXCEPT 2
Nextern const int math_errhandling;
N#endif
N#if __has_builtin(__builtin_inf)
X#if 0
S# define HUGE_VAL __builtin_inf()
N#else
N# define HUGE_VAL ((double)__INFINITY__)
N#endif
N
Nextern _ARMABI double acos(double /*x*/);
Xextern __declspec(__nothrow) double acos(double  );
N   /* computes the principal value of the arc cosine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* Returns: the arc cosine in the range 0 to Pi. */
Nextern _ARMABI double asin(double /*x*/);
Xextern __declspec(__nothrow) double asin(double  );
N   /* computes the principal value of the arc sine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* and -HUGE_VAL is returned. */
N   /* Returns: the arc sine in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI_PURE double atan(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double atan(double  );
N   /* computes the principal value of the arc tangent of x */
N   /* Returns: the arc tangent in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI double atan2(double /*y*/, double /*x*/);
Xextern __declspec(__nothrow) double atan2(double  , double  );
N   /* computes the principal value of the arc tangent of y/x, using the */
N   /* signs of both arguments to determine the quadrant of the return value */
N   /* a domain error occurs if both args are zero, and -HUGE_VAL returned. */
N   /* Returns: the arc tangent of y/x, in the range -Pi to Pi. */
N
Nextern _ARMABI double cos(double /*x*/);
Xextern __declspec(__nothrow) double cos(double  );
N   /* computes the cosine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the cosine value. */
Nextern _ARMABI double sin(double /*x*/);
Xextern __declspec(__nothrow) double sin(double  );
N   /* computes the sine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the sine value. */
N
Nextern void __use_accurate_range_reduction(void);
N   /* reference this to select the larger, slower, but more accurate */
N   /* range reduction in sin, cos and tan */
N
Nextern _ARMABI double tan(double /*x*/);
Xextern __declspec(__nothrow) double tan(double  );
N   /* computes the tangent of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance */
N   /* Returns: the tangent value. */
N   /*          if range error; returns HUGE_VAL. */
N
Nextern _ARMABI double cosh(double /*x*/);
Xextern __declspec(__nothrow) double cosh(double  );
N   /* computes the hyperbolic cosine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic cosine value. */
N   /*          if range error; returns HUGE_VAL. */
Nextern _ARMABI double sinh(double /*x*/);
Xextern __declspec(__nothrow) double sinh(double  );
N   /* computes the hyperbolic sine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic sine value. */
N   /*          if range error; returns -HUGE_VAL or HUGE_VAL depending */
N   /*          on the sign of the argument */
N
Nextern _ARMABI_PURE double tanh(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double tanh(double  );
N   /* computes the hyperbolic tangent of x. */
N   /* Returns: the hyperbolic tangent value. */
N
Nextern _ARMABI double exp(double /*x*/);
Xextern __declspec(__nothrow) double exp(double  );
N   /* computes the exponential function of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the exponential value. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
N
Nextern _ARMABI double frexp(double /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double frexp(double  , int *  ) __attribute__((__nonnull__(2)));
N   /* breaks a floating-point number into a normalised fraction and an */
N   /* integral power of 2. It stores the integer in the int object pointed */
N   /* to by exp. */
N   /* Returns: the value x, such that x is a double with magnitude in the */
N   /* interval 0.5 to 1.0 or zero, and value equals x times 2 raised to the */
N   /* power *exp. If value is zero, both parts of the result are zero. */
N
Nextern _ARMABI double ldexp(double /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) double ldexp(double  , int  );
N   /* multiplies a floating-point number by an integral power of 2. */
N   /* A range error may occur. */
N   /* Returns: the value of x times 2 raised to the power of exp. */
N   /*          if range error; HUGE_VAL is returned. */
Nextern _ARMABI double log(double /*x*/);
Xextern __declspec(__nothrow) double log(double  );
N   /* computes the natural logarithm of x. A domain error occurs if the */
N   /* argument is negative, and -HUGE_VAL is returned. A range error occurs */
N   /* if the argument is zero. */
N   /* Returns: the natural logarithm. */
N   /*          if range error; -HUGE_VAL is returned. */
Nextern _ARMABI double log10(double /*x*/);
Xextern __declspec(__nothrow) double log10(double  );
N   /* computes the base-ten logarithm of x. A domain error occurs if the */
N   /* argument is negative. A range error occurs if the argument is zero. */
N   /* Returns: the base-ten logarithm. */
Nextern _ARMABI double modf(double /*value*/, double * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double modf(double  , double *  ) __attribute__((__nonnull__(2)));
N   /* breaks the argument value into integral and fraction parts, each of */
N   /* which has the same sign as the argument. It stores the integral part */
N   /* as a double in the object pointed to by iptr. */
N   /* Returns: the signed fractional part of value. */
N
Nextern _ARMABI double pow(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double pow(double  , double  );
N   /* computes x raised to the power of y. A domain error occurs if x is */
N   /* zero and y is less than or equal to zero, or if x is negative and y */
N   /* is not an integer, and -HUGE_VAL returned. A range error may occur. */
N   /* Returns: the value of x raised to the power of y. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
Nextern _ARMABI double sqrt(double /*x*/);
Xextern __declspec(__nothrow) double sqrt(double  );
N   /* computes the non-negative square root of x. A domain error occurs */
N   /* if the argument is negative, and -HUGE_VAL returned. */
N   /* Returns: the value of the square root. */
N
N#if defined(__TARGET_FPU_VFP_DOUBLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !0L
S    _ARMABI_INLINE double _sqrt(double __x) { return __sqrt(__x); }
N#else
N    _ARMABI_INLINE double _sqrt(double __x) { return sqrt(__x); }
X    inline double _sqrt(double __x) { return sqrt(__x); }
N#endif
N#if defined(__TARGET_FPU_VFP_SINGLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 1L && !0L
N    _ARMABI_INLINE float _sqrtf(float __x) { return __sqrtf(__x); }
X    inline float _sqrtf(float __x) { return __sqrtf(__x); }
N#else
S    _ARMABI_INLINE float _sqrtf(float __x) { return (float)sqrt(__x); }
N#endif
N    /* With VFP, _sqrt and _sqrtf should expand inline as the native VFP square root
N     * instructions. They will not behave like the C sqrt() function, because
N     * they will report unusual values as IEEE exceptions (in fpmodes which
N     * support IEEE exceptions) rather than in errno. These function names
N     * are not specified in any standard. */
N
Nextern _ARMABI_PURE double ceil(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double ceil(double  );
N   /* computes the smallest integer not less than x. */
N   /* Returns: the smallest integer not less than x, expressed as a double. */
Nextern _ARMABI_PURE double fabs(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fabs(double  );
N   /* computes the absolute value of the floating-point number x. */
N   /* Returns: the absolute value of x. */
N
Nextern _ARMABI_PURE double floor(double /*d*/);
Xextern __declspec(__nothrow) __attribute__((const)) double floor(double  );
N   /* computes the largest integer not greater than x. */
N   /* Returns: the largest integer not greater than x, expressed as a double */
N
Nextern _ARMABI double fmod(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fmod(double  , double  );
N   /* computes the floating-point remainder of x/y. */
N   /* Returns: the value x - i * y, for some integer i such that, if y is */
N   /*          nonzero, the result has the same sign as x and magnitude */
N   /*          less than the magnitude of y. If y is zero, a domain error */
N   /*          occurs and -HUGE_VAL is returned. */
N
N    /* Additional Mathlib functions not defined by the ANSI standard.
N     * Not guaranteed, and not necessarily very well tested.
N     * C99 requires the user to include <math.h> to use these functions
N     * declaring them "by hand" is not sufficient
N     *
N     * The above statement is not completely true now.  Some of the above
N     * C99 functionality has been added as per the Standard, and (where
N     * necessary) old Mathlib functionality withdrawn/changed.  Before
N     * including this header #define __ENABLE_MATHLIB_LEGACY if you want to
N     * re-enable the legacy functionality.
N     */
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
Nextern _ARMABI double acosh(double /*x*/);
Xextern __declspec(__nothrow) double acosh(double  );
N    /*
N     * Inverse cosh. EDOM if argument < 1.0
N     */
Nextern _ARMABI double asinh(double /*x*/);
Xextern __declspec(__nothrow) double asinh(double  );
N    /*
N     * Inverse sinh.
N     */
Nextern _ARMABI double atanh(double /*x*/);
Xextern __declspec(__nothrow) double atanh(double  );
N    /*
N     * Inverse tanh. EDOM if |argument| > 1.0
N     */
Nextern _ARMABI double cbrt(double /*x*/);
Xextern __declspec(__nothrow) double cbrt(double  );
N    /*
N     * Cube root.
N     */
N_ARMABI_INLINE _ARMABI_PURE double copysign(double __x, double __y)
Xinline __declspec(__nothrow) __attribute__((const)) double copysign(double __x, double __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __HI(__x) = (__HI(__x) & 0x7fffffff) | (__HI(__y) & 0x80000000);
X    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
N    return __x;
N}
N_ARMABI_INLINE _ARMABI_PURE float copysignf(float __x, float __y)
Xinline __declspec(__nothrow) __attribute__((const)) float copysignf(float __x, float __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __FLT(__x) = (__FLT(__x) & 0x7fffffff) | (__FLT(__y) & 0x80000000);
X    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
N    return __x;
N}
Nextern _ARMABI double erf(double /*x*/);
Xextern __declspec(__nothrow) double erf(double  );
N    /*
N     * Error function. (2/sqrt(pi)) * integral from 0 to x of exp(-t*t) dt.
N     */
Nextern _ARMABI double erfc(double /*x*/);
Xextern __declspec(__nothrow) double erfc(double  );
N    /*
N     * 1-erf(x). (More accurate than just coding 1-erf(x), for large x.)
N     */
Nextern _ARMABI double expm1(double /*x*/);
Xextern __declspec(__nothrow) double expm1(double  );
N    /*
N     * exp(x)-1. (More accurate than just coding exp(x)-1, for small x.)
N     */
N#define fpclassify(x) \
N    ((sizeof(x) == sizeof(float)) ? \
N        __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
X#define fpclassify(x)     ((sizeof(x) == sizeof(float)) ?         __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
N    /*
N     * Classify a floating point number into one of the following values:
N     */
N#define FP_ZERO         (0)
N#define FP_SUBNORMAL    (4)
N#define FP_NORMAL       (5)
N#define FP_INFINITE     (3)
N#define FP_NAN          (7)
N
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
S/* 
S * Note that we'll never classify a number as FP_NAN, as all NaNs will 
S * be either FP_NANQ or FP_NANS
S */
S#  define FP_NANQ       (8)
S#  define FP_NANS       (9)
N#endif
N
N
Nextern _ARMABI double hypot(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double hypot(double  , double  );
N    /*
N     * sqrt(x*x+y*y), ie the length of the vector (x,y) or the
N     * hypotenuse of a right triangle whose other two sides are x
N     * and y. Won't overflow unless the _answer_ is too big, even
N     * if the intermediate x*x+y*y is too big.
N     */
Nextern _ARMABI int ilogb(double /*x*/);
Xextern __declspec(__nothrow) int ilogb(double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
Nextern _ARMABI int ilogbf(float /*x*/);
Xextern __declspec(__nothrow) int ilogbf(float  );
N    /*
N     * Like ilogb but takes a float
N     */
Nextern _ARMABI int ilogbl(long double /*x*/);
Xextern __declspec(__nothrow) int ilogbl(long double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
N#define FP_ILOGB0   (-0x7fffffff) /* ilogb(0) == -INT_MAX */
N#define FP_ILOGBNAN ( 0x80000000) /* ilogb(NAN) == INT_MIN */
N
N#define isfinite(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isfinitef(x) \
N        : __ARM_isfinite(x))
X#define isfinite(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isfinitef(x)         : __ARM_isfinite(x))
N    /*
N     * Returns true if x is a finite number, size independent.
N     */
N
N#define isgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
X#define isgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
N    /*
N     * Returns true if x > y, throws no exceptions except on Signaling NaNs
N     *
N     * We want the C not set but the Z bit clear, V must be clear
N     */
N
N#define isgreaterequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
X#define isgreaterequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
N    /*
N     * Returns true if x >= y, throws no exceptions except on Signaling NaNs
N     *
N     * We just need to see if the C bit is set or not and ensure V clear
N     */
N
N#define isinf(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isinff(x) \
N        : __ARM_isinf(x))
X#define isinf(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isinff(x)         : __ARM_isinf(x))
N    /*
N     * Returns true if x is an infinity, size independent.
N     */
N
N#define isless(x, y)  \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
X#define isless(x, y)      (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
N    /*
N     * Returns true if x < y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than if N is set, V clear
N     */
N
N#define islessequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0) \
N        : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
X#define islessequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0)         : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
N    /*
N     * Returns true if x <= y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than or equal if one of N or Z is set, V clear
N     */
N
N#define islessgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? __ARM_islessgreaterf((x), (y)) \
N        : __ARM_islessgreater((x), (y)))
X#define islessgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? __ARM_islessgreaterf((x), (y))         : __ARM_islessgreater((x), (y)))
N    /*
N     * Returns true if x <> y, throws no exceptions except on Signaling NaNs
N     * Unfortunately this test is too complicated to do in a macro without
N     * evaluating x & y twice.  Shame really...
N     */
N
N#define isnan(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnanf(x) \
N        : __ARM_isnan(x))
X#define isnan(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnanf(x)         : __ARM_isnan(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isnormal(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnormalf(x) \
N        : __ARM_isnormal(x))
X#define isnormal(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnormalf(x)         : __ARM_isnormal(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isunordered(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
X#define isunordered(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000)         : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
N    /*
N     * Returns true if x ? y, throws no exceptions except on Signaling NaNs
N     * Unordered occurs if and only if the V bit is set
N     */
N
Nextern _ARMABI double lgamma (double /*x*/);
Xextern __declspec(__nothrow) double lgamma (double  );
N    /*
N     * The log of the absolute value of the gamma function of x. The sign
N     * of the gamma function of x is returned in the global `signgam'.
N     */
Nextern _ARMABI double log1p(double /*x*/);
Xextern __declspec(__nothrow) double log1p(double  );
N    /*
N     * log(1+x). (More accurate than just coding log(1+x), for small x.)
N     */
Nextern _ARMABI double logb(double /*x*/);
Xextern __declspec(__nothrow) double logb(double  );
N    /*
N     * Like ilogb but returns a double.
N     */
Nextern _ARMABI float logbf(float /*x*/);
Xextern __declspec(__nothrow) float logbf(float  );
N    /*
N     * Like logb but takes and returns float
N     */
Nextern _ARMABI long double logbl(long double /*x*/);
Xextern __declspec(__nothrow) long double logbl(long double  );
N    /*
N     * Like logb but takes and returns long double
N     */
Nextern _ARMABI double nextafter(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double nextafter(double  , double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nextafterf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float nextafterf(float  , float  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nextafterl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nextafterl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double nexttoward(double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) double nexttoward(double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nexttowardf(float /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) float nexttowardf(float  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nexttowardl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nexttowardl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double remainder(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double remainder(double  , double  );
N    /*
N     * Returns the remainder of x by y, in the IEEE 754 sense.
N     */
Nextern _ARMABI_FPEXCEPT double rint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double rint(double  );
N    /*
N     * Rounds x to an integer, in the IEEE 754 sense.
N     */
Nextern _ARMABI double scalbln(double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) double scalbln(double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalblnf(float /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) float scalblnf(float  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalblnl(long double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) long double scalblnl(long double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI double scalbn(double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) double scalbn(double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalbnf(float /*x*/, int /*n*/);
Xextern __declspec(__nothrow) float scalbnf(float  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalbnl(long double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) long double scalbnl(long double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
N#define signbit(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_signbitf(x) \
N        : __ARM_signbit(x))
X#define signbit(x)     ((sizeof(x) == sizeof(float))         ? __ARM_signbitf(x)         : __ARM_signbit(x))
N    /*
N     * Returns the signbit of x, size independent macro
N     */
N#endif
N
N/* C99 float versions of functions.  math.h has always reserved these
N   identifiers for this purpose (7.13.4). */
Nextern _ARMABI_PURE float _fabsf(float); /* old ARM name */
Xextern __declspec(__nothrow) __attribute__((const)) float _fabsf(float);  
N_ARMABI_INLINE _ARMABI_PURE float fabsf(float __f) { return _fabsf(__f); }
Xinline __declspec(__nothrow) __attribute__((const)) float fabsf(float __f) { return _fabsf(__f); }
Nextern _ARMABI float sinf(float /*x*/);
Xextern __declspec(__nothrow) float sinf(float  );
Nextern _ARMABI float cosf(float /*x*/);
Xextern __declspec(__nothrow) float cosf(float  );
Nextern _ARMABI float tanf(float /*x*/);
Xextern __declspec(__nothrow) float tanf(float  );
Nextern _ARMABI float acosf(float /*x*/);
Xextern __declspec(__nothrow) float acosf(float  );
Nextern _ARMABI float asinf(float /*x*/);
Xextern __declspec(__nothrow) float asinf(float  );
Nextern _ARMABI float atanf(float /*x*/);
Xextern __declspec(__nothrow) float atanf(float  );
Nextern _ARMABI float atan2f(float /*y*/, float /*x*/);
Xextern __declspec(__nothrow) float atan2f(float  , float  );
Nextern _ARMABI float sinhf(float /*x*/);
Xextern __declspec(__nothrow) float sinhf(float  );
Nextern _ARMABI float coshf(float /*x*/);
Xextern __declspec(__nothrow) float coshf(float  );
Nextern _ARMABI float tanhf(float /*x*/);
Xextern __declspec(__nothrow) float tanhf(float  );
Nextern _ARMABI float expf(float /*x*/);
Xextern __declspec(__nothrow) float expf(float  );
Nextern _ARMABI float logf(float /*x*/);
Xextern __declspec(__nothrow) float logf(float  );
Nextern _ARMABI float log10f(float /*x*/);
Xextern __declspec(__nothrow) float log10f(float  );
Nextern _ARMABI float powf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float powf(float  , float  );
Nextern _ARMABI float sqrtf(float /*x*/);
Xextern __declspec(__nothrow) float sqrtf(float  );
Nextern _ARMABI float ldexpf(float /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) float ldexpf(float  , int  );
Nextern _ARMABI float frexpf(float /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float frexpf(float  , int *  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI_PURE float ceilf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float ceilf(float  );
Nextern _ARMABI_PURE float floorf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float floorf(float  );
Nextern _ARMABI float fmodf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fmodf(float  , float  );
Nextern _ARMABI float modff(float /*value*/, float * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float modff(float  , float *  ) __attribute__((__nonnull__(2)));
N
N/* C99 long double versions of functions. */
N/* (also need to have 'using' declarations below) */
N#define _ARMDEFLD1(f) \
N    _ARMABI long double f##l(long double /*x*/)
X#define _ARMDEFLD1(f)     _ARMABI long double f##l(long double  )
N
N#define _ARMDEFLD1P(f, T) \
N    _ARMABI long double f##l(long double /*x*/, T /*p*/)
X#define _ARMDEFLD1P(f, T)     _ARMABI long double f##l(long double  , T  )
N
N#define _ARMDEFLD2(f) \
N    _ARMABI long double f##l(long double /*x*/, long double /*y*/)
X#define _ARMDEFLD2(f)     _ARMABI long double f##l(long double  , long double  )
N
N/*
N * Long double versions of C89 functions can be defined
N * unconditionally, because C89 reserved these names in "future
N * library directions".
N */
N_ARMDEFLD1(acos);
X__declspec(__nothrow) long double acosl(long double );
N_ARMDEFLD1(asin);
X__declspec(__nothrow) long double asinl(long double );
N_ARMDEFLD1(atan);
X__declspec(__nothrow) long double atanl(long double );
N_ARMDEFLD2(atan2);
X__declspec(__nothrow) long double atan2l(long double , long double );
N_ARMDEFLD1(ceil);
X__declspec(__nothrow) long double ceill(long double );
N_ARMDEFLD1(cos);
X__declspec(__nothrow) long double cosl(long double );
N_ARMDEFLD1(cosh);
X__declspec(__nothrow) long double coshl(long double );
N_ARMDEFLD1(exp);
X__declspec(__nothrow) long double expl(long double );
N_ARMDEFLD1(fabs);
X__declspec(__nothrow) long double fabsl(long double );
N_ARMDEFLD1(floor);
X__declspec(__nothrow) long double floorl(long double );
N_ARMDEFLD2(fmod);
X__declspec(__nothrow) long double fmodl(long double , long double );
N_ARMDEFLD1P(frexp, int*) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
N_ARMDEFLD1P(ldexp, int);
X__declspec(__nothrow) long double ldexpl(long double , int );
N_ARMDEFLD1(log);
X__declspec(__nothrow) long double logl(long double );
N_ARMDEFLD1(log10);
X__declspec(__nothrow) long double log10l(long double );
N_ARMABI long double modfl(long double /*x*/, long double * /*p*/) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double modfl(long double  , long double *  ) __attribute__((__nonnull__(2)));
N_ARMDEFLD2(pow);
X__declspec(__nothrow) long double powl(long double , long double );
N_ARMDEFLD1(sin);
X__declspec(__nothrow) long double sinl(long double );
N_ARMDEFLD1(sinh);
X__declspec(__nothrow) long double sinhl(long double );
N_ARMDEFLD1(sqrt);
X__declspec(__nothrow) long double sqrtl(long double );
N_ARMDEFLD1(tan);
X__declspec(__nothrow) long double tanl(long double );
N_ARMDEFLD1(tanh);
X__declspec(__nothrow) long double tanhl(long double );
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
N/*
N * C99 float and long double versions of extra-C89 functions.
N */
Nextern _ARMABI float acoshf(float /*x*/);
Xextern __declspec(__nothrow) float acoshf(float  );
N_ARMDEFLD1(acosh);
X__declspec(__nothrow) long double acoshl(long double );
Nextern _ARMABI float asinhf(float /*x*/);
Xextern __declspec(__nothrow) float asinhf(float  );
N_ARMDEFLD1(asinh);
X__declspec(__nothrow) long double asinhl(long double );
Nextern _ARMABI float atanhf(float /*x*/);
Xextern __declspec(__nothrow) float atanhf(float  );
N_ARMDEFLD1(atanh);
X__declspec(__nothrow) long double atanhl(long double );
N_ARMDEFLD2(copysign);
X__declspec(__nothrow) long double copysignl(long double , long double );
Nextern _ARMABI float cbrtf(float /*x*/);
Xextern __declspec(__nothrow) float cbrtf(float  );
N_ARMDEFLD1(cbrt);
X__declspec(__nothrow) long double cbrtl(long double );
Nextern _ARMABI float erff(float /*x*/);
Xextern __declspec(__nothrow) float erff(float  );
N_ARMDEFLD1(erf);
X__declspec(__nothrow) long double erfl(long double );
Nextern _ARMABI float erfcf(float /*x*/);
Xextern __declspec(__nothrow) float erfcf(float  );
N_ARMDEFLD1(erfc);
X__declspec(__nothrow) long double erfcl(long double );
Nextern _ARMABI float expm1f(float /*x*/);
Xextern __declspec(__nothrow) float expm1f(float  );
N_ARMDEFLD1(expm1);
X__declspec(__nothrow) long double expm1l(long double );
Nextern _ARMABI float log1pf(float /*x*/);
Xextern __declspec(__nothrow) float log1pf(float  );
N_ARMDEFLD1(log1p);
X__declspec(__nothrow) long double log1pl(long double );
Nextern _ARMABI float hypotf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float hypotf(float  , float  );
N_ARMDEFLD2(hypot);
X__declspec(__nothrow) long double hypotl(long double , long double );
Nextern _ARMABI float lgammaf(float /*x*/);
Xextern __declspec(__nothrow) float lgammaf(float  );
N_ARMDEFLD1(lgamma);
X__declspec(__nothrow) long double lgammal(long double );
Nextern _ARMABI float remainderf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float remainderf(float  , float  );
N_ARMDEFLD2(remainder);
X__declspec(__nothrow) long double remainderl(long double , long double );
Nextern _ARMABI float rintf(float /*x*/);
Xextern __declspec(__nothrow) float rintf(float  );
N_ARMDEFLD1(rint);
X__declspec(__nothrow) long double rintl(long double );
N
N#endif
N
N#if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
X#if (0L && !0L) || 1L
N/*
N * Functions new in C99.
N */
Nextern _ARMABI double exp2(double /*x*/); /* * 2.^x. */
Xextern __declspec(__nothrow) double exp2(double  );  
Nextern _ARMABI float exp2f(float /*x*/);
Xextern __declspec(__nothrow) float exp2f(float  );
N_ARMDEFLD1(exp2);
X__declspec(__nothrow) long double exp2l(long double );
Nextern _ARMABI double fdim(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fdim(double  , double  );
Nextern _ARMABI float fdimf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fdimf(float  , float  );
N_ARMDEFLD2(fdim);
X__declspec(__nothrow) long double fdiml(long double , long double );
N#ifdef __FP_FAST_FMA
S#define FP_FAST_FMA
N#endif
N#ifdef __FP_FAST_FMAF
N#define FP_FAST_FMAF
N#endif
N#ifdef __FP_FAST_FMAL
S#define FP_FAST_FMAL
N#endif
Nextern _ARMABI double fma(double /*x*/, double /*y*/, double /*z*/);
Xextern __declspec(__nothrow) double fma(double  , double  , double  );
Nextern _ARMABI float fmaf(float /*x*/, float /*y*/, float /*z*/);
Xextern __declspec(__nothrow) float fmaf(float  , float  , float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z) \
N    { return (long double)fma((double)__x, (double)__y, (double)__z); }
Xinline __declspec(__nothrow) long double fmal(long double __x, long double __y, long double __z)     { return (long double)fma((double)__x, (double)__y, (double)__z); }
N#endif
Nextern _ARMABI_FPEXCEPT double fmax(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmax(double  , double  );
Nextern _ARMABI_FPEXCEPT float fmaxf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fmaxf(float  , float  );
N_ARMDEFLD2(fmax);
X__declspec(__nothrow) long double fmaxl(long double , long double );
Nextern _ARMABI_FPEXCEPT double fmin(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmin(double  , double  );
Nextern _ARMABI_FPEXCEPT float fminf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fminf(float  , float  );
N_ARMDEFLD2(fmin);
X__declspec(__nothrow) long double fminl(long double , long double );
Nextern _ARMABI double log2(double /*x*/); /* * log base 2 of x. */
Xextern __declspec(__nothrow) double log2(double  );  
Nextern _ARMABI float log2f(float /*x*/);
Xextern __declspec(__nothrow) float log2f(float  );
N_ARMDEFLD1(log2);
X__declspec(__nothrow) long double log2l(long double );
Nextern _ARMABI long lrint(double /*x*/);
Xextern __declspec(__nothrow) long lrint(double  );
Nextern _ARMABI long lrintf(float /*x*/);
Xextern __declspec(__nothrow) long lrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lrintl(long double __x) \
N    { return lrint((double)__x); }
Xinline __declspec(__nothrow) long lrintl(long double __x)     { return lrint((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llrint(double /*x*/);
Xextern __declspec(__nothrow) long long llrint(double  );
Nextern _ARMABI __LONGLONG llrintf(float /*x*/);
Xextern __declspec(__nothrow) long long llrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x) \
N    { return llrint((double)__x); }
Xinline __declspec(__nothrow) long long llrintl(long double __x)     { return llrint((double)__x); }
N#endif
Nextern _ARMABI long lround(double /*x*/);
Xextern __declspec(__nothrow) long lround(double  );
Nextern _ARMABI long lroundf(float /*x*/);
Xextern __declspec(__nothrow) long lroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lroundl(long double __x) \
N    { return lround((double)__x); }
Xinline __declspec(__nothrow) long lroundl(long double __x)     { return lround((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llround(double /*x*/);
Xextern __declspec(__nothrow) long long llround(double  );
Nextern _ARMABI __LONGLONG llroundf(float /*x*/);
Xextern __declspec(__nothrow) long long llroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x) \
N    { return llround((double)__x); }
Xinline __declspec(__nothrow) long long llroundl(long double __x)     { return llround((double)__x); }
N#endif
Nextern _ARMABI_PURE double nan(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nan(const char * );
Nextern _ARMABI_PURE float nanf(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nanf(const char * );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t) \
N    { return (long double)nan(__t); }
Xinline __declspec(__nothrow) __attribute__((const)) long double nanl(const char *__t)     { return (long double)nan(__t); }
N#endif
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
Sextern _ARMABI_PURE double nans(const char */*tagp*/);
Sextern _ARMABI_PURE float nansf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t) \
S    { return (long double)nans(__t); }
X_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t)     { return (long double)nans(__t); }
S#endif
N#endif 
Nextern _ARMABI_FPEXCEPT double nearbyint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nearbyint(double  );
Nextern _ARMABI_FPEXCEPT float nearbyintf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nearbyintf(float  );
N_ARMDEFLD1(nearbyint);
X__declspec(__nothrow) long double nearbyintl(long double );
Nextern  double remquo(double /*x*/, double /*y*/, int */*quo*/);
Nextern  float remquof(float /*x*/, float /*y*/, int */*quo*/);
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q) \
N    { return (long double)remquo((double)__x, (double)__y, __q); }
Xinline long double remquol(long double __x, long double __y, int *__q)     { return (long double)remquo((double)__x, (double)__y, __q); }
N#endif
Nextern _ARMABI_FPEXCEPT double round(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double round(double  );
Nextern _ARMABI_FPEXCEPT float roundf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float roundf(float  );
N_ARMDEFLD1(round);
X__declspec(__nothrow) long double roundl(long double );
Nextern _ARMABI double tgamma(double /*x*/); /* * The gamma function of x. */
Xextern __declspec(__nothrow) double tgamma(double  );  
Nextern _ARMABI float tgammaf(float /*x*/);
Xextern __declspec(__nothrow) float tgammaf(float  );
N_ARMDEFLD1(tgamma);
X__declspec(__nothrow) long double tgammal(long double );
Nextern _ARMABI_FPEXCEPT double trunc(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double trunc(double  );
Nextern _ARMABI_FPEXCEPT float truncf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float truncf(float  );
N_ARMDEFLD1(trunc);
X__declspec(__nothrow) long double truncl(long double );
N#endif
N
N#undef _ARMDEFLD1
N#undef _ARMDEFLD1P
N#undef _ARMDEFLD2
N
N#if defined(__cplusplus) && ((!defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)) || defined(__ARMCOMPILER_LIBCXX))
X#if 0L && ((!0L || 1L) || 0L)
S  extern "C++" {
S    inline int (fpclassify)(double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(double __x) { return isfinite(__x); }
S    inline bool (isgreater)(double __x, double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(double __x, double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(double __x) { return isinf(__x); }
S    inline bool (isless)(double __x, double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(double __x, double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(double __x, double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(double __x) { return isnan(__x); }
S    inline bool (isnormal)(double __x) { return isnormal(__x); }
S    inline bool (isunordered)(double __x, double __y) { return isunordered(__x, __y); }
S
S  }
N#endif
N
N#if defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX)
X#if 0L && !0L
S  extern "C++" {
S    inline float abs(float __x)   { return fabsf(__x); }
S    inline float acos(float __x)  { return acosf(__x); }
S    inline float asin(float __x)  { return asinf(__x); }
S    inline float atan(float __x)  { return atanf(__x); }
S    inline float atan2(float __y, float __x)    { return atan2f(__y,__x); }
S    inline float ceil(float __x)  { return ceilf(__x); }
S    inline float cos(float __x)   { return cosf(__x); }
S    inline float cosh(float __x)  { return coshf(__x); }
S    inline float exp(float __x)   { return expf(__x); }
S    inline float fabs(float __x)  { return fabsf(__x); }
S    inline float floor(float __x) { return floorf(__x); }
S    inline float fmod(float __x, float __y)     { return fmodf(__x, __y); }
S    float frexp(float __x, int* __exp) __attribute__((__nonnull__(2)));
S    inline float frexp(float __x, int* __exp)   { return frexpf(__x, __exp); }
S    inline float ldexp(float __x, int __exp)    { return ldexpf(__x, __exp);}
S    inline float log(float __x)   { return logf(__x); }
S    inline float log10(float __x) { return log10f(__x); }
S    float modf(float __x, float* __iptr) __attribute__((__nonnull__(2)));
S    inline float modf(float __x, float* __iptr) { return modff(__x, __iptr); }
S    inline float pow(float __x, float __y)      { return powf(__x,__y); }
S    inline float pow(float __x, int __y)     { return powf(__x, (float)__y); }
S    inline float sin(float __x)   { return sinf(__x); }
S    inline float sinh(float __x)  { return sinhf(__x); }
S    inline float sqrt(float __x)  { return sqrtf(__x); }
S    inline float _sqrt(float __x) { return _sqrtf(__x); }
S    inline float tan(float __x)   { return tanf(__x); }
S    inline float tanh(float __x)  { return tanhf(__x); }
S
S    inline double abs(double __x) { return fabs(__x); }
S    inline double pow(double __x, int __y)
S                { return pow(__x, (double) __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double abs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double acos(long double __x)
S                { return (long double)acosl(__x); }
S    inline long double asin(long double __x)
S                { return (long double)asinl(__x); }
S    inline long double atan(long double __x)
S                { return (long double)atanl(__x); }
S    inline long double atan2(long double __y, long double __x)
S                { return (long double)atan2l(__y, __x); }
S    inline long double ceil(long double __x)
S                { return (long double)ceill( __x); }
S    inline long double cos(long double __x)
S                { return (long double)cosl(__x); }
S    inline long double cosh(long double __x)
S                { return (long double)coshl(__x); }
S    inline long double exp(long double __x)
S                { return (long double)expl(__x); }
S    inline long double fabs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double floor(long double __x)
S                { return (long double)floorl(__x); }
S    inline long double fmod(long double __x, long double __y)
S                { return (long double)fmodl(__x, __y); }
S    long double frexp(long double __x, int* __p) __attribute__((__nonnull__(2)));
S    inline long double frexp(long double __x, int* __p)
S                { return (long double)frexpl(__x, __p); }
S    inline long double ldexp(long double __x, int __exp)
S                { return (long double)ldexpl(__x, __exp); }
S    inline long double log(long double __x)
S                { return (long double)logl(__x); }
S    inline long double log10(long double __x)
S                { return (long double)log10l(__x); }
S    long double modf(long double __x, long double* __p) __attribute__((__nonnull__(2)));
S    inline long double modf(long double __x, long double* __p)
S                { return (long double)modfl(__x, __p); }
S    inline long double pow(long double __x, long double __y)
S                { return (long double)powl(__x, __y); }
S    inline long double pow(long double __x, int __y)
S                { return (long double)powl(__x, __y); }
S    inline long double sin(long double __x)
S                { return (long double)sinl(__x); }
S    inline long double sinh(long double __x)
S                { return (long double)sinhl(__x); }
S    inline long double sqrt(long double __x)
S                { return (long double)sqrtl(__x); }
S    inline long double _sqrt(long double __x)
S                { return (long double)_sqrt((double) __x); }
S    inline long double tan(long double __x)
S                { return (long double)tanl(__x); }
S    inline long double tanh(long double __x)
S                { return (long double)tanhl(__x); }
S#endif
S
S#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S    inline float acosh(float __x) { return acoshf(__x); }
S    inline float asinh(float __x) { return asinhf(__x); }
S    inline float atanh(float __x) { return atanhf(__x); }
S    inline float cbrt(float __x) { return cbrtf(__x); }
S    inline float erf(float __x) { return erff(__x); }
S    inline float erfc(float __x) { return erfcf(__x); }
S    inline float expm1(float __x) { return expm1f(__x); }
S    inline float log1p(float __x) { return log1pf(__x); }
S    inline float hypot(float __x, float __y) { return hypotf(__x, __y); }
S    inline float lgamma(float __x) { return lgammaf(__x); }
S    inline float remainder(float __x, float __y) { return remainderf(__x, __y); }
S    inline float rint(float __x) { return rintf(__x); }
S#endif
S
S#ifdef __USE_C99_MATH
S    inline float exp2(float __x) { return exp2f(__x); }
S    inline float fdim(float __x, float __y) { return fdimf(__x, __y); }
S    inline float fma(float __x, float __y, float __z) { return fmaf(__x, __y, __z); }
S    inline float fmax(float __x, float __y) { return fmaxf(__x, __y); }
S    inline float fmin(float __x, float __y) { return fminf(__x, __y); }
S    inline float log2(float __x) { return log2f(__x); }
S    inline _ARMABI long lrint(float __x) { return lrintf(__x); }
S    inline _ARMABI __LONGLONG llrint(float __x) { return llrintf(__x); }
S    inline _ARMABI long lround(float __x) { return lroundf(__x); }
S    inline _ARMABI __LONGLONG llround(float __x) { return llroundf(__x); }
S    inline _ARMABI_FPEXCEPT float nearbyint(float __x) { return nearbyintf(__x); }
S    inline float remquo(float __x, float __y, int *__q) { return remquof(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT float round(float __x) { return roundf(__x); }
S    inline float tgamma(float __x) { return tgammaf(__x); }
S    inline _ARMABI_FPEXCEPT float trunc(float __x) { return truncf(__x); }
S
S    inline int (fpclassify)(float __x) { return fpclassify(__x); }
S    inline bool (isfinite)(float __x) { return isfinite(__x); }
S    inline bool (isgreater)(float __x, float __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(float __x, float __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(float __x) { return isinf(__x); }
S    inline bool (isless)(float __x, float __y) { return isless(__x, __y); }
S    inline bool (islessequal)(float __x, float __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(float __x, float __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(float __x) { return isnan(__x); }
S    inline bool (isnormal)(float __x) { return isnormal(__x); }
S    inline bool (isunordered)(float __x, float __y) { return isunordered(__x, __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double acosh(long double __x) { return acoshl(__x); }
S    inline long double asinh(long double __x) { return asinhl(__x); }
S    inline long double atanh(long double __x) { return atanhl(__x); }
S    inline long double cbrt(long double __x) { return cbrtl(__x); }
S    inline long double erf(long double __x) { return erfl(__x); }
S    inline long double erfc(long double __x) { return erfcl(__x); }
S    inline long double expm1(long double __x) { return expm1l(__x); }
S    inline long double log1p(long double __x) { return log1pl(__x); }
S    inline long double hypot(long double __x, long double __y) { return hypotl(__x, __y); }
S    inline long double lgamma(long double __x) { return lgammal(__x); }
S    inline long double remainder(long double __x, long double __y) { return remainderl(__x, __y); }
S    inline long double rint(long double __x) { return rintl(__x); }
S    inline long double exp2(long double __x) { return exp2l(__x); }
S    inline long double fdim(long double __x, long double __y) { return fdiml(__x, __y); }
S    inline long double fma(long double __x, long double __y, long double __z) { return fmal(__x, __y, __z); }
S    inline long double fmax(long double __x, long double __y) { return fmaxl(__x, __y); }
S    inline long double fmin(long double __x, long double __y) { return fminl(__x, __y); }
S    inline long double log2(long double __x) { return log2l(__x); }
S    inline _ARMABI long lrint(long double __x) { return lrintl(__x); }
S    inline _ARMABI __LONGLONG llrint(long double __x) { return llrintl(__x); }
S    inline _ARMABI long lround(long double __x) { return lroundl(__x); }
S    inline _ARMABI __LONGLONG llround(long double __x) { return llroundl(__x); }
S    inline _ARMABI_FPEXCEPT long double nearbyint(long double __x) { return nearbyintl(__x); }
S    inline long double remquo(long double __x, long double __y, int *__q) { return remquol(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT long double round(long double __x) { return roundl(__x); }
S    inline long double tgamma(long double __x) { return tgammal(__x); }
S    inline _ARMABI_FPEXCEPT long double trunc(long double __x) { return truncl(__x); }
S    inline int (fpclassify)(long double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(long double __x) { return isfinite(__x); }
S    inline bool (isgreater)(long double __x, long double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(long double __x, long double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(long double __x) { return isinf(__x); }
S    inline bool (isless)(long double __x, long double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(long double __x, long double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(long double __x, long double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(long double __x) { return isnan(__x); }
S    inline bool (isnormal)(long double __x) { return isnormal(__x); }
S    inline bool (isunordered)(long double __x, long double __y) { return isunordered(__x, __y); }
S#endif
S
S#undef fpclassify
S#undef isfinite
S#undef isgreater
S#undef isgreaterequal
S#undef isinf
S#undef isless
S#undef islessequal
S#undef islessgreater
S#undef isnan
S#undef isnormal
S#undef isunordered
S
S#endif
S
S  }
N#endif
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __MATH_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__MATH_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::__use_accurate_range_reduction;
S    #ifndef __ARMCOMPILER_LIBCXX
S      using ::std::abs;
S    #endif
S    using ::std::acos;
S    using ::std::asin;
S    using ::std::atan2;
S    using ::std::atan;
S    using ::std::ceil;
S    using ::std::cos;
S    using ::std::cosh;
S    using ::std::exp;
S    using ::std::fabs;
S    using ::std::floor;
S    using ::std::fmod;
S    using ::std::frexp;
S    using ::std::ldexp;
S    using ::std::log10;
S    using ::std::log;
S    using ::std::modf;
S    using ::std::pow;
S    using ::std::sin;
S    using ::std::sinh;
S    using ::std::sqrt;
S    using ::std::_sqrt;
S    using ::std::_sqrtf;
S    using ::std::tan;
S    using ::std::tanh;
S    using ::std::_fabsf;
S    /* C99 float and long double versions in already-C89-reserved namespace */
S    using ::std::acosf;
S    using ::std::acosl;
S    using ::std::asinf;
S    using ::std::asinl;
S    using ::std::atan2f;
S    using ::std::atan2l;
S    using ::std::atanf;
S    using ::std::atanl;
S    using ::std::ceilf;
S    using ::std::ceill;
S    using ::std::cosf;
S    using ::std::coshf;
S    using ::std::coshl;
S    using ::std::cosl;
S    using ::std::expf;
S    using ::std::expl;
S    using ::std::fabsf;
S    using ::std::fabsl;
S    using ::std::floorf;
S    using ::std::floorl;
S    using ::std::fmodf;
S    using ::std::fmodl;
S    using ::std::frexpf;
S    using ::std::frexpl;
S    using ::std::ldexpf;
S    using ::std::ldexpl;
S    using ::std::log10f;
S    using ::std::log10l;
S    using ::std::logf;
S    using ::std::logl;
S    using ::std::modff;
S    using ::std::modfl;
S    using ::std::powf;
S    using ::std::powl;
S    using ::std::sinf;
S    using ::std::sinhf;
S    using ::std::sinhl;
S    using ::std::sinl;
S    using ::std::sqrtf;
S    using ::std::sqrtl;
S    using ::std::tanf;
S    using ::std::tanhf;
S    using ::std::tanhl;
S    using ::std::tanl;
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      /* C99 additions which for historical reasons appear in non-strict mode */
S      using ::std::acosh;
S      using ::std::asinh;
S      using ::std::atanh;
S      using ::std::cbrt;
S      using ::std::copysign;
S      using ::std::copysignf;
S      using ::std::erf;
S      using ::std::erfc;
S      using ::std::expm1;
S      using ::std::hypot;
S      using ::std::ilogb;
S      using ::std::ilogbf;
S      using ::std::ilogbl;
S      using ::std::lgamma;
S      using ::std::log1p;
S      using ::std::logb;
S      using ::std::logbf;
S      using ::std::logbl;
S      using ::std::nextafter;
S      using ::std::nextafterf;
S      using ::std::nextafterl;
S      using ::std::nexttoward;
S      using ::std::nexttowardf;
S      using ::std::nexttowardl;
S      using ::std::remainder;
S      using ::std::rint;
S      using ::std::scalbln;
S      using ::std::scalblnf;
S      using ::std::scalblnl;
S      using ::std::scalbn;
S      using ::std::scalbnf;
S      using ::std::scalbnl;
S      using ::std::math_errhandling;
S      using ::std::acoshf;
S      using ::std::acoshl;
S      using ::std::asinhf;
S      using ::std::asinhl;
S      using ::std::atanhf;
S      using ::std::atanhl;
S      using ::std::copysignl;
S      using ::std::cbrtf;
S      using ::std::cbrtl;
S      using ::std::erff;
S      using ::std::erfl;
S      using ::std::erfcf;
S      using ::std::erfcl;
S      using ::std::expm1f;
S      using ::std::expm1l;
S      using ::std::log1pf;
S      using ::std::log1pl;
S      using ::std::hypotf;
S      using ::std::hypotl;
S      using ::std::lgammaf;
S      using ::std::lgammal;
S      using ::std::remainderf;
S      using ::std::remainderl;
S      using ::std::rintf;
S      using ::std::rintl;
S      /* New in C99. */
S      using ::std::float_t;
S      using ::std::double_t;
S    #endif
S    #if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
S      /* Functions new in C99. */
S      using ::std::exp2;
S      using ::std::exp2f;
S      using ::std::exp2l;
S      using ::std::fdim;
S      using ::std::fdimf;
S      using ::std::fdiml;
S      using ::std::fma;
S      using ::std::fmaf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::fmal;
S#endif
S      using ::std::fmax;
S      using ::std::fmaxf;
S      using ::std::fmaxl;
S      using ::std::fmin;
S      using ::std::fminf;
S      using ::std::fminl;
S      using ::std::log2;
S      using ::std::log2f;
S      using ::std::log2l;
S      using ::std::lrint;
S      using ::std::lrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lrintl;
S#endif
S      using ::std::llrint;
S      using ::std::llrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llrintl;
S#endif
S      using ::std::lround;
S      using ::std::lroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lroundl;
S#endif
S      using ::std::llround;
S      using ::std::llroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llroundl;
S#endif
S      using ::std::nan;
S      using ::std::nanf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::nanl;
S#endif
S      using ::std::nearbyint;
S      using ::std::nearbyintf;
S      using ::std::nearbyintl;
S      using ::std::remquo;
S      using ::std::remquof;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::remquol;
S#endif
S      using ::std::round;
S      using ::std::roundf;
S      using ::std::roundl;
S      using ::std::tgamma;
S      using ::std::tgammaf;
S      using ::std::tgammal;
S      using ::std::trunc;
S      using ::std::truncf;
S      using ::std::truncl;
S    #endif
S
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      using ::std::fpclassify;
S      using ::std::isfinite;
S      using ::std::isgreater;
S      using ::std::isgreaterequal;
S      using ::std::isinf;
S      using ::std::isless;
S      using ::std::islessequal;
S      using ::std::islessgreater;
S      using ::std::isnan;
S      using ::std::isnormal;
S      using ::std::isunordered;
S    #endif
N  #endif
N
N#undef __LONGLONG
N
N#endif /* __math_h */
N
N/* end of math.h */
L 8 "SRC\eGFX\eGFX.c" 2
N#include "eGFX_DataTypes.h"
L 1 "SRC\eGFX\eGFX_DataTypes.h" 1
N#include "stdint.h"
N
N
N#ifndef eGFX_DATA_TYPES_H
S#define eGFX_DATA_TYPES_H
S
S
Stypedef int16_t FIXED_7_8;
Stypedef int16_t FIXED_9_6;
S
Stypedef int16_t FIXED_0_15;
Stypedef int16_t FIXED_1_14;
S
S
S#define eGFX_IMAGE_PLANE_1BPP		 0
S#define eGFX_IMAGE_PLANE_3BPP_RGB    	 1
S#define eGFX_IMAGE_PLANE_4BPP		    2
S#define eGFX_IMAGE_PLANE_8BPP		   3
S#define eGFX_IMAGE_PLANE_16BPP_565    4
S#define eGFX_IMAGE_PLANE_24BPP        5
S#define eGFX_IMAGE_PLANE_32BPP        6
S
S
S
Stypedef struct
S{
S    uint8_t Type;
S    uint8_t *Data;
S    uint16_t SizeX;
S    uint16_t SizeY;
S
S} eGFX_ImagePlane;
S
Stypedef struct
S{
S    int16_t X;
S    int16_t Y;
S} eGFX_Point;
S
Stypedef struct
S{
S    float X; 	
S    float Y;  
S} eGFX_PointF;
S
Stypedef struct
S{
S    eGFX_Point P1;
S    eGFX_Point P2;
S} eGFX_Box;
S
Stypedef struct
S{
S    eGFX_Point Center;
S    uint8_t NumPoints;
S    uint8_t DrawMode;
S    const eGFX_Point *PointList;
S
S} eGFX_ListPrimitive;
S
S
S
S#define eGFX_LIST_PRIMITIVE_CONNECTED                              0x01
S#define eGFX_LIST_PRIMITIVE_DISCONNECTED                           0x02
S#define eGFX_LIST_PRIMITIVE_CLOSED								   0x03
S#define eGFX_LIST_PRIMITIVE_CONNECTED_YFLIPPED			 		   0x04
S#define eGFX_LIST_PRIMITIVE_DISCONNECTED_YFLIPPED		   		   0x05
S#define eGFX_LIST_PRIMITIVE_CLOSED_YFLIPPED			   			   0x06
S
Stypedef struct
S{
S    const eGFX_ImagePlane *CharacterSprites[0x80-0x20];
S  
S	//Some TT Metrics
S	int32_t Ascent; //Ascent scaled up by 65536 to store fractional value		(Q15.16)
S	int32_t Descent; //Descent scaled up by 65536 to store fractional value		(Q15.16)
S	int32_t LineSpacing; //Linespacing scaled up by 65536 to store fractional value  (Q15.16)
S	
S	uint8_t  SpacesPerTab;
S    uint8_t  InterCharacterSpacing;
S   
S	uint8_t  Padding[2];
S
S} eGFX_Font;
S
S
S#define eGFX_PIXEL_ON     0xFFFFFFFF
S#define eGFX_PIXEL_OFF    0
S
Stypedef uint32_t eGFX_PixelState;
S
S/***
S*       ____  _     _           _
S*      / __ \| |   (_)         | |
S*     | |  | | |__  _  ___  ___| |_ ___
S*     | |  | | '_ \| |/ _ \/ __| __/ __|
S*     | |__| | |_) | |  __/ (__| |_\__ \
S*      \____/|_.__/| |\___|\___|\__|___/
X
S*                 _/ |
S*                |__/
S*/
S
Stypedef struct 
S{
S	uint32_t Type;
S	uint32_t State;
S	
S}	eGFX_ObjectHeader;
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	uint32_t CurrentStep;
S	uint32_t LastStep;
S}	eGFX_AnimatorHeader;
S
S#define eGFX_OBJECT_STATE_ACTIVE							        	1
S#define eGFX_OBJECT_STATE_ANIMATION_ACTIVE								2
S#define eGFX_OBJECT_STATE_INACTIVE										0
S
S/***
S*                     _                 _                ____  _     _           _
S*         /\         (_)               | |              / __ \| |   (_)         | |
S*        /  \   _ __  _ _ __ ___   __ _| |_ ___  _ __  | |  | | |__  _  ___  ___| |_ ___
S*       / /\ \ | '_ \| | '_ ` _ \ / _` | __/ _ \| '__| | |  | | '_ \| |/ _ \/ __| __/ __|
S*      / ____ \| | | | | | | | | | (_| | || (_) | |    | |__| | |_) | |  __/ (__| |_\__ \
S*     /_/    \_\_| |_|_|_| |_| |_|\__,_|\__\___/|_|     \____/|_.__/| |\___|\___|\__|___/
X
S*                                                                  _/ |
S*                                                                 |__/
S*/
S
S
S
S#define eGFX_OBJECT_POINTF_BISECT_ANIMATOR								0xF0
S#define eGFX_OBJECT_POINTF_LINEAR_ANIMATOR								0xF1
S
S#define eGFX_OBJECT_SCALARF_BISECT_ANIMATOR								0xF2
S#define eGFX_OBJECT_SCALARF_LINEAR_ANIMATOR								0xF3
S
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	uint32_t CurrentStep;
S	uint32_t LastStep;
S	eGFX_PointF Target;
S	eGFX_PointF *Current;
S
S	float FractionalBisect; //The amount of percentage of the distance the point should move each step. must between a number between zero and 1
S
S} eGFX_PointF_BisectAnimator;
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	uint32_t CurrentStep;
S	uint32_t LastStep;
S	eGFX_PointF Target;
S	eGFX_PointF *Current;
S	float IncrementX;
S	float IncrementY;
S
S} eGFX_PointF_LinearAnimator;
S
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	uint32_t CurrentStep;
S	uint32_t LastStep;
S	float Target;
S	float *Current;
S	float Increment; //Increment we should make each step
S
S} eGFX_ScalarF_LinearAnimator;
S
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	uint32_t CurrentStep;
S	uint32_t LastStep;
S	float Target;
S	float *Current;
S	float FractionalBisect; //The amount of percentage of the distance the point should move each step. must between a number between zero and 1
S
S} eGFX_ScalarF_BisectAnimator;
S
S/***
S*       _____                 _     _         ____  _     _           _
S*      / ____|               | |   (_)       / __ \| |   (_)         | |
S*     | |  __ _ __ __ _ _ __ | |__  _  ___  | |  | | |__  _  ___  ___| |_ ___
S*     | | |_ | '__/ _` | '_ \| '_ \| |/ __| | |  | | '_ \| |/ _ \/ __| __/ __|
S*     | |__| | | | (_| | |_) | | | | | (__  | |__| | |_) | |  __/ (__| |_\__ \
S*      \_____|_|  \__,_| .__/|_| |_|_|\___|  \____/|_.__/| |\___|\___|\__|___/
X
S*                      | |                              _/ |
S*                      |_|                             |__/
S*/
S
S#define eGFX_OBJECT_TEXTF												0x0000
S#define eGFX_OBJECT_SHADED_TEXTF										0x0001
S#define eGFX_OBJECT_LINEF												0x0002
S#define eGFX_OBJECT_SPRITEF												0x0003
S#define eGFX_OBJECT_SCALED_SPRITEF										0x0004
S#define eGFX_OBJECT_BOXF												0x0005
S#define eGFX_OBJECT_CIRCLEF												0x0006
S
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	eGFX_PointF Position;
S	char *String;
S	eGFX_Font *Font;
S	
S} eGFX_Obj_TextF;
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	eGFX_PointF Position;
S	char *String;
S	eGFX_Font *Font;
S	float Shading;
S
S} eGFX_Obj_ShadedTextF;
S
S
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	eGFX_PointF Start;
S	eGFX_PointF End;
S	eGFX_PixelState PixelState; 
S} eGFX_Obj_LineF;
S
S#define eGFX_CIRCLEF_RENDER_OPTION_OUTLINE	0x00
S#define eGFX_CIRCLEF_RENDER_OPTION_FILLED	0x01
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	eGFX_PointF Position;
S	float Radius;
S	eGFX_PixelState PixelState; 
S	uint8_t RenderOption;
S} eGFX_Obj_CircleF;
S
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	eGFX_PointF Position;
S	eGFX_ImagePlane * Sprite;
S	
S} eGFX_Obj_SpriteF;
S
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S	
S	eGFX_PointF Position;
S	eGFX_ImagePlane * Sprite;
S
S	float Scale;
S
S} eGFX_Obj_ScaledSpriteF;
S
S
S#define eGFX_BOXF_RENDER_OPTION_OUTLINE	0x00
S#define eGFX_BOXF_RENDER_OPTION_FILLED	0x01
S
Stypedef struct
S{
S	uint32_t Type;
S	uint32_t State;
S
S	eGFX_PointF P1;
S	eGFX_PointF P2;
S
S	eGFX_PixelState PixelState;
S
S	uint8_t BoxF_RenderOption;
S
S} eGFX_Obj_BoxF;
S
S
N#endif
L 9 "SRC\eGFX\eGFX.c" 2
N
N
N/***
N *      _____ _          _    ____                       _   _
N *     |  __ (_)        | |  / __ \                     | | (_)
N *     | |__) |__  _____| | | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *     |  ___/ \ \/ / _ \ | | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *     | |   | |>  <  __/ | | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_|   |_/_/\_\___|_|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                                 | |
N *                                 |_|
N */
N
N
Nvoid eGFX_BitStreamPut(uint8_t * BitStream, uint32_t Position, uint32_t PixelState)
N{
N	uint32_t BaseAddress = Position >> 3;
N	uint32_t Offset = Position & 0x7;
N
N	if(PixelState)
N	{
N		BitStream[BaseAddress] |= (1<<Offset);
N	}
N	else
N	{
N		BitStream[BaseAddress] &= ~(1<<Offset);
N	}
N}
N
Nuint32_t eGFX_BitStreamGet(uint8_t * BitStream, uint32_t Position)
N{
N
N	uint32_t BaseAddress = Position >> 3;
N	uint32_t Offset = Position & 0x7;
N
N	return	(BitStream[BaseAddress] & (1<<Offset));
N
N}
N
N
N//Note:  All Graphics routines should call Put/Get Pixel for fundamental operations!
N//Routines should not access Image storage space directly!
N
Nvoid eGFX_PutPixel(const eGFX_ImagePlane *Image,
N                   int16_t x,
N                   int16_t y,
N                   eGFX_PixelState PS)
N{
N    uint32_t Offset;
N    uint8_t Mask;
N    uint32_t MemWidthInBytes;
N
N    if((x<Image->SizeX) && (y<Image->SizeY) && (x>=0) && (y>=0))
N    {
N        switch(Image->Type)
N        {
N            case  eGFX_IMAGE_PLANE_1BPP:
X            case  0:
N                //Properly Implement Rounding  for odd bit plane sizes
N				MemWidthInBytes = eGFX_CALCULATE_1BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
X				MemWidthInBytes = ((Image ->SizeX+7)>>3);
N
N                Offset = (y * (MemWidthInBytes)) + (x>>3);
N                Mask = 0x01 << (x & 0x07);
N
N                if(PS)
N                {
N                    Image->Data[Offset] |= Mask;
N                }
N                else
N                {
N                    Image->Data[Offset] &= ~Mask;
N                }
N
N                break;
N
N            case  eGFX_IMAGE_PLANE_3BPP_RGB:
X            case  1:
N
N				{
N					//This image plane type is an odd ball case for the 3-color sharp memory LCD.
N				    uint32_t BitStreamPosition = x*3 + y*(Image->SizeX*3);
N					eGFX_BitStreamPut((uint8_t *)Image->Data, BitStreamPosition++, PS&0x01);
N					eGFX_BitStreamPut((uint8_t *)Image->Data, BitStreamPosition++, PS&0x02);
N				    eGFX_BitStreamPut((uint8_t *)Image->Data, BitStreamPosition,   PS&0x04);
N				}
N               break;
N
N
N            case  eGFX_IMAGE_PLANE_4BPP:
X            case  2:
N                //Properly Implement Rounding  for odd bit plane sizes
N				MemWidthInBytes = eGFX_CALCULATE_4BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
X				MemWidthInBytes = ((Image ->SizeX+1)>>1);
N
N                Offset = (y * (MemWidthInBytes)) + (x>>1);
N
N                if(x&0x01)
N                {
N                    Image->Data[Offset] &= ~0x0F;
N                    Image->Data[Offset] |= ((uint8_t)(PS&0xF));
N                }
N                else
N                {
N                    Image->Data[Offset] &= ~0xF0;
N                    Image->Data[Offset] |= ((uint8_t)(PS&0xF)<<4);
N                }
N
N                break;
N
N            case  eGFX_IMAGE_PLANE_8BPP:
X            case  3:
N                MemWidthInBytes  = Image->SizeX;
N                Offset = (y * MemWidthInBytes) + x;
N                Image->Data[Offset] = ((uint8_t)PS);
N                break;
N
N            case  eGFX_IMAGE_PLANE_16BPP_565:
X            case  4:
N                MemWidthInBytes  = Image->SizeX <<1;
N                Offset = (y * MemWidthInBytes) + (x << 1);
N                *(uint16_t *)(Image->Data + Offset) = (uint16_t)(PS);
N                break;
N
N            case  eGFX_IMAGE_PLANE_24BPP:
X            case  5:
N    
N                MemWidthInBytes  = Image->SizeX * 3;
N                Offset = (y * MemWidthInBytes) + (x*3);
N                memcpy(&Image->Data[Offset],&PS,3);
N    
N            case  eGFX_IMAGE_PLANE_32BPP:
X            case  6:
N                MemWidthInBytes  = Image->SizeX << 2;
N                Offset = (y * MemWidthInBytes) + (x<<2);
N                *(uint32_t *)(Image->Data + Offset) = (uint32_t)(PS);
N               break;
N				
N            default:
N                break;
N        }
N    }
N}
N
N
NeGFX_PixelState eGFX_GetPixel(const eGFX_ImagePlane *Image,
N                         int16_t x,
N                         int16_t y)
N{
N	uint32_t Offset = 0;
N    uint8_t Mask;
N    uint32_t MemWidthInBytes;
N	eGFX_PixelState PS = 0;
N
N    if((x<Image->SizeX) && (y<Image->SizeY) && (x>=0) && (y>=0))
N    {
N        switch(Image->Type)
N        {
N            case  eGFX_IMAGE_PLANE_1BPP:
X            case  0:
N                //Properly Implement Rounding  for odd bit plane sizes
N				MemWidthInBytes = eGFX_CALCULATE_1BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
X				MemWidthInBytes = ((Image ->SizeX+7)>>3);
N
N                Offset = (y * (MemWidthInBytes)) + (x>>3);
N                Mask = 0x01 << (x & 0x07);
N
N                if(Image->Data[Offset] & Mask)
N                    PS = eGFX_PIXEL_ON;
X                    PS = 0xFFFFFFFF;
N                else
N                    PS = eGFX_PIXEL_OFF;
X                    PS = 0;
N
N                break;
N
N            case  eGFX_IMAGE_PLANE_3BPP_RGB:
X            case  1:
N            		{
N                 	//This image plane type is an odd ball case for the 3-color sharp memory LCD.
N                 	uint32_t BitStreamPosition = x*3 + y*Image->SizeX*3;
N                 	if(eGFX_BitStreamGet((uint8_t *)Image->Data, BitStreamPosition++))
N                 			PS |= 0x01;
N                 	if(eGFX_BitStreamGet((uint8_t *)Image->Data, BitStreamPosition++))
N                 			PS |= 0x02;
N                 	if(eGFX_BitStreamGet((uint8_t *)Image->Data, BitStreamPosition++))
N                 	  		PS |= 0x04;
N            		}
N
N                    break;
N
N            case  eGFX_IMAGE_PLANE_4BPP:
X            case  2:
N                //Properly Implement Rounding  for odd bit plane sizes
N				MemWidthInBytes = eGFX_CALCULATE_4BPP_BUFFER_ROW_BYTE_SIZE(Image->SizeX);
X				MemWidthInBytes = ((Image ->SizeX+1)>>1);
N
N				Offset = (y * (MemWidthInBytes)) + (x>>1);
N
N                if(x&0x01)
N                    PS = Image->Data[Offset] & 0x0F;
N                else
N                    PS = ((Image->Data[Offset])>>4) & 0x0F;
N
N                break;
N
N            case  eGFX_IMAGE_PLANE_8BPP:
X            case  3:
N                MemWidthInBytes  = Image->SizeX;
N                Offset = (y * MemWidthInBytes) + x;
N                PS = Image->Data[Offset];
N                break;
N
N            case  eGFX_IMAGE_PLANE_16BPP_565:
X            case  4:
N                MemWidthInBytes  = Image->SizeX <<1;
N                Offset = (y * MemWidthInBytes) + (x << 1);
N                PS = *(uint16_t *)(Image->Data + Offset);
N                break;
N            
N
N            case  eGFX_IMAGE_PLANE_24BPP:
X            case  5:
N                MemWidthInBytes  = Image->SizeX * 3;
N                Offset = (y * MemWidthInBytes) + (x*3);
N                PS  = ((int32_t)Image->Data[Offset]);
N                PS |= ((int32_t)Image->Data[Offset+1])<<8;
N                PS |= ((int32_t)Image->Data[Offset+2])<<16;
N                break;
N
N            case  eGFX_IMAGE_PLANE_32BPP:
X            case  6:
N                MemWidthInBytes  = Image->SizeX << 2;
N                Offset = (y * MemWidthInBytes) + (x<<2);
N                PS = *(uint32_t *)(Image->Data + Offset);
N                break;
N				
N
N            default:
N                break;
N        }
N    }
N
N    return PS;
N}
N
N
N/***
N *      _____      _           _ _   _              ____                       _   _
N *     |  __ \    (_)         (_) | (_)            / __ \                     | | (_)
N *     | |__) | __ _ _ __ ___  _| |_ ___   _____  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *     |  ___/ '__| | '_ ` _ \| | __| \ \ / / _ \ | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *     | |   | |  | | | | | | | | |_| |\ V /  __/ | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_|   |_|  |_|_| |_| |_|_|\__|_| \_/ \___|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                                                       | |
N *                                                       |_|
N */
N
Nvoid eGFX_DrawHline(eGFX_ImagePlane *Image,
N                    int16_t XStart,
N                    int16_t XStop,
N                    int16_t Y,
N                    eGFX_PixelState PS)
N{
N    int16_t LineStart;
N    int16_t LineStop;
N    uint16_t i;
N
N    if((Y<Image->SizeY)  && (Y>=0))
N    {
N        if(XStart>XStop)
N        {
N            LineStart = XStop;
N            LineStop = XStart;
N        }
N        else
N        {
N            LineStart = XStart;
N            LineStop = XStop;
N        }
N
N        if(LineStart<0)
N        {
N            LineStart = 0;
N        }
N
N        if(LineStop>Image->SizeX)
N        {
N            LineStop = 	Image->SizeX-1;
N        }
N
N        if(LineStart == LineStop)
N        {
N            eGFX_PutPixel(Image,LineStart,Y,PS);
N        }
N        else
N        {
N            for(i=LineStart; i<=LineStop ; i++)
N            {
N                eGFX_PutPixel(Image,i,Y,PS);
N            }
N        }
N    }
N}
N
N
Nvoid eGFX_DrawFilledBox(eGFX_ImagePlane *Image,
N                        eGFX_Box *Box,
N                        eGFX_PixelState PS)
N{
N    uint16_t i;
N
N    for(i=Box->P1.Y ; i<Box->P2.Y+1 ; i++)
N    {
N        eGFX_DrawHline(Image, Box->P1.X, Box->P2.X,i,PS);
N    }
N}
N
N
Nvoid eGFX_DrawBox(eGFX_ImagePlane *Image,
N                  eGFX_Box *Box,
N                  eGFX_PixelState PS)
N{
N    eGFX_DrawHline(Image, Box->P1.X, Box->P2.X,Box->P1.Y,PS);
N    eGFX_DrawHline(Image, Box->P1.X, Box->P2.X,Box->P2.Y,PS);
N    eGFX_DrawVline(Image, Box->P1.Y, Box->P2.Y,Box->P1.X,PS);
N    eGFX_DrawVline(Image, Box->P1.Y, Box->P2.Y,Box->P2.X,PS);
N}
N
Nvoid eGFX_DrawVline(eGFX_ImagePlane *Image,
N                    int16_t YStart,
N                    int16_t YStop,
N                    int16_t X,
N                    eGFX_PixelState PS)
N{
N    int16_t LineStart;
N    int16_t LineStop;
N    int16_t i;
N
N    if((X<Image->SizeX) && (X>=0))
N    {
N        if(YStart>YStop)
N        {
N            LineStart = YStop;
N            LineStop = YStart;
N        }
N        else
N        {
N            LineStart = YStart;
N            LineStop = YStop;
N        }
N
N        if(LineStart<0)
N        {
N            LineStart = 0;
N        }
N
N        if(LineStop>Image->SizeY)
N        {
N            LineStop = 	Image->SizeY-1;
N        }
N
N        for(i=LineStart; i<=LineStop ; i++)
N        {
N            eGFX_PutPixel(Image,X,i,PS);
N        }
N    }
N}
N
Nvoid eGFX_DrawLine(eGFX_ImagePlane *Image,
N                   int16_t X1,
N                   int16_t Y1,
N                   int16_t X2,
N                   int16_t Y2,
N                   eGFX_PixelState PS)
N{
N    //A simple Implementation of Bresenham's line Algorithm
N    int16_t StartX,StopX,StartY,StopY;
N    int16_t dX,dY;
N    int16_t Y_Numerator;
N    int16_t X_Numerator;
N    int16_t Y;
N    int16_t X;
N    int16_t i;
N    uint8_t YDir = 0;
N
N    //First Make sure that it is left to right
N    //If not them flop them
N    if(X2>X1)
N    {
N        StartX = X1;
N        StopX = X2;
N        StartY = Y1;
N        StopY = Y2;
N    }
N    else
N    {
N        StartX = X2;
N        StopX = X1;
N        StartY = Y2;
N        StopY = Y1;
N    }
N
N    eGFX_PutPixel(Image, StopX,StopY, PS);
N
N    if(StopY>=StartY)
N    {
N        dY = StopY - StartY;
N        YDir = 0;
N    }
N    else
N    {
N        dY = StartY - StopY;
N        YDir = 1;
N    }
N
N    dX = StopX - StartX;
N
N    //Now, if the slope is less greater than one,  we need to swap all X/Y operations
N    if(dY<=dX)
N    {
N        //Slope is less than one, proceed at normal and step along the x axis
N        Y=StartY;   //start the whole part of the Y value at the starting pixeel.
N        X=StartX;
N        //We need to start the numerator of the fraction half way through the fraction so evertyhing rounds at
N        //fraction midpoint
N        Y_Numerator = dX>>1;   //The fraction demonimator is assumeed to be dX
N
N        // out fixed point Y value is  Y + (Y_Numerator / dX)
N        //Every time we step the X coordinate by one, we need to step
N        //out Y coordinate by dY/dX.  We do this by just adding dY to our
N        //numerator.  When the numerator gets bigger than the
N        //denomiator, the increment the whole part by one and decrement the numerator
N        //by the denominator
N        for(i=0; i<dX; i++)
N        {
N            eGFX_PutPixel(Image,X,Y,PS);
N            X++;
N            //Now do all the fractional stuff
N            Y_Numerator += dY;
N
N            if(Y_Numerator >= dX)
N            {
N                Y_Numerator-=dX;
N
N                if(StopY > StartY)
N                {
N                    Y++;
N                }
N                else
N                {
N                    Y--;
N                }
N            }
N        }
N    }
N    else
N    {
N        //Same as before by step along the y axis.
N        Y=StartY;
N        X=StartX;
N        X_Numerator = dY>>1;
N
N        for(i=0; i<dY; i++)
N        {
N            eGFX_PutPixel(Image,X,Y,PS);
N
N            //Now do all the fractional stuff
N            if(YDir)
N            {
N                Y--;
N            }
N            else
N            {
N                Y++;
N            }
N
N            X_Numerator += dX;
N
N            if(X_Numerator >= dY)
N            {
N                X_Numerator-=dY;
N
N                if(StopX > StartX)
N                {
N                    X++;
N                }
N                else
N                {
N                    X--;
N                }
N            }
N        }
N    }
N}
N
Nvoid eGFX_DrawListPrimitive(eGFX_ImagePlane *Image,
N                            eGFX_ListPrimitive *LP ,
N                            eGFX_PixelState PS)
N{
N    uint8_t Points;
N    uint8_t i;
N
N    if(LP->NumPoints >1)
N    {
N        switch(LP->DrawMode)
N        {
N            default:
N            case eGFX_LIST_PRIMITIVE_CLOSED:
X            case 0x03:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(LP->PointList[i-1].Y + LP->Center.Y),
N                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(LP->PointList[i].Y + LP->Center.Y),PS);
N                }
N
N                eGFX_DrawLine(Image,(int16_t)(LP->PointList[LP->NumPoints-1].X + LP->Center.X),(int16_t)(LP->PointList[LP->NumPoints-1].Y + LP->Center.Y),
N                              (int16_t)(LP->PointList[0].X + LP->Center.X),(int16_t)(LP->PointList[0].Y + LP->Center.Y),PS);
N                break;
N
N            case eGFX_LIST_PRIMITIVE_CONNECTED:
X            case 0x01:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(LP->PointList[i-1].Y + LP->Center.Y),
N                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(LP->PointList[i].Y + LP->Center.Y),PS);
N                }
N
N                break;
N
N            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
X            case 0x02:
N                Points = LP->NumPoints>>1;
N
N                for(i=0; i<Points; i++)
N                {
N                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i*2].X + LP->Center.X),(int16_t)(LP->PointList[i*2].Y + LP->Center.Y),
N                                  (int16_t)(LP->PointList[i*2+1].X + LP->Center.X),(int16_t)(LP->PointList[i*2+1].Y + LP->Center.Y),PS);
N                }
N
N                break;
N
N            case eGFX_LIST_PRIMITIVE_CLOSED_YFLIPPED:
X            case 0x06:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(-LP->PointList[i-1].Y + LP->Center.Y),
N                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(-LP->PointList[i].Y + LP->Center.Y),PS);
N                }
N
N                eGFX_DrawLine(Image,(int16_t)(LP->PointList[LP->NumPoints-1].X + LP->Center.X),(int16_t)(-LP->PointList[LP->NumPoints-1].Y + LP->Center.Y),
N                              (int16_t)(LP->PointList[0].X + LP->Center.X),(int16_t)(-LP->PointList[0].Y + LP->Center.Y),PS);
N                break;
N
N            case eGFX_LIST_PRIMITIVE_CONNECTED_YFLIPPED:
X            case 0x04:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(-LP->PointList[i-1].Y + LP->Center.Y),
N                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(-LP->PointList[i].Y + LP->Center.Y),PS);
N                }
N
N                break;
N
N            case eGFX_LIST_PRIMITIVE_DISCONNECTED_YFLIPPED:
X            case 0x05:
N                Points = LP->NumPoints>>1;
N
N                for(i=0; i<Points; i++)
N                {
N                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i*2].X + LP->Center.X),(int16_t)(-LP->PointList[i*2].Y + LP->Center.Y),
N                                  (int16_t)(LP->PointList[i*2+1].X + LP->Center.X),(int16_t)(-LP->PointList[i*2+1].Y + LP->Center.Y),PS);
N                }
N
N                break;
N        }
N    }
N}
N
Nvoid eGFX_DrawScaledListPrimitive(eGFX_ImagePlane *Image,
N                                  eGFX_ListPrimitive *LP ,
N                                  FIXED_7_8 Scale,
N                                  eGFX_PixelState PS)
N{
N    uint8_t Points;
N    uint8_t i;
N    eGFX_Point TransformedPoint[2];
N
N    if(LP->NumPoints >1)
N    {
N        switch(LP->DrawMode)
N        {
N            default:
N            case eGFX_LIST_PRIMITIVE_CLOSED:
X            case 0x03:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i-1].X,Scale) 	+ LP->Center.X;
N                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i-1].Y,Scale)   + LP->Center.Y;
N                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[i].X,Scale)     + LP->Center.X;
N                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[i].Y,Scale)     + LP->Center.Y;
N                    eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
N                                  TransformedPoint[1].X,TransformedPoint[1].Y,PS);
N                }
N
N                TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[LP->NumPoints-1].X,Scale)   + LP->Center.X;
N                TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[LP->NumPoints-1].Y,Scale)   + LP->Center.Y;
N                TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[0].X,Scale)				 + LP->Center.X;
N                TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[0].Y,Scale)				 + LP->Center.Y;
N                eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
N                              TransformedPoint[1].X,TransformedPoint[1].Y,PS);
N                break;
N
N            case eGFX_LIST_PRIMITIVE_CONNECTED:
X            case 0x01:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i-1].X,Scale) 	+ LP->Center.X;
N                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i-1].Y,Scale)   + LP->Center.Y;
N                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[i].X,Scale)     + LP->Center.X;
N                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[i].Y,Scale)     + LP->Center.Y;
N                    eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
N                                  TransformedPoint[1].X,TransformedPoint[1].Y,PS);
N                }
N
N                break;
N
N            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
X            case 0x02:
N                Points = LP->NumPoints>>1;
N
N                for(i=0; i<Points; i++)
N                {
N                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i*2].X,Scale)		+ LP->Center.X;
N                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i*2].Y,Scale)		+ LP->Center.Y;
N                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[(i*2)+1].X,Scale)   + LP->Center.X;
N                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[(i*2)+1].Y,Scale)   + LP->Center.Y;
N                    eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
N                                  TransformedPoint[1].X,TransformedPoint[1].Y,PS);
N                }
N
N                break;
N        }
N    }
N}
N
Nvoid eGFX_DrawRotatedListPrimitive(eGFX_ImagePlane *Image,
N                                   eGFX_ListPrimitive *LP ,
N                                   uint8_t Angle,
N                                   eGFX_PixelState PS)
N{
N    uint8_t Points;
N    uint8_t i;
N    eGFX_Point TransformedPoint[2];
N
N    if(LP->NumPoints >1)
N    {
N        //If we are drawing non connected points,  there must be an even number of them.
N        switch(LP->DrawMode)
N        {
N            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
X            case 0x02:
N                Points = LP->NumPoints>>1;
N
N                for(i=0; i<Points; i++)
N                {
N                    TransformedPoint[0].X = eGFX_FMul_15_0to1_14((LP->PointList[i*2].X), eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                            eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[Angle]);
N                    TransformedPoint[0].Y = eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[Angle ]) +
N                                            eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]);
N                    TransformedPoint[1].X = eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                            eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].Y, eGFX_Fixed_1_14_SineTable[Angle]);
N                    TransformedPoint[1].Y = eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                            eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]);
N                    TransformedPoint[0].X += LP->Center.X;
N                    TransformedPoint[0].Y += LP->Center.Y;
N                    TransformedPoint[1].X += LP->Center.X;
N                    TransformedPoint[1].Y += LP->Center.Y;
N                    eGFX_DrawLine(Image,(TransformedPoint[0].X + LP->Center.X),(TransformedPoint[0].Y  + LP->Center.Y),
N                                  (TransformedPoint[1].X + LP->Center.X),(TransformedPoint[1].Y + LP->Center.Y),PS);
N                }
N
N                break;
N
N            case eGFX_LIST_PRIMITIVE_CONNECTED:
X            case 0x01:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
N                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
N                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
N                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
N                    TransformedPoint[0].X +=  LP->Center.X;
N                    TransformedPoint[0].Y +=  LP->Center.Y;
N                    TransformedPoint[1].X +=  LP->Center.X;
N                    TransformedPoint[1].Y +=  LP->Center.Y;
N                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
N                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
N                }
N
N                break;
N
N            default:
N            case eGFX_LIST_PRIMITIVE_CLOSED:
X            case 0x03:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
N                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
N                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
N                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
N                    TransformedPoint[0].X +=  LP->Center.X;
N                    TransformedPoint[0].Y +=  LP->Center.Y;
N                    TransformedPoint[1].X +=  LP->Center.X;
N                    TransformedPoint[1].Y +=  LP->Center.Y;
N                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
N                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
N                }
N
N                TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                         eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
N                TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                          eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
N                TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
N                TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
N                TransformedPoint[0].X +=  LP->Center.X;
N                TransformedPoint[0].Y +=  LP->Center.Y;
N                TransformedPoint[1].X +=  LP->Center.X;
N                TransformedPoint[1].Y +=  LP->Center.Y;
N                eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
N                              (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
N                break;
N        }
N    }
N}
N
Nvoid eGFX_DrawScaledRotatedListPrimitive(eGFX_ImagePlane *Image,
N        eGFX_ListPrimitive *LP ,
N        uint8_t Angle,
N        FIXED_7_8 Scale,
N        eGFX_PixelState PS)
N{
N    uint8_t i;
N    eGFX_Point TransformedPoint[2];
N
N    if(LP->NumPoints >1)
N    {
N        switch(LP->DrawMode)
N        {
N            default:
N            case eGFX_LIST_PRIMITIVE_CLOSED:
X            case 0x03:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
N                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
N                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
N                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
N                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
N                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
N                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
N                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
N                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
N                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
N                }
N
N                TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                         eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
N                TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                          eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
N                TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
N                TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
N                TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
N                TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
N                TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
N                TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
N                eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
N                              (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
N                break;
N
N            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
X            case 0x02:
N                for(i=0; i<LP->NumPoints>>1; i++)
N                {
N                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
N                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                              eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
N                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
N                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
N                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
N                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
N                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
N                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
N                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
N                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
N                }
N
N                break;
N
N            case eGFX_LIST_PRIMITIVE_CONNECTED:
X            case 0x01:
N                for(i=1; i<LP->NumPoints; i++)
N                {
N                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
N                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
N                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
N                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
N                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
N                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
N                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
N                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
N                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
N                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
N                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
N                }
N
N                break;
N        }
N    }
N}
N
N// midpoint circle algorithm
Nvoid eGFX_DrawCircle(eGFX_ImagePlane *RC,
N                     int16_t x0,
N                     int16_t y0,
N                     int16_t radius,
N                     eGFX_PixelState PS)
N{
N    int16_t f = 1 - radius;
N    int16_t ddF_x = 1;
N    int16_t ddF_y = -2 * radius;
N    int16_t x = 0;
N    int16_t y = radius;
N
N	if (radius == 0)
N		return;
N
N    eGFX_PutPixel(RC, x0, y0 + radius, PS);
N    eGFX_PutPixel(RC, x0, y0 - radius, PS);
N    eGFX_PutPixel(RC, x0 + radius, y0, PS);
N    eGFX_PutPixel(RC, x0 - radius, y0, PS);
N
N
N    while(x < y)
N    {
N        // ddF_x == 2 * x + 1;
N        // ddF_y == -2 * y;
N        // f == x*x + y*y - radius*radius + 2*x - y + 1;
N        if(f >= 0)
N        {
N            y--;
N            ddF_y += 2;
N            f += ddF_y;
N        }
N
N        x++;
N        ddF_x += 2;
N        f += ddF_x;
N        eGFX_PutPixel(RC, x0 + x, y0 + y, PS);
N        eGFX_PutPixel(RC, x0 - x, y0 + y, PS);
N        eGFX_PutPixel(RC, x0 + x, y0 - y, PS);
N        eGFX_PutPixel(RC, x0 - x, y0 - y, PS);
N        eGFX_PutPixel(RC, x0 + y, y0 + x, PS);
N        eGFX_PutPixel(RC, x0 - y, y0 + x, PS);
N        eGFX_PutPixel(RC, x0 + y, y0 - x, PS);
N        eGFX_PutPixel(RC, x0 - y, y0 - x, PS);
N    }
N}
N
Nvoid eGFX_DrawFilledCircle(eGFX_ImagePlane *RC,
N	int16_t x0,
N	int16_t y0,
N	int16_t radius,
N	eGFX_PixelState PS)
N{
N	int16_t f = 1 - radius;
N	int16_t ddF_x = 1;
N	int16_t ddF_y = -2 * radius;
N	int16_t x = 0;
N	int16_t y = radius;
N
N	if (radius == 0)
N		return;
N
N	eGFX_DrawHline(RC, x0 - radius, x0 + radius , y0, PS);
N
N	eGFX_DrawVline(RC, y0 - radius , y0 + radius , x0, PS);
N
N	while (x < y)
N	{
N		// ddF_x == 2 * x + 1;
N		// ddF_y == -2 * y;
N		// f == x*x + y*y - radius*radius + 2*x - y + 1;
N		if (f >= 0)
N		{
N			y--;
N			ddF_y += 2;
N			f += ddF_y;
N		}
N
N		x++;
N		ddF_x += 2;
N		f += ddF_x;
N		
N		eGFX_DrawHline(RC, x0 - x, x0 + x, y0 + y, PS);
N
N		eGFX_DrawHline(RC, x0 - x, x0 + x, y0 - y, PS);
N
N
N		eGFX_DrawHline(RC, x0 - y, x0 + y, y0 + x, PS);
N
N		eGFX_DrawHline(RC, x0 - y, x0 + y, y0 - x, PS);
N
N//		eGFX_PutPixel(RC, x0 + y, y0 + x, PS);
N	//	eGFX_PutPixel(RC, x0 - y, y0 + x, PS);
N	//	eGFX_PutPixel(RC, x0 + y, y0 - x, PS);
N	//	eGFX_PutPixel(RC, x0 - y, y0 - x, PS);
N	}
N}
N
N/***
N *       _____ _        _                ____                       _   _
N *      / ____| |      (_)              / __ \                     | | (_)
N *     | (___ | |_ _ __ _ _ __   __ _  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *      \___ \| __| '__| | '_ \ / _` | | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *      ____) | |_| |  | | | | | (_| | | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_____/ \__|_|  |_|_| |_|\__, |  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                               __/ |        | |
N *                              |___/         |_|
N */
N
Nstatic char eGFX_StringBuf[eGFX_MAX_PRINTF_BUF_LENGTH];
Xstatic char eGFX_StringBuf[64];
N
Nint16_t eGFX_ScaledDrawCharacter(eGFX_ImagePlane *Image,
N								int16_t StartX,
N								int16_t StartY,
N								uint8_t Character,
N								const eGFX_Font *MyFont,
N								float ScaleFactor)
N                                 
N{
N    //eGFX_Font does not contain any of the ASCII control codes
N    if(Character<0x20)
N        return StartX;
N
N    Character = Character - 0x20;
N
N    if(Character == 0x00)
N    {
N        return StartX +  (uint16_t)((MyFont->CharacterSprites[0]->SizeX * ScaleFactor)+0.5f); // No need to render anything....
N    }
N    else
N    {
N        eGFX_ScaledBlit(Image,StartX,StartY,MyFont->CharacterSprites[Character],ScaleFactor);
N    }
N
N    StartX += MyFont->CharacterSprites[Character]->SizeX * (int16_t)(ScaleFactor+.5f);
N    return StartX;
N}
N
Nint16_t eGFX_DrawCharacter(eGFX_ImagePlane *Image,
N	int16_t StartX,
N	int16_t StartY,
N	uint8_t Character,
N	const eGFX_Font *MyFont)
N{
N    //eGFX_Font does not contain any of the ASCII control codes
N    if(Character<0x20)
N        return StartX;
N
N    Character = Character - 0x20;
N
N    if(Character == 0x00)
N    {
N		return StartX + (MyFont->CharacterSprites[0]->SizeX);
N	}
N    else
N    {
N        eGFX_Blit(Image,StartX,StartY,MyFont->CharacterSprites[Character]);
N    }
N
N    StartX += MyFont->CharacterSprites[Character]->SizeX;
N    return StartX;
N}
N
Nint16_t eGFX_DrawCharacterFaded(eGFX_ImagePlane *Image,
N                           int16_t StartX,
N                           int16_t StartY,
N                           uint8_t Character,
N                           const eGFX_Font *MyFont,
N                           eGFX_PixelState PS)
N{
N    //eGFX_Font does not contain any of the ASCII control codes
N    if(Character<0x20)
N        return StartX;
N
N    Character = Character - 0x20;
N
N    if(Character == 0x00)
N    {
N		return StartX + (MyFont->CharacterSprites[0]->SizeX);
N	}
N    else
N    {
N        eGFX_BlitFaded(Image,StartX,StartY,MyFont->CharacterSprites[Character],PS);
N    }
N
N    StartX += MyFont->CharacterSprites[Character]->SizeX;
N    return StartX;
N}
N
N
Nint16_t eGFX_DrawCharacterColored(eGFX_ImagePlane *Image,
N                           int16_t StartX,
N                           int16_t StartY,
N                           uint8_t Character,
N                           const eGFX_Font *MyFont,
N                           eGFX_PixelState Color)
N{
N    //eGFX_Font does not contain any of the ASCII control codes
N    if(Character<0x20)
N        return StartX;
N
N    Character = Character - 0x20;
N
N    if(Character == 0x00)
N    {
N		return StartX + (MyFont->CharacterSprites[0]->SizeX);
N	}
N    else
N    {
N        eGFX_BlitColored(Image,StartX,StartY,MyFont->CharacterSprites[Character],Color);
N    }
N
N    StartX += MyFont->CharacterSprites[Character]->SizeX;
N    return StartX;
N}
N
N
Nint16_t eGFX_DrawCharacterShaded(eGFX_ImagePlane *Image,
N	int16_t StartX,
N	int16_t StartY,
N	uint8_t Character,
N	const eGFX_Font *MyFont,
N	float Shading)
N{
N	//eGFX_Font does not contain any of the ASCII control codes
N	if (Character<0x20)
N		return StartX;
N
N	Character = Character - 0x20;
N
N	if (Character == 0x00)
N	{
N		return StartX + (MyFont->CharacterSprites[0]->SizeX);
N	}
N	else
N	{
N		eGFX_BlitShaded(Image, StartX, StartY, MyFont->CharacterSprites[Character], Shading);
N	}
N
N	StartX += MyFont->CharacterSprites[Character]->SizeX;
N	return StartX;
N}
N
Nint16_t eGFX_GetStringWidth(char *String,
N                            const eGFX_Font *MyFont)
N{
N    uint8_t Ptr = 0;
N    uint8_t NextChar;
N    int16_t StringSize = 0;
N    NextChar = String[Ptr];
N    Ptr++;
N
N    while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
X    while((NextChar!=0) && (Ptr <64))
N    {
N        if(NextChar>=0x20 && NextChar<0x80)
N        {
N            //Remember that we don't endcode the wide space characters in the FONT table!
N            StringSize += MyFont->CharacterSprites[NextChar - 0x20]->SizeX + MyFont->InterCharacterSpacing;
N            NextChar = String[Ptr];
N            Ptr++;
N        }
N    }
N
N    return StringSize - MyFont->InterCharacterSpacing; //Remove the last intra character space!
N}
N
N
Nint16_t eGFX_GetStringWidth_CustomSpacing(char *String,
N        const eGFX_Font *MyFont,
N        uint16_t Spacing)
N{
N    uint8_t Ptr = 0;
N    uint8_t NextChar;
N    int16_t StringSize = 0;
N    NextChar = String[Ptr];
N    Ptr++;
N
N    while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
X    while((NextChar!=0) && (Ptr <64))
N    {
N        if(NextChar>=0x20 && NextChar<0x80)
N        {
N            StringSize += MyFont->CharacterSprites[NextChar - 0x20]->SizeX + Spacing;
N            NextChar = String[Ptr];
N            Ptr++;
N        }
N    }
N
N    return StringSize - Spacing; //Remove the last inter character space!
N}
N
N
Nvoid eGFX_DrawHorizontalCenteredString(eGFX_ImagePlane *Image,
N										int16_t StartY,
N										char *String,
N										const eGFX_Font *MyFont)
N{
N    int16_t StartX = 0;
N    StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth(String,MyFont))>>1;
N    eGFX_DrawString(Image,String,StartX,StartY,MyFont);
N}
N
N
N
Nint16_t eGFX_DrawRightAlignedCenteredString_CustomSpacing(eGFX_ImagePlane *Image,
N        int16_t StartY,
N        char *String,
N        const eGFX_Font *MyFont,
N        uint16_t CustomCharacterSpacing,
N        int16_t RightSideBuffer)
N{
N    int16_t StartX = 0;
N    StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth_CustomSpacing(String,MyFont,CustomCharacterSpacing) - RightSideBuffer);
N    eGFX_DrawString_CustomSpacing(Image,StartX,StartY,String,MyFont,CustomCharacterSpacing);
N    return StartX;
N}
N
Nvoid eGFX_DrawHorizontalCenteredString_CustomSpacing(eGFX_ImagePlane *Image,
N        int16_t StartY,
N        char *String,
N        const eGFX_Font *MyFont,
N        uint16_t Spacing)
N{
N    int16_t StartX = 0;
N    StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth_CustomSpacing(String,MyFont,Spacing))>>1;
N    eGFX_DrawString_CustomSpacing(Image,StartX,StartY,String,MyFont,Spacing);
N}
N
N
Nvoid eGFX_ScaledDrawString(eGFX_ImagePlane *Image,
N	int16_t StartX,
N	int16_t StartY,
N	char *String,
N	const eGFX_Font *MyFont,
N	float ScaleFactor)
N{
N    uint8_t Ptr = 0;
N    uint8_t NextChar;
N    NextChar = String[Ptr];
N
N    while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
X    while((NextChar!=0) && (Ptr <64))
N    {
N        StartX = eGFX_ScaledDrawCharacter(Image,StartX,StartY,NextChar,MyFont,ScaleFactor);
N        StartX += MyFont->InterCharacterSpacing * (int16_t)(ScaleFactor+.5f);
N        Ptr++;
N        NextChar = String[Ptr];
N    }
N}
N
N
Nvoid eGFX_ScaledDrawString_CustomSpacing(eGFX_ImagePlane *Image,
N	int16_t StartX,
N	int16_t StartY,
N	char *String,
N	const eGFX_Font *MyFont,
N	float ScaleFactor,
N	uint16_t Spacing)
N{
N    uint8_t Ptr = 0;
N    uint8_t NextChar;
N    NextChar = String[Ptr];
N
N    while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
X    while((NextChar!=0) && (Ptr <64))
N    {
N        StartX = eGFX_ScaledDrawCharacter(Image,StartX,StartY,NextChar,MyFont,ScaleFactor);
N        StartX += (int16_t)((ScaleFactor * Spacing) +.5f);
N        Ptr++;
N        NextChar = String[Ptr];
N    }
N}
N
Nint16_t  eGFX_DrawString(eGFX_ImagePlane *Image,
N	char *String,
N	int16_t StartX,
N	int16_t StartY,
N
N	const eGFX_Font *MyFont)
N{
N    uint8_t Ptr = 0;
N    uint8_t NextChar;
N    NextChar = String[Ptr];
N
N    while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
X    while((NextChar!=0) && (Ptr <64))
N    {
N        StartX = eGFX_DrawCharacter(Image,StartX,StartY,NextChar,MyFont);
N        StartX += MyFont->InterCharacterSpacing;
N        Ptr++;
N        NextChar = String[Ptr];
N    }
N
N    return StartX + 1;
N}
N
Nint16_t  eGFX_DrawStringFaded(eGFX_ImagePlane *Image,
N	char *String,
N	int16_t StartX,
N	int16_t StartY,
N	const eGFX_Font *MyFont, 
N	eGFX_PixelState PS)
N{
N    uint8_t Ptr = 0;
N    uint8_t NextChar;
N    NextChar = String[Ptr];
N
N    while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
X    while((NextChar!=0) && (Ptr <64))
N    {
N        StartX = eGFX_DrawCharacterFaded(Image,StartX,StartY,NextChar,MyFont,PS);
N        StartX += MyFont->InterCharacterSpacing;
N        Ptr++;
N        NextChar = String[Ptr];
N    }
N
N    return StartX + 1;
N}
N
Nint16_t  eGFX_DrawStringShaded(eGFX_ImagePlane *Image,
N	char *String,
N	int16_t StartX,
N	int16_t StartY,
N	const eGFX_Font *MyFont,
N	float Shading)
N{
N	uint8_t Ptr = 0;
N	uint8_t NextChar;
N	NextChar = String[Ptr];
N
N	while ((NextChar != 0) && (Ptr <eGFX_MAX_STRING_LEN))
X	while ((NextChar != 0) && (Ptr <64))
N	{
N		StartX = eGFX_DrawCharacterShaded(Image, StartX, StartY, NextChar, MyFont, Shading);
N		StartX += MyFont->InterCharacterSpacing;
N		Ptr++;
N		NextChar = String[Ptr];
N	}
N
N	return StartX + 1;
N}
N
Nint16_t  eGFX_DrawStringColored(eGFX_ImagePlane *Image,
N	char *String,
N	int16_t StartX,
N	int16_t StartY,
N	const eGFX_Font *MyFont,
N	uint32_t Color)
N{
N	uint8_t Ptr = 0;
N	uint8_t NextChar;
N	NextChar = String[Ptr];
N
N	while ((NextChar != 0) && (Ptr <eGFX_MAX_STRING_LEN))
X	while ((NextChar != 0) && (Ptr <64))
N	{
N		StartX = eGFX_DrawCharacterColored(Image, StartX, StartY, NextChar, MyFont, Color);
N		StartX += MyFont->InterCharacterSpacing;
N		Ptr++;
N		NextChar = String[Ptr];
N	}
N
N	return StartX + 1;
N}
N
N
Nint16_t  eGFX_printf(eGFX_ImagePlane *Image,
N                     int16_t StartX,
N                     int16_t StartY,
N                     const eGFX_Font *MyFont,
N                     char *FormatString,...)
N{
N    int16_t End;
N    va_list argptr;
N    va_start(argptr,FormatString);
X    __va_start(argptr, FormatString);
N#ifdef WIN32
S    sprintf_s((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
N#else
N    vsnprintf((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
X    vsnprintf((char *)eGFX_StringBuf,64,FormatString,argptr);
N#endif
N    va_end(argptr);
X    __va_end(argptr);
N    End = StartX + eGFX_GetStringWidth(eGFX_StringBuf,MyFont) + 1;
N	eGFX_DrawString(Image, eGFX_StringBuf, StartX, StartY, MyFont);
N    return End;
N}
N
Nint16_t  eGFX_printf_Colored(eGFX_ImagePlane *Image,
N                     int16_t StartX,
N                     int16_t StartY,
N                     const eGFX_Font *MyFont,
N											uint32_t Color,
N                     char *FormatString,...)
N{
N    int16_t End;
N    va_list argptr;
N    va_start(argptr,FormatString);
X    __va_start(argptr, FormatString);
N#ifdef WIN32
S    sprintf_s((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
N#else
N    vsnprintf((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
X    vsnprintf((char *)eGFX_StringBuf,64,FormatString,argptr);
N#endif
N    va_end(argptr);
X    __va_end(argptr);
N    End = StartX + eGFX_GetStringWidth(eGFX_StringBuf,MyFont) + 1;
N   	eGFX_DrawStringColored(Image, eGFX_StringBuf, StartX, StartY, MyFont,Color);
N    return End;
N}
N
Nint16_t  eGFX_printf_HorizontalCentered_Colored(eGFX_ImagePlane *Image,
N                                         int16_t StartY,
N                                        const eGFX_Font *MyFont,
N                                        uint32_t Color,
N                                        char *FormatString,...)
N{
N    int16_t End;
N    int16_t StartX;
N    va_list argptr;
N    va_start(argptr,FormatString);
X    __va_start(argptr, FormatString);
N#ifdef WIN32
S    sprintf_s((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
N#else
N    vsnprintf((char *)eGFX_StringBuf,eGFX_MAX_PRINTF_BUF_LENGTH,FormatString,argptr);
X    vsnprintf((char *)eGFX_StringBuf,64,FormatString,argptr);
N#endif
N    va_end(argptr);
X    __va_end(argptr);
N    
N    StartX = ((int16_t)Image->SizeX - eGFX_GetStringWidth(eGFX_StringBuf,MyFont))>>1;
N    End = StartX + eGFX_GetStringWidth(eGFX_StringBuf,MyFont) + 1;
N    
N	eGFX_DrawStringColored(Image, eGFX_StringBuf, StartX, StartY, MyFont,Color);
N    return End;
N}
N
N
N
Nint16_t eGFX_DrawString_CustomSpacing(eGFX_ImagePlane *Image,
N                                      int16_t StartX,
N                                      int16_t StartY,
N                                      char *String,
N                                      const eGFX_Font *MyFont,
N                                      uint16_t Spacing)
N{
N    uint8_t Ptr = 0;
N    uint8_t NextChar;
N    NextChar = String[Ptr];
N
N    while((NextChar!=0) && (Ptr <eGFX_MAX_STRING_LEN))
X    while((NextChar!=0) && (Ptr <64))
N    {
N        StartX = eGFX_DrawCharacter(Image,StartX,StartY,NextChar,MyFont);
N        StartX += Spacing;
N        Ptr++;
N        NextChar = String[Ptr];
N    }
N
N    return StartX+1;
N}
N
N//x,y is a the upper left corner of the blit, not the center
Nvoid eGFX_Blit(eGFX_ImagePlane *Destination,
N	int16_t x,
N	int16_t y,
N	const eGFX_ImagePlane *Sprite)
N{
N    uint16_t i,j;
N
N    for(j=0; j<Sprite->SizeY; j++)
N    {
N        for(i=0; i<Sprite->SizeX; i++)
N        {
N			eGFX_PutPixel(Destination, x + i, y + j, eGFX_GetPixel(Sprite, i, j));
N        }
N
N    }
N}
N
N//Blits a sprite.   x,y is the center of the image to place, not the upper left corner
N
Nvoid eGFX_CenteredBlit(eGFX_ImagePlane *Destination,
N	int16_t x,
N	int16_t y,
N	const eGFX_ImagePlane *Sprite)
N{
N	uint16_t i, j;
N
N	uint16_t X_Offset;
N	uint16_t Y_Offset;
N
N	X_Offset = (Sprite->SizeX + 1) >> 1;
N	Y_Offset = (Sprite->SizeY + 1) >> 1;
N
N	for (j = 0; j<Sprite->SizeY; j++)
N	{
N		for (i = 0; i<Sprite->SizeX; i++)
N		{
N			eGFX_PutPixel(Destination, x + i - X_Offset,
N									   y + j - Y_Offset,
N										eGFX_GetPixel(Sprite, i, j));
N		}
N
N	}
N}
N
N//x,y is a the upper left corner of the blit, not the center
Nvoid eGFX_BlitFaded(eGFX_ImagePlane *Destination,
N               int16_t x,
N               int16_t y,
N               const eGFX_ImagePlane *Sprite,
N               eGFX_PixelState PS)
N{
N    uint16_t i,j;
N
N    for(j=0; j<Sprite->SizeY; j++)
N    {
N        for(i=0; i<Sprite->SizeX; i++)
N        {
N			eGFX_PutPixel(Destination, x + i, y + j, (eGFX_GetPixel(Sprite, i, j) * PS)>>8);
N        }
N
N    }
N}
N
N//x,y is a the upper left corner of the blit, not the center
Nvoid eGFX_BlitShaded(eGFX_ImagePlane *Destination,
N	int16_t x,
N	int16_t y,
N	const eGFX_ImagePlane *Sprite,
N	float Shading)
N{
N	uint16_t i, j;
N
N	if (Shading < 0.0f)
N		Shading = 0.0f;
N	if (Shading >1.0f)
N		Shading = 1.0f;
N
N	for (j = 0; j<Sprite->SizeY; j++)
N	{
N		for (i = 0; i<Sprite->SizeX; i++)
N		{
N			eGFX_PutPixel(Destination, x + i, y + j,(eGFX_PixelState) (eGFX_GetPixel(Sprite, i, j) * Shading));
N		}
N
N	}
N}
N
N//x,y is a the upper left corner of the blit, not the center
Nvoid eGFX_BlitColored(eGFX_ImagePlane *Destination,
N	int16_t x,
N	int16_t y,
N	const eGFX_ImagePlane *Sprite,
N	uint32_t Color)
N{
N	uint16_t i, j;
N
N	for (j = 0; j<Sprite->SizeY; j++)
N	{
N		for (i = 0; i<Sprite->SizeX; i++)
N		{
N            if(eGFX_GetPixel(Sprite, i, j))
N                eGFX_PutPixel(Destination, x + i, y + j,Color);
N		}
N
N	}
N}
N
N
N
N//Draws a sprite that is scaled.   x,y is a center point, not a corner
Nvoid eGFX_ScaledBlit(eGFX_ImagePlane *Destination,
N					int16_t x,
N					int16_t y,
N					const eGFX_ImagePlane *Sprite,
N					float ScaleFactor)
N{
N    uint16_t i,j;
N    uint16_t DestinationSizeX;
N    uint16_t DestinationSizeY;
N	float StepX;
N	float StepY;
N    float SourcePixelX;
N    float SourcePixelY;
N	int16_t CenterOffsetX;
N	int16_t CenterOffsetY;
N
N
N	if (ScaleFactor <= 0.0f)
N		return;
N	
N	DestinationSizeX = (uint16_t)((ScaleFactor * (float)Sprite->SizeX)+0.5f);
N    DestinationSizeY = (uint16_t)((ScaleFactor * (float)Sprite->SizeY)+0.5f);
N
N	CenterOffsetX = (uint16_t)(((ScaleFactor * (float)Sprite->SizeX)/2.0f) + 0.5f);
N	CenterOffsetY = (uint16_t)(((ScaleFactor * (float)Sprite->SizeY)/2.0f) + 0.5f);
N
N	StepX = (float)Sprite->SizeX / (float)DestinationSizeX;
N	StepY = (float)Sprite->SizeY / (float)DestinationSizeY;
N
N	SourcePixelY = 0;
N
N    for(j=0; j<DestinationSizeY; j++)
N    {
N        SourcePixelX = 0;
N
N        for(i=0; i<DestinationSizeX; i++)
N        {
N			eGFX_PutPixel(Destination, 
N							x + i - CenterOffsetX,
N							y + j - CenterOffsetY,
N							eGFX_GetPixel(Sprite,
N										 (int16_t)(SourcePixelX + 0.5f),
N										 (int16_t)(SourcePixelY + 0.5f)
N										 )
N							);
N         
N			SourcePixelX += StepX;
N        }
N
N       
N		SourcePixelY += StepY;
N    }
N}
N
N/***
N *      _____  _                     ____                       _   _
N *     |  __ \| |                   / __ \                     | | (_)
N *     | |__) | | __ _ _ __   ___  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *     |  ___/| |/ _` | '_ \ / _ \ | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *     | |    | | (_| | | | |  __/ | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_|    |_|\__,_|_| |_|\___|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                                        | |
N *                                        |_|
N */
N
Nuint8_t eGFX_GetBitFromArray(uint8_t *DataArray,uint16_t Bit)
N{
N    uint8_t Mask;
N    Mask = 1 << (7-(Bit&0x7));
N
N    if(DataArray[Bit>>3] & Mask)
N        return 1;
N    else
N        return 0;
N}
N
N//This funntion grabs an 8-bit chunk from each row of an image plane.   Assumes we are byte aligned and is really only used for 1BPP and 4BPP
N//Image types to assist a driver
N//X is the starting pixel.   For 1BPP It will be byte aligned. I.e.  requesting X = 12 will get you the byte for X starting at 8.
N//for 4BPP, requesting X = 13 will get you the byte for X starting for 12
N
Nuint8_t eGFX_ImagePlane_GetByte(eGFX_ImagePlane   *Image,
N                                uint16_t X,
N                                uint16_t Y)
N{
N    uint32_t Offset;
N    uint32_t MemWidthInBytes;
N    uint8_t RetVal = 0;
N
N    switch(Image->Type)
N    {
N    	case eGFX_IMAGE_PLANE_4BPP:
X    	case 2:
N
N    		  if(X > Image->SizeX)   //Make sure we aren't asking for a chunk greater than the width of one row
N    		    {
N    	  		        X = (Image->SizeX - 1);
N    		    }
N    		  if(Y > Image->SizeY)
N    		    {
N    		  		  X = (Image->SizeY- - 1);
N    		    }
N
N    		    X &= ~((uint16_t)0x1); // Make sure we are on a byte boundary
N
N    		    //Properly Implement Rounding for odd bit plane sizes
N    		      MemWidthInBytes  = (Image->SizeX)>>1;
N
N    		      if(Image->SizeX & 0x1)
N    		  	        MemWidthInBytes++;
N
N    		      Offset = (Y * MemWidthInBytes) + (X>>1);
N    		      RetVal = Image->Data[Offset];
N
N    		break;
N
N    	case eGFX_IMAGE_PLANE_1BPP:
X    	case 0:
N
N    		  if(X > Image->SizeX)   //Make sure we aren't asking for a chunk greater than the width of one row
N    		    {
N    		        X = (Image->SizeX - 1);
N    		    }
N
N    		  if(Y > Image->SizeY)
N    		  {
N    			  X = (Image->SizeY- - 1);
N    		  }
N
N    		    X &= ~((uint16_t)0x7); // Make sure we are on a byte boundary
N    		    //Properly Implement Rounding for odd bit plane sizes
N    		    MemWidthInBytes  = (Image->SizeX)>>3;
N
N    		    if(Image->SizeX & 0x7)
N    		        MemWidthInBytes++;
N
N    		    Offset = (Y * MemWidthInBytes) + (X>>3);
N    		    RetVal = Image->Data[Offset];
N
N    		    break;
N
N    	default:
N
N    		// Other image planes not supported
N    		
N
N    		break;
N    }
N		
N		return RetVal;
N}
N
Nvoid eGFX_ImagePlaneInit(eGFX_ImagePlane   *Image,uint8_t * Store, int16_t SizeX,int16_t SizeY,uint8_t Type)
N{
N	Image->Data = Store;
N	Image->SizeX = SizeX;
N	Image->SizeY = SizeY;
N	Image->Type = Type;
N
N}
N
Nvoid eGFX_ImagePlane_Clear(eGFX_ImagePlane   *Image)
N{
N    uint32_t PlaneSpaceSize = 0;
N    uint32_t i = 0;
N
N    switch(Image->Type)
N    {
N        case  eGFX_IMAGE_PLANE_1BPP:
X        case  0:
N            PlaneSpaceSize = eGFX_CALCULATE_1BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
X            PlaneSpaceSize = (((Image ->SizeX+7)>>3) * Image ->SizeY);
N
N            for(i=0; i<PlaneSpaceSize; i++)
N            {
N                Image->Data[i] = 0;
N            }
N
N            break;
N
N        case  eGFX_IMAGE_PLANE_4BPP:
X        case  2:
N            PlaneSpaceSize = eGFX_CALCULATE_4BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
X            PlaneSpaceSize = (((Image ->SizeX+1)>>1) * Image ->SizeY);
N
N            for(i=0; i<PlaneSpaceSize; i++)
N            {
N                Image->Data[i] = 0;
N            }
N
N            break;
N
N        case  eGFX_IMAGE_PLANE_8BPP:
X        case  3:
N            PlaneSpaceSize = eGFX_CALCULATE_8BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
X            PlaneSpaceSize = ((Image ->SizeX) * Image ->SizeY);
N
N            for(i=0; i<PlaneSpaceSize; i++)
N            {
N                Image->Data[i] = 0;
N            }
N
N            break;
N
N        case  eGFX_IMAGE_PLANE_16BPP_565:
X        case  4:
N            PlaneSpaceSize = eGFX_CALCULATE_16BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
X            PlaneSpaceSize = ((Image ->SizeX*2) * Image ->SizeY);
N
N            for(i=0; i<PlaneSpaceSize>>1; i++)
N            {
N                 ((uint16_t *)(Image->Data))[i] = 0;
N            }
N
N            break;
N 
N        case  eGFX_IMAGE_PLANE_24BPP:
X        case  5:
N            PlaneSpaceSize = eGFX_CALCULATE_24BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
X            PlaneSpaceSize = ((Image ->SizeX*3) * Image ->SizeY);
N                            
N            for(i=0; i<PlaneSpaceSize; i++)
N            {
N                Image->Data[i] = 0;
N            }
N        
N            break;
N        
N        case  eGFX_IMAGE_PLANE_32BPP:
X        case  6:
N         
N            PlaneSpaceSize = eGFX_CALCULATE_32BPP_IMAGE_STORAGE_SPACE_SIZE(Image->SizeX,Image->SizeY);
X            PlaneSpaceSize = ((Image ->SizeX*4) * Image ->SizeY);
N
N            for(i=0; i<PlaneSpaceSize; i++)
N            {
N                Image->Data[i] = 0;
N            }
N
N            break;
N			
N        default:
N            break;
N    }
N}
N
N/***
N *      ______ _              _   _____      _       _      ____                       _   _
N *     |  ____(_)            | | |  __ \    (_)     | |    / __ \                     | | (_)
N *     | |__   ___  _____  __| | | |__) |__  _ _ __ | |_  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
N *     |  __| | \ \/ / _ \/ _` | |  ___/ _ \| | '_ \| __| | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
N *     | |    | |>  <  __/ (_| | | |  | (_) | | | | | |_  | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
N *     |_|    |_/_/\_\___|\__,_| |_|   \___/|_|_| |_|\__|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
X
N *                                                               | |
N *                                                               |_|
N */
N
Nconst FIXED_1_14 eGFX_Fixed_1_14_SineTable[256] = { 0x0000, 0x0192, 0x0324, 0x04B5, 0x0646, 0x07D6, 0x0964, 0x0AF1,
N                                                0x0C7C,0x0E06,0x0F8D,0x1112,0x1294,0x1413,0x1590,0x1709,
N                                                0x187E,0x19EF,0x1B5D,0x1CC6,0x1E2B,0x1F8C,0x20E7,0x223D,
N                                                0x238E,0x24DA,0x2620,0x2760,0x289A,0x29CE,0x2AFB,0x2C21,
N                                                0x2D41,0x2E5A,0x2F6C,0x3076,0x3179,0x3274,0x3368,0x3453,
N                                                0x3537,0x3612,0x36E5,0x37B0,0x3871,0x392B,0x39DB,0x3A82,
N                                                0x3B21,0x3BB6,0x3C42,0x3CC5,0x3D3F,0x3DAF,0x3E15,0x3E72,
N                                                0x3EC5,0x3F0F,0x3F4F,0x3F85,0x3FB1,0x3FD4,0x3FEC,0x3FFB,
N                                                0x4000,0x3FFB,0x3FEC,0x3FD4,0x3FB1,0x3F85,0x3F4F,0x3F0F,
N                                                0x3EC5,0x3E72,0x3E15,0x3DAF,0x3D3F,0x3CC5,0x3C42,0x3BB6,
N                                                0x3B21,0x3A82,0x39DB,0x392B,0x3871,0x37B0,0x36E5,0x3612,
N                                                0x3537,0x3453,0x3368,0x3274,0x3179,0x3076,0x2F6C,0x2E5A,
N                                                0x2D41,0x2C21,0x2AFB,0x29CE,0x289A,0x2760,0x2620,0x24DA,
N                                                0x238E,0x223D,0x20E7,0x1F8C,0x1E2B,0x1CC6,0x1B5D,0x19EF,
N                                                0x187E,0x1709,0x1590,0x1413,0x1294,0x1112,0x0F8D,0x0E06,
N                                                0x0C7C,0x0AF1,0x0964,0x07D6,0x0646,0x04B5,0x0324,0x0192,
N                                                0x0000,0xFE6E,0xFCDC,0xFB4B,0xF9BA,0xF82A,0xF69C,0xF50F,
N                                                0xF384,0xF1FA,0xF073,0xEEEE,0xED6C,0xEBED,0xEA70,0xE8F7,
N                                                0xE782,0xE611,0xE4A3,0xE33A,0xE1D5,0xE074,0xDF19,0xDDC3,
N                                                0xDC72,0xDB26,0xD9E0,0xD8A0,0xD766,0xD632,0xD505,0xD3DF,
N                                                0xD2BF,0xD1A6,0xD094,0xCF8A,0xCE87,0xCD8C,0xCC98,0xCBAD,
N                                                0xCAC9,0xC9EE,0xC91B,0xC850,0xC78F,0xC6D5,0xC625,0xC57E,
N                                                0xC4DF,0xC44A,0xC3BE,0xC33B,0xC2C1,0xC251,0xC1EB,0xC18E,
N                                                0xC13B,0xC0F1,0xC0B1,0xC07B,0xC04F,0xC02C,0xC014,0xC005,
N                                                0xC000,0xC005,0xC014,0xC02C,0xC04F,0xC07B,0xC0B1,0xC0F1,
N                                                0xC13B,0xC18E,0xC1EB,0xC251,0xC2C1,0xC33B,0xC3BE,0xC44A,
N                                                0xC4DF,0xC57E,0xC625,0xC6D5,0xC78F,0xC850,0xC91B,0xC9EE,
N                                                0xCAC9,0xCBAD,0xCC98,0xCD8C,0xCE87,0xCF8A,0xD094,0xD1A6,
N                                                0xD2BF,0xD3DF,0xD505,0xD632,0xD766,0xD8A0,0xD9E0,0xDB26,
N                                                0xDC72,0xDDC3,0xDF19,0xE074,0xE1D5,0xE33A,0xE4A3,0xE611,
N                                                0xE782,0xE8F7,0xEA70,0xEBED,0xED6C,0xEEEE,0xF073,0xF1FA,
N                                                0xF384,0xF50F,0xF69C,0xF82A,0xF9BA,0xFB4B,0xFCDC,0xFE6E
N                                              };
N
Nconst FIXED_7_8 eGFX_Fixed_7_8_SineTable[256] = { 0x0000, 0x0006, 0x000D, 0x0013, 0x0019, 0x001F, 0x0026, 0x002C,
N                                                0x0032,0x0038,0x003E,0x0044,0x004A,0x0050,0x0056,0x005C,
N                                                0x0062,0x0068,0x006D,0x0073,0x0079,0x007E,0x0084,0x0089,
N                                                0x008E,0x0093,0x0098,0x009D,0x00A2,0x00A7,0x00AC,0x00B1,
N                                                0x00B5,0x00B9,0x00BE,0x00C2,0x00C6,0x00CA,0x00CE,0x00D1,
N                                                0x00D5,0x00D8,0x00DC,0x00DF,0x00E2,0x00E5,0x00E7,0x00EA,
N                                                0x00ED,0x00EF,0x00F1,0x00F3,0x00F5,0x00F7,0x00F8,0x00FA,
N                                                0x00FB,0x00FC,0x00FD,0x00FE,0x00FF,0x00FF,0x0100,0x0100,
N                                                0x0100,0x0100,0x0100,0x00FF,0x00FF,0x00FE,0x00FD,0x00FC,
N                                                0x00FB,0x00FA,0x00F8,0x00F7,0x00F5,0x00F3,0x00F1,0x00EF,
N                                                0x00ED,0x00EA,0x00E7,0x00E5,0x00E2,0x00DF,0x00DC,0x00D8,
N                                                0x00D5,0x00D1,0x00CE,0x00CA,0x00C6,0x00C2,0x00BE,0x00B9,
N                                                0x00B5,0x00B1,0x00AC,0x00A7,0x00A2,0x009D,0x0098,0x0093,
N                                                0x008E,0x0089,0x0084,0x007E,0x0079,0x0073,0x006D,0x0068,
N                                                0x0062,0x005C,0x0056,0x0050,0x004A,0x0044,0x003E,0x0038,
N                                                0x0032,0x002C,0x0026,0x001F,0x0019,0x0013,0x000D,0x0006,
N                                                0x0000,0xFFFA,0xFFF3,0xFFED,0xFFE7,0xFFE1,0xFFDA,0xFFD4,
N                                                0xFFCE,0xFFC8,0xFFC2,0xFFBC,0xFFB6,0xFFB0,0xFFAA,0xFFA4,
N                                                0xFF9E,0xFF98,0xFF93,0xFF8D,0xFF87,0xFF82,0xFF7C,0xFF77,
N                                                0xFF72,0xFF6D,0xFF68,0xFF63,0xFF5E,0xFF59,0xFF54,0xFF4F,
N                                                0xFF4B,0xFF47,0xFF42,0xFF3E,0xFF3A,0xFF36,0xFF32,0xFF2F,
N                                                0xFF2B,0xFF28,0xFF24,0xFF21,0xFF1E,0xFF1B,0xFF19,0xFF16,
N                                                0xFF13,0xFF11,0xFF0F,0xFF0D,0xFF0B,0xFF09,0xFF08,0xFF06,
N                                                0xFF05,0xFF04,0xFF03,0xFF02,0xFF01,0xFF01,0xFF00,0xFF00,
N                                                0xFF00,0xFF00,0xFF00,0xFF01,0xFF01,0xFF02,0xFF03,0xFF04,
N                                                0xFF05,0xFF06,0xFF08,0xFF09,0xFF0B,0xFF0D,0xFF0F,0xFF11,
N                                                0xFF13,0xFF16,0xFF19,0xFF1B,0xFF1E,0xFF21,0xFF24,0xFF28,
N                                                0xFF2B,0xFF2F,0xFF32,0xFF36,0xFF3A,0xFF3E,0xFF42,0xFF47,
N                                                0xFF4B,0xFF4F,0xFF54,0xFF59,0xFF5E,0xFF63,0xFF68,0xFF6D,
N                                                0xFF72,0xFF77,0xFF7C,0xFF82,0xFF87,0xFF8D,0xFF93,0xFF98,
N                                                0xFF9E,0xFFA4,0xFFAA,0xFFB0,0xFFB6,0xFFBC,0xFFC2,0xFFC8,
N                                                0xFFCE,0xFFD4,0xFFDA,0xFFE1,0xFFE7,0xFFED,0xFFF3,0xFFFA
N                                            };
N
NFIXED_7_8 eGFX_GET_INT_FROM_FIXED_7_8_ROUND_TO_NEAREST(FIXED_7_8 A)
N{
N    FIXED_7_8 RetVal = 0;
N
N    if(A&0x0080)
N        RetVal = 1;
N
N    RetVal += A>>8;
N    return RetVal;
N}
N
NFIXED_7_8 eGFX_FLOAT_TO_FIXED_7_8(float A)
N{
N    if(A>(float)((FIXED_7_8)(32767)>>8))
N		return 	(FIXED_7_8)((float)(32767) / (float)(256));
N    else if(A<(float)((FIXED_7_8)(-32768)>>8))
N		return (FIXED_7_8)((float)(-32768) / (float)256);
N    else
N        return (FIXED_7_8)(A * 256);
N}
N
Nint16_t eGFX_FMul_15_0to0_15(int16_t A, int16_t B)
N{
N    return  (((long)(A) * (long)(B))>>15);
N}
N
Nint16_t eGFX_FMul_7_8to0_15(int16_t A, int16_t B)
N{
N    return  (((long)(A) * (long)(B))>>15);
N}
N
Nint16_t eGFX_FMul_15_0to7_8(int16_t A,int16_t B)
N{
N    return  (((long)(A) * (long)(B))>>8);
N}
N
Nint16_t eGFX_FMul_15_0to1_14(int16_t A,int16_t B)
N{
N    long temp;
N    temp = (((long)(A) * (long)(B))>>13);
N
N    if(temp&0x01)
N    {
N        temp = temp>>1;
N        temp = temp +1;
N    }
N    else
N    {
N        temp = temp>>1;
N    }
N
N    return  (int16_t)temp;
N}
N
Nint16_t eGFX_ABS(int16_t A)
N{
N    if(A<0)
N        return -A;
N    else
N        return A;
N}
N
N
N/***
N *                     _                 _                        _____ _____ 
N *         /\         (_)               | |                 /\   |  __ \_   _|
N *        /  \   _ __  _ _ __ ___   __ _| |_ ___  _ __     /  \  | |__) || |  
N *       / /\ \ | '_ \| | '_ ` _ \ / _` | __/ _ \| '__|   / /\ \ |  ___/ | |  
N *      / ____ \| | | | | | | | | | (_| | || (_) | |     / ____ \| |    _| |_ 
N *     /_/    \_\_| |_|_|_| |_| |_|\__,_|\__\___/|_|    /_/    \_\_|   |_____|
N *                                                                            
N *                                                                            
N */
N 
N//Statically Allocate the animator list
Nvoid *eGFX_Animators[eGFX_MAX_ANIMATORS];
Xvoid *eGFX_Animators[32];
N
Nstatic uint32_t eGFX_AnimatorEndIndex = 0;
N
N//Adds an animator object to the list.  returns TRUE if successful.
Nuint32_t eGFX_AddAnimator(void * Animator)
N{
N	if(eGFX_AnimatorEndIndex < eGFX_MAX_ANIMATORS)
X	if(eGFX_AnimatorEndIndex < 32)
N	{
N		eGFX_Animators[eGFX_AnimatorEndIndex] = Animator;
N		eGFX_AnimatorEndIndex++;
N		return TRUE;
X		return 1;
N	}
N	else
N	{
N		return FALSE;
X		return 0;
N	}
N}
Nvoid eGFX_ClearAnimators()
N{
N	eGFX_AnimatorEndIndex = 0;
N}
N
Nuint32_t eGFX_GetAnimatorCount()
N{
N	return eGFX_AnimatorEndIndex;
N}
N
Nuint32_t eGFX_AnimatorIsComplete(void * A)
N{
N	uint32_t RetVal = TRUE;
X	uint32_t RetVal = 1;
N
N	if(((eGFX_ObjectHeader *)(A))->State == eGFX_OBJECT_STATE_ANIMATION_ACTIVE)
X	if(((eGFX_ObjectHeader *)(A))->State == 2)
N	{
N		RetVal = FALSE;
X		RetVal = 0;
N	}
N
N	return RetVal;
N
N}
N
Nuint32_t eGFX_AnimatorsAreComplete()
N{
N	uint32_t RetVal = TRUE;
X	uint32_t RetVal = 1;
N	uint32_t i;
N	
N	for(i=0;i<eGFX_AnimatorEndIndex;i++)
N	{
N		if(eGFX_AnimatorIsComplete(eGFX_Animators[i]) == FALSE)
X		if(eGFX_AnimatorIsComplete(eGFX_Animators[i]) == 0)
N		{
N			RetVal = FALSE;
X			RetVal = 0;
N			break;
N		}
N	}
N	
N	return RetVal;
N}
N
Nvoid eGFX_PauseAnimator(void * A)
N{
N	((eGFX_AnimatorHeader *)(A))->State = eGFX_OBJECT_STATE_INACTIVE;
X	((eGFX_AnimatorHeader *)(A))->State = 0;
N}
N
Nvoid eGFX_StartAnimator(void * A)
N{
N	(*((eGFX_AnimatorHeader *)(A))).State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
X	(*((eGFX_AnimatorHeader *)(A))).State = 2;
N}
N
Nvoid eGFX_ResetAnimator(void * A)
N{
N
N	eGFX_AnimatorHeader *AH = A;
N	AH->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
X	AH->State = 2;
N	AH->CurrentStep= 0;
N}
N
Nvoid eGFX_ResetAnimators()
N{
N	for(int i=0;i<eGFX_AnimatorEndIndex;i++)
N		{
N    		 eGFX_ResetAnimator(eGFX_Animators[i]);
N		}
N}
N
Nvoid eGFX_PauseAnimators()
N{
N	uint32_t i;
N
N	for (i = 0; i<eGFX_AnimatorEndIndex; i++)
N	{
N		if (eGFX_Animators[i]!=NULL)
X		if (eGFX_Animators[i]!=0)
N			 eGFX_PauseAnimator(eGFX_Animators[i]);
N	}
N
N}
N
Nvoid eGFX_StartAnimators()
N{
N	uint32_t i;
N
N	for (i = 0; i<eGFX_AnimatorEndIndex; i++)
N	{
N		if (eGFX_Animators[i] != NULL)
X		if (eGFX_Animators[i] != 0)
N			eGFX_StartAnimator(&eGFX_Animators[i]);
N	}
N}
N
N
N
N/***
N*      ___     _     _   ___   ___ _            _
N*     | _ \___(_)_ _| |_| __| | _ |_)___ ___ __| |_
N*     |  _/ _ \ | ' \  _| _|  | _ \ (_-</ -_) _|  _|
N*     |_| \___/_|_||_\__|_|   |___/_/__/\___\__|\__|
N*
N*/
N
N//Initializes the data struct
Nuint32_t eGFX_InitPointF_BisectAnimator(eGFX_PointF_BisectAnimator *P,
N								  eGFX_PointF Target,
N								  eGFX_PointF *Current,
N							      uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N								  float FractionalBisect) //The amount of percentage of the distance the point should move each step. Values <=0 or >= 1 are set to 0.5
N
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		P->Target = Target;
N		P->Current = Current;
N		P->LastStep = LastStep;
N		P->FractionalBisect = FractionalBisect;
N
N		if (P->FractionalBisect <= 0.0f)
N			P->FractionalBisect = 0.5f;
N		else if (P->FractionalBisect >= 1.0f)
N			P->FractionalBisect = 0.5f;
N
N		P->Type = eGFX_OBJECT_POINTF_BISECT_ANIMATOR;
X		P->Type = 0xF0;
N		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
X		P->State = 2;
N		P->CurrentStep = 0;
N
N		return TRUE;
X		return 1;
N	}
N	else
N		return FALSE;
X		return 0;
N}
N
N//Initializes and adds a point bisect animator to the list.
N//returns true if successful, false if not
Nuint32_t eGFX_AddPointF_BisectAnimator(eGFX_PointF_BisectAnimator *P,
N									eGFX_PointF Target,
N									eGFX_PointF *Current,
N									uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N									float FractionalBisect) //The amount of percentage of the distance the point should move each step.   0 - 255 maps to 0 to 99.6%.   Zero is invalid
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		eGFX_InitPointF_BisectAnimator(P, Target, Current, LastStep, FractionalBisect);
N
N		return eGFX_AddAnimator(P);
N	}
N	else
N		return FALSE;
X		return 0;
N
N}
N
Nvoid eGFX_ProcessPointF_BisectAnimator(eGFX_PointF_BisectAnimator *P)
N{
N
N	if (P->Current == NULL)
X	if (P->Current == 0)
N		return;
N
N	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
X	if (P->State != 0)
N	{
N		//Move a fraction of a distance towards the target
N		P->Current->X += (P->Target.X - P->Current->X) * P->FractionalBisect;
N		P->Current->Y += (P->Target.Y - P->Current->Y) * P->FractionalBisect;
N
N		P->CurrentStep++;
N
N		//See if we have converged or beyond the max number of steps
N		if ((P->CurrentStep >= P->LastStep) ||
N			((fabs((P->Target.Y) - (P->Current->Y)) <= 0.5) && (fabs((P->Target.X) - (P->Current->X)) <= 0.5)))
N		{
N			*(P->Current) = P->Target;
N
N			P->State = eGFX_OBJECT_STATE_INACTIVE;
X			P->State = 0;
N		}
N	}
N}
N
N/***
N*      ___          _          ___   ___ _            _
N*     / __| __ __ _| |__ _ _ _| __| | _ |_)___ ___ __| |_
N*     \__ \/ _/ _` | / _` | '_| _|  | _ \ (_-</ -_) _|  _|
N*     |___/\__\__,_|_\__,_|_| |_|   |___/_/__/\___\__|\__|
N*
N*/
N
N//Initializes the data struct
Nuint32_t eGFX_InitScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P,
N	float Target,
N	float *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float FractionalBisect) //The amount of percentage of the distance the point should move each step. Values <=0 or >= 1 are set to 0.5
N
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		P->Target = Target;
N		P->Current = Current;
N		P->LastStep = LastStep;
N		P->FractionalBisect = FractionalBisect;
N
N		if (P->FractionalBisect <= 0.0f)
N			P->FractionalBisect = 0.5f;
N		else if (P->FractionalBisect >= 1.0f)
N			P->FractionalBisect = 0.5f;
N
N		P->Type = eGFX_OBJECT_SCALARF_BISECT_ANIMATOR;
X		P->Type = 0xF2;
N		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
X		P->State = 2;
N		P->CurrentStep = 0;
N
N		return TRUE;
X		return 1;
N	}
N	else
N		return FALSE;
X		return 0;
N}
N
N//Initializes and adds a point bisect animator to the list.
N//returns true if successful, false if not
Nuint32_t eGFX_AddScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P,
N	float Target,
N	float *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float FractionalBisect) //The amount of percentage of the distance the point should move each step.   0 - 255 maps to 0 to 99.6%.   Zero is invalid
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		eGFX_InitScalarF_BisectAnimator(P, Target, Current, LastStep, FractionalBisect);
N
N		return eGFX_AddAnimator(P);
N	}
N	else
N		return FALSE;
X		return 0;
N
N}
N
Nvoid eGFX_ProcessScalarF_BisectAnimator(eGFX_ScalarF_BisectAnimator *P)
N{
N
N	if (P->Current == NULL)
X	if (P->Current == 0)
N		return;
N
N	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
X	if (P->State != 0)
N	{
N		//Move a fraction of a distance towards the target
N		*P->Current += (P->Target - (*P->Current)) * P->FractionalBisect;
N		
N		P->CurrentStep++;
N
N		//See if we have converged or beyond the max number of steps
N		if ((P->CurrentStep >= P->LastStep) ||
N			((fabs((P->Target) - (*P->Current)) <= 0.5))
N			)
N		{
N			*(P->Current) = P->Target;
N
N			P->State = eGFX_OBJECT_STATE_INACTIVE;
X			P->State = 0;
N		}
N	}
N}
N
N
N/***
N*      ___          _            _    _
N*     / __| __ __ _| |__ _ _ _  | |  (_)_ _  ___ __ _ _ _
N*     \__ \/ _/ _` | / _` | '_| | |__| | ' \/ -_) _` | '_|
N*     |___/\__\__,_|_\__,_|_|   |____|_|_||_\___\__,_|_|
N*
N*/
N
N//Initializes the data struct
Nuint32_t eGFX_InitScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P,
N										float Target,
N										float *Current,
N										uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N										float Increment) 
N
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		P->Target = Target;
N		P->Current = Current;
N		P->LastStep = LastStep;
N		P->Increment = Increment;
N
N		P->Type = eGFX_OBJECT_SCALARF_LINEAR_ANIMATOR;
X		P->Type = 0xF3;
N		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
X		P->State = 2;
N		P->CurrentStep = 0;
N		
N		//Some sanity checking to see if an invalid increment was entered.  If so,  make the animator inactive
N		if (P->Increment < 0)
N		{
N			if (Target > *Current)
N			{
N
N				*Current = Target;
N				P->State = eGFX_OBJECT_STATE_INACTIVE;
X				P->State = 0;
N			}
N		}
N
N		else if (P->Increment > 0)
N		{
N			if (Target < *Current)
N			{
N				*Current = Target;
N				P->State = eGFX_OBJECT_STATE_INACTIVE;
X				P->State = 0;
N			}
N			
N		}
N
N		else
N		{
N			*Current = Target;
N			P->State = eGFX_OBJECT_STATE_INACTIVE;
X			P->State = 0;
N		}
N		
N		return TRUE;
X		return 1;
N	}
N	else
N		return FALSE;
X		return 0;
N}
N
N
N//Initializes and adds a scalarf linear animator and adds it to the list
N//returns true if successful, false if not
Nuint32_t eGFX_AddScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P,
N	float Target,
N	float *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float Increment) 
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		eGFX_InitScalarF_LinearAnimator(P, Target, Current, LastStep, Increment);
N
N		return eGFX_AddAnimator(P);
N	}
N	else
N		return FALSE;
X		return 0;
N
N}
N
Nvoid eGFX_ProcessScalarF_LinearAnimator(eGFX_ScalarF_LinearAnimator *P)
N{
N
N	if (P->Current == NULL)
X	if (P->Current == 0)
N		return;
N
N	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
X	if (P->State != 0)
N	{
N		//Move a fraction of a distance towards the target
N		*P->Current += P->Increment;
N
N		P->CurrentStep++;
N
N		//See if we have converged or beyond the max number of steps
N		if ((P->CurrentStep >= P->LastStep) ||
N			((fabs((P->Target) - (*P->Current)) < P->Increment)))
N		{
N			*(P->Current) = P->Target;
N
N			P->State = eGFX_OBJECT_STATE_INACTIVE;
X			P->State = 0;
N		}
N	}
N}
N
N/***
N*      ___     _     _   ___   _    _
N*     | _ \___(_)_ _| |_| __| | |  (_)_ _  ___ __ _ _ _
N*     |  _/ _ \ | ' \  _| _|  | |__| | ' \/ -_) _` | '_|
N*     |_| \___/_|_||_\__|_|   |____|_|_||_\___\__,_|_|
N*
N*/
N
N//Initializes the data struct
Nuint32_t eGFX_InitPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P,
N	eGFX_PointF Target,
N	eGFX_PointF *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float IncrementX,
N	float IncrementY)
N
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		P->Target = Target;
N		P->Current = Current;
N		P->LastStep = LastStep;
N		P->IncrementX = IncrementX;
N		P->IncrementY = IncrementY;
N
N		P->Type = eGFX_OBJECT_POINTF_LINEAR_ANIMATOR;
X		P->Type = 0xF1;
N		P->State = eGFX_OBJECT_STATE_ANIMATION_ACTIVE;
X		P->State = 2;
N		P->CurrentStep = 0;
N
N		//Some sanity checking to see if an invalid increment was entered.  If so,  make the animator inactive
N		if (P->IncrementX < 0)
N		{
N			if (P->Target.X > P->Current->X)
N			{
N				P->IncrementX = P->IncrementX * - 1.0f;
N			}
N		}
N
N		else
N		{
N			if (P->Target.X < P->Current->X)
N			{
N				P->IncrementX = P->IncrementX * -1.0f;
N			}
N		}
N
N		if (P->IncrementY < 0)
N		{
N			if (P->Target.Y > P->Current->Y)
N			{
N				P->IncrementY = P->IncrementY * -1.0f;
N			}
N		}
N
N		else
N		{
N			if (P->Target.Y < P->Current->Y)
N			{
N				P->IncrementY = P->IncrementY * -1.0f;
N			}
N		}
N
N
N		return TRUE;
X		return 1;
N	}
N	else
N		return FALSE;
X		return 0;
N}
N
N
N//Initializes and adds a scalarf linear animator and adds it to the list
N//returns true if successful, false if not
Nuint32_t eGFX_AddPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P,
N	eGFX_PointF Target,
N	eGFX_PointF *Current,
N	uint32_t LastStep,			//Maximum Allow Steps before forced convergence
N	float IncrementX,
N	float IncrementY)
N{
N	if (P != NULL)
X	if (P != 0)
N	{
N		eGFX_InitPointF_LinearAnimator(P, Target, Current, LastStep, IncrementX,IncrementY);
N
N		return eGFX_AddAnimator(P);
N	}
N	else
N		return FALSE;
X		return 0;
N
N}
N
Nvoid eGFX_ProcessPointF_LinearAnimator(eGFX_PointF_LinearAnimator *P)
N{
N
N	if (P->Current == NULL)
X	if (P->Current == 0)
N		return;
N
N	if (P->State != eGFX_OBJECT_STATE_INACTIVE)
X	if (P->State != 0)
N	{
N		
N		P->CurrentStep++;
N
N		if (fabs((P->Target.X) - (P->Current->X)) >= fabs(P->IncrementX))
N		{
N			P->Current->X += P->IncrementX;
N		}
N		
N		if (fabs((P->Target.Y) - (P->Current->Y)) >= fabs(P->IncrementY))
N		{
N			P->Current->Y += P->IncrementY;
N		}
N
N		//See if we have converged or beyond the max number of steps
N		if ((P->CurrentStep >= P->LastStep) ||
N												(
N													(fabs((P->Target.X) - (P->Current->X)) < fabs(P->IncrementX)) && 
N													(fabs((P->Target.Y) - (P->Current->Y)) < fabs(P->IncrementY))
N												)
N			)
N			
N		{
N			*(P->Current) = P->Target;
N
N			P->State = eGFX_OBJECT_STATE_INACTIVE;
X			P->State = 0;
N		}
N	}
N}
N
N/***
N*      ___                           _        _            _
N*     | _ \_ _ ___  __ ___ ______   /_\  _ _ (_)_ __  __ _| |_ ___ _ _ ___
N*     |  _/ '_/ _ \/ _/ -_|_-<_-<  / _ \| ' \| | '  \/ _` |  _/ _ \ '_(_-<
N*     |_| |_| \___/\__\___/__/__/ /_/ \_\_||_|_|_|_|_\__,_|\__\___/_| /__/
N*
N*/
N
Nvoid eGFX_ProcessAnimators()
N{
N	uint32_t i;
N
N	for (i = 0; i<eGFX_AnimatorEndIndex; i++)
N	{
N		if (eGFX_Animators[i] != NULL)
X		if (eGFX_Animators[i] != 0)
N		{
N
N			switch (((eGFX_ObjectHeader *)(eGFX_Animators[i]))->Type)
N			{
N			case eGFX_OBJECT_POINTF_BISECT_ANIMATOR:
X			case 0xF0:
N				eGFX_ProcessPointF_BisectAnimator(eGFX_Animators[i]);
N				break;
N
N			case eGFX_OBJECT_SCALARF_LINEAR_ANIMATOR:
X			case 0xF3:
N				eGFX_ProcessScalarF_LinearAnimator(eGFX_Animators[i]);
N				break;
N
N			case eGFX_OBJECT_POINTF_LINEAR_ANIMATOR:
X			case 0xF1:
N				
N				eGFX_ProcessPointF_LinearAnimator(eGFX_Animators[i]);
N
N					break;
N
N			case eGFX_OBJECT_SCALARF_BISECT_ANIMATOR:
X			case 0xF2:
N
N				eGFX_ProcessScalarF_BisectAnimator(eGFX_Animators[i]);
N
N				break;
N
N			default:
N				break;
N			}
N
N		}
N	}
N}
N
N
N/***
N *       ____  ____       _ ______ _____ _______            _____ _____ 
N *      / __ \|  _ \     | |  ____/ ____|__   __|     /\   |  __ \_   _|
N *     | |  | | |_) |    | | |__ | |       | |       /  \  | |__) || |  
N *     | |  | |  _ < _   | |  __|| |       | |      / /\ \ |  ___/ | |  
N *     | |__| | |_) | |__| | |___| |____   | |     / ____ \| |    _| |_ 
N *      \____/|____/ \____/|______\_____|  |_|    /_/    \_\_|   |_____|
N *                                                                      
N *                                                                      
N */
N
N 
N//Statically Allocate the Object List
Nvoid *eGFX_Objects[eGFX_MAX_OBJECTS];
Xvoid *eGFX_Objects[64];
N
Nstatic uint32_t eGFX_ObjectEndIndex = 0;
N
N//Adds an animator object to the list.  returns TRUE if successful.
Nuint32_t eGFX_AddObject(void * Object)
N{
N	if(eGFX_ObjectEndIndex < eGFX_MAX_OBJECTS)
X	if(eGFX_ObjectEndIndex < 64)
N	{
N		eGFX_Objects[eGFX_ObjectEndIndex] = Object;
N		eGFX_ObjectEndIndex++;
N		
N		return TRUE;
X		return 1;
N	}
N	else
N	{
N		return FALSE;
X		return 0;
N	}
N
N}
N
Nvoid eGFX_DisableObject(void * Object)
N{
N	if(Object!=NULL)
X	if(Object!=0)
N	{
N		((eGFX_ObjectHeader *)Object)->State = eGFX_OBJECT_STATE_INACTIVE;
X		((eGFX_ObjectHeader *)Object)->State = 0;
N
N	}
N
N}
N
Nvoid eGFX_EnableObject(void * Object)
N{
N	if(Object!=NULL)
X	if(Object!=0)
N	{
N		((eGFX_ObjectHeader *)Object)->State = eGFX_OBJECT_STATE_ACTIVE;
X		((eGFX_ObjectHeader *)Object)->State = 1;
N	}
N}
N
Nvoid eGFX_ClearObjects()
N{
N	eGFX_ObjectEndIndex = 0;
N}
N
Nuint32_t eGFX_GetObjectCount()
N{
N	return eGFX_ObjectEndIndex;
N}
N 
N/***
N*      _____        _   ___
N*     |_   _|____ _| |_| __|
N*       | |/ -_) \ /  _| _|
N*       |_|\___/_\_\\__|_|
N*
N*/
N
Nvoid eGFX_InitObjectTextF(eGFX_Obj_TextF * TF,
N	eGFX_PointF Position,
N	eGFX_Font *Font,
N	char * String
N	)
N
N{
N	TF->Type = eGFX_OBJECT_TEXTF;
X	TF->Type = 0x0000;
N	TF->State = eGFX_OBJECT_STATE_ACTIVE;
X	TF->State = 1;
N
N	if (String!=NULL)
X	if (String!=0)
N		TF->String = String;
N	
N	TF->Position = Position;
N	
N	if (Font!=NULL)
X	if (Font!=0)
N		TF->Font = Font;
N}
N
N
Nvoid eGFX_AddObjectTextF(eGFX_Obj_TextF * TF,
N	eGFX_PointF Position,
N	eGFX_Font *Font,
N	char * String
N	)
N
N{
N	eGFX_InitObjectTextF(TF,
N		Position,
N		Font,
N		String
N		);
N
N	eGFX_AddObject(TF);
N}
N
N
Nvoid	eGFX_DrawObject_TextF(eGFX_ImagePlane * Image, eGFX_Obj_TextF *TextF_Object)
N{
N	eGFX_DrawString(Image,
N				TextF_Object->String,
N				ROUND_TO_INT16_T(TextF_Object->Position.X),
X				((int16_t)(TextF_Object->Position . X + 0.5f)),
N				ROUND_TO_INT16_T(TextF_Object->Position.Y),
X				((int16_t)(TextF_Object->Position . Y + 0.5f)),
N				TextF_Object->Font);
N}
N
N/***
N*      ___ _            _        _   _____        _   ___
N*     / __| |_  __ _ __| |___ __| | |_   _|____ _| |_| __|
N*     \__ \ ' \/ _` / _` / -_) _` |   | |/ -_) \ /  _| _|
N*     |___/_||_\__,_\__,_\___\__,_|   |_|\___/_\_\\__|_|
N*
N*/
N
Nvoid eGFX_InitObjectShadedTextF(eGFX_Obj_ShadedTextF * TF,
N	eGFX_PointF Position,
N	eGFX_Font *Font,
N	char * String,
N	float Shading
N	)
N
N{
N	TF->Type = eGFX_OBJECT_SHADED_TEXTF;
X	TF->Type = 0x0001;
N	TF->State = eGFX_OBJECT_STATE_ACTIVE;
X	TF->State = 1;
N
N	if (String != NULL)
X	if (String != 0)
N		TF->String = String;
N
N	TF->Position = Position;
N
N
N	if (Shading > 1.0f)
N		Shading = 1.0f;
N	if (Shading < 0.0f)
N		Shading = 0.0f;
N
N	TF->Shading = Shading;
N
N	if (Font != NULL)
X	if (Font != 0)
N		TF->Font = Font;
N}
N
N
Nvoid eGFX_AddObjectShadedTextF(eGFX_Obj_ShadedTextF * TF,
N	eGFX_PointF Position,
N	eGFX_Font *Font,
N	char * String,
N	float Shading
N	)
N
N{
N	eGFX_InitObjectShadedTextF(TF,
N		Position,
N		Font,
N		String,
N		Shading
N		);
N
N	eGFX_AddObject(TF);
N}
N
N
Nvoid	eGFX_DrawObject_ShadedTextF(eGFX_ImagePlane * Image, eGFX_Obj_ShadedTextF *ShadedTextF_Object)
N{
N	eGFX_DrawStringShaded(Image,
N		ShadedTextF_Object->String,
N		ROUND_TO_INT16_T(ShadedTextF_Object->Position.X),
X		((int16_t)(ShadedTextF_Object->Position . X + 0.5f)),
N		ROUND_TO_INT16_T(ShadedTextF_Object->Position.Y),
X		((int16_t)(ShadedTextF_Object->Position . Y + 0.5f)),
N		ShadedTextF_Object->Font,
N		ShadedTextF_Object->Shading);
N}
N
N/***
N*      _    _          ___
N*     | |  (_)_ _  ___| __|
N*     | |__| | ' \/ -_) _|
N*     |____|_|_||_\___|_|
N*
N*/
N
Nvoid eGFX_InitObjectLineF(eGFX_Obj_LineF * LF,
N	eGFX_PointF Start,
N	eGFX_PointF End,
N	eGFX_PixelState PS
N	)
N
N{
N	LF->Type = eGFX_OBJECT_LINEF;
X	LF->Type = 0x0002;
N	
N	LF->State = eGFX_OBJECT_STATE_ACTIVE;
X	LF->State = 1;
N
N	LF->Start = Start;
N
N	LF->End = End;
N
N	LF->PixelState = PS;
N
N	
N}
N
N
Nvoid eGFX_AddObjectLineF(eGFX_Obj_LineF * LF,
N	eGFX_PointF Start,
N	eGFX_PointF End,
N	eGFX_PixelState PS
N	)
N
N{
N	eGFX_InitObjectLineF(LF,
N		Start,
N		End,
N		PS
N		);
N
N	eGFX_AddObject(LF);
N}
N
N
Nvoid	eGFX_DrawObject_LineF(eGFX_ImagePlane * Image, eGFX_Obj_LineF *LineF_Object)
N{
N	eGFX_DrawLine(Image, 
N		ROUND_TO_INT16_T(LineF_Object->Start.X),
X		((int16_t)(LineF_Object->Start . X + 0.5f)),
N		ROUND_TO_INT16_T(LineF_Object->Start.Y),
X		((int16_t)(LineF_Object->Start . Y + 0.5f)),
N		ROUND_TO_INT16_T(LineF_Object->End.X),
X		((int16_t)(LineF_Object->End . X + 0.5f)),
N		ROUND_TO_INT16_T(LineF_Object->End.Y),
X		((int16_t)(LineF_Object->End . Y + 0.5f)),
N		LineF_Object->PixelState);
N
N}
N
N/***
N*      ___          _ _       ___
N*     / __|_ __ _ _(_) |_ ___| __|
N*     \__ \ '_ \ '_| |  _/ -_) _|
N*     |___/ .__/_| |_|\__\___|_|
N*         |_|
N*/
N
Nvoid eGFX_InitObjectSpriteF(eGFX_Obj_SpriteF * S,
N							eGFX_PointF Position,
N							eGFX_ImagePlane *	Sprite
N	)
N
N{
N	S->Type = eGFX_OBJECT_SPRITEF;
X	S->Type = 0x0003;
N	
N	S->State = eGFX_OBJECT_STATE_ACTIVE;
X	S->State = 1;
N
N	S->Position = Position;
N
N	S->Sprite = Sprite;
N	
N}
N
N
Nvoid eGFX_AddObjectSpriteF(eGFX_Obj_SpriteF * S,
N							eGFX_PointF Position,
N							eGFX_ImagePlane *	Sprite
N							)
N
N{
N	eGFX_InitObjectSpriteF(S,
N		Position,
N		Sprite
N		);
N
N	eGFX_AddObject(S);
N}
N
N
Nvoid	eGFX_DrawObject_SpriteF(eGFX_ImagePlane * Image, eGFX_Obj_SpriteF *SpriteF_Object)
N{
N	eGFX_CenteredBlit(Image,
N		ROUND_TO_INT16_T(SpriteF_Object->Position.X),
X		((int16_t)(SpriteF_Object->Position . X + 0.5f)),
N		ROUND_TO_INT16_T(SpriteF_Object->Position.Y),
X		((int16_t)(SpriteF_Object->Position . Y + 0.5f)),
N		SpriteF_Object->Sprite);
N
N}
N
N
N/***
N*      ___          _ _       ___   ___          _        _
N*     / __|_ __ _ _(_) |_ ___| __| / __| __ __ _| |___ __| |
N*     \__ \ '_ \ '_| |  _/ -_) _|  \__ \/ _/ _` | / -_) _` |
N*     |___/ .__/_| |_|\__\___|_|   |___/\__\__,_|_\___\__,_|
N*         |_|
N*/
N
Nvoid eGFX_InitObjectScaledSpriteF(eGFX_Obj_ScaledSpriteF * S,
N	eGFX_PointF Position,
N	eGFX_ImagePlane *	Sprite,
N	float Scale
N	)
N
N{
N	S->Type = eGFX_OBJECT_SCALED_SPRITEF;
X	S->Type = 0x0004;
N
N	S->State = eGFX_OBJECT_STATE_ACTIVE;
X	S->State = 1;
N
N	S->Position = Position;
N
N	S->Sprite = Sprite;
N
N}
N
N
Nvoid eGFX_AddObjectScaledSpriteF(eGFX_Obj_ScaledSpriteF * S,
N	eGFX_PointF Position,
N	eGFX_ImagePlane *	Sprite,
N	float Scale
N	)
N
N{
N	eGFX_InitObjectScaledSpriteF(S,
N		Position,
N		Sprite,
N		Scale
N		);
N
N	eGFX_AddObject(S);
N}
N
N
Nvoid	eGFX_DrawObject_ScaledSpriteF(eGFX_ImagePlane * Image, eGFX_Obj_ScaledSpriteF *SpriteF_Object)
N{
N		eGFX_ScaledBlit(Image, 
N			ROUND_TO_INT16_T(SpriteF_Object->Position.X),
X			((int16_t)(SpriteF_Object->Position . X + 0.5f)),
N			ROUND_TO_INT16_T(SpriteF_Object->Position.Y),
X			((int16_t)(SpriteF_Object->Position . Y + 0.5f)),
N			SpriteF_Object->Sprite, 
N			SpriteF_Object->Scale);
N}
N
N/***
N*       ___ _        _     ___
N*      / __(_)_ _ __| |___| __|
N*     | (__| | '_/ _| / -_) _|
N*      \___|_|_| \__|_\___|_|
N*
N*/
N
Nvoid eGFX_InitObjectCircleF(eGFX_Obj_CircleF * CF,
N							eGFX_PointF Position,
N							float Radius,
N							eGFX_PixelState PS,
N							uint8_t CircleF_RenderOption
N							)
N{
N	CF->Type = eGFX_OBJECT_CIRCLEF;
X	CF->Type = 0x0006;
N
N	CF->State = eGFX_OBJECT_STATE_ACTIVE;
X	CF->State = 1;
N
N	CF->Position = Position;
N
N	CF->Radius = Radius;
N
N	CF->RenderOption = CircleF_RenderOption;
N
N	CF->PixelState = PS;
N}
N
N
Nvoid eGFX_AddObjectCircleF( eGFX_Obj_CircleF * CF,
N							eGFX_PointF Position,
N							float Radius,
N							eGFX_PixelState PS,
N							uint8_t CircleF_RenderOption
N							)
N{
N	eGFX_InitObjectCircleF(CF,
N		Position,
N		Radius,
N		PS,
N		CircleF_RenderOption
N		);
N
N	eGFX_AddObject(CF);
N}
N
N
Nvoid	eGFX_DrawObject_CircleF(eGFX_ImagePlane * Image, eGFX_Obj_CircleF *CircleF_Object)
N{
N	if (CircleF_Object->RenderOption == eGFX_CIRCLEF_RENDER_OPTION_OUTLINE)
X	if (CircleF_Object->RenderOption == 0x00)
N	{
N		eGFX_DrawCircle(Image, ROUND_TO_INT16_T(CircleF_Object->Position.X), ROUND_TO_INT16_T(CircleF_Object->Position.Y), ROUND_TO_INT16_T(CircleF_Object->Radius), CircleF_Object->PixelState);
X		eGFX_DrawCircle(Image, ((int16_t)(CircleF_Object->Position . X + 0.5f)), ((int16_t)(CircleF_Object->Position . Y + 0.5f)), ((int16_t)(CircleF_Object->Radius + 0.5f)), CircleF_Object->PixelState);
N	}
N	else
N	{
N		eGFX_DrawFilledCircle(Image, ROUND_TO_INT16_T(CircleF_Object->Position.X), ROUND_TO_INT16_T(CircleF_Object->Position.Y), ROUND_TO_INT16_T(CircleF_Object->Radius), CircleF_Object->PixelState);
X		eGFX_DrawFilledCircle(Image, ((int16_t)(CircleF_Object->Position . X + 0.5f)), ((int16_t)(CircleF_Object->Position . Y + 0.5f)), ((int16_t)(CircleF_Object->Radius + 0.5f)), CircleF_Object->PixelState);
N		
N	}
N
N}
N
N
N
N/***
N*       ___          ___
N*      | _ ) _____ _| __|
N*      | _ \/ _ \ \ / _|
N*      |___/\___/_\_\_|
N*
N*/
N
N
Nvoid eGFX_InitObjectBoxF(eGFX_Obj_BoxF * BF,
N	eGFX_PointF P1,
N	eGFX_PointF P2,
N	eGFX_PixelState PS,
N	uint8_t BoxF_RenderOption
N	)
N{
N	BF->Type = eGFX_OBJECT_BOXF;
X	BF->Type = 0x0005;
N
N	BF->State = eGFX_OBJECT_STATE_ACTIVE;
X	BF->State = 1;
N
N	BF->P1 = P1;
N
N	BF->P2 = P2;
N
N	BF->BoxF_RenderOption = BoxF_RenderOption;
N
N	BF->PixelState = PS;
N
N}
N
N
Nvoid eGFX_AddObjectBoxF(eGFX_Obj_BoxF * BF,
N	eGFX_PointF P1,
N	eGFX_PointF P2,
N	eGFX_PixelState PS,
N	uint8_t BoxF_RenderOption
N	)
N
N{
N	eGFX_InitObjectBoxF(BF,
N		P1,
N		P2,
N		PS,
N		BoxF_RenderOption
N		);
N
N	eGFX_AddObject(BF);
N}
N
N
Nvoid	eGFX_DrawObject_BoxF(eGFX_ImagePlane * Image, eGFX_Obj_BoxF *BoxF_Object)
N{
N	int16_t i;
N	int16_t Start, End;
N
N
N	if (BoxF_Object->BoxF_RenderOption == eGFX_BOXF_RENDER_OPTION_OUTLINE)
X	if (BoxF_Object->BoxF_RenderOption == 0x00)
N	{
N		eGFX_DrawHline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.X), ROUND_TO_INT16_T(BoxF_Object->P2.X), ROUND_TO_INT16_T(BoxF_Object->P1.Y), BoxF_Object->PixelState);
X		eGFX_DrawHline(Image, ((int16_t)(BoxF_Object->P1 . X + 0.5f)), ((int16_t)(BoxF_Object->P2 . X + 0.5f)), ((int16_t)(BoxF_Object->P1 . Y + 0.5f)), BoxF_Object->PixelState);
N		eGFX_DrawHline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.X), ROUND_TO_INT16_T(BoxF_Object->P2.X), ROUND_TO_INT16_T(BoxF_Object->P2.Y), BoxF_Object->PixelState);
X		eGFX_DrawHline(Image, ((int16_t)(BoxF_Object->P1 . X + 0.5f)), ((int16_t)(BoxF_Object->P2 . X + 0.5f)), ((int16_t)(BoxF_Object->P2 . Y + 0.5f)), BoxF_Object->PixelState);
N		eGFX_DrawVline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.Y), ROUND_TO_INT16_T(BoxF_Object->P2.Y), ROUND_TO_INT16_T(BoxF_Object->P1.X), BoxF_Object->PixelState);
X		eGFX_DrawVline(Image, ((int16_t)(BoxF_Object->P1 . Y + 0.5f)), ((int16_t)(BoxF_Object->P2 . Y + 0.5f)), ((int16_t)(BoxF_Object->P1 . X + 0.5f)), BoxF_Object->PixelState);
N		eGFX_DrawVline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.Y), ROUND_TO_INT16_T(BoxF_Object->P2.Y), ROUND_TO_INT16_T(BoxF_Object->P2.X), BoxF_Object->PixelState);
X		eGFX_DrawVline(Image, ((int16_t)(BoxF_Object->P1 . Y + 0.5f)), ((int16_t)(BoxF_Object->P2 . Y + 0.5f)), ((int16_t)(BoxF_Object->P2 . X + 0.5f)), BoxF_Object->PixelState);
N	}
N	else
N	{
N		if ((ROUND_TO_INT16_T(BoxF_Object->P1.Y) > ROUND_TO_INT16_T(BoxF_Object->P2.Y)))
X		if ((((int16_t)(BoxF_Object->P1 . Y + 0.5f)) > ((int16_t)(BoxF_Object->P2 . Y + 0.5f))))
N		{
N			End = ROUND_TO_INT16_T(BoxF_Object->P1.Y);
X			End = ((int16_t)(BoxF_Object->P1 . Y + 0.5f));
N			Start = ROUND_TO_INT16_T(BoxF_Object->P2.Y);
X			Start = ((int16_t)(BoxF_Object->P2 . Y + 0.5f));
N		}
N		else 
N		{
N			End = ROUND_TO_INT16_T(BoxF_Object->P2.Y);
X			End = ((int16_t)(BoxF_Object->P2 . Y + 0.5f));
N			Start = ROUND_TO_INT16_T(BoxF_Object->P1.Y);
X			Start = ((int16_t)(BoxF_Object->P1 . Y + 0.5f));
N		}
N		for (i = Start; i < End + 1; i++)
N		{
N			eGFX_DrawHline(Image, ROUND_TO_INT16_T(BoxF_Object->P1.X), ROUND_TO_INT16_T(BoxF_Object->P2.X), i, BoxF_Object->PixelState);
X			eGFX_DrawHline(Image, ((int16_t)(BoxF_Object->P1 . X + 0.5f)), ((int16_t)(BoxF_Object->P2 . X + 0.5f)), i, BoxF_Object->PixelState);
N		}
N	}
N
N}
N
N/***
N*      ___                     ___  _     _        _
N*     |   \ _ _ __ ___ __ __  / _ \| |__ (_)___ __| |_ ___
N*     | |) | '_/ _` \ V  V / | (_) | '_ \| / -_) _|  _(_-<
N*     |___/|_| \__,_|\_/\_/   \___/|_.__// \___\__|\__/__/
N*                                      |__/
N*/
N
Nvoid eGFX_DrawObjects(eGFX_ImagePlane *IP)
N{
N	uint32_t i;
N
N	for (i = 0; i<eGFX_ObjectEndIndex; i++)
N	{
N		if (eGFX_Objects[i] != NULL)
X		if (eGFX_Objects[i] != 0)
N		{
N			if (((eGFX_ObjectHeader *)(eGFX_Objects[i]))->State != eGFX_OBJECT_STATE_INACTIVE)
X			if (((eGFX_ObjectHeader *)(eGFX_Objects[i]))->State != 0)
N			{
N			
N			//object handlers here!
N			switch (((eGFX_ObjectHeader *)(eGFX_Objects[i]))->Type)
N				{
N
N
N				case eGFX_OBJECT_TEXTF:
X				case 0x0000:
N					eGFX_DrawObject_TextF(IP, (eGFX_Obj_TextF *)eGFX_Objects[i]);
N					break;
N
N				case eGFX_OBJECT_SHADED_TEXTF:
X				case 0x0001:
N					eGFX_DrawObject_ShadedTextF(IP, (eGFX_Obj_ShadedTextF *)eGFX_Objects[i]);
N					break;
N
N				case eGFX_OBJECT_LINEF:
X				case 0x0002:
N					eGFX_DrawObject_LineF(IP, (eGFX_Obj_LineF *)eGFX_Objects[i]);
N					break;
N				case eGFX_OBJECT_SPRITEF:
X				case 0x0003:
N					eGFX_DrawObject_SpriteF(IP, (eGFX_Obj_SpriteF *)eGFX_Objects[i]);
N					break;
N				case eGFX_OBJECT_SCALED_SPRITEF:
X				case 0x0004:
N					eGFX_DrawObject_ScaledSpriteF(IP, (eGFX_Obj_ScaledSpriteF *)eGFX_Objects[i]);
N					break;
N
N				case eGFX_OBJECT_BOXF:
X				case 0x0005:
N					eGFX_DrawObject_BoxF(IP, (eGFX_Obj_BoxF *)eGFX_Objects[i]);
N					break;
N
N				case eGFX_OBJECT_CIRCLEF:
X				case 0x0006:
N					eGFX_DrawObject_CircleF(IP, (eGFX_Obj_CircleF *)eGFX_Objects[i]);
N					break;
N
N				default:
N
N					break;
N				}
N			}
N
N		}
N
N
N	}
N}
N
N

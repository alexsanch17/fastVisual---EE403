; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\egfx_driver_lpcxpresso_54608.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\egfx_driver_lpcxpresso_54608.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\egfx_driver_lpcxpresso_54608.crf SRC\eGFX\Drivers\eGFX_Driver_LPCXPresso_54608.c]
                          THUMB

                          AREA ||i.APP_I2C_Init||, CODE, READONLY, ALIGN=2

                  APP_I2C_Init PROC
;;;125    }
;;;126    status_t APP_I2C_Init(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;127    {
;;;128        i2c_master_config_t masterConfig;
;;;129    
;;;130        I2C_MasterGetDefaultConfig(&masterConfig);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       I2C_MasterGetDefaultConfig
;;;131    
;;;132        /* Change the default baudrate configuration */
;;;133        masterConfig.baudRate_Bps = I2C_BAUDRATE;
000008  4804              LDR      r0,|L1.28|
00000a  9001              STR      r0,[sp,#4]
;;;134    
;;;135        /* Initialize the I2C master peripheral */
;;;136        I2C_MasterInit(EXAMPLE_I2C_MASTER, &masterConfig, I2C_MASTER_CLOCK_FREQUENCY);
00000c  4a04              LDR      r2,|L1.32|
00000e  4669              MOV      r1,sp
000010  4804              LDR      r0,|L1.36|
000012  f7fffffe          BL       I2C_MasterInit
;;;137    
;;;138        return kStatus_Success;
000016  2000              MOVS     r0,#0
;;;139    }
000018  bd0e              POP      {r1-r3,pc}
;;;140    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x000186a0
                  |L1.32|
                          DCD      0x00b71b00
                  |L1.36|
                          DCD      0x40088000

                          AREA ||i.APP_LCDC_Init||, CODE, READONLY, ALIGN=2

                  APP_LCDC_Init PROC
;;;89     
;;;90     status_t APP_LCDC_Init(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
000002  b08a              SUB      sp,sp,#0x28
;;;92         /* Initialize the display. */
;;;93         lcdc_config_t lcdConfig;
;;;94     
;;;95         LCDC_GetDefaultConfig(&lcdConfig);
000004  a801              ADD      r0,sp,#4
000006  f7fffffe          BL       LCDC_GetDefaultConfig
;;;96     
;;;97         lcdConfig.panelClock_Hz = LCD_PANEL_CLK;
00000a  482b              LDR      r0,|L2.184|
00000c  9001              STR      r0,[sp,#4]
;;;98         lcdConfig.ppl = LCD_PPL;
00000e  f44f70f0          MOV      r0,#0x1e0
000012  f8ad0008          STRH     r0,[sp,#8]
;;;99         lcdConfig.hsw = LCD_HSW;
000016  2002              MOVS     r0,#2
000018  f88d000a          STRB     r0,[sp,#0xa]
;;;100        lcdConfig.hfp = LCD_HFP;
00001c  2008              MOVS     r0,#8
00001e  f88d000b          STRB     r0,[sp,#0xb]
;;;101        lcdConfig.hbp = LCD_HBP;
000022  202b              MOVS     r0,#0x2b
000024  f88d000c          STRB     r0,[sp,#0xc]
;;;102        lcdConfig.lpp = LCD_LPP;
000028  f44f7088          MOV      r0,#0x110
00002c  f8ad000e          STRH     r0,[sp,#0xe]
;;;103        lcdConfig.vsw = LCD_VSW;
000030  200a              MOVS     r0,#0xa
000032  f88d0010          STRB     r0,[sp,#0x10]
;;;104        lcdConfig.vfp = LCD_VFP;
000036  2004              MOVS     r0,#4
000038  f88d0011          STRB     r0,[sp,#0x11]
;;;105        lcdConfig.vbp = LCD_VBP;
00003c  200c              MOVS     r0,#0xc
00003e  f88d0012          STRB     r0,[sp,#0x12]
;;;106        lcdConfig.polarityFlags = LCD_POL_FLAGS;
000042  0240              LSLS     r0,r0,#9
000044  f8ad0014          STRH     r0,[sp,#0x14]
;;;107        lcdConfig.upperPanelAddr = FRAMEBUFFER1_ADDR;
000048  f04f4020          MOV      r0,#0xa0000000
00004c  9006              STR      r0,[sp,#0x18]
;;;108      //  lcdConfig.lowerPanelAddr = FRAMEBUFFER1_ADDR;
;;;109        
;;;110    	lcdConfig.bpp = kLCDC_16BPP565;
00004e  2006              MOVS     r0,#6
000050  f88d0020          STRB     r0,[sp,#0x20]
;;;111        lcdConfig.display = kLCDC_DisplayTFT;
000054  2020              MOVS     r0,#0x20
000056  f88d0025          STRB     r0,[sp,#0x25]
;;;112        lcdConfig.swapRedBlue = true;
00005a  2001              MOVS     r0,#1
00005c  f88d0024          STRB     r0,[sp,#0x24]
;;;113    
;;;114        LCDC_Init(APP_LCD, &lcdConfig, LCD_INPUT_CLK_FREQ);
000060  200d              MOVS     r0,#0xd
000062  f7fffffe          BL       CLOCK_GetFreq
000066  4604              MOV      r4,r0
000068  4622              MOV      r2,r4
00006a  a901              ADD      r1,sp,#4
00006c  4813              LDR      r0,|L2.188|
00006e  f7fffffe          BL       LCDC_Init
;;;115    
;;;116        ///* Trigger interrupt at start of every vertical back porch. */
;;;117        
;;;118        LCDC_EnableInterrupts(APP_LCD, kLCDC_BaseAddrUpdateInterrupt);
000072  2104              MOVS     r1,#4
000074  4811              LDR      r0,|L2.188|
000076  f7fffffe          BL       LCDC_EnableInterrupts
;;;119        NVIC_EnableIRQ(APP_LCD_IRQn);
00007a  2035              MOVS     r0,#0x35
00007c  f000021f          AND      r2,r0,#0x1f
000080  2101              MOVS     r1,#1
000082  4091              LSLS     r1,r1,r2
000084  0942              LSRS     r2,r0,#5
000086  0092              LSLS     r2,r2,#2
000088  f10222e0          ADD      r2,r2,#0xe000e000
00008c  f8c21100          STR      r1,[r2,#0x100]
000090  bf00              NOP      
;;;120    
;;;121        LCDC_Start(APP_LCD);
000092  bf00              NOP      
000094  4809              LDR      r0,|L2.188|
000096  6980              LDR      r0,[r0,#0x18]
000098  f0400001          ORR      r0,r0,#1
00009c  4907              LDR      r1,|L2.188|
00009e  6188              STR      r0,[r1,#0x18]
0000a0  bf00              NOP      
;;;122        LCDC_PowerUp(APP_LCD);
0000a2  bf00              NOP      
0000a4  4608              MOV      r0,r1
0000a6  6980              LDR      r0,[r0,#0x18]
0000a8  f4406000          ORR      r0,r0,#0x800
0000ac  6188              STR      r0,[r1,#0x18]
0000ae  bf00              NOP      
;;;123    
;;;124        return kStatus_Success;
0000b0  2000              MOVS     r0,#0
;;;125    }
0000b2  b00a              ADD      sp,sp,#0x28
0000b4  bd10              POP      {r4,pc}
;;;126    status_t APP_I2C_Init(void)
                          ENDP

0000b6  0000              DCW      0x0000
                  |L2.184|
                          DCD      0x00895440
                  |L2.188|
                          DCD      0x40083000

                          AREA ||i.BOARD_InitPWM||, CODE, READONLY, ALIGN=2

                  BOARD_InitPWM PROC
;;;55     
;;;56     static void BOARD_InitPWM(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
000002  b086              SUB      sp,sp,#0x18
;;;58         sctimer_config_t config;
;;;59         sctimer_pwm_signal_param_t pwmParam;
;;;60         uint32_t event;
;;;61     
;;;62         CLOCK_AttachClk(kMCLK_to_SCT_CLK);
000004  f44f708e          MOV      r0,#0x11c
000008  f7fffffe          BL       CLOCK_AttachClk
;;;63     
;;;64         CLOCK_SetClkDiv(kCLOCK_DivSctClk, 2, true);
00000c  2201              MOVS     r2,#1
00000e  2102              MOVS     r1,#2
000010  202d              MOVS     r0,#0x2d
000012  f7fffffe          BL       CLOCK_SetClkDiv
;;;65     
;;;66         SCTIMER_GetDefaultConfig(&config);
000016  a804              ADD      r0,sp,#0x10
000018  f7fffffe          BL       SCTIMER_GetDefaultConfig
;;;67     
;;;68         SCTIMER_Init(SCT0, &config);
00001c  a904              ADD      r1,sp,#0x10
00001e  480e              LDR      r0,|L3.88|
000020  f7fffffe          BL       SCTIMER_Init
;;;69     
;;;70         pwmParam.output = kSCTIMER_Out_5;
000024  2005              MOVS     r0,#5
000026  f88d000c          STRB     r0,[sp,#0xc]
;;;71         pwmParam.level = kSCTIMER_HighTrue;
00002a  2001              MOVS     r0,#1
00002c  f88d000d          STRB     r0,[sp,#0xd]
;;;72         pwmParam.dutyCyclePercent = 5;
000030  2005              MOVS     r0,#5
000032  f88d000e          STRB     r0,[sp,#0xe]
;;;73     
;;;74         SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_CenterAlignedPwm, 1000U, CLOCK_GetFreq(kCLOCK_Sct), &event);
000036  200a              MOVS     r0,#0xa
000038  f7fffffe          BL       CLOCK_GetFreq
00003c  4604              MOV      r4,r0
00003e  a802              ADD      r0,sp,#8
000040  f44f737a          MOV      r3,#0x3e8
000044  2201              MOVS     r2,#1
000046  a903              ADD      r1,sp,#0xc
000048  e9cd4000          STRD     r4,r0,[sp,#0]
00004c  4802              LDR      r0,|L3.88|
00004e  f7fffffe          BL       SCTIMER_SetupPwm
;;;75     }
000052  b006              ADD      sp,sp,#0x18
000054  bd10              POP      {r4,pc}
;;;76     
                          ENDP

000056  0000              DCW      0x0000
                  |L3.88|
                          DCD      0x40085000

                          AREA ||i.LCD_IRQHandler||, CODE, READONLY, ALIGN=2

                  LCD_IRQHandler PROC
;;;76     
;;;77     void APP_LCD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         uint32_t intStatus = LCDC_GetEnabledInterruptsPendingStatus(APP_LCD);
000002  480b              LDR      r0,|L4.48|
000004  f7fffffe          BL       LCDC_GetEnabledInterruptsPendingStatus
000008  4604              MOV      r4,r0
;;;80     
;;;81         LCDC_ClearInterruptsStatus(APP_LCD, intStatus);
00000a  4621              MOV      r1,r4
00000c  4808              LDR      r0,|L4.48|
00000e  f7fffffe          BL       LCDC_ClearInterruptsStatus
;;;82     
;;;83       if (intStatus & kLCDC_BaseAddrUpdateInterrupt)
000012  f0040004          AND      r0,r4,#4
000016  b110              CBZ      r0,|L4.30|
;;;84         {
;;;85          s_frameEndFlag = true;
000018  2001              MOVS     r0,#1
00001a  4906              LDR      r1,|L4.52|
00001c  7008              STRB     r0,[r1,#0]
                  |L4.30|
;;;86     		}
;;;87         __DSB();
00001e  bf00              NOP      
000020  bf00              NOP      
000022  bf00              NOP      
000024  f3bf8f4f          DSB      
000028  bf00              NOP      
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;88     }
00002e  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  |L4.48|
                          DCD      0x40083000
                  |L4.52|
                          DCD      s_frameEndFlag

                          AREA ||i.eGFX_Dump||, CODE, READONLY, ALIGN=2

                  eGFX_Dump PROC
;;;167    
;;;168    void eGFX_Dump(eGFX_ImagePlane *Image)
000000  b500              PUSH     {lr}
;;;169    {
000002  4601              MOV      r1,r0
;;;170     //	eGFX_WaitForVSync();
;;;171    
;;;172     	if(Image->Data == &SDRAM->eGFX_FrameBuffer2[0])
000004  480f              LDR      r0,|L5.68|
000006  684a              LDR      r2,[r1,#4]
000008  6800              LDR      r0,[r0,#0]  ; SDRAM
00000a  f500307f          ADD      r0,r0,#0x3fc00
00000e  4282              CMP      r2,r0
000010  d109              BNE      |L5.38|
;;;173    		{
;;;174    			Image->Data  = &SDRAM->eGFX_FrameBuffer1[0];
000012  480c              LDR      r0,|L5.68|
000014  6800              LDR      r0,[r0,#0]  ; SDRAM
000016  6048              STR      r0,[r1,#4]
;;;175    			LCD->UPBASE  = (uint32_t)(&SDRAM->eGFX_FrameBuffer2[0]);
000018  480a              LDR      r0,|L5.68|
00001a  6800              LDR      r0,[r0,#0]  ; SDRAM
00001c  f500307f          ADD      r0,r0,#0x3fc00
000020  4a09              LDR      r2,|L5.72|
000022  6110              STR      r0,[r2,#0x10]
000024  e008              B        |L5.56|
                  |L5.38|
;;;176    		}
;;;177    		else
;;;178    		{
;;;179    			Image->Data  = &SDRAM->eGFX_FrameBuffer2[0];
000026  4807              LDR      r0,|L5.68|
000028  6800              LDR      r0,[r0,#0]  ; SDRAM
00002a  f500307f          ADD      r0,r0,#0x3fc00
00002e  6048              STR      r0,[r1,#4]
;;;180    			LCD->UPBASE = (uint32_t)(&SDRAM->eGFX_FrameBuffer1[0]);
000030  4804              LDR      r0,|L5.68|
000032  6800              LDR      r0,[r0,#0]  ; SDRAM
000034  4a04              LDR      r2,|L5.72|
000036  6110              STR      r0,[r2,#0x10]
                  |L5.56|
;;;181    		}
;;;182    		 	s_frameEndFlag = false;
000038  2000              MOVS     r0,#0
00003a  4a04              LDR      r2,|L5.76|
00003c  7010              STRB     r0,[r2,#0]
;;;183    	
;;;184    	eGFX_WaitForVSync();
00003e  f7fffffe          BL       eGFX_WaitForVSync
;;;185       
;;;186    }
000042  bd00              POP      {pc}
;;;187    
                          ENDP

                  |L5.68|
                          DCD      SDRAM
                  |L5.72|
                          DCD      0x40083000
                  |L5.76|
                          DCD      s_frameEndFlag

                          AREA ||i.eGFX_InitDriver||, CODE, READONLY, ALIGN=2

                  eGFX_InitDriver PROC
;;;141    
;;;142    void eGFX_InitDriver()
000000  b508              PUSH     {r3,lr}
;;;143    {
;;;144    	/* Route Main clock to LCD. */
;;;145      CLOCK_AttachClk(kMCLK_to_LCD_CLK);
000002  f240101d          MOV      r0,#0x11d
000006  f7fffffe          BL       CLOCK_AttachClk
;;;146    	  
;;;147    	/*Divide the LCD clock by 2*/
;;;148    	CLOCK_SetClkDiv(kCLOCK_DivLcdClk, 2, true);
00000a  2201              MOVS     r2,#1
00000c  2102              MOVS     r1,#2
00000e  202c              MOVS     r0,#0x2c
000010  f7fffffe          BL       CLOCK_SetClkDiv
;;;149    	
;;;150    	BOARD_InitPWM();
000014  f7fffffe          BL       BOARD_InitPWM
;;;151    	
;;;152    	APP_LCDC_Init();
000018  f7fffffe          BL       APP_LCDC_Init
;;;153    	
;;;154    	eGFX_ImagePlaneInit(&eGFX_BackBuffer,(uint8_t *)SDRAM->eGFX_FrameBuffer2,eGFX_PHYSICAL_SCREEN_SIZE_X, eGFX_PHYSICAL_SCREEN_SIZE_Y,eGFX_IMAGE_PLANE_16BPP_565);
00001c  2004              MOVS     r0,#4
00001e  f44f7388          MOV      r3,#0x110
000022  f44f72f0          MOV      r2,#0x1e0
000026  9000              STR      r0,[sp,#0]
000028  4803              LDR      r0,|L6.56|
00002a  6801              LDR      r1,[r0,#0]  ; SDRAM
00002c  f501317f          ADD      r1,r1,#0x3fc00
000030  4802              LDR      r0,|L6.60|
000032  f7fffffe          BL       eGFX_ImagePlaneInit
;;;155    
;;;156    	
;;;157    }
000036  bd08              POP      {r3,pc}
;;;158    
                          ENDP

                  |L6.56|
                          DCD      SDRAM
                  |L6.60|
                          DCD      eGFX_BackBuffer

                          AREA ||i.eGFX_WaitForVSync||, CODE, READONLY, ALIGN=2

                  eGFX_WaitForVSync PROC
;;;158    
;;;159    void eGFX_WaitForVSync()
000000  bf00              NOP      
                  |L7.2|
;;;160    {
;;;161    
;;;162    	while(!s_frameEndFlag)
000002  4802              LDR      r0,|L7.12|
000004  7800              LDRB     r0,[r0,#0]  ; s_frameEndFlag
000006  2800              CMP      r0,#0
000008  d0fb              BEQ      |L7.2|
;;;163    	{
;;;164    	}
;;;165    
;;;166    }
00000a  4770              BX       lr
;;;167    
                          ENDP

                  |L7.12|
                          DCD      s_frameEndFlag

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  eGFX_BackBuffer
                          %        12

                          AREA ||.data||, DATA, ALIGN=0

                  s_frameEndFlag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "SRC\\eGFX\\Drivers\\eGFX_Driver_LPCXPresso_54608.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___30_eGFX_Driver_LPCXPresso_54608_c_045202fe____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___30_eGFX_Driver_LPCXPresso_54608_c_045202fe____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___30_eGFX_Driver_LPCXPresso_54608_c_045202fe____REVSH|
#line 402
|__asm___30_eGFX_Driver_LPCXPresso_54608_c_045202fe____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___30_eGFX_Driver_LPCXPresso_54608_c_045202fe____RRX|
#line 587
|__asm___30_eGFX_Driver_LPCXPresso_54608_c_045202fe____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

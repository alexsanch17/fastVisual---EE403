; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_utick.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_utick.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_utick.crf SRC\Drivers\fsl_utick.c]
                          THUMB

                          AREA ||i.UTICK0_DriverIRQHandler||, CODE, READONLY, ALIGN=2

                  UTICK0_DriverIRQHandler PROC
;;;138    #if defined(UTICK0)
;;;139    void UTICK0_DriverIRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;140    {
;;;141        s_utickIsr(UTICK0, s_utickHandle[0]);
000002  4803              LDR      r0,|L1.16|
000004  6801              LDR      r1,[r0,#0]  ; s_utickHandle
000006  4803              LDR      r0,|L1.20|
000008  4a03              LDR      r2,|L1.24|
00000a  6812              LDR      r2,[r2,#0]  ; s_utickIsr
00000c  4790              BLX      r2
;;;142    }
00000e  bd10              POP      {r4,pc}
;;;143    #endif
                          ENDP

                  |L1.16|
                          DCD      s_utickHandle
                  |L1.20|
                          DCD      0x4000e000
                  |L1.24|
                          DCD      s_utickIsr

                          AREA ||i.UTICK_ClearStatusFlags||, CODE, READONLY, ALIGN=1

                  UTICK_ClearStatusFlags PROC
;;;123    
;;;124    void UTICK_ClearStatusFlags(UTICK_Type *base)
000000  2101              MOVS     r1,#1
;;;125    {
;;;126        base->STAT = UTICK_STAT_INTR_MASK;
000002  6041              STR      r1,[r0,#4]
;;;127    }
000004  4770              BX       lr
;;;128    
                          ENDP


                          AREA ||i.UTICK_Deinit||, CODE, READONLY, ALIGN=2

                  UTICK_Deinit PROC
;;;110    
;;;111    void UTICK_Deinit(UTICK_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
;;;113        /* Turn off utick */
;;;114        base->CTRL = 0;
000004  2000              MOVS     r0,#0
000006  6028              STR      r0,[r5,#0]
;;;115        /* Disable utick clock */
;;;116        CLOCK_DisableClock(s_utickClock[UTICK_GetInstance(base)]);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       UTICK_GetInstance
00000e  490a              LDR      r1,|L3.56|
000010  f8314010          LDRH     r4,[r1,r0,LSL #1]
000014  0a20              LSRS     r0,r4,#8
000016  2803              CMP      r0,#3
000018  d205              BCS      |L3.38|
00001a  2101              MOVS     r1,#1
00001c  40a1              LSLS     r1,r1,r4
00001e  4a07              LDR      r2,|L3.60|
000020  f8421020          STR      r1,[r2,r0,LSL #2]
000024  e006              B        |L3.52|
                  |L3.38|
000026  2101              MOVS     r1,#1
000028  40a1              LSLS     r1,r1,r4
00002a  4a05              LDR      r2,|L3.64|
00002c  6191              STR      r1,[r2,#0x18]
00002e  2100              MOVS     r1,#0
000030  0312              LSLS     r2,r2,#12
000032  64d1              STR      r1,[r2,#0x4c]
                  |L3.52|
000034  bf00              NOP      
;;;117    }
000036  bd70              POP      {r4-r6,pc}
;;;118    
                          ENDP

                  |L3.56|
                          DCD      s_utickClock
                  |L3.60|
                          DCD      0x40000240
                  |L3.64|
                          DCD      0x40040000

                          AREA ||i.UTICK_GetInstance||, CODE, READONLY, ALIGN=2

                  UTICK_GetInstance PROC
;;;70      ******************************************************************************/
;;;71     static uint32_t UTICK_GetInstance(UTICK_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;72     {
000002  4605              MOV      r5,r0
;;;73         uint32_t instance;
;;;74     
;;;75         /* Find the instance index from base address mappings. */
;;;76         for (instance = 0; instance < FSL_FEATURE_SOC_UTICK_COUNT; instance++)
000004  2400              MOVS     r4,#0
000006  e006              B        |L4.22|
                  |L4.8|
;;;77         {
;;;78             if (s_utickBases[instance] == base)
000008  4809              LDR      r0,|L4.48|
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  42a8              CMP      r0,r5
000010  d100              BNE      |L4.20|
;;;79             {
;;;80                 break;
000012  e002              B        |L4.26|
                  |L4.20|
000014  1c64              ADDS     r4,r4,#1              ;76
                  |L4.22|
000016  2c00              CMP      r4,#0                 ;76
000018  d0f6              BEQ      |L4.8|
                  |L4.26|
00001a  bf00              NOP      
;;;81             }
;;;82         }
;;;83     
;;;84         assert(instance < FSL_FEATURE_SOC_UTICK_COUNT);
00001c  b904              CBNZ     r4,|L4.32|
00001e  e004              B        |L4.42|
                  |L4.32|
000020  2254              MOVS     r2,#0x54
000022  a104              ADR      r1,|L4.52|
000024  a009              ADR      r0,|L4.76|
000026  f7fffffe          BL       __aeabi_assert
                  |L4.42|
;;;85     
;;;86         return instance;
00002a  4620              MOV      r0,r4
;;;87     }
00002c  bd70              POP      {r4-r6,pc}
;;;88     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      s_utickBases
                  |L4.52|
000034  5352435c          DCB      "SRC\\Drivers\\fsl_utick.c",0
000038  44726976
00003c  6572735c
000040  66736c5f
000044  75746963
000048  6b2e6300
                  |L4.76|
00004c  696e7374          DCB      "instance < FSL_FEATURE_SOC_UTICK_COUNT",0
000050  616e6365
000054  203c2046
000058  534c5f46
00005c  45415455
000060  52455f53
000064  4f435f55
000068  5449434b
00006c  5f434f55
000070  4e5400  
000073  00                DCB      0

                          AREA ||i.UTICK_GetStatusFlags||, CODE, READONLY, ALIGN=1

                  UTICK_GetStatusFlags PROC
;;;118    
;;;119    uint32_t UTICK_GetStatusFlags(UTICK_Type *base)
000000  4601              MOV      r1,r0
;;;120    {
;;;121        return (base->STAT);
000002  6848              LDR      r0,[r1,#4]
;;;122    }
000004  4770              BX       lr
;;;123    
                          ENDP


                          AREA ||i.UTICK_HandleIRQ||, CODE, READONLY, ALIGN=1

                  UTICK_HandleIRQ PROC
;;;128    
;;;129    void UTICK_HandleIRQ(UTICK_Type *base, utick_callback_t cb)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;131        UTICK_ClearStatusFlags(base);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       UTICK_ClearStatusFlags
;;;132        if (cb)
00000c  b104              CBZ      r4,|L6.16|
;;;133        {
;;;134            cb();
00000e  47a0              BLX      r4
                  |L6.16|
;;;135        }
;;;136    }
000010  bd70              POP      {r4-r6,pc}
;;;137    
                          ENDP


                          AREA ||i.UTICK_Init||, CODE, READONLY, ALIGN=2

                  UTICK_Init PROC
;;;101    
;;;102    void UTICK_Init(UTICK_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
000002  4605              MOV      r5,r0
;;;104        /* Enable utick clock */
;;;105        CLOCK_EnableClock(s_utickClock[UTICK_GetInstance(base)]);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       UTICK_GetInstance
00000a  490f              LDR      r1,|L7.72|
00000c  f8314010          LDRH     r4,[r1,r0,LSL #1]
000010  0a20              LSRS     r0,r4,#8
000012  2803              CMP      r0,#3
000014  d205              BCS      |L7.34|
000016  2101              MOVS     r1,#1
000018  40a1              LSLS     r1,r1,r4
00001a  4a0c              LDR      r2,|L7.76|
00001c  f8421020          STR      r1,[r2,r0,LSL #2]
000020  e005              B        |L7.46|
                  |L7.34|
000022  2101              MOVS     r1,#1
000024  078a              LSLS     r2,r1,#30
000026  64d1              STR      r1,[r2,#0x4c]
000028  40a1              LSLS     r1,r1,r4
00002a  4a09              LDR      r2,|L7.80|
00002c  6151              STR      r1,[r2,#0x14]
                  |L7.46|
00002e  bf00              NOP      
;;;106        /* Power up Watchdog oscillator*/
;;;107        POWER_DisablePD(kPDRUNCFG_PD_WDT_OSC);
000030  2014              MOVS     r0,#0x14
000032  2101              MOVS     r1,#1
000034  4081              LSLS     r1,r1,r0
000036  4a07              LDR      r2,|L7.84|
000038  0a03              LSRS     r3,r0,#8
00003a  f8421023          STR      r1,[r2,r3,LSL #2]
00003e  bf00              NOP      
;;;108        s_utickIsr = UTICK_HandleIRQ;
000040  4805              LDR      r0,|L7.88|
000042  4906              LDR      r1,|L7.92|
000044  6008              STR      r0,[r1,#0]  ; s_utickIsr
;;;109    }
000046  bd70              POP      {r4-r6,pc}
;;;110    
                          ENDP

                  |L7.72|
                          DCD      s_utickClock
                  |L7.76|
                          DCD      0x40000220
                  |L7.80|
                          DCD      0x40040000
                  |L7.84|
                          DCD      0x40000630
                  |L7.88|
                          DCD      UTICK_HandleIRQ
                  |L7.92|
                          DCD      s_utickIsr

                          AREA ||i.UTICK_SetTick||, CODE, READONLY, ALIGN=2

                  UTICK_SetTick PROC
;;;88     
;;;89     void UTICK_SetTick(UTICK_Type *base, utick_mode_t mode, uint32_t count, utick_callback_t cb)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;91         uint32_t instance;
;;;92     
;;;93         /* Get instance from peripheral base address. */
;;;94         instance = UTICK_GetInstance(base);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       UTICK_GetInstance
000012  4680              MOV      r8,r0
;;;95     
;;;96         /* Save the handle in global variables to support the double weak mechanism. */
;;;97         s_utickHandle[instance] = cb;
000014  4807              LDR      r0,|L8.52|
000016  f8407028          STR      r7,[r0,r8,LSL #2]
;;;98         EnableDeepSleepIRQ(s_utickIRQ[instance]);
00001a  4907              LDR      r1,|L8.56|
00001c  f9110008          LDRSB    r0,[r1,r8]
000020  f7fffffe          BL       EnableDeepSleepIRQ
;;;99         base->CTRL = count | UTICK_CTRL_REPEAT(mode);
000024  f04f4000          MOV      r0,#0x80000000
000028  ea0070c5          AND      r0,r0,r5,LSL #31
00002c  4330              ORRS     r0,r0,r6
00002e  6020              STR      r0,[r4,#0]
;;;100    }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;101    
                          ENDP

                  |L8.52|
                          DCD      s_utickHandle
                  |L8.56|
                          DCD      s_utickIRQ

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  s_utickBases
                          DCD      0x4000e000
                  s_utickIRQ
000004  0800              DCB      0x08,0x00
                  s_utickClock
000006  010a              DCW      0x010a

                          AREA ||.data||, DATA, ALIGN=2

                  s_utickHandle
                          DCD      0x00000000
                  s_utickIsr
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_utick.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_utick_c_fd6a87c8____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_fsl_utick_c_fd6a87c8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_utick_c_fd6a87c8____REVSH|
#line 402
|__asm___11_fsl_utick_c_fd6a87c8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_utick_c_fd6a87c8____RRX|
#line 587
|__asm___11_fsl_utick_c_fd6a87c8____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

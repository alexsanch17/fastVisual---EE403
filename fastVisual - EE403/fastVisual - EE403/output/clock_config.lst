L 1 "SRC\Board\clock_config.c"
N/*
N * Copyright (c) 2015, Freescale Semiconductor, Inc.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * o Redistributions of source code must retain the above copyright notice, this list
N *   of conditions and the following disclaimer.
N *
N * o Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N *
N * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N *   contributors may be used to endorse or promote products derived from this
N *   software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#include "fsl_common.h"
L 1 ".\SRC\Drivers\fsl_common.h" 1
N/*
N * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * o Redistributions of source code must retain the above copyright notice, this list
N *   of conditions and the following disclaimer.
N *
N * o Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N *
N * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N *   contributors may be used to endorse or promote products derived from this
N *   software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifndef _FSL_COMMON_H_
N#define _FSL_COMMON_H_
N
N#include <assert.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\assert.h" 1
N/* assert.h: ANSI 'C' (X3J11 Oct 88) library header section 4.2 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.        */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N/*
N * The assert macro puts diagnostics into programs. When it is executed,
N * if its argument expression is false, it writes information about the
N * call that failed (including the text of the argument, the name of the
N * source file, and the source line number - the latter are respectively
N * the values of the preprocessing macros __FILE__ and __LINE__) on the
N * standard error stream. It then calls the abort function.
N * If its argument expression is true, the assert macro returns no value.
N */
N
N/*
N * Note that <assert.h> may be included more that once in a program with
N * different setting of NDEBUG. Hence the slightly unusual first-time
N * only flag.
N */
N
N#ifndef __assert_h
N#   define __assert_h
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define __ARMCLIB_VERSION 5060019
N#   ifndef __ARM_PROMISE
N#      define __ARM_PROMISE __promise
N#   endif
N#   undef __CLIBNS
N#   ifdef __cplusplus
S        namespace std {
S#           define __CLIBNS ::std::
S            extern "C" {
N#   else
N#       define __CLIBNS
N#   endif  /* __cplusplus */
N    extern _ARMABI_NORETURN void abort(void);
X    extern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N    extern _ARMABI_NORETURN void __aeabi_assert(const char *, const char *, int) __attribute__((__nonnull__(1,2)));
X    extern __declspec(__nothrow) __declspec(__noreturn) void __aeabi_assert(const char *, const char *, int) __attribute__((__nonnull__(1,2)));
N#   ifdef __cplusplus
S            }  /* extern "C" */
S        }  /* namespace std */
N#   endif
N#else
S#   undef assert
S#   undef __promise
N#endif
N
N#ifdef NDEBUG
S#   define assert(ignore) ((void)0)
S#   define __promise(e) ((__ARM_PROMISE)((e)?1:0))
N#else
N#   if defined __DO_NOT_LINK_PROMISE_WITH_ASSERT
X#   if 0L
S#      if defined __OPT_SMALL_ASSERT && !defined __ASSERT_MSG && !defined __STRICT_ANSI__ && !(_AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
S#          define assert(e) ((e) ? (void)0 : __CLIBNS abort())
S#      elif defined __STDC__
S#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert(#e, __FILE__, __LINE__))
S#      else
S#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert("e", __FILE__, __LINE__))
S#      endif
S#      define __promise(e) ((__ARM_PROMISE)((e)?1:0))
N#   else
N#      if defined __OPT_SMALL_ASSERT && !defined __ASSERT_MSG && !defined __STRICT_ANSI__ && !(_AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
X#      if 0L && !0L && !0L && !(_AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
S#undef __promise
S#          define assert(e) ((e) ? (void)0 : __CLIBNS abort(), (__ARM_PROMISE)((e)?1:0))
N#      else
N#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert(#e, __FILE__, __LINE__), (__ARM_PROMISE)((e)?1:0))
N#      endif
N#      define __promise(e) assert(e)
N#   endif
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N/* end of assert.h */
N
L 35 ".\SRC\Drivers\fsl_common.h" 2
N#include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060019
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 36 ".\SRC\Drivers\fsl_common.h" 2
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 37 ".\SRC\Drivers\fsl_common.h" 2
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 38 ".\SRC\Drivers\fsl_common.h" 2
N#include "fsl_device_registers.h"
L 1 ".\SRC\System\fsl_device_registers.h" 1
N/*
N * Copyright (c) 2014 - 2016, Freescale Semiconductor, Inc.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * o Redistributions of source code must retain the above copyright notice, this list
N *   of conditions and the following disclaimer.
N *
N * o Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N *
N * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N *   contributors may be used to endorse or promote products derived from this
N *   software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifndef __FSL_DEVICE_REGISTERS_H__
N#define __FSL_DEVICE_REGISTERS_H__
N
N/*
N * Include the cpu specific register header files.
N *
N * The CPU macro should be declared in the project or makefile.
N */
N#if (defined(CPU_LPC54608J512BD208) || defined(CPU_LPC54608J512ET180))
X#if (0L || 1L)
N
N#define LPC54608_SERIES
N
N/* CMSIS-style register definitions */
N#include "LPC54608.h"
L 1 ".\SRC\System\LPC54608.h" 1
N/*
N** ###################################################################
N**     Processors:          LPC54608J512BD208
N**                          LPC54608J512ET180
N**
N**     Compilers:           Keil ARM C/C++ Compiler
N**                          GNU C Compiler
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    LPC54S60x/LPC5460x User manual Rev. 0.7 8 Sep 2016
N**     Version:             rev. 1.0, 2016-08-12
N**     Build:               b161018
N**
N**     Abstract:
N**         CMSIS Peripheral Access Layer for LPC54608
N**
N**     Copyright (c) 1997 - 2016 Freescale Semiconductor, Inc.
N**     All rights reserved.
N**
N**     Redistribution and use in source and binary forms, with or without modification,
N**     are permitted provided that the following conditions are met:
N**
N**     o Redistributions of source code must retain the above copyright notice, this list
N**       of conditions and the following disclaimer.
N**
N**     o Redistributions in binary form must reproduce the above copyright notice, this
N**       list of conditions and the following disclaimer in the documentation and/or
N**       other materials provided with the distribution.
N**
N**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N**       contributors may be used to endorse or promote products derived from this
N**       software without specific prior written permission.
N**
N**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2016-08-12)
N**         Initial version.
N**
N** ###################################################################
N*/
N
N/*!
N * @file LPC54608.h
N * @version 1.0
N * @date 2016-08-12
N * @brief CMSIS Peripheral Access Layer for LPC54608
N *
N * CMSIS Peripheral Access Layer for LPC54608
N */
N
N#ifndef _LPC54608_H_
N#define _LPC54608_H_                             /**< Symbol preventing repeated inclusion */
N
N/** Memory map major version (memory maps with equal major version number are
N * compatible) */
N#define MCU_MEM_MAP_VERSION 0x0100U
N/** Memory map minor version */
N#define MCU_MEM_MAP_VERSION_MINOR 0x0000U
N
N
N/* ----------------------------------------------------------------------------
N   -- Interrupt vector numbers
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
N * @{
N */
N
N/** Interrupt Number Definitions */
N#define NUMBER_OF_INT_VECTORS 73                 /**< Number of interrupts in the Vector table */
N
Ntypedef enum IRQn {
N  /* Auxiliary constants */
N  NotAvail_IRQn                = -128,             /**< Not available device specific interrupt */
N
N  /* Core interrupts */
N  NonMaskableInt_IRQn          = -14,              /**< Non Maskable Interrupt */
N  HardFault_IRQn               = -13,              /**< Cortex-M4 SV Hard Fault Interrupt */
N  MemoryManagement_IRQn        = -12,              /**< Cortex-M4 Memory Management Interrupt */
N  BusFault_IRQn                = -11,              /**< Cortex-M4 Bus Fault Interrupt */
N  UsageFault_IRQn              = -10,              /**< Cortex-M4 Usage Fault Interrupt */
N  SVCall_IRQn                  = -5,               /**< Cortex-M4 SV Call Interrupt */
N  DebugMonitor_IRQn            = -4,               /**< Cortex-M4 Debug Monitor Interrupt */
N  PendSV_IRQn                  = -2,               /**< Cortex-M4 Pend SV Interrupt */
N  SysTick_IRQn                 = -1,               /**< Cortex-M4 System Tick Interrupt */
N
N  /* Device specific interrupts */
N  WDT_BOD_IRQn                 = 0,                /**< Windowed watchdog timer, Brownout detect */
N  DMA0_IRQn                    = 1,                /**< DMA controller */
N  GINT0_IRQn                   = 2,                /**< GPIO group 0 */
N  GINT1_IRQn                   = 3,                /**< GPIO group 1 */
N  PIN_INT0_IRQn                = 4,                /**< Pin interrupt 0 or pattern match engine slice 0 */
N  PIN_INT1_IRQn                = 5,                /**< Pin interrupt 1or pattern match engine slice 1 */
N  PIN_INT2_IRQn                = 6,                /**< Pin interrupt 2 or pattern match engine slice 2 */
N  PIN_INT3_IRQn                = 7,                /**< Pin interrupt 3 or pattern match engine slice 3 */
N  UTICK0_IRQn                  = 8,                /**< Micro-tick Timer */
N  MRT0_IRQn                    = 9,                /**< Multi-rate timer */
N  CTIMER0_IRQn                 = 10,               /**< Standard counter/timer CTIMER0 */
N  CTIMER1_IRQn                 = 11,               /**< Standard counter/timer CTIMER1 */
N  SCT0_IRQn                    = 12,               /**< SCTimer/PWM */
N  CTIMER3_IRQn                 = 13,               /**< Standard counter/timer CTIMER3 */
N  FLEXCOMM0_IRQn               = 14,               /**< Flexcomm Interface 0 (USART, SPI, I2C, FLEXCOMM) */
N  FLEXCOMM1_IRQn               = 15,               /**< Flexcomm Interface 1 (USART, SPI, I2C, FLEXCOMM) */
N  FLEXCOMM2_IRQn               = 16,               /**< Flexcomm Interface 2 (USART, SPI, I2C, FLEXCOMM) */
N  FLEXCOMM3_IRQn               = 17,               /**< Flexcomm Interface 3 (USART, SPI, I2C, FLEXCOMM) */
N  FLEXCOMM4_IRQn               = 18,               /**< Flexcomm Interface 4 (USART, SPI, I2C, FLEXCOMM) */
N  FLEXCOMM5_IRQn               = 19,               /**< Flexcomm Interface 5 (USART, SPI, I2C,, FLEXCOMM) */
N  FLEXCOMM6_IRQn               = 20,               /**< Flexcomm Interface 6 (USART, SPI, I2C, I2S,, FLEXCOMM) */
N  FLEXCOMM7_IRQn               = 21,               /**< Flexcomm Interface 7 (USART, SPI, I2C, I2S,, FLEXCOMM) */
N  ADC0_SEQA_IRQn               = 22,               /**< ADC0 sequence A completion. */
N  ADC0_SEQB_IRQn               = 23,               /**< ADC0 sequence B completion. */
N  ADC0_THCMP_IRQn              = 24,               /**< ADC0 threshold compare and error. */
N  DMIC0_IRQn                   = 25,               /**< Digital microphone and DMIC subsystem */
N  HWVAD0_IRQn                  = 26,               /**< Hardware Voice Activity Detector */
N  USB0_NEEDCLK_IRQn            = 27,               /**< USB Activity Wake-up Interrupt */
N  USB0_IRQn                    = 28,               /**< USB device */
N  RTC_IRQn                     = 29,               /**< RTC alarm and wake-up interrupts */
N  Reserved46_IRQn              = 30,               /**< Reserved interrupt */
N  Reserved47_IRQn              = 31,               /**< Reserved interrupt */
N  PIN_INT4_IRQn                = 32,               /**< Pin interrupt 4 or pattern match engine slice 4 int */
N  PIN_INT5_IRQn                = 33,               /**< Pin interrupt 5 or pattern match engine slice 5 int */
N  PIN_INT6_IRQn                = 34,               /**< Pin interrupt 6 or pattern match engine slice 6 int */
N  PIN_INT7_IRQn                = 35,               /**< Pin interrupt 7 or pattern match engine slice 7 int */
N  CTIMER2_IRQn                 = 36,               /**< Standard counter/timer CTIMER2 */
N  CTIMER4_IRQn                 = 37,               /**< Standard counter/timer CTIMER4 */
N  RIT_IRQn                     = 38,               /**< Repetitive Interrupt Timer */
N  SPIFI0_IRQn                  = 39,               /**< SPI flash interface */
N  FLEXCOMM8_IRQn               = 40,               /**< Flexcomm Interface 8 (USART, SPI, I2C, FLEXCOMM) */
N  FLEXCOMM9_IRQn               = 41,               /**< Flexcomm Interface 9 (USART, SPI, I2C, FLEXCOMM) */
N  SDIO_IRQn                    = 42,               /**< SD/MMC  */
N  CAN0_IRQ0_IRQn               = 43,               /**< CAN0 interrupt0 */
N  CAN0_IRQ1_IRQn               = 44,               /**< CAN0 interrupt1 */
N  CAN1_IRQ0_IRQn               = 45,               /**< CAN1 interrupt0 */
N  CAN1_IRQ1_IRQn               = 46,               /**< CAN1 interrupt1 */
N  USB1_IRQn                    = 47,               /**< USB1 interrupt */
N  USB1_NEEDCLK_IRQn            = 48,               /**< USB1 activity */
N  ETHERNET_IRQn                = 49,               /**< Ethernet */
N  ETHERNET_PMT_IRQn            = 50,               /**< Ethernet power management interrupt */
N  ETHERNET_MACLP_IRQn          = 51,               /**< Ethernet MAC interrupt */
N  EEPROM_IRQn                  = 52,               /**< EEPROM interrupt */
N  LCD_IRQn                     = 53,               /**< LCD interrupt */
N  SHA_IRQn                     = 54,               /**< SHA interrupt */
N  SMARTCARD0_IRQn              = 55,               /**< Smart card 0 interrupt */
N  SMARTCARD1_IRQn              = 56                /**< Smart card 1 interrupt */
N} IRQn_Type;
N
N/*!
N * @}
N */ /* end of group Interrupt_vector_numbers */
N
N
N/* ----------------------------------------------------------------------------
N   -- Cortex M4 Core Configuration
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Cortex_Core_Configuration Cortex M4 Core Configuration
N * @{
N */
N
N#define __MPU_PRESENT                  1         /**< Defines if an MPU is present or not */
N#define __NVIC_PRIO_BITS               3         /**< Number of priority bits implemented in the NVIC */
N#define __Vendor_SysTickConfig         0         /**< Vendor specific implementation of SysTickConfig is defined */
N#define __FPU_PRESENT                  1         /**< Defines if an FPU is present or not */
N
N#include "core_cm4.h"                  /* Core Peripheral Access Layer */
L 1 ".\SRC\System\CMSIS\Include\core_cm4.h" 1
N/**************************************************************************//**
N * @file     core_cm4.h
N * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060422 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM4_H_GENERIC
N#define __CORE_CM4_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M4
N  @{
N */
N
N/*  CMSIS CM4 definitions */
N#define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS HAL main version */
N#define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS HAL sub version */
N#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL version number */
X#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) |                                     __CM4_CMSIS_VERSION_SUB           )         
N
N#define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core */
N
N
N#if   defined ( __CC_ARM )
X#if   1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
N  #define __STATIC_INLINE  static __inline
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
S  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
S  #define __STATIC_INLINE  static __inline
S
S#elif defined ( __GNUC__ )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __ICCARM__ )
S  #define __ASM            __asm                                      /*!< asm keyword for IAR Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for IAR Compiler. Only available in High optimization mode! */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TMS470__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TI CCS Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TASKING__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __CSMC__ )
S  #define __packed
S  #define __ASM            _asm                                      /*!< asm keyword for COSMIC Compiler */
S  #define __INLINE         inline                                    /*!< inline keyword for COSMIC Compiler. Use -pc99 on compile line */
S  #define __STATIC_INLINE  static inline
S
S#else
S  #error Unknown compiler
N#endif
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and functions.
N*/
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 1L
N    #if (__FPU_PRESENT == 1U)
X    #if (1 == 1U)
N      #define __FPU_USED       1U
N    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
N    #endif
N  #else
S    #define __FPU_USED         0U
N  #endif
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1U
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __TMS470__ )
S  #if defined __TI_VFP_SUPPORT__
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #if (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
N#endif
N
N#include "core_cmInstr.h"                /* Core Instruction Access */
L 1 ".\SRC\System\CMSIS\Include\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060422 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMINSTR_H
N#define __CORE_CMINSTR_H
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 ".\SRC\System\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS Cortex-M Core Function/Instruction Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060422 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x04U) >= 0x03U) || (__CORTEX_SC >= 300U)
N
N/**
N  \brief   Enable FIQ
N  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/**
N  \brief   Disable FIQ
N  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/**
N  \brief   Get Base Priority
N  \details Returns the current value of the Base Priority register.
N  \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/**
N  \brief   Set Base Priority
N  \details Assigns the given value to the Base Priority register.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Set Base Priority with condition
N  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
N           or the new value increases the BASEPRI priority level.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
Xstatic __inline void __set_BASEPRI_MAX(uint32_t basePri)
N{
N  register uint32_t __regBasePriMax      __ASM("basepri_max");
X  register uint32_t __regBasePriMax      __asm("basepri_max");
N  __regBasePriMax = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Get Fault Mask
N  \details Returns the current value of the Fault Mask register.
N  \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/**
N  \brief   Set Fault Mask
N  \details Assigns the given value to the Fault Mask register.
N  \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1);
N}
N
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N
N#if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
X#if       ((0x04U) == 0x04U) || ((0x04U) == 0x07U)
N
N/**
N  \brief   Get FPSCR
N  \details Returns the current value of the Floating Point Status/Control register.
N  \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
X#if (1 == 1U) && (1U == 1U)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  return(__regfpscr);
N#else
S   return(0U);
N#endif
N}
N
N
N/**
N  \brief   Set FPSCR
N  \details Assigns the given value to the Floating Point Status/Control register.
N  \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
X#if (1 == 1U) && (1U == 1U)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  __regfpscr = (fpscr);
N#endif
N}
N
N#endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    value  Value to rotate
N  \param [in]    value  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x04U) >= 0x03U) || (__CORTEX_SC >= 300U)
N  #define __RBIT                          __rbit
N#else
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
S
S  result = value;                      /* r will be reversed bits of v; first get LSB of v */
S  for (value >>= 1U; value; value >>= 1U)
S  {
S    result <<= 1U;
S    result |= value & 1U;
S    s--;
S  }
S  result <<= s;                        /* shift when v's highest bits are zero */
S  return(result);
S}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x04U) >= 0x03U) || (__CORTEX_SC >= 300U)
N
N/**
N  \brief   LDR Exclusive (8 bit)
N  \details Executes a exclusive LDR instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060422 < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
N#else
N  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (16 bit)
N  \details Executes a exclusive LDR instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060422 < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
N#else
N  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (32 bit)
N  \details Executes a exclusive LDR instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060422 < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
N#else
N  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (8 bit)
N  \details Executes a exclusive STR instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060422 < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (16 bit)
N  \details Executes a exclusive STR instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060422 < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (32 bit)
N  \details Executes a exclusive STR instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060422 < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   Remove the exclusive lock
N  \details Removes the exclusive lock which is created by LDREX.
N */
N#define __CLREX                           __clrex
N
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/**
N  \brief   Rotate Right with Extend (32 bit)
N  \details Moves each bit of a bitstring right by one bit.
N           The carry input is shifted in at the left end of the bitstring.
N  \param [in]    value  Value to rotate
N  \return               Rotated value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
X__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
N{
N  rrx r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   LDRT Unprivileged (8 bit)
N  \details Executes a Unprivileged LDRT instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (16 bit)
N  \details Executes a Unprivileged LDRT instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (32 bit)
N  \details Executes a Unprivileged LDRT instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
N
N
N/**
N  \brief   STRT Unprivileged (8 bit)
N  \details Executes a Unprivileged STRT instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRBT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (16 bit)
N  \details Executes a Unprivileged STRT instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRHT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (32 bit)
N  \details Executes a Unprivileged STRT instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRT(value, ptr)                __strt(value, ptr)
N
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if (__CORTEX_M >= 0x04U)  /* only for Cortex-M4 and above */
X#if ((0x04U) >= 0x04U)   
N
N#define __SADD8                           __sadd8
N#define __QADD8                           __qadd8
N#define __SHADD8                          __shadd8
N#define __UADD8                           __uadd8
N#define __UQADD8                          __uqadd8
N#define __UHADD8                          __uhadd8
N#define __SSUB8                           __ssub8
N#define __QSUB8                           __qsub8
N#define __SHSUB8                          __shsub8
N#define __USUB8                           __usub8
N#define __UQSUB8                          __uqsub8
N#define __UHSUB8                          __uhsub8
N#define __SADD16                          __sadd16
N#define __QADD16                          __qadd16
N#define __SHADD16                         __shadd16
N#define __UADD16                          __uadd16
N#define __UQADD16                         __uqadd16
N#define __UHADD16                         __uhadd16
N#define __SSUB16                          __ssub16
N#define __QSUB16                          __qsub16
N#define __SHSUB16                         __shsub16
N#define __USUB16                          __usub16
N#define __UQSUB16                         __uqsub16
N#define __UHSUB16                         __uhsub16
N#define __SASX                            __sasx
N#define __QASX                            __qasx
N#define __SHASX                           __shasx
N#define __UASX                            __uasx
N#define __UQASX                           __uqasx
N#define __UHASX                           __uhasx
N#define __SSAX                            __ssax
N#define __QSAX                            __qsax
N#define __SHSAX                           __shsax
N#define __USAX                            __usax
N#define __UQSAX                           __uqsax
N#define __UHSAX                           __uhsax
N#define __USAD8                           __usad8
N#define __USADA8                          __usada8
N#define __SSAT16                          __ssat16
N#define __USAT16                          __usat16
N#define __UXTB16                          __uxtb16
N#define __UXTAB16                         __uxtab16
N#define __SXTB16                          __sxtb16
N#define __SXTAB16                         __sxtab16
N#define __SMUAD                           __smuad
N#define __SMUADX                          __smuadx
N#define __SMLAD                           __smlad
N#define __SMLADX                          __smladx
N#define __SMLALD                          __smlald
N#define __SMLALDX                         __smlaldx
N#define __SMUSD                           __smusd
N#define __SMUSDX                          __smusdx
N#define __SMLSD                           __smlsd
N#define __SMLSDX                          __smlsdx
N#define __SMLSLD                          __smlsld
N#define __SMLSLDX                         __smlsldx
N#define __SEL                             __sel
N#define __QADD                            __qadd
N#define __QSUB                            __qsub
N
N#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
N                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
N
N#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
N                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
N
N#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
N                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
N
N#endif /* (__CORTEX_M >= 0x04) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 54 ".\SRC\System\CMSIS\Include\core_cmInstr.h" 2
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H */
L 211 ".\SRC\System\CMSIS\Include\core_cm4.h" 2
N#include "core_cmFunc.h"                 /* Core Function Access */
L 1 ".\SRC\System\CMSIS\Include\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060422 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMFUNC_H
N#define __CORE_CMFUNC_H
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N#endif /* __CORE_CMFUNC_H */
L 212 ".\SRC\System\CMSIS\Include\core_cm4.h" 2
N#include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
L 1 ".\SRC\System\CMSIS\Include\core_cmSimd.h" 1
N/**************************************************************************//**
N * @file     core_cmSimd.h
N * @brief    CMSIS Cortex-M SIMD Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060422 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMSIMD_H
N#define __CORE_CMSIMD_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CMSIMD_H */
L 213 ".\SRC\System\CMSIS\Include\core_cm4.h" 2
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM4_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM4_H_DEPENDANT
N#define __CORE_CM4_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM4_REV
S    #define __CM4_REV               0x0000U
S    #warning "__CM4_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __FPU_PRESENT
S    #define __FPU_PRESENT             0U
S    #warning "__FPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          4U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M4 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N  - Core MPU Register
N  - Core FPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
N    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N#define APSR_Q_Pos                         27U                                            /*!< APSR: Q Position */
N#define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR: Q Mask */
N
N#define APSR_GE_Pos                        16U                                            /*!< APSR: GE Position */
N#define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR: GE Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
N    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_Q_Pos                         27U                                            /*!< xPSR: Q Position */
N#define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR: Q Mask */
N
N#define xPSR_IT_Pos                        25U                                            /*!< xPSR: IT Position */
N#define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR: IT Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_GE_Pos                        16U                                            /*!< xPSR: GE Position */
N#define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR: GE Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
N    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_FPCA_Pos                    2U                                            /*!< CONTROL: FPCA Position */
N#define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONTROL: FPCA Mask */
N
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[8U];                
N        uint32_t RESERVED0[24U];
N  __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[8U];                
N        uint32_t RSERVED1[24U];
N  __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[8U];                
N        uint32_t RESERVED2[24U];
N  __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[8U];                
N        uint32_t RESERVED3[24U];
N  __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
X  volatile uint32_t IABR[8U];                
N        uint32_t RESERVED4[56U];
N  __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240U];                
N        uint32_t RESERVED5[644U];
N  __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register */
X  volatile  uint32_t STIR;                    
N}  NVIC_Type;
N
N/* Software Triggered Interrupt Register Definitions */
N#define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: INTLINESNUM Position */
N#define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: INTLINESNUM Mask */
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N  __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12U];                
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N  __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register */
X  volatile uint32_t CFSR;                    
N  __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
X  volatile uint32_t HFSR;                    
N  __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
X  volatile uint32_t DFSR;                    
N  __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register */
X  volatile uint32_t MMFAR;                   
N  __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
X  volatile uint32_t BFAR;                    
N  __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register */
X  volatile uint32_t AFSR;                    
N  __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
X  volatile const  uint32_t PFR[2U];                 
N  __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
X  volatile const  uint32_t DFR;                     
N  __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
X  volatile const  uint32_t ADR;                     
N  __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
X  volatile const  uint32_t MMFR[4U];                
N  __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register */
X  volatile const  uint32_t ISAR[5U];                
N        uint32_t RESERVED0[5U];
N  __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register */
X  volatile uint32_t CPACR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Vector Table Offset Register Definitions */
N#define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N
N#define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Register Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* SCB Hard Fault Status Register Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
N  \brief    Type definitions for the System Control and ID Register not in the SCB
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control and ID Register not in the SCB.
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register */
X  volatile const  uint32_t ICTR;                    
N  __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
X  volatile uint32_t ACTLR;                   
N} SCnSCB_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: INTLINESNUM Position */
N#define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N#define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: DISOOFP Position */
N#define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: DISOOFP Mask */
N
N#define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: DISFPCA Position */
N#define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: DISFPCA Mask */
N
N#define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: DISFOLD Position */
N#define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */
N
N#define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: DISDEFWBUF Position */
N#define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */
N
N#define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: DISMCYCINT Position */
N#define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: DISMCYCINT Mask */
N
N/*@} end of group CMSIS_SCnotSCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
N  \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
N */
Ntypedef struct
N{
N  __OM  union
X  volatile  union
N  {
N    __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
X    volatile  uint8_t    u8;                  
N    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
X    volatile  uint16_t   u16;                 
N    __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
X    volatile  uint32_t   u32;                 
N  }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
N        uint32_t RESERVED0[864U];
N  __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
X  volatile uint32_t TER;                     
N        uint32_t RESERVED1[15U];
N  __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
X  volatile uint32_t TPR;                     
N        uint32_t RESERVED2[15U];
N  __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
X  volatile uint32_t TCR;                     
N        uint32_t RESERVED3[29U];
N  __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register */
X  volatile  uint32_t IWR;                     
N  __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
X  volatile const  uint32_t IRR;                     
N  __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register */
X  volatile uint32_t IMCR;                    
N        uint32_t RESERVED4[43U];
N  __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
X  volatile  uint32_t LAR;                     
N  __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
X  volatile const  uint32_t LSR;                     
N        uint32_t RESERVED5[6U];
N  __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                    
N  __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                    
N  __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                    
N  __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                    
N  __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                    
N  __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                    
N  __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                    
N  __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                    
N  __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                    
N  __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                    
N  __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                    
N  __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                    
N} ITM_Type;
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM TCR: Global timestamp frequency Position */
N#define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM TCR: Global timestamp frequency Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1U                                            /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0U                                            /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM LSR: Present Mask */
N
N/*@}*/ /* end of group CMSIS_ITM */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
N  \brief    Type definitions for the Data Watchpoint and Trace (DWT)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
X  volatile uint32_t CYCCNT;                  
N  __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
X  volatile uint32_t CPICNT;                  
N  __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register */
X  volatile uint32_t EXCCNT;                  
N  __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
X  volatile uint32_t SLEEPCNT;                
N  __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
X  volatile uint32_t LSUCNT;                  
N  __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register */
X  volatile uint32_t FOLDCNT;                 
N  __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register */
X  volatile const  uint32_t PCSR;                    
N  __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
X  volatile uint32_t COMP0;                   
N  __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
X  volatile uint32_t MASK0;                   
N  __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
X  volatile uint32_t FUNCTION0;               
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
X  volatile uint32_t COMP1;                   
N  __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
X  volatile uint32_t MASK1;                   
N  __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
X  volatile uint32_t FUNCTION1;               
N        uint32_t RESERVED1[1U];
N  __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
X  volatile uint32_t COMP2;                   
N  __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
X  volatile uint32_t MASK2;                   
N  __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
X  volatile uint32_t FUNCTION2;               
N        uint32_t RESERVED2[1U];
N  __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
X  volatile uint32_t COMP3;                   
N  __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
X  volatile uint32_t MASK3;                   
N  __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
X  volatile uint32_t FUNCTION3;               
N} DWT_Type;
N
N/* DWT Control Register Definitions */
N#define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTRL: NUMCOMP Position */
N#define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTRL: NUMCOMP Mask */
N
N#define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTRL: NOTRCPKT Position */
N#define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTRL: NOTRCPKT Mask */
N
N#define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTRL: NOEXTTRIG Position */
N#define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTRL: NOEXTTRIG Mask */
N
N#define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTRL: NOCYCCNT Position */
N#define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTRL: NOCYCCNT Mask */
N
N#define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTRL: NOPRFCNT Position */
N#define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTRL: NOPRFCNT Mask */
N
N#define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTRL: CYCEVTENA Position */
N#define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTRL: CYCEVTENA Mask */
N
N#define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTRL: FOLDEVTENA Position */
N#define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTRL: FOLDEVTENA Mask */
N
N#define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTRL: LSUEVTENA Position */
N#define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTRL: LSUEVTENA Mask */
N
N#define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTRL: SLEEPEVTENA Position */
N#define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTRL: SLEEPEVTENA Mask */
N
N#define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTRL: EXCEVTENA Position */
N#define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTRL: EXCEVTENA Mask */
N
N#define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTRL: CPIEVTENA Position */
N#define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTRL: CPIEVTENA Mask */
N
N#define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTRL: EXCTRCENA Position */
N#define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTRL: EXCTRCENA Mask */
N
N#define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTRL: PCSAMPLENA Position */
N#define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTRL: PCSAMPLENA Mask */
N
N#define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTRL: SYNCTAP Position */
N#define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTRL: SYNCTAP Mask */
N
N#define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTRL: CYCTAP Position */
N#define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTRL: CYCTAP Mask */
N
N#define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTRL: POSTINIT Position */
N#define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */
N
N#define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTRL: POSTPRESET Position */
N#define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */
N
N#define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTRL: CYCCNTENA Position */
N#define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTRL: CYCCNTENA Mask */
N
N/* DWT CPI Count Register Definitions */
N#define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPICNT: CPICNT Position */
N#define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPICNT: CPICNT Mask */
N
N/* DWT Exception Overhead Count Register Definitions */
N#define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXCCNT: EXCCNT Position */
N#define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXCCNT: EXCCNT Mask */
N
N/* DWT Sleep Count Register Definitions */
N#define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLEEPCNT: SLEEPCNT Position */
N#define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLEEPCNT: SLEEPCNT Mask */
N
N/* DWT LSU Count Register Definitions */
N#define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSUCNT: LSUCNT Position */
N#define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSUCNT: LSUCNT Mask */
N
N/* DWT Folded-instruction Count Register Definitions */
N#define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOLDCNT: FOLDCNT Position */
N#define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOLDCNT: FOLDCNT Mask */
N
N/* DWT Comparator Mask Register Definitions */
N#define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MASK: MASK Position */
N#define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MASK: MASK Mask */
N
N/* DWT Comparator Function Register Definitions */
N#define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUNCTION: MATCHED Position */
N#define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUNCTION: MATCHED Mask */
N
N#define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUNCTION: DATAVADDR1 Position */
N#define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUNCTION: DATAVADDR1 Mask */
N
N#define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUNCTION: DATAVADDR0 Position */
N#define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUNCTION: DATAVADDR0 Mask */
N
N#define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUNCTION: DATAVSIZE Position */
N#define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUNCTION: DATAVSIZE Mask */
N
N#define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUNCTION: LNK1ENA Position */
N#define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUNCTION: LNK1ENA Mask */
N
N#define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUNCTION: DATAVMATCH Position */
N#define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUNCTION: DATAVMATCH Mask */
N
N#define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUNCTION: CYCMATCH Position */
N#define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUNCTION: CYCMATCH Mask */
N
N#define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUNCTION: EMITRANGE Position */
N#define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUNCTION: EMITRANGE Mask */
N
N#define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUNCTION: FUNCTION Position */
N#define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUNCTION: FUNCTION Mask */
N
N/*@}*/ /* end of group CMSIS_DWT */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_TPI     Trace Port Interface (TPI)
N  \brief    Type definitions for the Trace Port Interface (TPI)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Trace Port Interface Register (TPI).
N */
Ntypedef struct
N{
N  __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register */
X  volatile uint32_t SSPSR;                   
N  __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
X  volatile uint32_t CSPSR;                   
N        uint32_t RESERVED0[2U];
N  __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
X  volatile uint32_t ACPR;                    
N        uint32_t RESERVED1[55U];
N  __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
X  volatile uint32_t SPPR;                    
N        uint32_t RESERVED2[131U];
N  __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
X  volatile const  uint32_t FFSR;                    
N  __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
X  volatile uint32_t FFCR;                    
N  __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
X  volatile const  uint32_t FSCR;                    
N        uint32_t RESERVED3[759U];
N  __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
X  volatile const  uint32_t TRIGGER;                 
N  __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
X  volatile const  uint32_t FIFO0;                   
N  __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
X  volatile const  uint32_t ITATBCTR2;               
N        uint32_t RESERVED4[1U];
N  __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
X  volatile const  uint32_t ITATBCTR0;               
N  __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
X  volatile const  uint32_t FIFO1;                   
N  __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
X  volatile uint32_t ITCTRL;                  
N        uint32_t RESERVED5[39U];
N  __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
X  volatile uint32_t CLAIMSET;                
N  __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
X  volatile uint32_t CLAIMCLR;                
N        uint32_t RESERVED7[8U];
N  __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
X  volatile const  uint32_t DEVID;                   
N  __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
X  volatile const  uint32_t DEVTYPE;                 
N} TPI_Type;
N
N/* TPI Asynchronous Clock Prescaler Register Definitions */
N#define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACPR: PRESCALER Position */
N#define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACPR: PRESCALER Mask */
N
N/* TPI Selected Pin Protocol Register Definitions */
N#define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPPR: TXMODE Position */
N#define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPPR: TXMODE Mask */
N
N/* TPI Formatter and Flush Status Register Definitions */
N#define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFSR: FtNonStop Position */
N#define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFSR: FtNonStop Mask */
N
N#define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFSR: TCPresent Position */
N#define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFSR: TCPresent Mask */
N
N#define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFSR: FtStopped Position */
N#define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFSR: FtStopped Mask */
N
N#define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFSR: FlInProg Position */
N#define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFSR: FlInProg Mask */
N
N/* TPI Formatter and Flush Control Register Definitions */
N#define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFCR: TrigIn Position */
N#define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFCR: TrigIn Mask */
N
N#define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFCR: EnFCont Position */
N#define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFCR: EnFCont Mask */
N
N/* TPI TRIGGER Register Definitions */
N#define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRIGGER: TRIGGER Position */
N#define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRIGGER: TRIGGER Mask */
N
N/* TPI Integration ETM Data Register Definitions (FIFO0) */
N#define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO0: ITM_ATVALID Position */
N#define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIFO0: ITM_ATVALID Mask */
N
N#define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO0: ITM_bytecount Position */
N#define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIFO0: ITM_bytecount Mask */
N
N#define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO0: ETM_ATVALID Position */
N#define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIFO0: ETM_ATVALID Mask */
N
N#define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO0: ETM_bytecount Position */
N#define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIFO0: ETM_bytecount Mask */
N
N#define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIFO0: ETM2 Position */
N#define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIFO0: ETM2 Mask */
N
N#define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIFO0: ETM1 Position */
N#define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIFO0: ETM1 Mask */
N
N#define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIFO0: ETM0 Position */
N#define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIFO0: ETM0 Mask */
N
N/* TPI ITATBCTR2 Register Definitions */
N#define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR2: ATREADY Position */
N#define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITATBCTR2: ATREADY Mask */
N
N/* TPI Integration ITM Data Register Definitions (FIFO1) */
N#define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO1: ITM_ATVALID Position */
N#define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIFO1: ITM_ATVALID Mask */
N
N#define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO1: ITM_bytecount Position */
N#define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIFO1: ITM_bytecount Mask */
N
N#define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO1: ETM_ATVALID Position */
N#define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIFO1: ETM_ATVALID Mask */
N
N#define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO1: ETM_bytecount Position */
N#define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIFO1: ETM_bytecount Mask */
N
N#define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIFO1: ITM2 Position */
N#define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIFO1: ITM2 Mask */
N
N#define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIFO1: ITM1 Position */
N#define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIFO1: ITM1 Mask */
N
N#define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIFO1: ITM0 Position */
N#define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIFO1: ITM0 Mask */
N
N/* TPI ITATBCTR0 Register Definitions */
N#define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR0: ATREADY Position */
N#define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITATBCTR0: ATREADY Mask */
N
N/* TPI Integration Mode Control Register Definitions */
N#define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITCTRL: Mode Position */
N#define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITCTRL: Mode Mask */
N
N/* TPI DEVID Register Definitions */
N#define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEVID: NRZVALID Position */
N#define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEVID: NRZVALID Mask */
N
N#define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEVID: MANCVALID Position */
N#define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEVID: MANCVALID Mask */
N
N#define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEVID: PTINVALID Position */
N#define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEVID: PTINVALID Mask */
N
N#define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEVID: MinBufSz Position */
N#define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEVID: MinBufSz Mask */
N
N#define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEVID: AsynClkIn Position */
N#define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEVID: AsynClkIn Mask */
N
N#define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEVID: NrTraceInput Position */
N#define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEVID: NrTraceInput Mask */
N
N/* TPI DEVTYPE Register Definitions */
N#define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEVTYPE: MajorType Position */
N#define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEVTYPE: MajorType Mask */
N
N#define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEVTYPE: SubType Position */
N#define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEVTYPE: SubType Mask */
N
N/*@}*/ /* end of group CMSIS_TPI */
N
N
N#if (__MPU_PRESENT == 1U)
X#if (1 == 1U)
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
N  \brief    Type definitions for the Memory Protection Unit (MPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Memory Protection Unit (MPU).
N */
Ntypedef struct
N{
N  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
X  volatile const  uint32_t TYPE;                    
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
X  volatile uint32_t RNR;                     
N  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
X  volatile uint32_t RBAR;                    
N  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
X  volatile uint32_t RASR;                    
N  __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register */
X  volatile uint32_t RBAR_A1;                 
N  __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
X  volatile uint32_t RASR_A1;                 
N  __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register */
X  volatile uint32_t RBAR_A2;                 
N  __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
X  volatile uint32_t RASR_A2;                 
N  __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register */
X  volatile uint32_t RBAR_A3;                 
N  __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
X  volatile uint32_t RASR_A3;                 
N} MPU_Type;
N
N/* MPU Type Register Definitions */
N#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
N#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
N
N#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
N#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
N
N#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
N#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
N
N/* MPU Control Register Definitions */
N#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
N#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
N
N#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
N#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
N
N#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
N#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
N
N/* MPU Region Number Register Definitions */
N#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
N#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
N
N/* MPU Region Base Address Register Definitions */
N#define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU RBAR: ADDR Position */
N#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
N
N#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
N#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
N
N#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
N#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
N
N/* MPU Region Attribute and Size Register Definitions */
N#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
N#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
N
N#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
N#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
N
N#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
N#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
N
N#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
N#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
N
N#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
N#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
N
N#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
N#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
N
N#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
N#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
N
N#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
N#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
N
N#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
N#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
N
N#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
N#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
N
N/*@} end of group CMSIS_MPU */
N#endif
N
N
N#if (__FPU_PRESENT == 1U)
X#if (1 == 1U)
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_FPU     Floating Point Unit (FPU)
N  \brief    Type definitions for the Floating Point Unit (FPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Floating Point Unit (FPU).
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control Register */
X  volatile uint32_t FPCCR;                   
N  __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address Register */
X  volatile uint32_t FPCAR;                   
N  __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Control Register */
X  volatile uint32_t FPDSCR;                  
N  __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 */
X  volatile const  uint32_t MVFR0;                   
N  __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 */
X  volatile const  uint32_t MVFR1;                   
N} FPU_Type;
N
N/* Floating-Point Context Control Register Definitions */
N#define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCCR: ASPEN bit Position */
N#define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCCR: ASPEN bit Mask */
N
N#define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCCR: LSPEN Position */
N#define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCCR: LSPEN bit Mask */
N
N#define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCCR: MONRDY Position */
N#define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCCR: MONRDY bit Mask */
N
N#define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCCR: BFRDY Position */
N#define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCCR: BFRDY bit Mask */
N
N#define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCCR: MMRDY Position */
N#define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCCR: MMRDY bit Mask */
N
N#define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCCR: HFRDY Position */
N#define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCCR: HFRDY bit Mask */
N
N#define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCCR: processor mode bit Position */
N#define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCCR: processor mode active bit Mask */
N
N#define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCCR: privilege level bit Position */
N#define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCCR: privilege level bit Mask */
N
N#define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCCR: Lazy state preservation active bit Position */
N#define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCCR: Lazy state preservation active bit Mask */
N
N/* Floating-Point Context Address Register Definitions */
N#define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCAR: ADDRESS bit Position */
N#define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCAR: ADDRESS bit Mask */
N
N/* Floating-Point Default Status Control Register Definitions */
N#define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDSCR: AHP bit Position */
N#define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDSCR: AHP bit Mask */
N
N#define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDSCR: DN bit Position */
N#define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDSCR: DN bit Mask */
N
N#define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDSCR: FZ bit Position */
N#define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDSCR: FZ bit Mask */
N
N#define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDSCR: RMode bit Position */
N#define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDSCR: RMode bit Mask */
N
N/* Media and FP Feature Register 0 Definitions */
N#define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR0: FP rounding modes bits Position */
N#define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR0: FP rounding modes bits Mask */
N
N#define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR0: Short vectors bits Position */
N#define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR0: Short vectors bits Mask */
N
N#define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR0: Square root bits Position */
N#define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR0: Square root bits Mask */
N
N#define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR0: Divide bits Position */
N#define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR0: Divide bits Mask */
N
N#define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR0: FP exception trapping bits Position */
N#define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR0: FP exception trapping bits Mask */
N
N#define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR0: Double-precision bits Position */
N#define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR0: Double-precision bits Mask */
N
N#define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR0: Single-precision bits Position */
N#define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR0: Single-precision bits Mask */
N
N#define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR0: A_SIMD registers bits Position */
N#define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR0: A_SIMD registers bits Mask */
N
N/* Media and FP Feature Register 1 Definitions */
N#define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR1: FP fused MAC bits Position */
N#define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR1: FP fused MAC bits Mask */
N
N#define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR1: FP HPFP bits Position */
N#define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR1: FP HPFP bits Mask */
N
N#define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR1: D_NaN mode bits Position */
N#define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR1: D_NaN mode bits Mask */
N
N#define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR1: FtZ mode bits Position */
N#define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR1: FtZ mode bits Mask */
N
N/*@} end of group CMSIS_FPU */
N#endif
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Type definitions for the Core Debug Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register */
X  volatile uint32_t DHCSR;                   
N  __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register */
X  volatile  uint32_t DCRSR;                   
N  __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register */
X  volatile uint32_t DCRDR;                   
N  __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                   
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register Definitions */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register Definitions */
N#define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register Definitions */
N#define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Cortex-M4 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
N#define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
N#define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register not in SCB */
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N#define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct */
N#define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct */
N#define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct */
N
N#if (__MPU_PRESENT == 1U)
X#if (1 == 1U)
N  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
N  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N#if (__FPU_PRESENT == 1U)
X#if (1 == 1U)
N  #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
N  #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Debug Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N/**
N  \brief   Set Priority Grouping
N  \details Sets the priority grouping field using the required unlock sequence.
N           The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
N           Only values from 0..7 are used.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]      PriorityGroup  Priority grouping field.
N */
N__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
N
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
N  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
X  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));  
N  reg_value  =  (reg_value                                   |
N                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X                ((uint32_t)0x5FAUL << 16U) |
N                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
N}
N
N
N/**
N  \brief   Get Priority Grouping
N  \details Reads the priority grouping field from the NVIC Interrupt Controller.
N  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
N */
N__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
X  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
N}
N
N
N/**
N  \brief   Enable External Interrupt
N  \details Enables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Disable External Interrupt
N  \details Disables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N */
N__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of an external interrupt.
N  \param [in]      IRQn  Interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of an external interrupt.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Get Active Interrupt
N  \details Reads the active register in NVIC and returns the active bit.
N  \param [in]      IRQn  Interrupt number.
N  \return             0  Interrupt status is not active.
N  \return             1  Interrupt status is active.
N */
N__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of an interrupt.
N  \note    The priority cannot be set for every core interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N */
N__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) < 0)
N  {
N    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N  else
N  {
N    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of an interrupt.
N           The interrupt number can be positive to specify an external (device specific) interrupt,
N           or negative to specify an internal (core) interrupt.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) < 0)
N  {
N    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
N  }
N  else
N  {
N    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - 3)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = (uint32_t)((0x5FAUL << 16U)    |
N                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
X                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
N                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
X                            (1UL << 2U)    );          
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0U)
X#if (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_core_DebugFunctions ITM Functions
N  \brief    Functions that access the ITM debug interface.
N  @{
N */
N
Nextern volatile int32_t ITM_RxBuffer;                    /*!< External variable to receive characters. */
N#define                 ITM_RXBUFFER_EMPTY   0x5AA55AA5U /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */
N
N
N/**
N  \brief   ITM Send Character
N  \details Transmits a character via the ITM channel 0, and
N           \li Just returns when no debugger is connected that has booked the output.
N           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
N  \param [in]     ch  Character to transmit.
N  \returns            Character to transmit.
N */
N__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
X  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&       
N      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
X      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL               ) != 0UL)   )      
N  {
N    while (ITM->PORT[0U].u32 == 0UL)
X    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
N    {
N      __NOP();
X      __nop();
N    }
N    ITM->PORT[0U].u8 = (uint8_t)ch;
X    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
N  }
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Receive Character
N  \details Inputs a character via the external variable \ref ITM_RxBuffer.
N  \return             Received character.
N  \return         -1  No character pending.
N */
N__STATIC_INLINE int32_t ITM_ReceiveChar (void)
Xstatic __inline int32_t ITM_ReceiveChar (void)
N{
N  int32_t ch = -1;                           /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer != 0x5AA55AA5U)
N  {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = 0x5AA55AA5U;        
N  }
N
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Check Character
N  \details Checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
N  \return          0  No character available.
N  \return          1  Character available.
N */
N__STATIC_INLINE int32_t ITM_CheckChar (void)
Xstatic __inline int32_t ITM_CheckChar (void)
N{
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer == 0x5AA55AA5U)
N  {
N    return (0);                              /* no character available */
N  }
N  else
N  {
N    return (1);                              /*    character available */
N  }
N}
N
N/*@} end of CMSIS_core_DebugFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM4_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 181 ".\SRC\System\LPC54608.h" 2
N#include "system_LPC54608.h"           /* Device specific configuration file */
L 1 ".\SRC\System\system_LPC54608.h" 1
N/*
N** ###################################################################
N**     Processors:          LPC54608J512BD208
N**                          LPC54608J512ET180
N**
N**     Compilers:           Keil ARM C/C++ Compiler
N**                          GNU C Compiler
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    LPC54S60x/LPC5460x User manual Rev. 0.7 8 Sep 2016
N**     Version:             rev. 1.0, 2016-08-12
N**     Build:               b161018
N**
N**     Abstract:
N**         Provides a system configuration function and a global variable that
N**         contains the system frequency. It configures the device and initializes
N**         the oscillator (PLL) that is part of the microcontroller device.
N**
N**     Copyright (c) 2016 Freescale Semiconductor, Inc.
N**     All rights reserved.
N**
N**     Redistribution and use in source and binary forms, with or without modification,
N**     are permitted provided that the following conditions are met:
N**
N**     o Redistributions of source code must retain the above copyright notice, this list
N**       of conditions and the following disclaimer.
N**
N**     o Redistributions in binary form must reproduce the above copyright notice, this
N**       list of conditions and the following disclaimer in the documentation and/or
N**       other materials provided with the distribution.
N**
N**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N**       contributors may be used to endorse or promote products derived from this
N**       software without specific prior written permission.
N**
N**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2016-08-12)
N**         Initial version.
N**
N** ###################################################################
N*/
N
N/*!
N * @file LPC54608
N * @version 1.0
N * @date 2016-08-12
N * @brief Device specific configuration file for LPC54608 (header file)
N *
N * Provides a system configuration function and a global variable that contains
N * the system frequency. It configures the device and initializes the oscillator
N * (PLL) that is part of the microcontroller device.
N */
N
N#ifndef _SYSTEM_LPC54608_H_
N#define _SYSTEM_LPC54608_H_                      /**< Symbol preventing repeated inclusion */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
N#define DEFAULT_SYSTEM_CLOCK           12000000u           /* Default System clock value */
N#define CLK_RTC_32K_CLK                   32768u           /* RTC oscillator 32 kHz output (32k_clk */
N#define CLK_FRO_12MHZ                  12000000u           /* FRO 12 MHz (fro_12m) */
N#define CLK_FRO_48MHZ                  48000000u           /* FRO 48 MHz (fro_48m) */
N#define CLK_FRO_96MHZ                  96000000u           /* FRO 96 MHz (fro_96m) */
N#define CLK_CLK_IN                            0u           /* Default CLK_IN pin clock */
N
N
N/**
N * @brief System clock frequency (core clock)
N *
N * The system clock frequency supplied to the SysTick timer and the processor
N * core clock. This variable can be used by the user application to setup the
N * SysTick timer or configure other parameters. It may also be used by debugger to
N * query the frequency of the debug timer or configure the trace clock speed
N * SystemCoreClock is initialized with a correct predefined value.
N */
Nextern uint32_t SystemCoreClock;
N
N/**
N * @brief Setup the microcontroller system.
N *
N * Typically this function configures the oscillator (PLL) that is part of the
N * microcontroller device. For systems with variable clock speed it also updates
N * the variable SystemCoreClock. SystemInit is called from startup_device file.
N */
Nvoid SystemInit (void);
N
N/**
N * @brief Updates the SystemCoreClock variable.
N *
N * It must be called whenever the core clock is changed during program
N * execution. SystemCoreClockUpdate() evaluates the clock register settings and calculates
N * the current core clock.
N */
Nvoid SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  /* _SYSTEM_LPC54608_H_ */
L 182 ".\SRC\System\LPC54608.h" 2
N
N/*!
N * @}
N */ /* end of group Cortex_Core_Configuration */
N
N
N/* ----------------------------------------------------------------------------
N   -- Mapping Information
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Mapping_Information Mapping Information
N * @{
N */
N
N/** Mapping Information */
N
N/*!
N * @}
N */ /* end of group Mapping_Information */
N
N
N/* ----------------------------------------------------------------------------
N   -- Device Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
N * @{
N */
N
N
N/*
N** Start of section using anonymous unions
N*/
N
N#if defined(__ARMCC_VERSION)
X#if 1L
N  #pragma push
N  #pragma anon_unions
N#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=extended
S#else
S  #error Not supported compiler type
N#endif
N
N/* ----------------------------------------------------------------------------
N   -- ADC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Peripheral_Access_Layer ADC Peripheral Access Layer
N * @{
N */
N
N/** ADC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CTRL;                              /**< ADC Control register. Contains the clock divide value, resolution selection, sampling time selection, and mode controls., offset: 0x0 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t INSEL;                             /**< Input Select. Allows selection of the temperature sensor as an alternate input to ADC channel 0., offset: 0x4 */
X  volatile uint32_t INSEL;                              
N  __IO uint32_t SEQ_CTRL[2];                       /**< ADC Conversion Sequence-n control register: Controls triggering and channel selection for conversion sequence-n. Also specifies interrupt mode for sequence-n., array offset: 0x8, array step: 0x4 */
X  volatile uint32_t SEQ_CTRL[2];                        
N  __I  uint32_t SEQ_GDAT[2];                       /**< ADC Sequence-n Global Data register. This register contains the result of the most recent ADC conversion performed under sequence-n., array offset: 0x10, array step: 0x4 */
X  volatile const  uint32_t SEQ_GDAT[2];                        
N       uint8_t RESERVED_0[8];
N  __I  uint32_t DAT[12];                           /**< ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0., array offset: 0x20, array step: 0x4 */
X  volatile const  uint32_t DAT[12];                            
N  __IO uint32_t THR0_LOW;                          /**< ADC Low Compare Threshold register 0: Contains the lower threshold level for automatic threshold comparison for any channels linked to threshold pair 0., offset: 0x50 */
X  volatile uint32_t THR0_LOW;                           
N  __IO uint32_t THR1_LOW;                          /**< ADC Low Compare Threshold register 1: Contains the lower threshold level for automatic threshold comparison for any channels linked to threshold pair 1., offset: 0x54 */
X  volatile uint32_t THR1_LOW;                           
N  __IO uint32_t THR0_HIGH;                         /**< ADC High Compare Threshold register 0: Contains the upper threshold level for automatic threshold comparison for any channels linked to threshold pair 0., offset: 0x58 */
X  volatile uint32_t THR0_HIGH;                          
N  __IO uint32_t THR1_HIGH;                         /**< ADC High Compare Threshold register 1: Contains the upper threshold level for automatic threshold comparison for any channels linked to threshold pair 1., offset: 0x5C */
X  volatile uint32_t THR1_HIGH;                          
N  __IO uint32_t CHAN_THRSEL;                       /**< ADC Channel-Threshold Select register. Specifies which set of threshold compare registers are to be used for each channel, offset: 0x60 */
X  volatile uint32_t CHAN_THRSEL;                        
N  __IO uint32_t INTEN;                             /**< ADC Interrupt Enable register. This register contains enable bits that enable the sequence-A, sequence-B, threshold compare and data overrun interrupts to be generated., offset: 0x64 */
X  volatile uint32_t INTEN;                              
N  __IO uint32_t FLAGS;                             /**< ADC Flags register. Contains the four interrupt/DMA trigger flags and the individual component overrun and threshold-compare flags. (The overrun bits replicate information stored in the result registers)., offset: 0x68 */
X  volatile uint32_t FLAGS;                              
N  __IO uint32_t STARTUP;                           /**< ADC Startup register., offset: 0x6C */
X  volatile uint32_t STARTUP;                            
N  __IO uint32_t CALIB;                             /**< ADC Calibration register., offset: 0x70 */
X  volatile uint32_t CALIB;                              
N} ADC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- ADC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Register_Masks ADC Register Masks
N * @{
N */
N
N/*! @name CTRL - ADC Control register. Contains the clock divide value, resolution selection, sampling time selection, and mode controls. */
N#define ADC_CTRL_CLKDIV_MASK                     (0xFFU)
N#define ADC_CTRL_CLKDIV_SHIFT                    (0U)
N#define ADC_CTRL_CLKDIV(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_CTRL_CLKDIV_SHIFT)) & ADC_CTRL_CLKDIV_MASK)
N#define ADC_CTRL_ASYNMODE_MASK                   (0x100U)
N#define ADC_CTRL_ASYNMODE_SHIFT                  (8U)
N#define ADC_CTRL_ASYNMODE(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_CTRL_ASYNMODE_SHIFT)) & ADC_CTRL_ASYNMODE_MASK)
N#define ADC_CTRL_RESOL_MASK                      (0x600U)
N#define ADC_CTRL_RESOL_SHIFT                     (9U)
N#define ADC_CTRL_RESOL(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_CTRL_RESOL_SHIFT)) & ADC_CTRL_RESOL_MASK)
N#define ADC_CTRL_BYPASSCAL_MASK                  (0x800U)
N#define ADC_CTRL_BYPASSCAL_SHIFT                 (11U)
N#define ADC_CTRL_BYPASSCAL(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_CTRL_BYPASSCAL_SHIFT)) & ADC_CTRL_BYPASSCAL_MASK)
N#define ADC_CTRL_TSAMP_MASK                      (0x7000U)
N#define ADC_CTRL_TSAMP_SHIFT                     (12U)
N#define ADC_CTRL_TSAMP(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_CTRL_TSAMP_SHIFT)) & ADC_CTRL_TSAMP_MASK)
N
N/*! @name INSEL - Input Select. Allows selection of the temperature sensor as an alternate input to ADC channel 0. */
N#define ADC_INSEL_SEL_MASK                       (0x3U)
N#define ADC_INSEL_SEL_SHIFT                      (0U)
N#define ADC_INSEL_SEL(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_INSEL_SEL_SHIFT)) & ADC_INSEL_SEL_MASK)
N
N/*! @name SEQ_CTRL - ADC Conversion Sequence-n control register: Controls triggering and channel selection for conversion sequence-n. Also specifies interrupt mode for sequence-n. */
N#define ADC_SEQ_CTRL_CHANNELS_MASK               (0xFFFU)
N#define ADC_SEQ_CTRL_CHANNELS_SHIFT              (0U)
N#define ADC_SEQ_CTRL_CHANNELS(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_CHANNELS_SHIFT)) & ADC_SEQ_CTRL_CHANNELS_MASK)
N#define ADC_SEQ_CTRL_TRIGGER_MASK                (0x3F000U)
N#define ADC_SEQ_CTRL_TRIGGER_SHIFT               (12U)
N#define ADC_SEQ_CTRL_TRIGGER(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_TRIGGER_SHIFT)) & ADC_SEQ_CTRL_TRIGGER_MASK)
N#define ADC_SEQ_CTRL_TRIGPOL_MASK                (0x40000U)
N#define ADC_SEQ_CTRL_TRIGPOL_SHIFT               (18U)
N#define ADC_SEQ_CTRL_TRIGPOL(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_TRIGPOL_SHIFT)) & ADC_SEQ_CTRL_TRIGPOL_MASK)
N#define ADC_SEQ_CTRL_SYNCBYPASS_MASK             (0x80000U)
N#define ADC_SEQ_CTRL_SYNCBYPASS_SHIFT            (19U)
N#define ADC_SEQ_CTRL_SYNCBYPASS(x)               (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_SYNCBYPASS_SHIFT)) & ADC_SEQ_CTRL_SYNCBYPASS_MASK)
N#define ADC_SEQ_CTRL_START_MASK                  (0x4000000U)
N#define ADC_SEQ_CTRL_START_SHIFT                 (26U)
N#define ADC_SEQ_CTRL_START(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_START_SHIFT)) & ADC_SEQ_CTRL_START_MASK)
N#define ADC_SEQ_CTRL_BURST_MASK                  (0x8000000U)
N#define ADC_SEQ_CTRL_BURST_SHIFT                 (27U)
N#define ADC_SEQ_CTRL_BURST(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_BURST_SHIFT)) & ADC_SEQ_CTRL_BURST_MASK)
N#define ADC_SEQ_CTRL_SINGLESTEP_MASK             (0x10000000U)
N#define ADC_SEQ_CTRL_SINGLESTEP_SHIFT            (28U)
N#define ADC_SEQ_CTRL_SINGLESTEP(x)               (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_SINGLESTEP_SHIFT)) & ADC_SEQ_CTRL_SINGLESTEP_MASK)
N#define ADC_SEQ_CTRL_LOWPRIO_MASK                (0x20000000U)
N#define ADC_SEQ_CTRL_LOWPRIO_SHIFT               (29U)
N#define ADC_SEQ_CTRL_LOWPRIO(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_LOWPRIO_SHIFT)) & ADC_SEQ_CTRL_LOWPRIO_MASK)
N#define ADC_SEQ_CTRL_MODE_MASK                   (0x40000000U)
N#define ADC_SEQ_CTRL_MODE_SHIFT                  (30U)
N#define ADC_SEQ_CTRL_MODE(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_MODE_SHIFT)) & ADC_SEQ_CTRL_MODE_MASK)
N#define ADC_SEQ_CTRL_SEQ_ENA_MASK                (0x80000000U)
N#define ADC_SEQ_CTRL_SEQ_ENA_SHIFT               (31U)
N#define ADC_SEQ_CTRL_SEQ_ENA(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_CTRL_SEQ_ENA_SHIFT)) & ADC_SEQ_CTRL_SEQ_ENA_MASK)
N
N/* The count of ADC_SEQ_CTRL */
N#define ADC_SEQ_CTRL_COUNT                       (2U)
N
N/*! @name SEQ_GDAT - ADC Sequence-n Global Data register. This register contains the result of the most recent ADC conversion performed under sequence-n. */
N#define ADC_SEQ_GDAT_RESULT_MASK                 (0xFFF0U)
N#define ADC_SEQ_GDAT_RESULT_SHIFT                (4U)
N#define ADC_SEQ_GDAT_RESULT(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_GDAT_RESULT_SHIFT)) & ADC_SEQ_GDAT_RESULT_MASK)
N#define ADC_SEQ_GDAT_THCMPRANGE_MASK             (0x30000U)
N#define ADC_SEQ_GDAT_THCMPRANGE_SHIFT            (16U)
N#define ADC_SEQ_GDAT_THCMPRANGE(x)               (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_GDAT_THCMPRANGE_SHIFT)) & ADC_SEQ_GDAT_THCMPRANGE_MASK)
N#define ADC_SEQ_GDAT_THCMPCROSS_MASK             (0xC0000U)
N#define ADC_SEQ_GDAT_THCMPCROSS_SHIFT            (18U)
N#define ADC_SEQ_GDAT_THCMPCROSS(x)               (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_GDAT_THCMPCROSS_SHIFT)) & ADC_SEQ_GDAT_THCMPCROSS_MASK)
N#define ADC_SEQ_GDAT_CHN_MASK                    (0x3C000000U)
N#define ADC_SEQ_GDAT_CHN_SHIFT                   (26U)
N#define ADC_SEQ_GDAT_CHN(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_GDAT_CHN_SHIFT)) & ADC_SEQ_GDAT_CHN_MASK)
N#define ADC_SEQ_GDAT_OVERRUN_MASK                (0x40000000U)
N#define ADC_SEQ_GDAT_OVERRUN_SHIFT               (30U)
N#define ADC_SEQ_GDAT_OVERRUN(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_GDAT_OVERRUN_SHIFT)) & ADC_SEQ_GDAT_OVERRUN_MASK)
N#define ADC_SEQ_GDAT_DATAVALID_MASK              (0x80000000U)
N#define ADC_SEQ_GDAT_DATAVALID_SHIFT             (31U)
N#define ADC_SEQ_GDAT_DATAVALID(x)                (((uint32_t)(((uint32_t)(x)) << ADC_SEQ_GDAT_DATAVALID_SHIFT)) & ADC_SEQ_GDAT_DATAVALID_MASK)
N
N/* The count of ADC_SEQ_GDAT */
N#define ADC_SEQ_GDAT_COUNT                       (2U)
N
N/*! @name DAT - ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0. */
N#define ADC_DAT_RESULT_MASK                      (0xFFF0U)
N#define ADC_DAT_RESULT_SHIFT                     (4U)
N#define ADC_DAT_RESULT(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_DAT_RESULT_SHIFT)) & ADC_DAT_RESULT_MASK)
N#define ADC_DAT_THCMPRANGE_MASK                  (0x30000U)
N#define ADC_DAT_THCMPRANGE_SHIFT                 (16U)
N#define ADC_DAT_THCMPRANGE(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_DAT_THCMPRANGE_SHIFT)) & ADC_DAT_THCMPRANGE_MASK)
N#define ADC_DAT_THCMPCROSS_MASK                  (0xC0000U)
N#define ADC_DAT_THCMPCROSS_SHIFT                 (18U)
N#define ADC_DAT_THCMPCROSS(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_DAT_THCMPCROSS_SHIFT)) & ADC_DAT_THCMPCROSS_MASK)
N#define ADC_DAT_CHANNEL_MASK                     (0x3C000000U)
N#define ADC_DAT_CHANNEL_SHIFT                    (26U)
N#define ADC_DAT_CHANNEL(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_DAT_CHANNEL_SHIFT)) & ADC_DAT_CHANNEL_MASK)
N#define ADC_DAT_OVERRUN_MASK                     (0x40000000U)
N#define ADC_DAT_OVERRUN_SHIFT                    (30U)
N#define ADC_DAT_OVERRUN(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_DAT_OVERRUN_SHIFT)) & ADC_DAT_OVERRUN_MASK)
N#define ADC_DAT_DATAVALID_MASK                   (0x80000000U)
N#define ADC_DAT_DATAVALID_SHIFT                  (31U)
N#define ADC_DAT_DATAVALID(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_DAT_DATAVALID_SHIFT)) & ADC_DAT_DATAVALID_MASK)
N
N/* The count of ADC_DAT */
N#define ADC_DAT_COUNT                            (12U)
N
N/*! @name THR0_LOW - ADC Low Compare Threshold register 0: Contains the lower threshold level for automatic threshold comparison for any channels linked to threshold pair 0. */
N#define ADC_THR0_LOW_THRLOW_MASK                 (0xFFF0U)
N#define ADC_THR0_LOW_THRLOW_SHIFT                (4U)
N#define ADC_THR0_LOW_THRLOW(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_THR0_LOW_THRLOW_SHIFT)) & ADC_THR0_LOW_THRLOW_MASK)
N
N/*! @name THR1_LOW - ADC Low Compare Threshold register 1: Contains the lower threshold level for automatic threshold comparison for any channels linked to threshold pair 1. */
N#define ADC_THR1_LOW_THRLOW_MASK                 (0xFFF0U)
N#define ADC_THR1_LOW_THRLOW_SHIFT                (4U)
N#define ADC_THR1_LOW_THRLOW(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_THR1_LOW_THRLOW_SHIFT)) & ADC_THR1_LOW_THRLOW_MASK)
N
N/*! @name THR0_HIGH - ADC High Compare Threshold register 0: Contains the upper threshold level for automatic threshold comparison for any channels linked to threshold pair 0. */
N#define ADC_THR0_HIGH_THRHIGH_MASK               (0xFFF0U)
N#define ADC_THR0_HIGH_THRHIGH_SHIFT              (4U)
N#define ADC_THR0_HIGH_THRHIGH(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_THR0_HIGH_THRHIGH_SHIFT)) & ADC_THR0_HIGH_THRHIGH_MASK)
N
N/*! @name THR1_HIGH - ADC High Compare Threshold register 1: Contains the upper threshold level for automatic threshold comparison for any channels linked to threshold pair 1. */
N#define ADC_THR1_HIGH_THRHIGH_MASK               (0xFFF0U)
N#define ADC_THR1_HIGH_THRHIGH_SHIFT              (4U)
N#define ADC_THR1_HIGH_THRHIGH(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_THR1_HIGH_THRHIGH_SHIFT)) & ADC_THR1_HIGH_THRHIGH_MASK)
N
N/*! @name CHAN_THRSEL - ADC Channel-Threshold Select register. Specifies which set of threshold compare registers are to be used for each channel */
N#define ADC_CHAN_THRSEL_CH0_THRSEL_MASK          (0x1U)
N#define ADC_CHAN_THRSEL_CH0_THRSEL_SHIFT         (0U)
N#define ADC_CHAN_THRSEL_CH0_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH0_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH0_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH1_THRSEL_MASK          (0x2U)
N#define ADC_CHAN_THRSEL_CH1_THRSEL_SHIFT         (1U)
N#define ADC_CHAN_THRSEL_CH1_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH1_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH1_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH2_THRSEL_MASK          (0x4U)
N#define ADC_CHAN_THRSEL_CH2_THRSEL_SHIFT         (2U)
N#define ADC_CHAN_THRSEL_CH2_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH2_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH2_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH3_THRSEL_MASK          (0x8U)
N#define ADC_CHAN_THRSEL_CH3_THRSEL_SHIFT         (3U)
N#define ADC_CHAN_THRSEL_CH3_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH3_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH3_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH4_THRSEL_MASK          (0x10U)
N#define ADC_CHAN_THRSEL_CH4_THRSEL_SHIFT         (4U)
N#define ADC_CHAN_THRSEL_CH4_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH4_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH4_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH5_THRSEL_MASK          (0x20U)
N#define ADC_CHAN_THRSEL_CH5_THRSEL_SHIFT         (5U)
N#define ADC_CHAN_THRSEL_CH5_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH5_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH5_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH6_THRSEL_MASK          (0x40U)
N#define ADC_CHAN_THRSEL_CH6_THRSEL_SHIFT         (6U)
N#define ADC_CHAN_THRSEL_CH6_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH6_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH6_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH7_THRSEL_MASK          (0x80U)
N#define ADC_CHAN_THRSEL_CH7_THRSEL_SHIFT         (7U)
N#define ADC_CHAN_THRSEL_CH7_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH7_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH7_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH8_THRSEL_MASK          (0x100U)
N#define ADC_CHAN_THRSEL_CH8_THRSEL_SHIFT         (8U)
N#define ADC_CHAN_THRSEL_CH8_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH8_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH8_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH9_THRSEL_MASK          (0x200U)
N#define ADC_CHAN_THRSEL_CH9_THRSEL_SHIFT         (9U)
N#define ADC_CHAN_THRSEL_CH9_THRSEL(x)            (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH9_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH9_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH10_THRSEL_MASK         (0x400U)
N#define ADC_CHAN_THRSEL_CH10_THRSEL_SHIFT        (10U)
N#define ADC_CHAN_THRSEL_CH10_THRSEL(x)           (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH10_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH10_THRSEL_MASK)
N#define ADC_CHAN_THRSEL_CH11_THRSEL_MASK         (0x800U)
N#define ADC_CHAN_THRSEL_CH11_THRSEL_SHIFT        (11U)
N#define ADC_CHAN_THRSEL_CH11_THRSEL(x)           (((uint32_t)(((uint32_t)(x)) << ADC_CHAN_THRSEL_CH11_THRSEL_SHIFT)) & ADC_CHAN_THRSEL_CH11_THRSEL_MASK)
N
N/*! @name INTEN - ADC Interrupt Enable register. This register contains enable bits that enable the sequence-A, sequence-B, threshold compare and data overrun interrupts to be generated. */
N#define ADC_INTEN_SEQA_INTEN_MASK                (0x1U)
N#define ADC_INTEN_SEQA_INTEN_SHIFT               (0U)
N#define ADC_INTEN_SEQA_INTEN(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_SEQA_INTEN_SHIFT)) & ADC_INTEN_SEQA_INTEN_MASK)
N#define ADC_INTEN_SEQB_INTEN_MASK                (0x2U)
N#define ADC_INTEN_SEQB_INTEN_SHIFT               (1U)
N#define ADC_INTEN_SEQB_INTEN(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_SEQB_INTEN_SHIFT)) & ADC_INTEN_SEQB_INTEN_MASK)
N#define ADC_INTEN_OVR_INTEN_MASK                 (0x4U)
N#define ADC_INTEN_OVR_INTEN_SHIFT                (2U)
N#define ADC_INTEN_OVR_INTEN(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_OVR_INTEN_SHIFT)) & ADC_INTEN_OVR_INTEN_MASK)
N#define ADC_INTEN_ADCMPINTEN0_MASK               (0x18U)
N#define ADC_INTEN_ADCMPINTEN0_SHIFT              (3U)
N#define ADC_INTEN_ADCMPINTEN0(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN0_SHIFT)) & ADC_INTEN_ADCMPINTEN0_MASK)
N#define ADC_INTEN_ADCMPINTEN1_MASK               (0x60U)
N#define ADC_INTEN_ADCMPINTEN1_SHIFT              (5U)
N#define ADC_INTEN_ADCMPINTEN1(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN1_SHIFT)) & ADC_INTEN_ADCMPINTEN1_MASK)
N#define ADC_INTEN_ADCMPINTEN2_MASK               (0x180U)
N#define ADC_INTEN_ADCMPINTEN2_SHIFT              (7U)
N#define ADC_INTEN_ADCMPINTEN2(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN2_SHIFT)) & ADC_INTEN_ADCMPINTEN2_MASK)
N#define ADC_INTEN_ADCMPINTEN3_MASK               (0x600U)
N#define ADC_INTEN_ADCMPINTEN3_SHIFT              (9U)
N#define ADC_INTEN_ADCMPINTEN3(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN3_SHIFT)) & ADC_INTEN_ADCMPINTEN3_MASK)
N#define ADC_INTEN_ADCMPINTEN4_MASK               (0x1800U)
N#define ADC_INTEN_ADCMPINTEN4_SHIFT              (11U)
N#define ADC_INTEN_ADCMPINTEN4(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN4_SHIFT)) & ADC_INTEN_ADCMPINTEN4_MASK)
N#define ADC_INTEN_ADCMPINTEN5_MASK               (0x6000U)
N#define ADC_INTEN_ADCMPINTEN5_SHIFT              (13U)
N#define ADC_INTEN_ADCMPINTEN5(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN5_SHIFT)) & ADC_INTEN_ADCMPINTEN5_MASK)
N#define ADC_INTEN_ADCMPINTEN6_MASK               (0x18000U)
N#define ADC_INTEN_ADCMPINTEN6_SHIFT              (15U)
N#define ADC_INTEN_ADCMPINTEN6(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN6_SHIFT)) & ADC_INTEN_ADCMPINTEN6_MASK)
N#define ADC_INTEN_ADCMPINTEN7_MASK               (0x60000U)
N#define ADC_INTEN_ADCMPINTEN7_SHIFT              (17U)
N#define ADC_INTEN_ADCMPINTEN7(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN7_SHIFT)) & ADC_INTEN_ADCMPINTEN7_MASK)
N#define ADC_INTEN_ADCMPINTEN8_MASK               (0x180000U)
N#define ADC_INTEN_ADCMPINTEN8_SHIFT              (19U)
N#define ADC_INTEN_ADCMPINTEN8(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN8_SHIFT)) & ADC_INTEN_ADCMPINTEN8_MASK)
N#define ADC_INTEN_ADCMPINTEN9_MASK               (0x600000U)
N#define ADC_INTEN_ADCMPINTEN9_SHIFT              (21U)
N#define ADC_INTEN_ADCMPINTEN9(x)                 (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN9_SHIFT)) & ADC_INTEN_ADCMPINTEN9_MASK)
N#define ADC_INTEN_ADCMPINTEN10_MASK              (0x1800000U)
N#define ADC_INTEN_ADCMPINTEN10_SHIFT             (23U)
N#define ADC_INTEN_ADCMPINTEN10(x)                (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN10_SHIFT)) & ADC_INTEN_ADCMPINTEN10_MASK)
N#define ADC_INTEN_ADCMPINTEN11_MASK              (0x6000000U)
N#define ADC_INTEN_ADCMPINTEN11_SHIFT             (25U)
N#define ADC_INTEN_ADCMPINTEN11(x)                (((uint32_t)(((uint32_t)(x)) << ADC_INTEN_ADCMPINTEN11_SHIFT)) & ADC_INTEN_ADCMPINTEN11_MASK)
N
N/*! @name FLAGS - ADC Flags register. Contains the four interrupt/DMA trigger flags and the individual component overrun and threshold-compare flags. (The overrun bits replicate information stored in the result registers). */
N#define ADC_FLAGS_THCMP0_MASK                    (0x1U)
N#define ADC_FLAGS_THCMP0_SHIFT                   (0U)
N#define ADC_FLAGS_THCMP0(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP0_SHIFT)) & ADC_FLAGS_THCMP0_MASK)
N#define ADC_FLAGS_THCMP1_MASK                    (0x2U)
N#define ADC_FLAGS_THCMP1_SHIFT                   (1U)
N#define ADC_FLAGS_THCMP1(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP1_SHIFT)) & ADC_FLAGS_THCMP1_MASK)
N#define ADC_FLAGS_THCMP2_MASK                    (0x4U)
N#define ADC_FLAGS_THCMP2_SHIFT                   (2U)
N#define ADC_FLAGS_THCMP2(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP2_SHIFT)) & ADC_FLAGS_THCMP2_MASK)
N#define ADC_FLAGS_THCMP3_MASK                    (0x8U)
N#define ADC_FLAGS_THCMP3_SHIFT                   (3U)
N#define ADC_FLAGS_THCMP3(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP3_SHIFT)) & ADC_FLAGS_THCMP3_MASK)
N#define ADC_FLAGS_THCMP4_MASK                    (0x10U)
N#define ADC_FLAGS_THCMP4_SHIFT                   (4U)
N#define ADC_FLAGS_THCMP4(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP4_SHIFT)) & ADC_FLAGS_THCMP4_MASK)
N#define ADC_FLAGS_THCMP5_MASK                    (0x20U)
N#define ADC_FLAGS_THCMP5_SHIFT                   (5U)
N#define ADC_FLAGS_THCMP5(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP5_SHIFT)) & ADC_FLAGS_THCMP5_MASK)
N#define ADC_FLAGS_THCMP6_MASK                    (0x40U)
N#define ADC_FLAGS_THCMP6_SHIFT                   (6U)
N#define ADC_FLAGS_THCMP6(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP6_SHIFT)) & ADC_FLAGS_THCMP6_MASK)
N#define ADC_FLAGS_THCMP7_MASK                    (0x80U)
N#define ADC_FLAGS_THCMP7_SHIFT                   (7U)
N#define ADC_FLAGS_THCMP7(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP7_SHIFT)) & ADC_FLAGS_THCMP7_MASK)
N#define ADC_FLAGS_THCMP8_MASK                    (0x100U)
N#define ADC_FLAGS_THCMP8_SHIFT                   (8U)
N#define ADC_FLAGS_THCMP8(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP8_SHIFT)) & ADC_FLAGS_THCMP8_MASK)
N#define ADC_FLAGS_THCMP9_MASK                    (0x200U)
N#define ADC_FLAGS_THCMP9_SHIFT                   (9U)
N#define ADC_FLAGS_THCMP9(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP9_SHIFT)) & ADC_FLAGS_THCMP9_MASK)
N#define ADC_FLAGS_THCMP10_MASK                   (0x400U)
N#define ADC_FLAGS_THCMP10_SHIFT                  (10U)
N#define ADC_FLAGS_THCMP10(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP10_SHIFT)) & ADC_FLAGS_THCMP10_MASK)
N#define ADC_FLAGS_THCMP11_MASK                   (0x800U)
N#define ADC_FLAGS_THCMP11_SHIFT                  (11U)
N#define ADC_FLAGS_THCMP11(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP11_SHIFT)) & ADC_FLAGS_THCMP11_MASK)
N#define ADC_FLAGS_OVERRUN0_MASK                  (0x1000U)
N#define ADC_FLAGS_OVERRUN0_SHIFT                 (12U)
N#define ADC_FLAGS_OVERRUN0(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN0_SHIFT)) & ADC_FLAGS_OVERRUN0_MASK)
N#define ADC_FLAGS_OVERRUN1_MASK                  (0x2000U)
N#define ADC_FLAGS_OVERRUN1_SHIFT                 (13U)
N#define ADC_FLAGS_OVERRUN1(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN1_SHIFT)) & ADC_FLAGS_OVERRUN1_MASK)
N#define ADC_FLAGS_OVERRUN2_MASK                  (0x4000U)
N#define ADC_FLAGS_OVERRUN2_SHIFT                 (14U)
N#define ADC_FLAGS_OVERRUN2(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN2_SHIFT)) & ADC_FLAGS_OVERRUN2_MASK)
N#define ADC_FLAGS_OVERRUN3_MASK                  (0x8000U)
N#define ADC_FLAGS_OVERRUN3_SHIFT                 (15U)
N#define ADC_FLAGS_OVERRUN3(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN3_SHIFT)) & ADC_FLAGS_OVERRUN3_MASK)
N#define ADC_FLAGS_OVERRUN4_MASK                  (0x10000U)
N#define ADC_FLAGS_OVERRUN4_SHIFT                 (16U)
N#define ADC_FLAGS_OVERRUN4(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN4_SHIFT)) & ADC_FLAGS_OVERRUN4_MASK)
N#define ADC_FLAGS_OVERRUN5_MASK                  (0x20000U)
N#define ADC_FLAGS_OVERRUN5_SHIFT                 (17U)
N#define ADC_FLAGS_OVERRUN5(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN5_SHIFT)) & ADC_FLAGS_OVERRUN5_MASK)
N#define ADC_FLAGS_OVERRUN6_MASK                  (0x40000U)
N#define ADC_FLAGS_OVERRUN6_SHIFT                 (18U)
N#define ADC_FLAGS_OVERRUN6(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN6_SHIFT)) & ADC_FLAGS_OVERRUN6_MASK)
N#define ADC_FLAGS_OVERRUN7_MASK                  (0x80000U)
N#define ADC_FLAGS_OVERRUN7_SHIFT                 (19U)
N#define ADC_FLAGS_OVERRUN7(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN7_SHIFT)) & ADC_FLAGS_OVERRUN7_MASK)
N#define ADC_FLAGS_OVERRUN8_MASK                  (0x100000U)
N#define ADC_FLAGS_OVERRUN8_SHIFT                 (20U)
N#define ADC_FLAGS_OVERRUN8(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN8_SHIFT)) & ADC_FLAGS_OVERRUN8_MASK)
N#define ADC_FLAGS_OVERRUN9_MASK                  (0x200000U)
N#define ADC_FLAGS_OVERRUN9_SHIFT                 (21U)
N#define ADC_FLAGS_OVERRUN9(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN9_SHIFT)) & ADC_FLAGS_OVERRUN9_MASK)
N#define ADC_FLAGS_OVERRUN10_MASK                 (0x400000U)
N#define ADC_FLAGS_OVERRUN10_SHIFT                (22U)
N#define ADC_FLAGS_OVERRUN10(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN10_SHIFT)) & ADC_FLAGS_OVERRUN10_MASK)
N#define ADC_FLAGS_OVERRUN11_MASK                 (0x800000U)
N#define ADC_FLAGS_OVERRUN11_SHIFT                (23U)
N#define ADC_FLAGS_OVERRUN11(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVERRUN11_SHIFT)) & ADC_FLAGS_OVERRUN11_MASK)
N#define ADC_FLAGS_SEQA_OVR_MASK                  (0x1000000U)
N#define ADC_FLAGS_SEQA_OVR_SHIFT                 (24U)
N#define ADC_FLAGS_SEQA_OVR(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_SEQA_OVR_SHIFT)) & ADC_FLAGS_SEQA_OVR_MASK)
N#define ADC_FLAGS_SEQB_OVR_MASK                  (0x2000000U)
N#define ADC_FLAGS_SEQB_OVR_SHIFT                 (25U)
N#define ADC_FLAGS_SEQB_OVR(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_SEQB_OVR_SHIFT)) & ADC_FLAGS_SEQB_OVR_MASK)
N#define ADC_FLAGS_SEQA_INT_MASK                  (0x10000000U)
N#define ADC_FLAGS_SEQA_INT_SHIFT                 (28U)
N#define ADC_FLAGS_SEQA_INT(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_SEQA_INT_SHIFT)) & ADC_FLAGS_SEQA_INT_MASK)
N#define ADC_FLAGS_SEQB_INT_MASK                  (0x20000000U)
N#define ADC_FLAGS_SEQB_INT_SHIFT                 (29U)
N#define ADC_FLAGS_SEQB_INT(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_SEQB_INT_SHIFT)) & ADC_FLAGS_SEQB_INT_MASK)
N#define ADC_FLAGS_THCMP_INT_MASK                 (0x40000000U)
N#define ADC_FLAGS_THCMP_INT_SHIFT                (30U)
N#define ADC_FLAGS_THCMP_INT(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_THCMP_INT_SHIFT)) & ADC_FLAGS_THCMP_INT_MASK)
N#define ADC_FLAGS_OVR_INT_MASK                   (0x80000000U)
N#define ADC_FLAGS_OVR_INT_SHIFT                  (31U)
N#define ADC_FLAGS_OVR_INT(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_FLAGS_OVR_INT_SHIFT)) & ADC_FLAGS_OVR_INT_MASK)
N
N/*! @name STARTUP - ADC Startup register. */
N#define ADC_STARTUP_ADC_ENA_MASK                 (0x1U)
N#define ADC_STARTUP_ADC_ENA_SHIFT                (0U)
N#define ADC_STARTUP_ADC_ENA(x)                   (((uint32_t)(((uint32_t)(x)) << ADC_STARTUP_ADC_ENA_SHIFT)) & ADC_STARTUP_ADC_ENA_MASK)
N#define ADC_STARTUP_ADC_INIT_MASK                (0x2U)
N#define ADC_STARTUP_ADC_INIT_SHIFT               (1U)
N#define ADC_STARTUP_ADC_INIT(x)                  (((uint32_t)(((uint32_t)(x)) << ADC_STARTUP_ADC_INIT_SHIFT)) & ADC_STARTUP_ADC_INIT_MASK)
N
N/*! @name CALIB - ADC Calibration register. */
N#define ADC_CALIB_CALIB_MASK                     (0x1U)
N#define ADC_CALIB_CALIB_SHIFT                    (0U)
N#define ADC_CALIB_CALIB(x)                       (((uint32_t)(((uint32_t)(x)) << ADC_CALIB_CALIB_SHIFT)) & ADC_CALIB_CALIB_MASK)
N#define ADC_CALIB_CALREQD_MASK                   (0x2U)
N#define ADC_CALIB_CALREQD_SHIFT                  (1U)
N#define ADC_CALIB_CALREQD(x)                     (((uint32_t)(((uint32_t)(x)) << ADC_CALIB_CALREQD_SHIFT)) & ADC_CALIB_CALREQD_MASK)
N#define ADC_CALIB_CALVALUE_MASK                  (0x1FCU)
N#define ADC_CALIB_CALVALUE_SHIFT                 (2U)
N#define ADC_CALIB_CALVALUE(x)                    (((uint32_t)(((uint32_t)(x)) << ADC_CALIB_CALVALUE_SHIFT)) & ADC_CALIB_CALVALUE_MASK)
N
N
N/*!
N * @}
N */ /* end of group ADC_Register_Masks */
N
N
N/* ADC - Peripheral instance base addresses */
N/** Peripheral ADC0 base address */
N#define ADC0_BASE                                (0x400A0000u)
N/** Peripheral ADC0 base pointer */
N#define ADC0                                     ((ADC_Type *)ADC0_BASE)
N/** Array initializer of ADC peripheral base addresses */
N#define ADC_BASE_ADDRS                           { ADC0_BASE }
N/** Array initializer of ADC peripheral base pointers */
N#define ADC_BASE_PTRS                            { ADC0 }
N/** Interrupt vectors for the ADC peripheral type */
N#define ADC_SEQ_IRQS                             { ADC0_SEQA_IRQn, ADC0_SEQB_IRQn }
N#define ADC_THCMP_IRQS                           { ADC0_THCMP_IRQn }
N
N/*!
N * @}
N */ /* end of group ADC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- ASYNC_SYSCON Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ASYNC_SYSCON_Peripheral_Access_Layer ASYNC_SYSCON Peripheral Access Layer
N * @{
N */
N
N/** ASYNC_SYSCON - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t ASYNCPRESETCTRL;                   /**< Async peripheral reset control, offset: 0x0 */
X  volatile uint32_t ASYNCPRESETCTRL;                    
N  __O  uint32_t ASYNCPRESETCTRLSET;                /**< Set bits in ASYNCPRESETCTRL, offset: 0x4 */
X  volatile  uint32_t ASYNCPRESETCTRLSET;                 
N  __O  uint32_t ASYNCPRESETCTRLCLR;                /**< Clear bits in ASYNCPRESETCTRL, offset: 0x8 */
X  volatile  uint32_t ASYNCPRESETCTRLCLR;                 
N       uint8_t RESERVED_0[4];
N  __IO uint32_t ASYNCAPBCLKCTRL;                   /**< Async peripheral clock control, offset: 0x10 */
X  volatile uint32_t ASYNCAPBCLKCTRL;                    
N  __O  uint32_t ASYNCAPBCLKCTRLSET;                /**< Set bits in ASYNCAPBCLKCTRL, offset: 0x14 */
X  volatile  uint32_t ASYNCAPBCLKCTRLSET;                 
N  __O  uint32_t ASYNCAPBCLKCTRLCLR;                /**< Clear bits in ASYNCAPBCLKCTRL, offset: 0x18 */
X  volatile  uint32_t ASYNCAPBCLKCTRLCLR;                 
N       uint8_t RESERVED_1[4];
N  __IO uint32_t ASYNCAPBCLKSELA;                   /**< Async APB clock source select A, offset: 0x20 */
X  volatile uint32_t ASYNCAPBCLKSELA;                    
N} ASYNC_SYSCON_Type;
N
N/* ----------------------------------------------------------------------------
N   -- ASYNC_SYSCON Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ASYNC_SYSCON_Register_Masks ASYNC_SYSCON Register Masks
N * @{
N */
N
N/*! @name ASYNCPRESETCTRL - Async peripheral reset control */
N#define ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_MASK (0x2000U)
N#define ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_SHIFT (13U)
N#define ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3(x)  (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_SHIFT)) & ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER3_MASK)
N#define ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_MASK (0x4000U)
N#define ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_SHIFT (14U)
N#define ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4(x)  (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_SHIFT)) & ASYNC_SYSCON_ASYNCPRESETCTRL_CTIMER4_MASK)
N
N/*! @name ASYNCPRESETCTRLSET - Set bits in ASYNCPRESETCTRL */
N#define ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_MASK (0xFFFFFFFFU)
N#define ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_SHIFT (0U)
N#define ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET(x) (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_SHIFT)) & ASYNC_SYSCON_ASYNCPRESETCTRLSET_ARST_SET_MASK)
N
N/*! @name ASYNCPRESETCTRLCLR - Clear bits in ASYNCPRESETCTRL */
N#define ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_MASK (0xFFFFFFFFU)
N#define ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_SHIFT (0U)
N#define ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR(x) (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_SHIFT)) & ASYNC_SYSCON_ASYNCPRESETCTRLCLR_ARST_CLR_MASK)
N
N/*! @name ASYNCAPBCLKCTRL - Async peripheral clock control */
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_MASK (0x2000U)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_SHIFT (13U)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3(x)  (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_SHIFT)) & ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER3_MASK)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_MASK (0x4000U)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_SHIFT (14U)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4(x)  (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_SHIFT)) & ASYNC_SYSCON_ASYNCAPBCLKCTRL_CTIMER4_MASK)
N
N/*! @name ASYNCAPBCLKCTRLSET - Set bits in ASYNCAPBCLKCTRL */
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_MASK (0xFFFFFFFFU)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_SHIFT (0U)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET(x) (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_SHIFT)) & ASYNC_SYSCON_ASYNCAPBCLKCTRLSET_ACLK_SET_MASK)
N
N/*! @name ASYNCAPBCLKCTRLCLR - Clear bits in ASYNCAPBCLKCTRL */
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_MASK (0xFFFFFFFFU)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_SHIFT (0U)
N#define ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR(x) (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_SHIFT)) & ASYNC_SYSCON_ASYNCAPBCLKCTRLCLR_ACLK_CLR_MASK)
N
N/*! @name ASYNCAPBCLKSELA - Async APB clock source select A */
N#define ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_MASK    (0x3U)
N#define ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_SHIFT   (0U)
N#define ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL(x)      (((uint32_t)(((uint32_t)(x)) << ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_SHIFT)) & ASYNC_SYSCON_ASYNCAPBCLKSELA_SEL_MASK)
N
N
N/*!
N * @}
N */ /* end of group ASYNC_SYSCON_Register_Masks */
N
N
N/* ASYNC_SYSCON - Peripheral instance base addresses */
N/** Peripheral ASYNC_SYSCON base address */
N#define ASYNC_SYSCON_BASE                        (0x40040000u)
N/** Peripheral ASYNC_SYSCON base pointer */
N#define ASYNC_SYSCON                             ((ASYNC_SYSCON_Type *)ASYNC_SYSCON_BASE)
N/** Array initializer of ASYNC_SYSCON peripheral base addresses */
N#define ASYNC_SYSCON_BASE_ADDRS                  { ASYNC_SYSCON_BASE }
N/** Array initializer of ASYNC_SYSCON peripheral base pointers */
N#define ASYNC_SYSCON_BASE_PTRS                   { ASYNC_SYSCON }
N
N/*!
N * @}
N */ /* end of group ASYNC_SYSCON_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- CAN Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CAN_Peripheral_Access_Layer CAN Peripheral Access Layer
N * @{
N */
N
N/** CAN - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[12];
N  __IO uint32_t DBTP;                              /**< Data Bit Timing Prescaler Register, offset: 0xC */
X  volatile uint32_t DBTP;                               
N  __IO uint32_t TEST;                              /**< Test Register, offset: 0x10 */
X  volatile uint32_t TEST;                               
N       uint8_t RESERVED_1[4];
N  __IO uint32_t CCCR;                              /**< CC Control Register, offset: 0x18 */
X  volatile uint32_t CCCR;                               
N  __IO uint32_t NBTP;                              /**< Nominal Bit Timing and Prescaler Register, offset: 0x1C */
X  volatile uint32_t NBTP;                               
N  __IO uint32_t TSCC;                              /**< Timestamp Counter Configuration, offset: 0x20 */
X  volatile uint32_t TSCC;                               
N  __IO uint32_t TSCV;                              /**< Timestamp Counter Value, offset: 0x24 */
X  volatile uint32_t TSCV;                               
N  __IO uint32_t TOCC;                              /**< Timeout Counter Configuration, offset: 0x28 */
X  volatile uint32_t TOCC;                               
N  __I  uint32_t TOCV;                              /**< Timeout Counter Value, offset: 0x2C */
X  volatile const  uint32_t TOCV;                               
N       uint8_t RESERVED_2[16];
N  __I  uint32_t ECR;                               /**< Error Counter Register, offset: 0x40 */
X  volatile const  uint32_t ECR;                                
N  __I  uint32_t PSR;                               /**< Protocol Status Register, offset: 0x44 */
X  volatile const  uint32_t PSR;                                
N  __IO uint32_t TDCR;                              /**< Transmitter Delay Compensator Register, offset: 0x48 */
X  volatile uint32_t TDCR;                               
N       uint8_t RESERVED_3[4];
N  __IO uint32_t IR;                                /**< Interrupt Register, offset: 0x50 */
X  volatile uint32_t IR;                                 
N  __IO uint32_t IE;                                /**< Interrupt Enable, offset: 0x54 */
X  volatile uint32_t IE;                                 
N  __IO uint32_t ILS;                               /**< Interrupt Line Select, offset: 0x58 */
X  volatile uint32_t ILS;                                
N  __IO uint32_t ILE;                               /**< Interrupt Line Enable, offset: 0x5C */
X  volatile uint32_t ILE;                                
N       uint8_t RESERVED_4[32];
N  __IO uint32_t GFC;                               /**< Global Filter Configuration, offset: 0x80 */
X  volatile uint32_t GFC;                                
N  __IO uint32_t SIDFC;                             /**< Standard ID Filter Configuration, offset: 0x84 */
X  volatile uint32_t SIDFC;                              
N  __IO uint32_t XIDFC;                             /**< Extended ID Filter Configuration, offset: 0x88 */
X  volatile uint32_t XIDFC;                              
N       uint8_t RESERVED_5[4];
N  __IO uint32_t XIDAM;                             /**< Extended ID AND Mask, offset: 0x90 */
X  volatile uint32_t XIDAM;                              
N  __I  uint32_t HPMS;                              /**< High Priority Message Status, offset: 0x94 */
X  volatile const  uint32_t HPMS;                               
N  __IO uint32_t NDAT1;                             /**< New Data 1, offset: 0x98 */
X  volatile uint32_t NDAT1;                              
N  __IO uint32_t NDAT2;                             /**< New Data 2, offset: 0x9C */
X  volatile uint32_t NDAT2;                              
N  __IO uint32_t RXF0C;                             /**< Rx FIFO 0 Configuration, offset: 0xA0 */
X  volatile uint32_t RXF0C;                              
N  __IO uint32_t RXF0S;                             /**< Rx FIFO 0 Status, offset: 0xA4 */
X  volatile uint32_t RXF0S;                              
N  __IO uint32_t RXF0A;                             /**< Rx FIFO 0 Acknowledge, offset: 0xA8 */
X  volatile uint32_t RXF0A;                              
N  __IO uint32_t RXBC;                              /**< Rx Buffer Configuration, offset: 0xAC */
X  volatile uint32_t RXBC;                               
N  __IO uint32_t RXF1C;                             /**< Rx FIFO 1 Configuration, offset: 0xB0 */
X  volatile uint32_t RXF1C;                              
N  __I  uint32_t RXF1S;                             /**< Rx FIFO 1 Status, offset: 0xB4 */
X  volatile const  uint32_t RXF1S;                              
N  __IO uint32_t RXF1A;                             /**< Rx FIFO 1 Acknowledge, offset: 0xB8 */
X  volatile uint32_t RXF1A;                              
N  __IO uint32_t RXESC;                             /**< Rx Buffer and FIFO Element Size Configuration, offset: 0xBC */
X  volatile uint32_t RXESC;                              
N  __IO uint32_t TXBC;                              /**< Tx Buffer Configuration, offset: 0xC0 */
X  volatile uint32_t TXBC;                               
N  __IO uint32_t TXFQS;                             /**< Tx FIFO/Queue Status, offset: 0xC4 */
X  volatile uint32_t TXFQS;                              
N  __IO uint32_t TXESC;                             /**< Tx Buffer Element Size Configuration, offset: 0xC8 */
X  volatile uint32_t TXESC;                              
N  __IO uint32_t TXBRP;                             /**< Tx Buffer Request Pending, offset: 0xCC */
X  volatile uint32_t TXBRP;                              
N  __IO uint32_t TXBAR;                             /**< Tx Buffer Add Request, offset: 0xD0 */
X  volatile uint32_t TXBAR;                              
N  __IO uint32_t TXBCR;                             /**< Tx Buffer Cancellation Request, offset: 0xD4 */
X  volatile uint32_t TXBCR;                              
N  __IO uint32_t TXBTO;                             /**< Tx Buffer Transmission Occurred, offset: 0xD8 */
X  volatile uint32_t TXBTO;                              
N  __IO uint32_t TXBCF;                             /**< Tx Buffer Cancellation Finished, offset: 0xDC */
X  volatile uint32_t TXBCF;                              
N  __IO uint32_t TXBTIE;                            /**< Tx Buffer Transmission Interrupt Enable, offset: 0xE0 */
X  volatile uint32_t TXBTIE;                             
N  __IO uint32_t TXBCIE;                            /**< Tx Buffer Cancellation Finished Interrupt Enable, offset: 0xE4 */
X  volatile uint32_t TXBCIE;                             
N       uint8_t RESERVED_6[8];
N  __IO uint32_t TXEFC;                             /**< Tx Event FIFO Configuration, offset: 0xF0 */
X  volatile uint32_t TXEFC;                              
N  __I  uint32_t TXEFS;                             /**< Tx Event FIFO Status, offset: 0xF4 */
X  volatile const  uint32_t TXEFS;                              
N  __IO uint32_t TXEFA;                             /**< Tx Event FIFO Acknowledge, offset: 0xF8 */
X  volatile uint32_t TXEFA;                              
N       uint8_t RESERVED_7[260];
N  __IO uint32_t MRBA;                              /**< CAN Message RAM Base Address, offset: 0x200 */
X  volatile uint32_t MRBA;                               
N       uint8_t RESERVED_8[508];
N  __IO uint32_t ETSCC;                             /**< External Timestamp Counter Configuration, offset: 0x400 */
X  volatile uint32_t ETSCC;                              
N       uint8_t RESERVED_9[508];
N  __IO uint32_t ETSCV;                             /**< External Timestamp Counter Value, offset: 0x600 */
X  volatile uint32_t ETSCV;                              
N} CAN_Type;
N
N/* ----------------------------------------------------------------------------
N   -- CAN Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CAN_Register_Masks CAN Register Masks
N * @{
N */
N
N/*! @name DBTP - Data Bit Timing Prescaler Register */
N#define CAN_DBTP_DSJW_MASK                       (0xFU)
N#define CAN_DBTP_DSJW_SHIFT                      (0U)
N#define CAN_DBTP_DSJW(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_DBTP_DSJW_SHIFT)) & CAN_DBTP_DSJW_MASK)
N#define CAN_DBTP_DTSEG2_MASK                     (0xF0U)
N#define CAN_DBTP_DTSEG2_SHIFT                    (4U)
N#define CAN_DBTP_DTSEG2(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_DBTP_DTSEG2_SHIFT)) & CAN_DBTP_DTSEG2_MASK)
N#define CAN_DBTP_DTSEG1_MASK                     (0x1F00U)
N#define CAN_DBTP_DTSEG1_SHIFT                    (8U)
N#define CAN_DBTP_DTSEG1(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_DBTP_DTSEG1_SHIFT)) & CAN_DBTP_DTSEG1_MASK)
N#define CAN_DBTP_DBRP_MASK                       (0x1F0000U)
N#define CAN_DBTP_DBRP_SHIFT                      (16U)
N#define CAN_DBTP_DBRP(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_DBTP_DBRP_SHIFT)) & CAN_DBTP_DBRP_MASK)
N#define CAN_DBTP_TDC_MASK                        (0x800000U)
N#define CAN_DBTP_TDC_SHIFT                       (23U)
N#define CAN_DBTP_TDC(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_DBTP_TDC_SHIFT)) & CAN_DBTP_TDC_MASK)
N
N/*! @name TEST - Test Register */
N#define CAN_TEST_LBCK_MASK                       (0x10U)
N#define CAN_TEST_LBCK_SHIFT                      (4U)
N#define CAN_TEST_LBCK(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TEST_LBCK_SHIFT)) & CAN_TEST_LBCK_MASK)
N#define CAN_TEST_TX_MASK                         (0x60U)
N#define CAN_TEST_TX_SHIFT                        (5U)
N#define CAN_TEST_TX(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_TEST_TX_SHIFT)) & CAN_TEST_TX_MASK)
N#define CAN_TEST_RX_MASK                         (0x80U)
N#define CAN_TEST_RX_SHIFT                        (7U)
N#define CAN_TEST_RX(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_TEST_RX_SHIFT)) & CAN_TEST_RX_MASK)
N
N/*! @name CCCR - CC Control Register */
N#define CAN_CCCR_INIT_MASK                       (0x1U)
N#define CAN_CCCR_INIT_SHIFT                      (0U)
N#define CAN_CCCR_INIT(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_INIT_SHIFT)) & CAN_CCCR_INIT_MASK)
N#define CAN_CCCR_CCE_MASK                        (0x2U)
N#define CAN_CCCR_CCE_SHIFT                       (1U)
N#define CAN_CCCR_CCE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_CCE_SHIFT)) & CAN_CCCR_CCE_MASK)
N#define CAN_CCCR_ASM_MASK                        (0x4U)
N#define CAN_CCCR_ASM_SHIFT                       (2U)
N#define CAN_CCCR_ASM(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_ASM_SHIFT)) & CAN_CCCR_ASM_MASK)
N#define CAN_CCCR_CSA_MASK                        (0x8U)
N#define CAN_CCCR_CSA_SHIFT                       (3U)
N#define CAN_CCCR_CSA(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_CSA_SHIFT)) & CAN_CCCR_CSA_MASK)
N#define CAN_CCCR_CSR_MASK                        (0x10U)
N#define CAN_CCCR_CSR_SHIFT                       (4U)
N#define CAN_CCCR_CSR(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_CSR_SHIFT)) & CAN_CCCR_CSR_MASK)
N#define CAN_CCCR_MON_MASK                        (0x20U)
N#define CAN_CCCR_MON_SHIFT                       (5U)
N#define CAN_CCCR_MON(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_MON_SHIFT)) & CAN_CCCR_MON_MASK)
N#define CAN_CCCR_DAR_MASK                        (0x40U)
N#define CAN_CCCR_DAR_SHIFT                       (6U)
N#define CAN_CCCR_DAR(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_DAR_SHIFT)) & CAN_CCCR_DAR_MASK)
N#define CAN_CCCR_TEST_MASK                       (0x80U)
N#define CAN_CCCR_TEST_SHIFT                      (7U)
N#define CAN_CCCR_TEST(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_TEST_SHIFT)) & CAN_CCCR_TEST_MASK)
N#define CAN_CCCR_FDOE_MASK                       (0x100U)
N#define CAN_CCCR_FDOE_SHIFT                      (8U)
N#define CAN_CCCR_FDOE(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_FDOE_SHIFT)) & CAN_CCCR_FDOE_MASK)
N#define CAN_CCCR_BRSE_MASK                       (0x200U)
N#define CAN_CCCR_BRSE_SHIFT                      (9U)
N#define CAN_CCCR_BRSE(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_BRSE_SHIFT)) & CAN_CCCR_BRSE_MASK)
N#define CAN_CCCR_PXHD_MASK                       (0x1000U)
N#define CAN_CCCR_PXHD_SHIFT                      (12U)
N#define CAN_CCCR_PXHD(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_PXHD_SHIFT)) & CAN_CCCR_PXHD_MASK)
N#define CAN_CCCR_EFBI_MASK                       (0x2000U)
N#define CAN_CCCR_EFBI_SHIFT                      (13U)
N#define CAN_CCCR_EFBI(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_EFBI_SHIFT)) & CAN_CCCR_EFBI_MASK)
N#define CAN_CCCR_TXP_MASK                        (0x4000U)
N#define CAN_CCCR_TXP_SHIFT                       (14U)
N#define CAN_CCCR_TXP(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_TXP_SHIFT)) & CAN_CCCR_TXP_MASK)
N#define CAN_CCCR_NISO_MASK                       (0x8000U)
N#define CAN_CCCR_NISO_SHIFT                      (15U)
N#define CAN_CCCR_NISO(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CCCR_NISO_SHIFT)) & CAN_CCCR_NISO_MASK)
N
N/*! @name NBTP - Nominal Bit Timing and Prescaler Register */
N#define CAN_NBTP_NTSEG2_MASK                     (0x7FU)
N#define CAN_NBTP_NTSEG2_SHIFT                    (0U)
N#define CAN_NBTP_NTSEG2(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_NBTP_NTSEG2_SHIFT)) & CAN_NBTP_NTSEG2_MASK)
N#define CAN_NBTP_NTSEG1_MASK                     (0xFF00U)
N#define CAN_NBTP_NTSEG1_SHIFT                    (8U)
N#define CAN_NBTP_NTSEG1(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_NBTP_NTSEG1_SHIFT)) & CAN_NBTP_NTSEG1_MASK)
N#define CAN_NBTP_NBRP_MASK                       (0x1FF0000U)
N#define CAN_NBTP_NBRP_SHIFT                      (16U)
N#define CAN_NBTP_NBRP(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_NBTP_NBRP_SHIFT)) & CAN_NBTP_NBRP_MASK)
N#define CAN_NBTP_NSJW_MASK                       (0xFE000000U)
N#define CAN_NBTP_NSJW_SHIFT                      (25U)
N#define CAN_NBTP_NSJW(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_NBTP_NSJW_SHIFT)) & CAN_NBTP_NSJW_MASK)
N
N/*! @name TSCC - Timestamp Counter Configuration */
N#define CAN_TSCC_TSS_MASK                        (0x3U)
N#define CAN_TSCC_TSS_SHIFT                       (0U)
N#define CAN_TSCC_TSS(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TSCC_TSS_SHIFT)) & CAN_TSCC_TSS_MASK)
N#define CAN_TSCC_TCP_MASK                        (0xF0000U)
N#define CAN_TSCC_TCP_SHIFT                       (16U)
N#define CAN_TSCC_TCP(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TSCC_TCP_SHIFT)) & CAN_TSCC_TCP_MASK)
N
N/*! @name TSCV - Timestamp Counter Value */
N#define CAN_TSCV_TSC_MASK                        (0xFFFFU)
N#define CAN_TSCV_TSC_SHIFT                       (0U)
N#define CAN_TSCV_TSC(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TSCV_TSC_SHIFT)) & CAN_TSCV_TSC_MASK)
N
N/*! @name TOCC - Timeout Counter Configuration */
N#define CAN_TOCC_ETOC_MASK                       (0x1U)
N#define CAN_TOCC_ETOC_SHIFT                      (0U)
N#define CAN_TOCC_ETOC(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TOCC_ETOC_SHIFT)) & CAN_TOCC_ETOC_MASK)
N#define CAN_TOCC_TOS_MASK                        (0x6U)
N#define CAN_TOCC_TOS_SHIFT                       (1U)
N#define CAN_TOCC_TOS(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TOCC_TOS_SHIFT)) & CAN_TOCC_TOS_MASK)
N#define CAN_TOCC_TOP_MASK                        (0xFFFF0000U)
N#define CAN_TOCC_TOP_SHIFT                       (16U)
N#define CAN_TOCC_TOP(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TOCC_TOP_SHIFT)) & CAN_TOCC_TOP_MASK)
N
N/*! @name TOCV - Timeout Counter Value */
N#define CAN_TOCV_TOC_MASK                        (0xFFFFU)
N#define CAN_TOCV_TOC_SHIFT                       (0U)
N#define CAN_TOCV_TOC(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TOCV_TOC_SHIFT)) & CAN_TOCV_TOC_MASK)
N
N/*! @name ECR - Error Counter Register */
N#define CAN_ECR_TEC_MASK                         (0xFFU)
N#define CAN_ECR_TEC_SHIFT                        (0U)
N#define CAN_ECR_TEC(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ECR_TEC_SHIFT)) & CAN_ECR_TEC_MASK)
N#define CAN_ECR_REC_MASK                         (0x7F00U)
N#define CAN_ECR_REC_SHIFT                        (8U)
N#define CAN_ECR_REC(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ECR_REC_SHIFT)) & CAN_ECR_REC_MASK)
N#define CAN_ECR_RP_MASK                          (0x8000U)
N#define CAN_ECR_RP_SHIFT                         (15U)
N#define CAN_ECR_RP(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_ECR_RP_SHIFT)) & CAN_ECR_RP_MASK)
N#define CAN_ECR_CEL_MASK                         (0xFF0000U)
N#define CAN_ECR_CEL_SHIFT                        (16U)
N#define CAN_ECR_CEL(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ECR_CEL_SHIFT)) & CAN_ECR_CEL_MASK)
N
N/*! @name PSR - Protocol Status Register */
N#define CAN_PSR_LEC_MASK                         (0x7U)
N#define CAN_PSR_LEC_SHIFT                        (0U)
N#define CAN_PSR_LEC(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_PSR_LEC_SHIFT)) & CAN_PSR_LEC_MASK)
N#define CAN_PSR_ACT_MASK                         (0x18U)
N#define CAN_PSR_ACT_SHIFT                        (3U)
N#define CAN_PSR_ACT(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_PSR_ACT_SHIFT)) & CAN_PSR_ACT_MASK)
N#define CAN_PSR_EP_MASK                          (0x20U)
N#define CAN_PSR_EP_SHIFT                         (5U)
N#define CAN_PSR_EP(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_PSR_EP_SHIFT)) & CAN_PSR_EP_MASK)
N#define CAN_PSR_EW_MASK                          (0x40U)
N#define CAN_PSR_EW_SHIFT                         (6U)
N#define CAN_PSR_EW(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_PSR_EW_SHIFT)) & CAN_PSR_EW_MASK)
N#define CAN_PSR_BO_MASK                          (0x80U)
N#define CAN_PSR_BO_SHIFT                         (7U)
N#define CAN_PSR_BO(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_PSR_BO_SHIFT)) & CAN_PSR_BO_MASK)
N#define CAN_PSR_DLEC_MASK                        (0x700U)
N#define CAN_PSR_DLEC_SHIFT                       (8U)
N#define CAN_PSR_DLEC(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_PSR_DLEC_SHIFT)) & CAN_PSR_DLEC_MASK)
N#define CAN_PSR_RESI_MASK                        (0x800U)
N#define CAN_PSR_RESI_SHIFT                       (11U)
N#define CAN_PSR_RESI(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_PSR_RESI_SHIFT)) & CAN_PSR_RESI_MASK)
N#define CAN_PSR_RBRS_MASK                        (0x1000U)
N#define CAN_PSR_RBRS_SHIFT                       (12U)
N#define CAN_PSR_RBRS(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_PSR_RBRS_SHIFT)) & CAN_PSR_RBRS_MASK)
N#define CAN_PSR_RFDF_MASK                        (0x2000U)
N#define CAN_PSR_RFDF_SHIFT                       (13U)
N#define CAN_PSR_RFDF(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_PSR_RFDF_SHIFT)) & CAN_PSR_RFDF_MASK)
N#define CAN_PSR_PXE_MASK                         (0x4000U)
N#define CAN_PSR_PXE_SHIFT                        (14U)
N#define CAN_PSR_PXE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_PSR_PXE_SHIFT)) & CAN_PSR_PXE_MASK)
N#define CAN_PSR_TDCV_MASK                        (0x7F0000U)
N#define CAN_PSR_TDCV_SHIFT                       (16U)
N#define CAN_PSR_TDCV(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_PSR_TDCV_SHIFT)) & CAN_PSR_TDCV_MASK)
N
N/*! @name TDCR - Transmitter Delay Compensator Register */
N#define CAN_TDCR_TDCF_MASK                       (0x7FU)
N#define CAN_TDCR_TDCF_SHIFT                      (0U)
N#define CAN_TDCR_TDCF(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TDCR_TDCF_SHIFT)) & CAN_TDCR_TDCF_MASK)
N#define CAN_TDCR_TDCO_MASK                       (0x7F00U)
N#define CAN_TDCR_TDCO_SHIFT                      (8U)
N#define CAN_TDCR_TDCO(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TDCR_TDCO_SHIFT)) & CAN_TDCR_TDCO_MASK)
N
N/*! @name IR - Interrupt Register */
N#define CAN_IR_RF0N_MASK                         (0x1U)
N#define CAN_IR_RF0N_SHIFT                        (0U)
N#define CAN_IR_RF0N(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF0N_SHIFT)) & CAN_IR_RF0N_MASK)
N#define CAN_IR_RF0W_MASK                         (0x2U)
N#define CAN_IR_RF0W_SHIFT                        (1U)
N#define CAN_IR_RF0W(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF0W_SHIFT)) & CAN_IR_RF0W_MASK)
N#define CAN_IR_RF0F_MASK                         (0x4U)
N#define CAN_IR_RF0F_SHIFT                        (2U)
N#define CAN_IR_RF0F(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF0F_SHIFT)) & CAN_IR_RF0F_MASK)
N#define CAN_IR_RF0L_MASK                         (0x8U)
N#define CAN_IR_RF0L_SHIFT                        (3U)
N#define CAN_IR_RF0L(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF0L_SHIFT)) & CAN_IR_RF0L_MASK)
N#define CAN_IR_RF1N_MASK                         (0x10U)
N#define CAN_IR_RF1N_SHIFT                        (4U)
N#define CAN_IR_RF1N(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF1N_SHIFT)) & CAN_IR_RF1N_MASK)
N#define CAN_IR_RF1W_MASK                         (0x20U)
N#define CAN_IR_RF1W_SHIFT                        (5U)
N#define CAN_IR_RF1W(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF1W_SHIFT)) & CAN_IR_RF1W_MASK)
N#define CAN_IR_RF1F_MASK                         (0x40U)
N#define CAN_IR_RF1F_SHIFT                        (6U)
N#define CAN_IR_RF1F(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF1F_SHIFT)) & CAN_IR_RF1F_MASK)
N#define CAN_IR_RF1L_MASK                         (0x80U)
N#define CAN_IR_RF1L_SHIFT                        (7U)
N#define CAN_IR_RF1L(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_RF1L_SHIFT)) & CAN_IR_RF1L_MASK)
N#define CAN_IR_HPM_MASK                          (0x100U)
N#define CAN_IR_HPM_SHIFT                         (8U)
N#define CAN_IR_HPM(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_HPM_SHIFT)) & CAN_IR_HPM_MASK)
N#define CAN_IR_TC_MASK                           (0x200U)
N#define CAN_IR_TC_SHIFT                          (9U)
N#define CAN_IR_TC(x)                             (((uint32_t)(((uint32_t)(x)) << CAN_IR_TC_SHIFT)) & CAN_IR_TC_MASK)
N#define CAN_IR_TCF_MASK                          (0x400U)
N#define CAN_IR_TCF_SHIFT                         (10U)
N#define CAN_IR_TCF(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_TCF_SHIFT)) & CAN_IR_TCF_MASK)
N#define CAN_IR_TFE_MASK                          (0x800U)
N#define CAN_IR_TFE_SHIFT                         (11U)
N#define CAN_IR_TFE(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_TFE_SHIFT)) & CAN_IR_TFE_MASK)
N#define CAN_IR_TEFN_MASK                         (0x1000U)
N#define CAN_IR_TEFN_SHIFT                        (12U)
N#define CAN_IR_TEFN(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_TEFN_SHIFT)) & CAN_IR_TEFN_MASK)
N#define CAN_IR_TEFW_MASK                         (0x2000U)
N#define CAN_IR_TEFW_SHIFT                        (13U)
N#define CAN_IR_TEFW(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_TEFW_SHIFT)) & CAN_IR_TEFW_MASK)
N#define CAN_IR_TEFF_MASK                         (0x4000U)
N#define CAN_IR_TEFF_SHIFT                        (14U)
N#define CAN_IR_TEFF(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_TEFF_SHIFT)) & CAN_IR_TEFF_MASK)
N#define CAN_IR_TEFL_MASK                         (0x8000U)
N#define CAN_IR_TEFL_SHIFT                        (15U)
N#define CAN_IR_TEFL(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_TEFL_SHIFT)) & CAN_IR_TEFL_MASK)
N#define CAN_IR_TSW_MASK                          (0x10000U)
N#define CAN_IR_TSW_SHIFT                         (16U)
N#define CAN_IR_TSW(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_TSW_SHIFT)) & CAN_IR_TSW_MASK)
N#define CAN_IR_MRAF_MASK                         (0x20000U)
N#define CAN_IR_MRAF_SHIFT                        (17U)
N#define CAN_IR_MRAF(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IR_MRAF_SHIFT)) & CAN_IR_MRAF_MASK)
N#define CAN_IR_TOO_MASK                          (0x40000U)
N#define CAN_IR_TOO_SHIFT                         (18U)
N#define CAN_IR_TOO(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_TOO_SHIFT)) & CAN_IR_TOO_MASK)
N#define CAN_IR_DRX_MASK                          (0x80000U)
N#define CAN_IR_DRX_SHIFT                         (19U)
N#define CAN_IR_DRX(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_DRX_SHIFT)) & CAN_IR_DRX_MASK)
N#define CAN_IR_BEC_MASK                          (0x100000U)
N#define CAN_IR_BEC_SHIFT                         (20U)
N#define CAN_IR_BEC(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_BEC_SHIFT)) & CAN_IR_BEC_MASK)
N#define CAN_IR_BEU_MASK                          (0x200000U)
N#define CAN_IR_BEU_SHIFT                         (21U)
N#define CAN_IR_BEU(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_BEU_SHIFT)) & CAN_IR_BEU_MASK)
N#define CAN_IR_ELO_MASK                          (0x400000U)
N#define CAN_IR_ELO_SHIFT                         (22U)
N#define CAN_IR_ELO(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_ELO_SHIFT)) & CAN_IR_ELO_MASK)
N#define CAN_IR_EP_MASK                           (0x800000U)
N#define CAN_IR_EP_SHIFT                          (23U)
N#define CAN_IR_EP(x)                             (((uint32_t)(((uint32_t)(x)) << CAN_IR_EP_SHIFT)) & CAN_IR_EP_MASK)
N#define CAN_IR_EW_MASK                           (0x1000000U)
N#define CAN_IR_EW_SHIFT                          (24U)
N#define CAN_IR_EW(x)                             (((uint32_t)(((uint32_t)(x)) << CAN_IR_EW_SHIFT)) & CAN_IR_EW_MASK)
N#define CAN_IR_BO_MASK                           (0x2000000U)
N#define CAN_IR_BO_SHIFT                          (25U)
N#define CAN_IR_BO(x)                             (((uint32_t)(((uint32_t)(x)) << CAN_IR_BO_SHIFT)) & CAN_IR_BO_MASK)
N#define CAN_IR_WDI_MASK                          (0x4000000U)
N#define CAN_IR_WDI_SHIFT                         (26U)
N#define CAN_IR_WDI(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_WDI_SHIFT)) & CAN_IR_WDI_MASK)
N#define CAN_IR_PEA_MASK                          (0x8000000U)
N#define CAN_IR_PEA_SHIFT                         (27U)
N#define CAN_IR_PEA(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_PEA_SHIFT)) & CAN_IR_PEA_MASK)
N#define CAN_IR_PED_MASK                          (0x10000000U)
N#define CAN_IR_PED_SHIFT                         (28U)
N#define CAN_IR_PED(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_PED_SHIFT)) & CAN_IR_PED_MASK)
N#define CAN_IR_ARA_MASK                          (0x20000000U)
N#define CAN_IR_ARA_SHIFT                         (29U)
N#define CAN_IR_ARA(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IR_ARA_SHIFT)) & CAN_IR_ARA_MASK)
N
N/*! @name IE - Interrupt Enable */
N#define CAN_IE_RF0NE_MASK                        (0x1U)
N#define CAN_IE_RF0NE_SHIFT                       (0U)
N#define CAN_IE_RF0NE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF0NE_SHIFT)) & CAN_IE_RF0NE_MASK)
N#define CAN_IE_RF0WE_MASK                        (0x2U)
N#define CAN_IE_RF0WE_SHIFT                       (1U)
N#define CAN_IE_RF0WE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF0WE_SHIFT)) & CAN_IE_RF0WE_MASK)
N#define CAN_IE_RF0FE_MASK                        (0x4U)
N#define CAN_IE_RF0FE_SHIFT                       (2U)
N#define CAN_IE_RF0FE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF0FE_SHIFT)) & CAN_IE_RF0FE_MASK)
N#define CAN_IE_RF0LE_MASK                        (0x8U)
N#define CAN_IE_RF0LE_SHIFT                       (3U)
N#define CAN_IE_RF0LE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF0LE_SHIFT)) & CAN_IE_RF0LE_MASK)
N#define CAN_IE_RF1NE_MASK                        (0x10U)
N#define CAN_IE_RF1NE_SHIFT                       (4U)
N#define CAN_IE_RF1NE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF1NE_SHIFT)) & CAN_IE_RF1NE_MASK)
N#define CAN_IE_RF1WE_MASK                        (0x20U)
N#define CAN_IE_RF1WE_SHIFT                       (5U)
N#define CAN_IE_RF1WE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF1WE_SHIFT)) & CAN_IE_RF1WE_MASK)
N#define CAN_IE_RF1FE_MASK                        (0x40U)
N#define CAN_IE_RF1FE_SHIFT                       (6U)
N#define CAN_IE_RF1FE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF1FE_SHIFT)) & CAN_IE_RF1FE_MASK)
N#define CAN_IE_RF1LE_MASK                        (0x80U)
N#define CAN_IE_RF1LE_SHIFT                       (7U)
N#define CAN_IE_RF1LE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_RF1LE_SHIFT)) & CAN_IE_RF1LE_MASK)
N#define CAN_IE_HPME_MASK                         (0x100U)
N#define CAN_IE_HPME_SHIFT                        (8U)
N#define CAN_IE_HPME(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_HPME_SHIFT)) & CAN_IE_HPME_MASK)
N#define CAN_IE_TCE_MASK                          (0x200U)
N#define CAN_IE_TCE_SHIFT                         (9U)
N#define CAN_IE_TCE(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IE_TCE_SHIFT)) & CAN_IE_TCE_MASK)
N#define CAN_IE_TCFE_MASK                         (0x400U)
N#define CAN_IE_TCFE_SHIFT                        (10U)
N#define CAN_IE_TCFE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_TCFE_SHIFT)) & CAN_IE_TCFE_MASK)
N#define CAN_IE_TFEE_MASK                         (0x800U)
N#define CAN_IE_TFEE_SHIFT                        (11U)
N#define CAN_IE_TFEE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_TFEE_SHIFT)) & CAN_IE_TFEE_MASK)
N#define CAN_IE_TEFNE_MASK                        (0x1000U)
N#define CAN_IE_TEFNE_SHIFT                       (12U)
N#define CAN_IE_TEFNE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_TEFNE_SHIFT)) & CAN_IE_TEFNE_MASK)
N#define CAN_IE_TEFWE_MASK                        (0x2000U)
N#define CAN_IE_TEFWE_SHIFT                       (13U)
N#define CAN_IE_TEFWE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_TEFWE_SHIFT)) & CAN_IE_TEFWE_MASK)
N#define CAN_IE_TEFFE_MASK                        (0x4000U)
N#define CAN_IE_TEFFE_SHIFT                       (14U)
N#define CAN_IE_TEFFE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_TEFFE_SHIFT)) & CAN_IE_TEFFE_MASK)
N#define CAN_IE_TEFLE_MASK                        (0x8000U)
N#define CAN_IE_TEFLE_SHIFT                       (15U)
N#define CAN_IE_TEFLE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_TEFLE_SHIFT)) & CAN_IE_TEFLE_MASK)
N#define CAN_IE_TSWE_MASK                         (0x10000U)
N#define CAN_IE_TSWE_SHIFT                        (16U)
N#define CAN_IE_TSWE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_TSWE_SHIFT)) & CAN_IE_TSWE_MASK)
N#define CAN_IE_MRAFE_MASK                        (0x20000U)
N#define CAN_IE_MRAFE_SHIFT                       (17U)
N#define CAN_IE_MRAFE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_IE_MRAFE_SHIFT)) & CAN_IE_MRAFE_MASK)
N#define CAN_IE_TOOE_MASK                         (0x40000U)
N#define CAN_IE_TOOE_SHIFT                        (18U)
N#define CAN_IE_TOOE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_TOOE_SHIFT)) & CAN_IE_TOOE_MASK)
N#define CAN_IE_DRXE_MASK                         (0x80000U)
N#define CAN_IE_DRXE_SHIFT                        (19U)
N#define CAN_IE_DRXE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_DRXE_SHIFT)) & CAN_IE_DRXE_MASK)
N#define CAN_IE_BECE_MASK                         (0x100000U)
N#define CAN_IE_BECE_SHIFT                        (20U)
N#define CAN_IE_BECE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_BECE_SHIFT)) & CAN_IE_BECE_MASK)
N#define CAN_IE_BEUE_MASK                         (0x200000U)
N#define CAN_IE_BEUE_SHIFT                        (21U)
N#define CAN_IE_BEUE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_BEUE_SHIFT)) & CAN_IE_BEUE_MASK)
N#define CAN_IE_ELOE_MASK                         (0x400000U)
N#define CAN_IE_ELOE_SHIFT                        (22U)
N#define CAN_IE_ELOE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_ELOE_SHIFT)) & CAN_IE_ELOE_MASK)
N#define CAN_IE_EPE_MASK                          (0x800000U)
N#define CAN_IE_EPE_SHIFT                         (23U)
N#define CAN_IE_EPE(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IE_EPE_SHIFT)) & CAN_IE_EPE_MASK)
N#define CAN_IE_EWE_MASK                          (0x1000000U)
N#define CAN_IE_EWE_SHIFT                         (24U)
N#define CAN_IE_EWE(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IE_EWE_SHIFT)) & CAN_IE_EWE_MASK)
N#define CAN_IE_BOE_MASK                          (0x2000000U)
N#define CAN_IE_BOE_SHIFT                         (25U)
N#define CAN_IE_BOE(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_IE_BOE_SHIFT)) & CAN_IE_BOE_MASK)
N#define CAN_IE_WDIE_MASK                         (0x4000000U)
N#define CAN_IE_WDIE_SHIFT                        (26U)
N#define CAN_IE_WDIE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_WDIE_SHIFT)) & CAN_IE_WDIE_MASK)
N#define CAN_IE_PEAE_MASK                         (0x8000000U)
N#define CAN_IE_PEAE_SHIFT                        (27U)
N#define CAN_IE_PEAE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_PEAE_SHIFT)) & CAN_IE_PEAE_MASK)
N#define CAN_IE_PEDE_MASK                         (0x10000000U)
N#define CAN_IE_PEDE_SHIFT                        (28U)
N#define CAN_IE_PEDE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_PEDE_SHIFT)) & CAN_IE_PEDE_MASK)
N#define CAN_IE_ARAE_MASK                         (0x20000000U)
N#define CAN_IE_ARAE_SHIFT                        (29U)
N#define CAN_IE_ARAE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_IE_ARAE_SHIFT)) & CAN_IE_ARAE_MASK)
N
N/*! @name ILS - Interrupt Line Select */
N#define CAN_ILS_RF0NL_MASK                       (0x1U)
N#define CAN_ILS_RF0NL_SHIFT                      (0U)
N#define CAN_ILS_RF0NL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF0NL_SHIFT)) & CAN_ILS_RF0NL_MASK)
N#define CAN_ILS_RF0WL_MASK                       (0x2U)
N#define CAN_ILS_RF0WL_SHIFT                      (1U)
N#define CAN_ILS_RF0WL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF0WL_SHIFT)) & CAN_ILS_RF0WL_MASK)
N#define CAN_ILS_RF0FL_MASK                       (0x4U)
N#define CAN_ILS_RF0FL_SHIFT                      (2U)
N#define CAN_ILS_RF0FL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF0FL_SHIFT)) & CAN_ILS_RF0FL_MASK)
N#define CAN_ILS_RF0LL_MASK                       (0x8U)
N#define CAN_ILS_RF0LL_SHIFT                      (3U)
N#define CAN_ILS_RF0LL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF0LL_SHIFT)) & CAN_ILS_RF0LL_MASK)
N#define CAN_ILS_RF1NL_MASK                       (0x10U)
N#define CAN_ILS_RF1NL_SHIFT                      (4U)
N#define CAN_ILS_RF1NL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF1NL_SHIFT)) & CAN_ILS_RF1NL_MASK)
N#define CAN_ILS_RF1WL_MASK                       (0x20U)
N#define CAN_ILS_RF1WL_SHIFT                      (5U)
N#define CAN_ILS_RF1WL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF1WL_SHIFT)) & CAN_ILS_RF1WL_MASK)
N#define CAN_ILS_RF1FL_MASK                       (0x40U)
N#define CAN_ILS_RF1FL_SHIFT                      (6U)
N#define CAN_ILS_RF1FL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF1FL_SHIFT)) & CAN_ILS_RF1FL_MASK)
N#define CAN_ILS_RF1LL_MASK                       (0x80U)
N#define CAN_ILS_RF1LL_SHIFT                      (7U)
N#define CAN_ILS_RF1LL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_RF1LL_SHIFT)) & CAN_ILS_RF1LL_MASK)
N#define CAN_ILS_HPML_MASK                        (0x100U)
N#define CAN_ILS_HPML_SHIFT                       (8U)
N#define CAN_ILS_HPML(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_HPML_SHIFT)) & CAN_ILS_HPML_MASK)
N#define CAN_ILS_TCL_MASK                         (0x200U)
N#define CAN_ILS_TCL_SHIFT                        (9U)
N#define CAN_ILS_TCL(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TCL_SHIFT)) & CAN_ILS_TCL_MASK)
N#define CAN_ILS_TCFL_MASK                        (0x400U)
N#define CAN_ILS_TCFL_SHIFT                       (10U)
N#define CAN_ILS_TCFL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TCFL_SHIFT)) & CAN_ILS_TCFL_MASK)
N#define CAN_ILS_TFEL_MASK                        (0x800U)
N#define CAN_ILS_TFEL_SHIFT                       (11U)
N#define CAN_ILS_TFEL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TFEL_SHIFT)) & CAN_ILS_TFEL_MASK)
N#define CAN_ILS_TEFNL_MASK                       (0x1000U)
N#define CAN_ILS_TEFNL_SHIFT                      (12U)
N#define CAN_ILS_TEFNL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TEFNL_SHIFT)) & CAN_ILS_TEFNL_MASK)
N#define CAN_ILS_TEFWL_MASK                       (0x2000U)
N#define CAN_ILS_TEFWL_SHIFT                      (13U)
N#define CAN_ILS_TEFWL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TEFWL_SHIFT)) & CAN_ILS_TEFWL_MASK)
N#define CAN_ILS_TEFFL_MASK                       (0x4000U)
N#define CAN_ILS_TEFFL_SHIFT                      (14U)
N#define CAN_ILS_TEFFL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TEFFL_SHIFT)) & CAN_ILS_TEFFL_MASK)
N#define CAN_ILS_TEFLL_MASK                       (0x8000U)
N#define CAN_ILS_TEFLL_SHIFT                      (15U)
N#define CAN_ILS_TEFLL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TEFLL_SHIFT)) & CAN_ILS_TEFLL_MASK)
N#define CAN_ILS_TSWL_MASK                        (0x10000U)
N#define CAN_ILS_TSWL_SHIFT                       (16U)
N#define CAN_ILS_TSWL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TSWL_SHIFT)) & CAN_ILS_TSWL_MASK)
N#define CAN_ILS_MRAFL_MASK                       (0x20000U)
N#define CAN_ILS_MRAFL_SHIFT                      (17U)
N#define CAN_ILS_MRAFL(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILS_MRAFL_SHIFT)) & CAN_ILS_MRAFL_MASK)
N#define CAN_ILS_TOOL_MASK                        (0x40000U)
N#define CAN_ILS_TOOL_SHIFT                       (18U)
N#define CAN_ILS_TOOL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_TOOL_SHIFT)) & CAN_ILS_TOOL_MASK)
N#define CAN_ILS_DRXL_MASK                        (0x80000U)
N#define CAN_ILS_DRXL_SHIFT                       (19U)
N#define CAN_ILS_DRXL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_DRXL_SHIFT)) & CAN_ILS_DRXL_MASK)
N#define CAN_ILS_BECL_MASK                        (0x100000U)
N#define CAN_ILS_BECL_SHIFT                       (20U)
N#define CAN_ILS_BECL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_BECL_SHIFT)) & CAN_ILS_BECL_MASK)
N#define CAN_ILS_BEUL_MASK                        (0x200000U)
N#define CAN_ILS_BEUL_SHIFT                       (21U)
N#define CAN_ILS_BEUL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_BEUL_SHIFT)) & CAN_ILS_BEUL_MASK)
N#define CAN_ILS_ELOL_MASK                        (0x400000U)
N#define CAN_ILS_ELOL_SHIFT                       (22U)
N#define CAN_ILS_ELOL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_ELOL_SHIFT)) & CAN_ILS_ELOL_MASK)
N#define CAN_ILS_EPL_MASK                         (0x800000U)
N#define CAN_ILS_EPL_SHIFT                        (23U)
N#define CAN_ILS_EPL(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ILS_EPL_SHIFT)) & CAN_ILS_EPL_MASK)
N#define CAN_ILS_EWL_MASK                         (0x1000000U)
N#define CAN_ILS_EWL_SHIFT                        (24U)
N#define CAN_ILS_EWL(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ILS_EWL_SHIFT)) & CAN_ILS_EWL_MASK)
N#define CAN_ILS_BOL_MASK                         (0x2000000U)
N#define CAN_ILS_BOL_SHIFT                        (25U)
N#define CAN_ILS_BOL(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ILS_BOL_SHIFT)) & CAN_ILS_BOL_MASK)
N#define CAN_ILS_WDIL_MASK                        (0x4000000U)
N#define CAN_ILS_WDIL_SHIFT                       (26U)
N#define CAN_ILS_WDIL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_WDIL_SHIFT)) & CAN_ILS_WDIL_MASK)
N#define CAN_ILS_PEAL_MASK                        (0x8000000U)
N#define CAN_ILS_PEAL_SHIFT                       (27U)
N#define CAN_ILS_PEAL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_PEAL_SHIFT)) & CAN_ILS_PEAL_MASK)
N#define CAN_ILS_PEDL_MASK                        (0x10000000U)
N#define CAN_ILS_PEDL_SHIFT                       (28U)
N#define CAN_ILS_PEDL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_PEDL_SHIFT)) & CAN_ILS_PEDL_MASK)
N#define CAN_ILS_ARAL_MASK                        (0x20000000U)
N#define CAN_ILS_ARAL_SHIFT                       (29U)
N#define CAN_ILS_ARAL(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_ILS_ARAL_SHIFT)) & CAN_ILS_ARAL_MASK)
N
N/*! @name ILE - Interrupt Line Enable */
N#define CAN_ILE_EINT0_MASK                       (0x1U)
N#define CAN_ILE_EINT0_SHIFT                      (0U)
N#define CAN_ILE_EINT0(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILE_EINT0_SHIFT)) & CAN_ILE_EINT0_MASK)
N#define CAN_ILE_EINT1_MASK                       (0x2U)
N#define CAN_ILE_EINT1_SHIFT                      (1U)
N#define CAN_ILE_EINT1(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ILE_EINT1_SHIFT)) & CAN_ILE_EINT1_MASK)
N
N/*! @name GFC - Global Filter Configuration */
N#define CAN_GFC_RRFE_MASK                        (0x1U)
N#define CAN_GFC_RRFE_SHIFT                       (0U)
N#define CAN_GFC_RRFE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_GFC_RRFE_SHIFT)) & CAN_GFC_RRFE_MASK)
N#define CAN_GFC_RRFS_MASK                        (0x2U)
N#define CAN_GFC_RRFS_SHIFT                       (1U)
N#define CAN_GFC_RRFS(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_GFC_RRFS_SHIFT)) & CAN_GFC_RRFS_MASK)
N#define CAN_GFC_ANFE_MASK                        (0xCU)
N#define CAN_GFC_ANFE_SHIFT                       (2U)
N#define CAN_GFC_ANFE(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_GFC_ANFE_SHIFT)) & CAN_GFC_ANFE_MASK)
N#define CAN_GFC_ANFS_MASK                        (0x30U)
N#define CAN_GFC_ANFS_SHIFT                       (4U)
N#define CAN_GFC_ANFS(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_GFC_ANFS_SHIFT)) & CAN_GFC_ANFS_MASK)
N
N/*! @name SIDFC - Standard ID Filter Configuration */
N#define CAN_SIDFC_FLSSA_MASK                     (0xFFFCU)
N#define CAN_SIDFC_FLSSA_SHIFT                    (2U)
N#define CAN_SIDFC_FLSSA(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_SIDFC_FLSSA_SHIFT)) & CAN_SIDFC_FLSSA_MASK)
N#define CAN_SIDFC_LSS_MASK                       (0xFF0000U)
N#define CAN_SIDFC_LSS_SHIFT                      (16U)
N#define CAN_SIDFC_LSS(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_SIDFC_LSS_SHIFT)) & CAN_SIDFC_LSS_MASK)
N
N/*! @name XIDFC - Extended ID Filter Configuration */
N#define CAN_XIDFC_FLESA_MASK                     (0xFFFCU)
N#define CAN_XIDFC_FLESA_SHIFT                    (2U)
N#define CAN_XIDFC_FLESA(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_XIDFC_FLESA_SHIFT)) & CAN_XIDFC_FLESA_MASK)
N#define CAN_XIDFC_LSE_MASK                       (0xFF0000U)
N#define CAN_XIDFC_LSE_SHIFT                      (16U)
N#define CAN_XIDFC_LSE(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_XIDFC_LSE_SHIFT)) & CAN_XIDFC_LSE_MASK)
N
N/*! @name XIDAM - Extended ID AND Mask */
N#define CAN_XIDAM_EIDM_MASK                      (0x1FFFFFFFU)
N#define CAN_XIDAM_EIDM_SHIFT                     (0U)
N#define CAN_XIDAM_EIDM(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_XIDAM_EIDM_SHIFT)) & CAN_XIDAM_EIDM_MASK)
N
N/*! @name HPMS - High Priority Message Status */
N#define CAN_HPMS_BIDX_MASK                       (0x3FU)
N#define CAN_HPMS_BIDX_SHIFT                      (0U)
N#define CAN_HPMS_BIDX(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_HPMS_BIDX_SHIFT)) & CAN_HPMS_BIDX_MASK)
N#define CAN_HPMS_MSI_MASK                        (0xC0U)
N#define CAN_HPMS_MSI_SHIFT                       (6U)
N#define CAN_HPMS_MSI(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_HPMS_MSI_SHIFT)) & CAN_HPMS_MSI_MASK)
N#define CAN_HPMS_FIDX_MASK                       (0x7F00U)
N#define CAN_HPMS_FIDX_SHIFT                      (8U)
N#define CAN_HPMS_FIDX(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_HPMS_FIDX_SHIFT)) & CAN_HPMS_FIDX_MASK)
N#define CAN_HPMS_FLST_MASK                       (0x8000U)
N#define CAN_HPMS_FLST_SHIFT                      (15U)
N#define CAN_HPMS_FLST(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_HPMS_FLST_SHIFT)) & CAN_HPMS_FLST_MASK)
N
N/*! @name NDAT1 - New Data 1 */
N#define CAN_NDAT1_ND_MASK                        (0xFFFFFFFFU)
N#define CAN_NDAT1_ND_SHIFT                       (0U)
N#define CAN_NDAT1_ND(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_NDAT1_ND_SHIFT)) & CAN_NDAT1_ND_MASK)
N
N/*! @name NDAT2 - New Data 2 */
N#define CAN_NDAT2_ND_MASK                        (0xFFFFFFFFU)
N#define CAN_NDAT2_ND_SHIFT                       (0U)
N#define CAN_NDAT2_ND(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_NDAT2_ND_SHIFT)) & CAN_NDAT2_ND_MASK)
N
N/*! @name RXF0C - Rx FIFO 0 Configuration */
N#define CAN_RXF0C_F0SA_MASK                      (0xFFFCU)
N#define CAN_RXF0C_F0SA_SHIFT                     (2U)
N#define CAN_RXF0C_F0SA(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0C_F0SA_SHIFT)) & CAN_RXF0C_F0SA_MASK)
N#define CAN_RXF0C_F0S_MASK                       (0x7F0000U)
N#define CAN_RXF0C_F0S_SHIFT                      (16U)
N#define CAN_RXF0C_F0S(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_RXF0C_F0S_SHIFT)) & CAN_RXF0C_F0S_MASK)
N#define CAN_RXF0C_F0WM_MASK                      (0x7F000000U)
N#define CAN_RXF0C_F0WM_SHIFT                     (24U)
N#define CAN_RXF0C_F0WM(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0C_F0WM_SHIFT)) & CAN_RXF0C_F0WM_MASK)
N#define CAN_RXF0C_F0OM_MASK                      (0x80000000U)
N#define CAN_RXF0C_F0OM_SHIFT                     (31U)
N#define CAN_RXF0C_F0OM(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0C_F0OM_SHIFT)) & CAN_RXF0C_F0OM_MASK)
N
N/*! @name RXF0S - Rx FIFO 0 Status */
N#define CAN_RXF0S_F0FL_MASK                      (0x7FU)
N#define CAN_RXF0S_F0FL_SHIFT                     (0U)
N#define CAN_RXF0S_F0FL(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0S_F0FL_SHIFT)) & CAN_RXF0S_F0FL_MASK)
N#define CAN_RXF0S_F0GI_MASK                      (0x3F00U)
N#define CAN_RXF0S_F0GI_SHIFT                     (8U)
N#define CAN_RXF0S_F0GI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0S_F0GI_SHIFT)) & CAN_RXF0S_F0GI_MASK)
N#define CAN_RXF0S_F0PI_MASK                      (0x3F0000U)
N#define CAN_RXF0S_F0PI_SHIFT                     (16U)
N#define CAN_RXF0S_F0PI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0S_F0PI_SHIFT)) & CAN_RXF0S_F0PI_MASK)
N#define CAN_RXF0S_F0F_MASK                       (0x1000000U)
N#define CAN_RXF0S_F0F_SHIFT                      (24U)
N#define CAN_RXF0S_F0F(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_RXF0S_F0F_SHIFT)) & CAN_RXF0S_F0F_MASK)
N#define CAN_RXF0S_RF0L_MASK                      (0x2000000U)
N#define CAN_RXF0S_RF0L_SHIFT                     (25U)
N#define CAN_RXF0S_RF0L(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0S_RF0L_SHIFT)) & CAN_RXF0S_RF0L_MASK)
N
N/*! @name RXF0A - Rx FIFO 0 Acknowledge */
N#define CAN_RXF0A_F0AI_MASK                      (0x3FU)
N#define CAN_RXF0A_F0AI_SHIFT                     (0U)
N#define CAN_RXF0A_F0AI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF0A_F0AI_SHIFT)) & CAN_RXF0A_F0AI_MASK)
N
N/*! @name RXBC - Rx Buffer Configuration */
N#define CAN_RXBC_RBSA_MASK                       (0xFFFCU)
N#define CAN_RXBC_RBSA_SHIFT                      (2U)
N#define CAN_RXBC_RBSA(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_RXBC_RBSA_SHIFT)) & CAN_RXBC_RBSA_MASK)
N
N/*! @name RXF1C - Rx FIFO 1 Configuration */
N#define CAN_RXF1C_F1SA_MASK                      (0xFFFCU)
N#define CAN_RXF1C_F1SA_SHIFT                     (2U)
N#define CAN_RXF1C_F1SA(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1C_F1SA_SHIFT)) & CAN_RXF1C_F1SA_MASK)
N#define CAN_RXF1C_F1S_MASK                       (0x7F0000U)
N#define CAN_RXF1C_F1S_SHIFT                      (16U)
N#define CAN_RXF1C_F1S(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_RXF1C_F1S_SHIFT)) & CAN_RXF1C_F1S_MASK)
N#define CAN_RXF1C_F1WM_MASK                      (0x7F000000U)
N#define CAN_RXF1C_F1WM_SHIFT                     (24U)
N#define CAN_RXF1C_F1WM(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1C_F1WM_SHIFT)) & CAN_RXF1C_F1WM_MASK)
N#define CAN_RXF1C_F1OM_MASK                      (0x80000000U)
N#define CAN_RXF1C_F1OM_SHIFT                     (31U)
N#define CAN_RXF1C_F1OM(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1C_F1OM_SHIFT)) & CAN_RXF1C_F1OM_MASK)
N
N/*! @name RXF1S - Rx FIFO 1 Status */
N#define CAN_RXF1S_F1FL_MASK                      (0x7FU)
N#define CAN_RXF1S_F1FL_SHIFT                     (0U)
N#define CAN_RXF1S_F1FL(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1S_F1FL_SHIFT)) & CAN_RXF1S_F1FL_MASK)
N#define CAN_RXF1S_F1GI_MASK                      (0x3F00U)
N#define CAN_RXF1S_F1GI_SHIFT                     (8U)
N#define CAN_RXF1S_F1GI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1S_F1GI_SHIFT)) & CAN_RXF1S_F1GI_MASK)
N#define CAN_RXF1S_F1PI_MASK                      (0x3F0000U)
N#define CAN_RXF1S_F1PI_SHIFT                     (16U)
N#define CAN_RXF1S_F1PI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1S_F1PI_SHIFT)) & CAN_RXF1S_F1PI_MASK)
N#define CAN_RXF1S_F1F_MASK                       (0x1000000U)
N#define CAN_RXF1S_F1F_SHIFT                      (24U)
N#define CAN_RXF1S_F1F(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_RXF1S_F1F_SHIFT)) & CAN_RXF1S_F1F_MASK)
N#define CAN_RXF1S_RF1L_MASK                      (0x2000000U)
N#define CAN_RXF1S_RF1L_SHIFT                     (25U)
N#define CAN_RXF1S_RF1L(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1S_RF1L_SHIFT)) & CAN_RXF1S_RF1L_MASK)
N
N/*! @name RXF1A - Rx FIFO 1 Acknowledge */
N#define CAN_RXF1A_F1AI_MASK                      (0x3FU)
N#define CAN_RXF1A_F1AI_SHIFT                     (0U)
N#define CAN_RXF1A_F1AI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXF1A_F1AI_SHIFT)) & CAN_RXF1A_F1AI_MASK)
N
N/*! @name RXESC - Rx Buffer and FIFO Element Size Configuration */
N#define CAN_RXESC_F0DS_MASK                      (0x7U)
N#define CAN_RXESC_F0DS_SHIFT                     (0U)
N#define CAN_RXESC_F0DS(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXESC_F0DS_SHIFT)) & CAN_RXESC_F0DS_MASK)
N#define CAN_RXESC_F1DS_MASK                      (0x70U)
N#define CAN_RXESC_F1DS_SHIFT                     (4U)
N#define CAN_RXESC_F1DS(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXESC_F1DS_SHIFT)) & CAN_RXESC_F1DS_MASK)
N#define CAN_RXESC_RBDS_MASK                      (0x700U)
N#define CAN_RXESC_RBDS_SHIFT                     (8U)
N#define CAN_RXESC_RBDS(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_RXESC_RBDS_SHIFT)) & CAN_RXESC_RBDS_MASK)
N
N/*! @name TXBC - Tx Buffer Configuration */
N#define CAN_TXBC_TBSA_MASK                       (0xFFFCU)
N#define CAN_TXBC_TBSA_SHIFT                      (2U)
N#define CAN_TXBC_TBSA(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TXBC_TBSA_SHIFT)) & CAN_TXBC_TBSA_MASK)
N#define CAN_TXBC_NDTB_MASK                       (0x3F0000U)
N#define CAN_TXBC_NDTB_SHIFT                      (16U)
N#define CAN_TXBC_NDTB(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TXBC_NDTB_SHIFT)) & CAN_TXBC_NDTB_MASK)
N#define CAN_TXBC_TFQS_MASK                       (0x3F000000U)
N#define CAN_TXBC_TFQS_SHIFT                      (24U)
N#define CAN_TXBC_TFQS(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TXBC_TFQS_SHIFT)) & CAN_TXBC_TFQS_MASK)
N#define CAN_TXBC_TFQM_MASK                       (0x40000000U)
N#define CAN_TXBC_TFQM_SHIFT                      (30U)
N#define CAN_TXBC_TFQM(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TXBC_TFQM_SHIFT)) & CAN_TXBC_TFQM_MASK)
N
N/*! @name TXFQS - Tx FIFO/Queue Status */
N#define CAN_TXFQS_TFGI_MASK                      (0x1F00U)
N#define CAN_TXFQS_TFGI_SHIFT                     (8U)
N#define CAN_TXFQS_TFGI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXFQS_TFGI_SHIFT)) & CAN_TXFQS_TFGI_MASK)
N#define CAN_TXFQS_TFQPI_MASK                     (0x1F0000U)
N#define CAN_TXFQS_TFQPI_SHIFT                    (16U)
N#define CAN_TXFQS_TFQPI(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_TXFQS_TFQPI_SHIFT)) & CAN_TXFQS_TFQPI_MASK)
N#define CAN_TXFQS_TFQF_MASK                      (0x200000U)
N#define CAN_TXFQS_TFQF_SHIFT                     (21U)
N#define CAN_TXFQS_TFQF(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXFQS_TFQF_SHIFT)) & CAN_TXFQS_TFQF_MASK)
N
N/*! @name TXESC - Tx Buffer Element Size Configuration */
N#define CAN_TXESC_TBDS_MASK                      (0x7U)
N#define CAN_TXESC_TBDS_SHIFT                     (0U)
N#define CAN_TXESC_TBDS(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXESC_TBDS_SHIFT)) & CAN_TXESC_TBDS_MASK)
N
N/*! @name TXBRP - Tx Buffer Request Pending */
N#define CAN_TXBRP_TRP_MASK                       (0xFFFFFFFFU)
N#define CAN_TXBRP_TRP_SHIFT                      (0U)
N#define CAN_TXBRP_TRP(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TXBRP_TRP_SHIFT)) & CAN_TXBRP_TRP_MASK)
N
N/*! @name TXBAR - Tx Buffer Add Request */
N#define CAN_TXBAR_AR_MASK                        (0xFFFFFFFFU)
N#define CAN_TXBAR_AR_SHIFT                       (0U)
N#define CAN_TXBAR_AR(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TXBAR_AR_SHIFT)) & CAN_TXBAR_AR_MASK)
N
N/*! @name TXBCR - Tx Buffer Cancellation Request */
N#define CAN_TXBCR_CR_MASK                        (0xFFFFFFFFU)
N#define CAN_TXBCR_CR_SHIFT                       (0U)
N#define CAN_TXBCR_CR(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TXBCR_CR_SHIFT)) & CAN_TXBCR_CR_MASK)
N
N/*! @name TXBTO - Tx Buffer Transmission Occurred */
N#define CAN_TXBTO_TO_MASK                        (0xFFFFFFFFU)
N#define CAN_TXBTO_TO_SHIFT                       (0U)
N#define CAN_TXBTO_TO(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TXBTO_TO_SHIFT)) & CAN_TXBTO_TO_MASK)
N
N/*! @name TXBCF - Tx Buffer Cancellation Finished */
N#define CAN_TXBCF_TO_MASK                        (0xFFFFFFFFU)
N#define CAN_TXBCF_TO_SHIFT                       (0U)
N#define CAN_TXBCF_TO(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_TXBCF_TO_SHIFT)) & CAN_TXBCF_TO_MASK)
N
N/*! @name TXBTIE - Tx Buffer Transmission Interrupt Enable */
N#define CAN_TXBTIE_TIE_MASK                      (0xFFFFFFFFU)
N#define CAN_TXBTIE_TIE_SHIFT                     (0U)
N#define CAN_TXBTIE_TIE(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXBTIE_TIE_SHIFT)) & CAN_TXBTIE_TIE_MASK)
N
N/*! @name TXBCIE - Tx Buffer Cancellation Finished Interrupt Enable */
N#define CAN_TXBCIE_CFIE_MASK                     (0xFFFFFFFFU)
N#define CAN_TXBCIE_CFIE_SHIFT                    (0U)
N#define CAN_TXBCIE_CFIE(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_TXBCIE_CFIE_SHIFT)) & CAN_TXBCIE_CFIE_MASK)
N
N/*! @name TXEFC - Tx Event FIFO Configuration */
N#define CAN_TXEFC_EFSA_MASK                      (0xFFFCU)
N#define CAN_TXEFC_EFSA_SHIFT                     (2U)
N#define CAN_TXEFC_EFSA(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXEFC_EFSA_SHIFT)) & CAN_TXEFC_EFSA_MASK)
N#define CAN_TXEFC_EFS_MASK                       (0x3F0000U)
N#define CAN_TXEFC_EFS_SHIFT                      (16U)
N#define CAN_TXEFC_EFS(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TXEFC_EFS_SHIFT)) & CAN_TXEFC_EFS_MASK)
N#define CAN_TXEFC_EFWM_MASK                      (0x3F000000U)
N#define CAN_TXEFC_EFWM_SHIFT                     (24U)
N#define CAN_TXEFC_EFWM(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXEFC_EFWM_SHIFT)) & CAN_TXEFC_EFWM_MASK)
N
N/*! @name TXEFS - Tx Event FIFO Status */
N#define CAN_TXEFS_EFFL_MASK                      (0x3FU)
N#define CAN_TXEFS_EFFL_SHIFT                     (0U)
N#define CAN_TXEFS_EFFL(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXEFS_EFFL_SHIFT)) & CAN_TXEFS_EFFL_MASK)
N#define CAN_TXEFS_EFGI_MASK                      (0x1F00U)
N#define CAN_TXEFS_EFGI_SHIFT                     (8U)
N#define CAN_TXEFS_EFGI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXEFS_EFGI_SHIFT)) & CAN_TXEFS_EFGI_MASK)
N#define CAN_TXEFS_EFPI_MASK                      (0x3F0000U)
N#define CAN_TXEFS_EFPI_SHIFT                     (16U)
N#define CAN_TXEFS_EFPI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXEFS_EFPI_SHIFT)) & CAN_TXEFS_EFPI_MASK)
N#define CAN_TXEFS_EFF_MASK                       (0x1000000U)
N#define CAN_TXEFS_EFF_SHIFT                      (24U)
N#define CAN_TXEFS_EFF(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_TXEFS_EFF_SHIFT)) & CAN_TXEFS_EFF_MASK)
N#define CAN_TXEFS_TEFL_MASK                      (0x2000000U)
N#define CAN_TXEFS_TEFL_SHIFT                     (25U)
N#define CAN_TXEFS_TEFL(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXEFS_TEFL_SHIFT)) & CAN_TXEFS_TEFL_MASK)
N
N/*! @name TXEFA - Tx Event FIFO Acknowledge */
N#define CAN_TXEFA_EFAI_MASK                      (0x1FU)
N#define CAN_TXEFA_EFAI_SHIFT                     (0U)
N#define CAN_TXEFA_EFAI(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_TXEFA_EFAI_SHIFT)) & CAN_TXEFA_EFAI_MASK)
N
N/*! @name MRBA - CAN Message RAM Base Address */
N#define CAN_MRBA_BA_MASK                         (0xFFFFFFFFU)
N#define CAN_MRBA_BA_SHIFT                        (0U)
N#define CAN_MRBA_BA(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_MRBA_BA_SHIFT)) & CAN_MRBA_BA_MASK)
N
N/*! @name ETSCC - External Timestamp Counter Configuration */
N#define CAN_ETSCC_ETCP_MASK                      (0x7FFU)
N#define CAN_ETSCC_ETCP_SHIFT                     (0U)
N#define CAN_ETSCC_ETCP(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_ETSCC_ETCP_SHIFT)) & CAN_ETSCC_ETCP_MASK)
N#define CAN_ETSCC_ETCE_MASK                      (0x80000000U)
N#define CAN_ETSCC_ETCE_SHIFT                     (31U)
N#define CAN_ETSCC_ETCE(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_ETSCC_ETCE_SHIFT)) & CAN_ETSCC_ETCE_MASK)
N
N/*! @name ETSCV - External Timestamp Counter Value */
N#define CAN_ETSCV_ETSC_MASK                      (0xFFFFU)
N#define CAN_ETSCV_ETSC_SHIFT                     (0U)
N#define CAN_ETSCV_ETSC(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_ETSCV_ETSC_SHIFT)) & CAN_ETSCV_ETSC_MASK)
N
N
N/*!
N * @}
N */ /* end of group CAN_Register_Masks */
N
N
N/* CAN - Peripheral instance base addresses */
N/** Peripheral CAN0 base address */
N#define CAN0_BASE                                (0x4009D000u)
N/** Peripheral CAN0 base pointer */
N#define CAN0                                     ((CAN_Type *)CAN0_BASE)
N/** Peripheral CAN1 base address */
N#define CAN1_BASE                                (0x4009E000u)
N/** Peripheral CAN1 base pointer */
N#define CAN1                                     ((CAN_Type *)CAN1_BASE)
N/** Array initializer of CAN peripheral base addresses */
N#define CAN_BASE_ADDRS                           { CAN0_BASE, CAN1_BASE }
N/** Array initializer of CAN peripheral base pointers */
N#define CAN_BASE_PTRS                            { CAN0, CAN1 }
N/** Interrupt vectors for the CAN peripheral type */
N#define CAN_IRQS                                 { { CAN0_IRQ0_IRQn, CAN0_IRQ1_IRQn }, { CAN1_IRQ0_IRQn, CAN1_IRQ1_IRQn } }
N
N/*!
N * @}
N */ /* end of group CAN_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- CRC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CRC_Peripheral_Access_Layer CRC Peripheral Access Layer
N * @{
N */
N
N/** CRC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t MODE;                              /**< CRC mode register, offset: 0x0 */
X  volatile uint32_t MODE;                               
N  __IO uint32_t SEED;                              /**< CRC seed register, offset: 0x4 */
X  volatile uint32_t SEED;                               
N  union {                                          /* offset: 0x8 */
N    __I  uint32_t SUM;                               /**< CRC checksum register, offset: 0x8 */
X    volatile const  uint32_t SUM;                                
N    __O  uint32_t WR_DATA;                           /**< CRC data register, offset: 0x8 */
X    volatile  uint32_t WR_DATA;                            
N  };
N} CRC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- CRC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CRC_Register_Masks CRC Register Masks
N * @{
N */
N
N/*! @name MODE - CRC mode register */
N#define CRC_MODE_CRC_POLY_MASK                   (0x3U)
N#define CRC_MODE_CRC_POLY_SHIFT                  (0U)
N#define CRC_MODE_CRC_POLY(x)                     (((uint32_t)(((uint32_t)(x)) << CRC_MODE_CRC_POLY_SHIFT)) & CRC_MODE_CRC_POLY_MASK)
N#define CRC_MODE_BIT_RVS_WR_MASK                 (0x4U)
N#define CRC_MODE_BIT_RVS_WR_SHIFT                (2U)
N#define CRC_MODE_BIT_RVS_WR(x)                   (((uint32_t)(((uint32_t)(x)) << CRC_MODE_BIT_RVS_WR_SHIFT)) & CRC_MODE_BIT_RVS_WR_MASK)
N#define CRC_MODE_CMPL_WR_MASK                    (0x8U)
N#define CRC_MODE_CMPL_WR_SHIFT                   (3U)
N#define CRC_MODE_CMPL_WR(x)                      (((uint32_t)(((uint32_t)(x)) << CRC_MODE_CMPL_WR_SHIFT)) & CRC_MODE_CMPL_WR_MASK)
N#define CRC_MODE_BIT_RVS_SUM_MASK                (0x10U)
N#define CRC_MODE_BIT_RVS_SUM_SHIFT               (4U)
N#define CRC_MODE_BIT_RVS_SUM(x)                  (((uint32_t)(((uint32_t)(x)) << CRC_MODE_BIT_RVS_SUM_SHIFT)) & CRC_MODE_BIT_RVS_SUM_MASK)
N#define CRC_MODE_CMPL_SUM_MASK                   (0x20U)
N#define CRC_MODE_CMPL_SUM_SHIFT                  (5U)
N#define CRC_MODE_CMPL_SUM(x)                     (((uint32_t)(((uint32_t)(x)) << CRC_MODE_CMPL_SUM_SHIFT)) & CRC_MODE_CMPL_SUM_MASK)
N
N/*! @name SEED - CRC seed register */
N#define CRC_SEED_CRC_SEED_MASK                   (0xFFFFFFFFU)
N#define CRC_SEED_CRC_SEED_SHIFT                  (0U)
N#define CRC_SEED_CRC_SEED(x)                     (((uint32_t)(((uint32_t)(x)) << CRC_SEED_CRC_SEED_SHIFT)) & CRC_SEED_CRC_SEED_MASK)
N
N/*! @name SUM - CRC checksum register */
N#define CRC_SUM_CRC_SUM_MASK                     (0xFFFFFFFFU)
N#define CRC_SUM_CRC_SUM_SHIFT                    (0U)
N#define CRC_SUM_CRC_SUM(x)                       (((uint32_t)(((uint32_t)(x)) << CRC_SUM_CRC_SUM_SHIFT)) & CRC_SUM_CRC_SUM_MASK)
N
N/*! @name WR_DATA - CRC data register */
N#define CRC_WR_DATA_CRC_WR_DATA_MASK             (0xFFFFFFFFU)
N#define CRC_WR_DATA_CRC_WR_DATA_SHIFT            (0U)
N#define CRC_WR_DATA_CRC_WR_DATA(x)               (((uint32_t)(((uint32_t)(x)) << CRC_WR_DATA_CRC_WR_DATA_SHIFT)) & CRC_WR_DATA_CRC_WR_DATA_MASK)
N
N
N/*!
N * @}
N */ /* end of group CRC_Register_Masks */
N
N
N/* CRC - Peripheral instance base addresses */
N/** Peripheral CRC_ENGINE base address */
N#define CRC_ENGINE_BASE                          (0x40095000u)
N/** Peripheral CRC_ENGINE base pointer */
N#define CRC_ENGINE                               ((CRC_Type *)CRC_ENGINE_BASE)
N/** Array initializer of CRC peripheral base addresses */
N#define CRC_BASE_ADDRS                           { CRC_ENGINE_BASE }
N/** Array initializer of CRC peripheral base pointers */
N#define CRC_BASE_PTRS                            { CRC_ENGINE }
N
N/*!
N * @}
N */ /* end of group CRC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- CTIMER Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CTIMER_Peripheral_Access_Layer CTIMER Peripheral Access Layer
N * @{
N */
N
N/** CTIMER - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t IR;                                /**< Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending., offset: 0x0 */
X  volatile uint32_t IR;                                 
N  __IO uint32_t TCR;                               /**< Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR., offset: 0x4 */
X  volatile uint32_t TCR;                                
N  __IO uint32_t TC;                                /**< Timer Counter, offset: 0x8 */
X  volatile uint32_t TC;                                 
N  __IO uint32_t PR;                                /**< Prescale Register, offset: 0xC */
X  volatile uint32_t PR;                                 
N  __IO uint32_t PC;                                /**< Prescale Counter, offset: 0x10 */
X  volatile uint32_t PC;                                 
N  __IO uint32_t MCR;                               /**< Match Control Register, offset: 0x14 */
X  volatile uint32_t MCR;                                
N  __IO uint32_t MR[4];                             /**< Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC., array offset: 0x18, array step: 0x4 */
X  volatile uint32_t MR[4];                              
N  __IO uint32_t CCR;                               /**< Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place., offset: 0x28 */
X  volatile uint32_t CCR;                                
N  __I  uint32_t CR[4];                             /**< Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input., array offset: 0x2C, array step: 0x4 */
X  volatile const  uint32_t CR[4];                              
N  __IO uint32_t EMR;                               /**< External Match Register. The EMR controls the match function and the external match pins., offset: 0x3C */
X  volatile uint32_t EMR;                                
N       uint8_t RESERVED_0[48];
N  __IO uint32_t CTCR;                              /**< Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting., offset: 0x70 */
X  volatile uint32_t CTCR;                               
N  __IO uint32_t PWMC;                              /**< PWM Control Register. The PWMCON enables PWM mode for the external match pins., offset: 0x74 */
X  volatile uint32_t PWMC;                               
N  __IO uint32_t MSR[4];                            /**< Match Shadow Register, array offset: 0x78, array step: 0x4 */
X  volatile uint32_t MSR[4];                             
N} CTIMER_Type;
N
N/* ----------------------------------------------------------------------------
N   -- CTIMER Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CTIMER_Register_Masks CTIMER Register Masks
N * @{
N */
N
N/*! @name IR - Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending. */
N#define CTIMER_IR_MR0INT_MASK                    (0x1U)
N#define CTIMER_IR_MR0INT_SHIFT                   (0U)
N#define CTIMER_IR_MR0INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_MR0INT_SHIFT)) & CTIMER_IR_MR0INT_MASK)
N#define CTIMER_IR_MR1INT_MASK                    (0x2U)
N#define CTIMER_IR_MR1INT_SHIFT                   (1U)
N#define CTIMER_IR_MR1INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_MR1INT_SHIFT)) & CTIMER_IR_MR1INT_MASK)
N#define CTIMER_IR_MR2INT_MASK                    (0x4U)
N#define CTIMER_IR_MR2INT_SHIFT                   (2U)
N#define CTIMER_IR_MR2INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_MR2INT_SHIFT)) & CTIMER_IR_MR2INT_MASK)
N#define CTIMER_IR_MR3INT_MASK                    (0x8U)
N#define CTIMER_IR_MR3INT_SHIFT                   (3U)
N#define CTIMER_IR_MR3INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_MR3INT_SHIFT)) & CTIMER_IR_MR3INT_MASK)
N#define CTIMER_IR_CR0INT_MASK                    (0x10U)
N#define CTIMER_IR_CR0INT_SHIFT                   (4U)
N#define CTIMER_IR_CR0INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_CR0INT_SHIFT)) & CTIMER_IR_CR0INT_MASK)
N#define CTIMER_IR_CR1INT_MASK                    (0x20U)
N#define CTIMER_IR_CR1INT_SHIFT                   (5U)
N#define CTIMER_IR_CR1INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_CR1INT_SHIFT)) & CTIMER_IR_CR1INT_MASK)
N#define CTIMER_IR_CR2INT_MASK                    (0x40U)
N#define CTIMER_IR_CR2INT_SHIFT                   (6U)
N#define CTIMER_IR_CR2INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_CR2INT_SHIFT)) & CTIMER_IR_CR2INT_MASK)
N#define CTIMER_IR_CR3INT_MASK                    (0x80U)
N#define CTIMER_IR_CR3INT_SHIFT                   (7U)
N#define CTIMER_IR_CR3INT(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_IR_CR3INT_SHIFT)) & CTIMER_IR_CR3INT_MASK)
N
N/*! @name TCR - Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR. */
N#define CTIMER_TCR_CEN_MASK                      (0x1U)
N#define CTIMER_TCR_CEN_SHIFT                     (0U)
N#define CTIMER_TCR_CEN(x)                        (((uint32_t)(((uint32_t)(x)) << CTIMER_TCR_CEN_SHIFT)) & CTIMER_TCR_CEN_MASK)
N#define CTIMER_TCR_CRST_MASK                     (0x2U)
N#define CTIMER_TCR_CRST_SHIFT                    (1U)
N#define CTIMER_TCR_CRST(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_TCR_CRST_SHIFT)) & CTIMER_TCR_CRST_MASK)
N
N/*! @name TC - Timer Counter */
N#define CTIMER_TC_TCVAL_MASK                     (0xFFFFFFFFU)
N#define CTIMER_TC_TCVAL_SHIFT                    (0U)
N#define CTIMER_TC_TCVAL(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_TC_TCVAL_SHIFT)) & CTIMER_TC_TCVAL_MASK)
N
N/*! @name PR - Prescale Register */
N#define CTIMER_PR_PRVAL_MASK                     (0xFFFFFFFFU)
N#define CTIMER_PR_PRVAL_SHIFT                    (0U)
N#define CTIMER_PR_PRVAL(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_PR_PRVAL_SHIFT)) & CTIMER_PR_PRVAL_MASK)
N
N/*! @name PC - Prescale Counter */
N#define CTIMER_PC_PCVAL_MASK                     (0xFFFFFFFFU)
N#define CTIMER_PC_PCVAL_SHIFT                    (0U)
N#define CTIMER_PC_PCVAL(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_PC_PCVAL_SHIFT)) & CTIMER_PC_PCVAL_MASK)
N
N/*! @name MCR - Match Control Register */
N#define CTIMER_MCR_MR0I_MASK                     (0x1U)
N#define CTIMER_MCR_MR0I_SHIFT                    (0U)
N#define CTIMER_MCR_MR0I(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR0I_SHIFT)) & CTIMER_MCR_MR0I_MASK)
N#define CTIMER_MCR_MR0R_MASK                     (0x2U)
N#define CTIMER_MCR_MR0R_SHIFT                    (1U)
N#define CTIMER_MCR_MR0R(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR0R_SHIFT)) & CTIMER_MCR_MR0R_MASK)
N#define CTIMER_MCR_MR0S_MASK                     (0x4U)
N#define CTIMER_MCR_MR0S_SHIFT                    (2U)
N#define CTIMER_MCR_MR0S(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR0S_SHIFT)) & CTIMER_MCR_MR0S_MASK)
N#define CTIMER_MCR_MR1I_MASK                     (0x8U)
N#define CTIMER_MCR_MR1I_SHIFT                    (3U)
N#define CTIMER_MCR_MR1I(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR1I_SHIFT)) & CTIMER_MCR_MR1I_MASK)
N#define CTIMER_MCR_MR1R_MASK                     (0x10U)
N#define CTIMER_MCR_MR1R_SHIFT                    (4U)
N#define CTIMER_MCR_MR1R(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR1R_SHIFT)) & CTIMER_MCR_MR1R_MASK)
N#define CTIMER_MCR_MR1S_MASK                     (0x20U)
N#define CTIMER_MCR_MR1S_SHIFT                    (5U)
N#define CTIMER_MCR_MR1S(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR1S_SHIFT)) & CTIMER_MCR_MR1S_MASK)
N#define CTIMER_MCR_MR2I_MASK                     (0x40U)
N#define CTIMER_MCR_MR2I_SHIFT                    (6U)
N#define CTIMER_MCR_MR2I(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR2I_SHIFT)) & CTIMER_MCR_MR2I_MASK)
N#define CTIMER_MCR_MR2R_MASK                     (0x80U)
N#define CTIMER_MCR_MR2R_SHIFT                    (7U)
N#define CTIMER_MCR_MR2R(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR2R_SHIFT)) & CTIMER_MCR_MR2R_MASK)
N#define CTIMER_MCR_MR2S_MASK                     (0x100U)
N#define CTIMER_MCR_MR2S_SHIFT                    (8U)
N#define CTIMER_MCR_MR2S(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR2S_SHIFT)) & CTIMER_MCR_MR2S_MASK)
N#define CTIMER_MCR_MR3I_MASK                     (0x200U)
N#define CTIMER_MCR_MR3I_SHIFT                    (9U)
N#define CTIMER_MCR_MR3I(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR3I_SHIFT)) & CTIMER_MCR_MR3I_MASK)
N#define CTIMER_MCR_MR3R_MASK                     (0x400U)
N#define CTIMER_MCR_MR3R_SHIFT                    (10U)
N#define CTIMER_MCR_MR3R(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR3R_SHIFT)) & CTIMER_MCR_MR3R_MASK)
N#define CTIMER_MCR_MR3S_MASK                     (0x800U)
N#define CTIMER_MCR_MR3S_SHIFT                    (11U)
N#define CTIMER_MCR_MR3S(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR3S_SHIFT)) & CTIMER_MCR_MR3S_MASK)
N#define CTIMER_MCR_MR0RL_MASK                    (0x1000000U)
N#define CTIMER_MCR_MR0RL_SHIFT                   (24U)
N#define CTIMER_MCR_MR0RL(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR0RL_SHIFT)) & CTIMER_MCR_MR0RL_MASK)
N#define CTIMER_MCR_MR1RL_MASK                    (0x2000000U)
N#define CTIMER_MCR_MR1RL_SHIFT                   (25U)
N#define CTIMER_MCR_MR1RL(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR1RL_SHIFT)) & CTIMER_MCR_MR1RL_MASK)
N#define CTIMER_MCR_MR2RL_MASK                    (0x4000000U)
N#define CTIMER_MCR_MR2RL_SHIFT                   (26U)
N#define CTIMER_MCR_MR2RL(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR2RL_SHIFT)) & CTIMER_MCR_MR2RL_MASK)
N#define CTIMER_MCR_MR3RL_MASK                    (0x8000000U)
N#define CTIMER_MCR_MR3RL_SHIFT                   (27U)
N#define CTIMER_MCR_MR3RL(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_MCR_MR3RL_SHIFT)) & CTIMER_MCR_MR3RL_MASK)
N
N/*! @name MR - Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC. */
N#define CTIMER_MR_MATCH_MASK                     (0xFFFFFFFFU)
N#define CTIMER_MR_MATCH_SHIFT                    (0U)
N#define CTIMER_MR_MATCH(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_MR_MATCH_SHIFT)) & CTIMER_MR_MATCH_MASK)
N
N/* The count of CTIMER_MR */
N#define CTIMER_MR_COUNT                          (4U)
N
N/*! @name CCR - Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place. */
N#define CTIMER_CCR_CAP0RE_MASK                   (0x1U)
N#define CTIMER_CCR_CAP0RE_SHIFT                  (0U)
N#define CTIMER_CCR_CAP0RE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP0RE_SHIFT)) & CTIMER_CCR_CAP0RE_MASK)
N#define CTIMER_CCR_CAP0FE_MASK                   (0x2U)
N#define CTIMER_CCR_CAP0FE_SHIFT                  (1U)
N#define CTIMER_CCR_CAP0FE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP0FE_SHIFT)) & CTIMER_CCR_CAP0FE_MASK)
N#define CTIMER_CCR_CAP0I_MASK                    (0x4U)
N#define CTIMER_CCR_CAP0I_SHIFT                   (2U)
N#define CTIMER_CCR_CAP0I(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP0I_SHIFT)) & CTIMER_CCR_CAP0I_MASK)
N#define CTIMER_CCR_CAP1RE_MASK                   (0x8U)
N#define CTIMER_CCR_CAP1RE_SHIFT                  (3U)
N#define CTIMER_CCR_CAP1RE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP1RE_SHIFT)) & CTIMER_CCR_CAP1RE_MASK)
N#define CTIMER_CCR_CAP1FE_MASK                   (0x10U)
N#define CTIMER_CCR_CAP1FE_SHIFT                  (4U)
N#define CTIMER_CCR_CAP1FE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP1FE_SHIFT)) & CTIMER_CCR_CAP1FE_MASK)
N#define CTIMER_CCR_CAP1I_MASK                    (0x20U)
N#define CTIMER_CCR_CAP1I_SHIFT                   (5U)
N#define CTIMER_CCR_CAP1I(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP1I_SHIFT)) & CTIMER_CCR_CAP1I_MASK)
N#define CTIMER_CCR_CAP2RE_MASK                   (0x40U)
N#define CTIMER_CCR_CAP2RE_SHIFT                  (6U)
N#define CTIMER_CCR_CAP2RE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP2RE_SHIFT)) & CTIMER_CCR_CAP2RE_MASK)
N#define CTIMER_CCR_CAP2FE_MASK                   (0x80U)
N#define CTIMER_CCR_CAP2FE_SHIFT                  (7U)
N#define CTIMER_CCR_CAP2FE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP2FE_SHIFT)) & CTIMER_CCR_CAP2FE_MASK)
N#define CTIMER_CCR_CAP2I_MASK                    (0x100U)
N#define CTIMER_CCR_CAP2I_SHIFT                   (8U)
N#define CTIMER_CCR_CAP2I(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP2I_SHIFT)) & CTIMER_CCR_CAP2I_MASK)
N#define CTIMER_CCR_CAP3RE_MASK                   (0x200U)
N#define CTIMER_CCR_CAP3RE_SHIFT                  (9U)
N#define CTIMER_CCR_CAP3RE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP3RE_SHIFT)) & CTIMER_CCR_CAP3RE_MASK)
N#define CTIMER_CCR_CAP3FE_MASK                   (0x400U)
N#define CTIMER_CCR_CAP3FE_SHIFT                  (10U)
N#define CTIMER_CCR_CAP3FE(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP3FE_SHIFT)) & CTIMER_CCR_CAP3FE_MASK)
N#define CTIMER_CCR_CAP3I_MASK                    (0x800U)
N#define CTIMER_CCR_CAP3I_SHIFT                   (11U)
N#define CTIMER_CCR_CAP3I(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_CCR_CAP3I_SHIFT)) & CTIMER_CCR_CAP3I_MASK)
N
N/*! @name CR - Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input. */
N#define CTIMER_CR_CAP_MASK                       (0xFFFFFFFFU)
N#define CTIMER_CR_CAP_SHIFT                      (0U)
N#define CTIMER_CR_CAP(x)                         (((uint32_t)(((uint32_t)(x)) << CTIMER_CR_CAP_SHIFT)) & CTIMER_CR_CAP_MASK)
N
N/* The count of CTIMER_CR */
N#define CTIMER_CR_COUNT                          (4U)
N
N/*! @name EMR - External Match Register. The EMR controls the match function and the external match pins. */
N#define CTIMER_EMR_EM0_MASK                      (0x1U)
N#define CTIMER_EMR_EM0_SHIFT                     (0U)
N#define CTIMER_EMR_EM0(x)                        (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EM0_SHIFT)) & CTIMER_EMR_EM0_MASK)
N#define CTIMER_EMR_EM1_MASK                      (0x2U)
N#define CTIMER_EMR_EM1_SHIFT                     (1U)
N#define CTIMER_EMR_EM1(x)                        (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EM1_SHIFT)) & CTIMER_EMR_EM1_MASK)
N#define CTIMER_EMR_EM2_MASK                      (0x4U)
N#define CTIMER_EMR_EM2_SHIFT                     (2U)
N#define CTIMER_EMR_EM2(x)                        (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EM2_SHIFT)) & CTIMER_EMR_EM2_MASK)
N#define CTIMER_EMR_EM3_MASK                      (0x8U)
N#define CTIMER_EMR_EM3_SHIFT                     (3U)
N#define CTIMER_EMR_EM3(x)                        (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EM3_SHIFT)) & CTIMER_EMR_EM3_MASK)
N#define CTIMER_EMR_EMC0_MASK                     (0x30U)
N#define CTIMER_EMR_EMC0_SHIFT                    (4U)
N#define CTIMER_EMR_EMC0(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC0_SHIFT)) & CTIMER_EMR_EMC0_MASK)
N#define CTIMER_EMR_EMC1_MASK                     (0xC0U)
N#define CTIMER_EMR_EMC1_SHIFT                    (6U)
N#define CTIMER_EMR_EMC1(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC1_SHIFT)) & CTIMER_EMR_EMC1_MASK)
N#define CTIMER_EMR_EMC2_MASK                     (0x300U)
N#define CTIMER_EMR_EMC2_SHIFT                    (8U)
N#define CTIMER_EMR_EMC2(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC2_SHIFT)) & CTIMER_EMR_EMC2_MASK)
N#define CTIMER_EMR_EMC3_MASK                     (0xC00U)
N#define CTIMER_EMR_EMC3_SHIFT                    (10U)
N#define CTIMER_EMR_EMC3(x)                       (((uint32_t)(((uint32_t)(x)) << CTIMER_EMR_EMC3_SHIFT)) & CTIMER_EMR_EMC3_MASK)
N
N/*! @name CTCR - Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting. */
N#define CTIMER_CTCR_CTMODE_MASK                  (0x3U)
N#define CTIMER_CTCR_CTMODE_SHIFT                 (0U)
N#define CTIMER_CTCR_CTMODE(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_CTCR_CTMODE_SHIFT)) & CTIMER_CTCR_CTMODE_MASK)
N#define CTIMER_CTCR_CINSEL_MASK                  (0xCU)
N#define CTIMER_CTCR_CINSEL_SHIFT                 (2U)
N#define CTIMER_CTCR_CINSEL(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_CTCR_CINSEL_SHIFT)) & CTIMER_CTCR_CINSEL_MASK)
N#define CTIMER_CTCR_ENCC_MASK                    (0x10U)
N#define CTIMER_CTCR_ENCC_SHIFT                   (4U)
N#define CTIMER_CTCR_ENCC(x)                      (((uint32_t)(((uint32_t)(x)) << CTIMER_CTCR_ENCC_SHIFT)) & CTIMER_CTCR_ENCC_MASK)
N#define CTIMER_CTCR_SELCC_MASK                   (0xE0U)
N#define CTIMER_CTCR_SELCC_SHIFT                  (5U)
N#define CTIMER_CTCR_SELCC(x)                     (((uint32_t)(((uint32_t)(x)) << CTIMER_CTCR_SELCC_SHIFT)) & CTIMER_CTCR_SELCC_MASK)
N
N/*! @name PWMC - PWM Control Register. The PWMCON enables PWM mode for the external match pins. */
N#define CTIMER_PWMC_PWMEN0_MASK                  (0x1U)
N#define CTIMER_PWMC_PWMEN0_SHIFT                 (0U)
N#define CTIMER_PWMC_PWMEN0(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_PWMC_PWMEN0_SHIFT)) & CTIMER_PWMC_PWMEN0_MASK)
N#define CTIMER_PWMC_PWMEN1_MASK                  (0x2U)
N#define CTIMER_PWMC_PWMEN1_SHIFT                 (1U)
N#define CTIMER_PWMC_PWMEN1(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_PWMC_PWMEN1_SHIFT)) & CTIMER_PWMC_PWMEN1_MASK)
N#define CTIMER_PWMC_PWMEN2_MASK                  (0x4U)
N#define CTIMER_PWMC_PWMEN2_SHIFT                 (2U)
N#define CTIMER_PWMC_PWMEN2(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_PWMC_PWMEN2_SHIFT)) & CTIMER_PWMC_PWMEN2_MASK)
N#define CTIMER_PWMC_PWMEN3_MASK                  (0x8U)
N#define CTIMER_PWMC_PWMEN3_SHIFT                 (3U)
N#define CTIMER_PWMC_PWMEN3(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_PWMC_PWMEN3_SHIFT)) & CTIMER_PWMC_PWMEN3_MASK)
N
N/*! @name MSR - Match Shadow Register */
N#define CTIMER_MSR_SHADOWW_MASK                  (0xFFFFFFFFU)
N#define CTIMER_MSR_SHADOWW_SHIFT                 (0U)
N#define CTIMER_MSR_SHADOWW(x)                    (((uint32_t)(((uint32_t)(x)) << CTIMER_MSR_SHADOWW_SHIFT)) & CTIMER_MSR_SHADOWW_MASK)
N
N/* The count of CTIMER_MSR */
N#define CTIMER_MSR_COUNT                         (4U)
N
N
N/*!
N * @}
N */ /* end of group CTIMER_Register_Masks */
N
N
N/* CTIMER - Peripheral instance base addresses */
N/** Peripheral CTIMER0 base address */
N#define CTIMER0_BASE                             (0x40008000u)
N/** Peripheral CTIMER0 base pointer */
N#define CTIMER0                                  ((CTIMER_Type *)CTIMER0_BASE)
N/** Peripheral CTIMER1 base address */
N#define CTIMER1_BASE                             (0x40009000u)
N/** Peripheral CTIMER1 base pointer */
N#define CTIMER1                                  ((CTIMER_Type *)CTIMER1_BASE)
N/** Peripheral CTIMER2 base address */
N#define CTIMER2_BASE                             (0x40028000u)
N/** Peripheral CTIMER2 base pointer */
N#define CTIMER2                                  ((CTIMER_Type *)CTIMER2_BASE)
N/** Peripheral CTIMER3 base address */
N#define CTIMER3_BASE                             (0x40048000u)
N/** Peripheral CTIMER3 base pointer */
N#define CTIMER3                                  ((CTIMER_Type *)CTIMER3_BASE)
N/** Peripheral CTIMER4 base address */
N#define CTIMER4_BASE                             (0x40049000u)
N/** Peripheral CTIMER4 base pointer */
N#define CTIMER4                                  ((CTIMER_Type *)CTIMER4_BASE)
N/** Array initializer of CTIMER peripheral base addresses */
N#define CTIMER_BASE_ADDRS                        { CTIMER0_BASE, CTIMER1_BASE, CTIMER2_BASE, CTIMER3_BASE, CTIMER4_BASE }
N/** Array initializer of CTIMER peripheral base pointers */
N#define CTIMER_BASE_PTRS                         { CTIMER0, CTIMER1, CTIMER2, CTIMER3, CTIMER4 }
N/** Interrupt vectors for the CTIMER peripheral type */
N#define CTIMER_IRQS                              { CTIMER0_IRQn, CTIMER1_IRQn, CTIMER2_IRQn, CTIMER3_IRQn, CTIMER4_IRQn }
N
N/*!
N * @}
N */ /* end of group CTIMER_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMA Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Peripheral_Access_Layer DMA Peripheral Access Layer
N * @{
N */
N
N/** DMA - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CTRL;                              /**< DMA control., offset: 0x0 */
X  volatile uint32_t CTRL;                               
N  __I  uint32_t INTSTAT;                           /**< Interrupt status., offset: 0x4 */
X  volatile const  uint32_t INTSTAT;                            
N  __IO uint32_t SRAMBASE;                          /**< SRAM address of the channel configuration table., offset: 0x8 */
X  volatile uint32_t SRAMBASE;                           
N       uint8_t RESERVED_0[20];
N  struct {                                         /* offset: 0x20, array step: 0x5C */
N    __IO uint32_t ENABLESET;                         /**< Channel Enable read and Set for all DMA channels., array offset: 0x20, array step: 0x5C */
X    volatile uint32_t ENABLESET;                          
N         uint8_t RESERVED_0[4];
N    __O  uint32_t ENABLECLR;                         /**< Channel Enable Clear for all DMA channels., array offset: 0x28, array step: 0x5C */
X    volatile  uint32_t ENABLECLR;                          
N         uint8_t RESERVED_1[4];
N    __I  uint32_t ACTIVE;                            /**< Channel Active status for all DMA channels., array offset: 0x30, array step: 0x5C */
X    volatile const  uint32_t ACTIVE;                             
N         uint8_t RESERVED_2[4];
N    __I  uint32_t BUSY;                              /**< Channel Busy status for all DMA channels., array offset: 0x38, array step: 0x5C */
X    volatile const  uint32_t BUSY;                               
N         uint8_t RESERVED_3[4];
N    __IO uint32_t ERRINT;                            /**< Error Interrupt status for all DMA channels., array offset: 0x40, array step: 0x5C */
X    volatile uint32_t ERRINT;                             
N         uint8_t RESERVED_4[4];
N    __IO uint32_t INTENSET;                          /**< Interrupt Enable read and Set for all DMA channels., array offset: 0x48, array step: 0x5C */
X    volatile uint32_t INTENSET;                           
N         uint8_t RESERVED_5[4];
N    __O  uint32_t INTENCLR;                          /**< Interrupt Enable Clear for all DMA channels., array offset: 0x50, array step: 0x5C */
X    volatile  uint32_t INTENCLR;                           
N         uint8_t RESERVED_6[4];
N    __IO uint32_t INTA;                              /**< Interrupt A status for all DMA channels., array offset: 0x58, array step: 0x5C */
X    volatile uint32_t INTA;                               
N         uint8_t RESERVED_7[4];
N    __IO uint32_t INTB;                              /**< Interrupt B status for all DMA channels., array offset: 0x60, array step: 0x5C */
X    volatile uint32_t INTB;                               
N         uint8_t RESERVED_8[4];
N    __O  uint32_t SETVALID;                          /**< Set ValidPending control bits for all DMA channels., array offset: 0x68, array step: 0x5C */
X    volatile  uint32_t SETVALID;                           
N         uint8_t RESERVED_9[4];
N    __O  uint32_t SETTRIG;                           /**< Set Trigger control bits for all DMA channels., array offset: 0x70, array step: 0x5C */
X    volatile  uint32_t SETTRIG;                            
N         uint8_t RESERVED_10[4];
N    __O  uint32_t ABORT;                             /**< Channel Abort control for all DMA channels., array offset: 0x78, array step: 0x5C */
X    volatile  uint32_t ABORT;                              
N  } COMMON[1];
N       uint8_t RESERVED_1[900];
N  struct {                                         /* offset: 0x400, array step: 0x10 */
N    __IO uint32_t CFG;                               /**< Configuration register for DMA channel ., array offset: 0x400, array step: 0x10 */
X    volatile uint32_t CFG;                                
N    __I  uint32_t CTLSTAT;                           /**< Control and status register for DMA channel ., array offset: 0x404, array step: 0x10 */
X    volatile const  uint32_t CTLSTAT;                            
N    __IO uint32_t XFERCFG;                           /**< Transfer configuration register for DMA channel ., array offset: 0x408, array step: 0x10 */
X    volatile uint32_t XFERCFG;                            
N         uint8_t RESERVED_0[4];
N  } CHANNEL[30];
N} DMA_Type;
N
N/* ----------------------------------------------------------------------------
N   -- DMA Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Register_Masks DMA Register Masks
N * @{
N */
N
N/*! @name CTRL - DMA control. */
N#define DMA_CTRL_ENABLE_MASK                     (0x1U)
N#define DMA_CTRL_ENABLE_SHIFT                    (0U)
N#define DMA_CTRL_ENABLE(x)                       (((uint32_t)(((uint32_t)(x)) << DMA_CTRL_ENABLE_SHIFT)) & DMA_CTRL_ENABLE_MASK)
N
N/*! @name INTSTAT - Interrupt status. */
N#define DMA_INTSTAT_ACTIVEINT_MASK               (0x2U)
N#define DMA_INTSTAT_ACTIVEINT_SHIFT              (1U)
N#define DMA_INTSTAT_ACTIVEINT(x)                 (((uint32_t)(((uint32_t)(x)) << DMA_INTSTAT_ACTIVEINT_SHIFT)) & DMA_INTSTAT_ACTIVEINT_MASK)
N#define DMA_INTSTAT_ACTIVEERRINT_MASK            (0x4U)
N#define DMA_INTSTAT_ACTIVEERRINT_SHIFT           (2U)
N#define DMA_INTSTAT_ACTIVEERRINT(x)              (((uint32_t)(((uint32_t)(x)) << DMA_INTSTAT_ACTIVEERRINT_SHIFT)) & DMA_INTSTAT_ACTIVEERRINT_MASK)
N
N/*! @name SRAMBASE - SRAM address of the channel configuration table. */
N#define DMA_SRAMBASE_OFFSET_MASK                 (0xFFFFFE00U)
N#define DMA_SRAMBASE_OFFSET_SHIFT                (9U)
N#define DMA_SRAMBASE_OFFSET(x)                   (((uint32_t)(((uint32_t)(x)) << DMA_SRAMBASE_OFFSET_SHIFT)) & DMA_SRAMBASE_OFFSET_MASK)
N
N/*! @name COMMON_ENABLESET - Channel Enable read and Set for all DMA channels. */
N#define DMA_COMMON_ENABLESET_ENA_MASK            (0xFFFFFFFFU)
N#define DMA_COMMON_ENABLESET_ENA_SHIFT           (0U)
N#define DMA_COMMON_ENABLESET_ENA(x)              (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_ENABLESET_ENA_SHIFT)) & DMA_COMMON_ENABLESET_ENA_MASK)
N
N/* The count of DMA_COMMON_ENABLESET */
N#define DMA_COMMON_ENABLESET_COUNT               (1U)
N
N/*! @name COMMON_ENABLECLR - Channel Enable Clear for all DMA channels. */
N#define DMA_COMMON_ENABLECLR_CLR_MASK            (0xFFFFFFFFU)
N#define DMA_COMMON_ENABLECLR_CLR_SHIFT           (0U)
N#define DMA_COMMON_ENABLECLR_CLR(x)              (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_ENABLECLR_CLR_SHIFT)) & DMA_COMMON_ENABLECLR_CLR_MASK)
N
N/* The count of DMA_COMMON_ENABLECLR */
N#define DMA_COMMON_ENABLECLR_COUNT               (1U)
N
N/*! @name COMMON_ACTIVE - Channel Active status for all DMA channels. */
N#define DMA_COMMON_ACTIVE_ACT_MASK               (0xFFFFFFFFU)
N#define DMA_COMMON_ACTIVE_ACT_SHIFT              (0U)
N#define DMA_COMMON_ACTIVE_ACT(x)                 (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_ACTIVE_ACT_SHIFT)) & DMA_COMMON_ACTIVE_ACT_MASK)
N
N/* The count of DMA_COMMON_ACTIVE */
N#define DMA_COMMON_ACTIVE_COUNT                  (1U)
N
N/*! @name COMMON_BUSY - Channel Busy status for all DMA channels. */
N#define DMA_COMMON_BUSY_BSY_MASK                 (0xFFFFFFFFU)
N#define DMA_COMMON_BUSY_BSY_SHIFT                (0U)
N#define DMA_COMMON_BUSY_BSY(x)                   (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_BUSY_BSY_SHIFT)) & DMA_COMMON_BUSY_BSY_MASK)
N
N/* The count of DMA_COMMON_BUSY */
N#define DMA_COMMON_BUSY_COUNT                    (1U)
N
N/*! @name COMMON_ERRINT - Error Interrupt status for all DMA channels. */
N#define DMA_COMMON_ERRINT_ERR_MASK               (0xFFFFFFFFU)
N#define DMA_COMMON_ERRINT_ERR_SHIFT              (0U)
N#define DMA_COMMON_ERRINT_ERR(x)                 (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_ERRINT_ERR_SHIFT)) & DMA_COMMON_ERRINT_ERR_MASK)
N
N/* The count of DMA_COMMON_ERRINT */
N#define DMA_COMMON_ERRINT_COUNT                  (1U)
N
N/*! @name COMMON_INTENSET - Interrupt Enable read and Set for all DMA channels. */
N#define DMA_COMMON_INTENSET_INTEN_MASK           (0xFFFFFFFFU)
N#define DMA_COMMON_INTENSET_INTEN_SHIFT          (0U)
N#define DMA_COMMON_INTENSET_INTEN(x)             (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_INTENSET_INTEN_SHIFT)) & DMA_COMMON_INTENSET_INTEN_MASK)
N
N/* The count of DMA_COMMON_INTENSET */
N#define DMA_COMMON_INTENSET_COUNT                (1U)
N
N/*! @name COMMON_INTENCLR - Interrupt Enable Clear for all DMA channels. */
N#define DMA_COMMON_INTENCLR_CLR_MASK             (0xFFFFFFFFU)
N#define DMA_COMMON_INTENCLR_CLR_SHIFT            (0U)
N#define DMA_COMMON_INTENCLR_CLR(x)               (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_INTENCLR_CLR_SHIFT)) & DMA_COMMON_INTENCLR_CLR_MASK)
N
N/* The count of DMA_COMMON_INTENCLR */
N#define DMA_COMMON_INTENCLR_COUNT                (1U)
N
N/*! @name COMMON_INTA - Interrupt A status for all DMA channels. */
N#define DMA_COMMON_INTA_IA_MASK                  (0xFFFFFFFFU)
N#define DMA_COMMON_INTA_IA_SHIFT                 (0U)
N#define DMA_COMMON_INTA_IA(x)                    (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_INTA_IA_SHIFT)) & DMA_COMMON_INTA_IA_MASK)
N
N/* The count of DMA_COMMON_INTA */
N#define DMA_COMMON_INTA_COUNT                    (1U)
N
N/*! @name COMMON_INTB - Interrupt B status for all DMA channels. */
N#define DMA_COMMON_INTB_IB_MASK                  (0xFFFFFFFFU)
N#define DMA_COMMON_INTB_IB_SHIFT                 (0U)
N#define DMA_COMMON_INTB_IB(x)                    (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_INTB_IB_SHIFT)) & DMA_COMMON_INTB_IB_MASK)
N
N/* The count of DMA_COMMON_INTB */
N#define DMA_COMMON_INTB_COUNT                    (1U)
N
N/*! @name COMMON_SETVALID - Set ValidPending control bits for all DMA channels. */
N#define DMA_COMMON_SETVALID_SV_MASK              (0xFFFFFFFFU)
N#define DMA_COMMON_SETVALID_SV_SHIFT             (0U)
N#define DMA_COMMON_SETVALID_SV(x)                (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_SETVALID_SV_SHIFT)) & DMA_COMMON_SETVALID_SV_MASK)
N
N/* The count of DMA_COMMON_SETVALID */
N#define DMA_COMMON_SETVALID_COUNT                (1U)
N
N/*! @name COMMON_SETTRIG - Set Trigger control bits for all DMA channels. */
N#define DMA_COMMON_SETTRIG_TRIG_MASK             (0xFFFFFFFFU)
N#define DMA_COMMON_SETTRIG_TRIG_SHIFT            (0U)
N#define DMA_COMMON_SETTRIG_TRIG(x)               (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_SETTRIG_TRIG_SHIFT)) & DMA_COMMON_SETTRIG_TRIG_MASK)
N
N/* The count of DMA_COMMON_SETTRIG */
N#define DMA_COMMON_SETTRIG_COUNT                 (1U)
N
N/*! @name COMMON_ABORT - Channel Abort control for all DMA channels. */
N#define DMA_COMMON_ABORT_ABORTCTRL_MASK          (0xFFFFFFFFU)
N#define DMA_COMMON_ABORT_ABORTCTRL_SHIFT         (0U)
N#define DMA_COMMON_ABORT_ABORTCTRL(x)            (((uint32_t)(((uint32_t)(x)) << DMA_COMMON_ABORT_ABORTCTRL_SHIFT)) & DMA_COMMON_ABORT_ABORTCTRL_MASK)
N
N/* The count of DMA_COMMON_ABORT */
N#define DMA_COMMON_ABORT_COUNT                   (1U)
N
N/*! @name CHANNEL_CFG - Configuration register for DMA channel . */
N#define DMA_CHANNEL_CFG_PERIPHREQEN_MASK         (0x1U)
N#define DMA_CHANNEL_CFG_PERIPHREQEN_SHIFT        (0U)
N#define DMA_CHANNEL_CFG_PERIPHREQEN(x)           (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_PERIPHREQEN_SHIFT)) & DMA_CHANNEL_CFG_PERIPHREQEN_MASK)
N#define DMA_CHANNEL_CFG_HWTRIGEN_MASK            (0x2U)
N#define DMA_CHANNEL_CFG_HWTRIGEN_SHIFT           (1U)
N#define DMA_CHANNEL_CFG_HWTRIGEN(x)              (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_HWTRIGEN_SHIFT)) & DMA_CHANNEL_CFG_HWTRIGEN_MASK)
N#define DMA_CHANNEL_CFG_TRIGPOL_MASK             (0x10U)
N#define DMA_CHANNEL_CFG_TRIGPOL_SHIFT            (4U)
N#define DMA_CHANNEL_CFG_TRIGPOL(x)               (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_TRIGPOL_SHIFT)) & DMA_CHANNEL_CFG_TRIGPOL_MASK)
N#define DMA_CHANNEL_CFG_TRIGTYPE_MASK            (0x20U)
N#define DMA_CHANNEL_CFG_TRIGTYPE_SHIFT           (5U)
N#define DMA_CHANNEL_CFG_TRIGTYPE(x)              (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_TRIGTYPE_SHIFT)) & DMA_CHANNEL_CFG_TRIGTYPE_MASK)
N#define DMA_CHANNEL_CFG_TRIGBURST_MASK           (0x40U)
N#define DMA_CHANNEL_CFG_TRIGBURST_SHIFT          (6U)
N#define DMA_CHANNEL_CFG_TRIGBURST(x)             (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_TRIGBURST_SHIFT)) & DMA_CHANNEL_CFG_TRIGBURST_MASK)
N#define DMA_CHANNEL_CFG_BURSTPOWER_MASK          (0xF00U)
N#define DMA_CHANNEL_CFG_BURSTPOWER_SHIFT         (8U)
N#define DMA_CHANNEL_CFG_BURSTPOWER(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_BURSTPOWER_SHIFT)) & DMA_CHANNEL_CFG_BURSTPOWER_MASK)
N#define DMA_CHANNEL_CFG_SRCBURSTWRAP_MASK        (0x4000U)
N#define DMA_CHANNEL_CFG_SRCBURSTWRAP_SHIFT       (14U)
N#define DMA_CHANNEL_CFG_SRCBURSTWRAP(x)          (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_SRCBURSTWRAP_SHIFT)) & DMA_CHANNEL_CFG_SRCBURSTWRAP_MASK)
N#define DMA_CHANNEL_CFG_DSTBURSTWRAP_MASK        (0x8000U)
N#define DMA_CHANNEL_CFG_DSTBURSTWRAP_SHIFT       (15U)
N#define DMA_CHANNEL_CFG_DSTBURSTWRAP(x)          (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_DSTBURSTWRAP_SHIFT)) & DMA_CHANNEL_CFG_DSTBURSTWRAP_MASK)
N#define DMA_CHANNEL_CFG_CHPRIORITY_MASK          (0x70000U)
N#define DMA_CHANNEL_CFG_CHPRIORITY_SHIFT         (16U)
N#define DMA_CHANNEL_CFG_CHPRIORITY(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CFG_CHPRIORITY_SHIFT)) & DMA_CHANNEL_CFG_CHPRIORITY_MASK)
N
N/* The count of DMA_CHANNEL_CFG */
N#define DMA_CHANNEL_CFG_COUNT                    (30U)
N
N/*! @name CHANNEL_CTLSTAT - Control and status register for DMA channel . */
N#define DMA_CHANNEL_CTLSTAT_VALIDPENDING_MASK    (0x1U)
N#define DMA_CHANNEL_CTLSTAT_VALIDPENDING_SHIFT   (0U)
N#define DMA_CHANNEL_CTLSTAT_VALIDPENDING(x)      (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CTLSTAT_VALIDPENDING_SHIFT)) & DMA_CHANNEL_CTLSTAT_VALIDPENDING_MASK)
N#define DMA_CHANNEL_CTLSTAT_TRIG_MASK            (0x4U)
N#define DMA_CHANNEL_CTLSTAT_TRIG_SHIFT           (2U)
N#define DMA_CHANNEL_CTLSTAT_TRIG(x)              (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_CTLSTAT_TRIG_SHIFT)) & DMA_CHANNEL_CTLSTAT_TRIG_MASK)
N
N/* The count of DMA_CHANNEL_CTLSTAT */
N#define DMA_CHANNEL_CTLSTAT_COUNT                (30U)
N
N/*! @name CHANNEL_XFERCFG - Transfer configuration register for DMA channel . */
N#define DMA_CHANNEL_XFERCFG_CFGVALID_MASK        (0x1U)
N#define DMA_CHANNEL_XFERCFG_CFGVALID_SHIFT       (0U)
N#define DMA_CHANNEL_XFERCFG_CFGVALID(x)          (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_CFGVALID_SHIFT)) & DMA_CHANNEL_XFERCFG_CFGVALID_MASK)
N#define DMA_CHANNEL_XFERCFG_RELOAD_MASK          (0x2U)
N#define DMA_CHANNEL_XFERCFG_RELOAD_SHIFT         (1U)
N#define DMA_CHANNEL_XFERCFG_RELOAD(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_RELOAD_SHIFT)) & DMA_CHANNEL_XFERCFG_RELOAD_MASK)
N#define DMA_CHANNEL_XFERCFG_SWTRIG_MASK          (0x4U)
N#define DMA_CHANNEL_XFERCFG_SWTRIG_SHIFT         (2U)
N#define DMA_CHANNEL_XFERCFG_SWTRIG(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_SWTRIG_SHIFT)) & DMA_CHANNEL_XFERCFG_SWTRIG_MASK)
N#define DMA_CHANNEL_XFERCFG_CLRTRIG_MASK         (0x8U)
N#define DMA_CHANNEL_XFERCFG_CLRTRIG_SHIFT        (3U)
N#define DMA_CHANNEL_XFERCFG_CLRTRIG(x)           (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_CLRTRIG_SHIFT)) & DMA_CHANNEL_XFERCFG_CLRTRIG_MASK)
N#define DMA_CHANNEL_XFERCFG_SETINTA_MASK         (0x10U)
N#define DMA_CHANNEL_XFERCFG_SETINTA_SHIFT        (4U)
N#define DMA_CHANNEL_XFERCFG_SETINTA(x)           (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_SETINTA_SHIFT)) & DMA_CHANNEL_XFERCFG_SETINTA_MASK)
N#define DMA_CHANNEL_XFERCFG_SETINTB_MASK         (0x20U)
N#define DMA_CHANNEL_XFERCFG_SETINTB_SHIFT        (5U)
N#define DMA_CHANNEL_XFERCFG_SETINTB(x)           (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_SETINTB_SHIFT)) & DMA_CHANNEL_XFERCFG_SETINTB_MASK)
N#define DMA_CHANNEL_XFERCFG_WIDTH_MASK           (0x300U)
N#define DMA_CHANNEL_XFERCFG_WIDTH_SHIFT          (8U)
N#define DMA_CHANNEL_XFERCFG_WIDTH(x)             (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_WIDTH_SHIFT)) & DMA_CHANNEL_XFERCFG_WIDTH_MASK)
N#define DMA_CHANNEL_XFERCFG_SRCINC_MASK          (0x3000U)
N#define DMA_CHANNEL_XFERCFG_SRCINC_SHIFT         (12U)
N#define DMA_CHANNEL_XFERCFG_SRCINC(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_SRCINC_SHIFT)) & DMA_CHANNEL_XFERCFG_SRCINC_MASK)
N#define DMA_CHANNEL_XFERCFG_DSTINC_MASK          (0xC000U)
N#define DMA_CHANNEL_XFERCFG_DSTINC_SHIFT         (14U)
N#define DMA_CHANNEL_XFERCFG_DSTINC(x)            (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_DSTINC_SHIFT)) & DMA_CHANNEL_XFERCFG_DSTINC_MASK)
N#define DMA_CHANNEL_XFERCFG_XFERCOUNT_MASK       (0x3FF0000U)
N#define DMA_CHANNEL_XFERCFG_XFERCOUNT_SHIFT      (16U)
N#define DMA_CHANNEL_XFERCFG_XFERCOUNT(x)         (((uint32_t)(((uint32_t)(x)) << DMA_CHANNEL_XFERCFG_XFERCOUNT_SHIFT)) & DMA_CHANNEL_XFERCFG_XFERCOUNT_MASK)
N
N/* The count of DMA_CHANNEL_XFERCFG */
N#define DMA_CHANNEL_XFERCFG_COUNT                (30U)
N
N
N/*!
N * @}
N */ /* end of group DMA_Register_Masks */
N
N
N/* DMA - Peripheral instance base addresses */
N/** Peripheral DMA0 base address */
N#define DMA0_BASE                                (0x40082000u)
N/** Peripheral DMA0 base pointer */
N#define DMA0                                     ((DMA_Type *)DMA0_BASE)
N/** Array initializer of DMA peripheral base addresses */
N#define DMA_BASE_ADDRS                           { DMA0_BASE }
N/** Array initializer of DMA peripheral base pointers */
N#define DMA_BASE_PTRS                            { DMA0 }
N/** Interrupt vectors for the DMA peripheral type */
N#define DMA_IRQS                                 { DMA0_IRQn }
N
N/*!
N * @}
N */ /* end of group DMA_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMIC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMIC_Peripheral_Access_Layer DMIC Peripheral Access Layer
N * @{
N */
N
N/** DMIC - Register Layout Typedef */
Ntypedef struct {
N  struct {                                         /* offset: 0x0, array step: 0x100 */
N    __IO uint32_t OSR;                               /**< Oversample Rate register 0, array offset: 0x0, array step: 0x100 */
X    volatile uint32_t OSR;                                
N    __IO uint32_t DIVHFCLK;                          /**< DMIC Clock Register 0, array offset: 0x4, array step: 0x100 */
X    volatile uint32_t DIVHFCLK;                           
N    __IO uint32_t PREAC2FSCOEF;                      /**< Pre-Emphasis Filter Coefficient for 2 FS register, array offset: 0x8, array step: 0x100 */
X    volatile uint32_t PREAC2FSCOEF;                       
N    __IO uint32_t PREAC4FSCOEF;                      /**< Pre-Emphasis Filter Coefficient for 4 FS register, array offset: 0xC, array step: 0x100 */
X    volatile uint32_t PREAC4FSCOEF;                       
N    __IO uint32_t GAINSHIFT;                         /**< Decimator Gain Shift register, array offset: 0x10, array step: 0x100 */
X    volatile uint32_t GAINSHIFT;                          
N         uint8_t RESERVED_0[108];
N    __IO uint32_t FIFO_CTRL;                         /**< FIFO Control register 0, array offset: 0x80, array step: 0x100 */
X    volatile uint32_t FIFO_CTRL;                          
N    __IO uint32_t FIFO_STATUS;                       /**< FIFO Status register 0, array offset: 0x84, array step: 0x100 */
X    volatile uint32_t FIFO_STATUS;                        
N    __IO uint32_t FIFO_DATA;                         /**< FIFO Data Register 0, array offset: 0x88, array step: 0x100 */
X    volatile uint32_t FIFO_DATA;                          
N    __IO uint32_t PHY_CTRL;                          /**< PDM Source Configuration register 0, array offset: 0x8C, array step: 0x100 */
X    volatile uint32_t PHY_CTRL;                           
N    __IO uint32_t DC_CTRL;                           /**< DC Control register 0, array offset: 0x90, array step: 0x100 */
X    volatile uint32_t DC_CTRL;                            
N         uint8_t RESERVED_1[108];
N  } CHANNEL[2];
N       uint8_t RESERVED_0[3328];
N  __IO uint32_t CHANEN;                            /**< Channel Enable register, offset: 0xF00 */
X  volatile uint32_t CHANEN;                             
N       uint8_t RESERVED_1[8];
N  __IO uint32_t IOCFG;                             /**< I/O Configuration register, offset: 0xF0C */
X  volatile uint32_t IOCFG;                              
N  __IO uint32_t USE2FS;                            /**< Use 2FS register, offset: 0xF10 */
X  volatile uint32_t USE2FS;                             
N       uint8_t RESERVED_2[108];
N  __IO uint32_t HWVADGAIN;                         /**< HWVAD input gain register, offset: 0xF80 */
X  volatile uint32_t HWVADGAIN;                          
N  __IO uint32_t HWVADHPFS;                         /**< HWVAD filter control register, offset: 0xF84 */
X  volatile uint32_t HWVADHPFS;                          
N  __IO uint32_t HWVADST10;                         /**< HWVAD control register, offset: 0xF88 */
X  volatile uint32_t HWVADST10;                          
N  __IO uint32_t HWVADRSTT;                         /**< HWVAD filter reset register, offset: 0xF8C */
X  volatile uint32_t HWVADRSTT;                          
N  __IO uint32_t HWVADTHGN;                         /**< HWVAD noise estimator gain register, offset: 0xF90 */
X  volatile uint32_t HWVADTHGN;                          
N  __IO uint32_t HWVADTHGS;                         /**< HWVAD signal estimator gain register, offset: 0xF94 */
X  volatile uint32_t HWVADTHGS;                          
N  __I  uint32_t HWVADLOWZ;                         /**< HWVAD noise envelope estimator register, offset: 0xF98 */
X  volatile const  uint32_t HWVADLOWZ;                          
N       uint8_t RESERVED_3[96];
N  __I  uint32_t ID;                                /**< Module Identification register, offset: 0xFFC */
X  volatile const  uint32_t ID;                                 
N} DMIC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- DMIC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMIC_Register_Masks DMIC Register Masks
N * @{
N */
N
N/*! @name CHANNEL_OSR - Oversample Rate register 0 */
N#define DMIC_CHANNEL_OSR_OSR_MASK                (0xFFU)
N#define DMIC_CHANNEL_OSR_OSR_SHIFT               (0U)
N#define DMIC_CHANNEL_OSR_OSR(x)                  (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_OSR_OSR_SHIFT)) & DMIC_CHANNEL_OSR_OSR_MASK)
N
N/* The count of DMIC_CHANNEL_OSR */
N#define DMIC_CHANNEL_OSR_COUNT                   (2U)
N
N/*! @name CHANNEL_DIVHFCLK - DMIC Clock Register 0 */
N#define DMIC_CHANNEL_DIVHFCLK_PDMDIV_MASK        (0xFU)
N#define DMIC_CHANNEL_DIVHFCLK_PDMDIV_SHIFT       (0U)
N#define DMIC_CHANNEL_DIVHFCLK_PDMDIV(x)          (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_DIVHFCLK_PDMDIV_SHIFT)) & DMIC_CHANNEL_DIVHFCLK_PDMDIV_MASK)
N
N/* The count of DMIC_CHANNEL_DIVHFCLK */
N#define DMIC_CHANNEL_DIVHFCLK_COUNT              (2U)
N
N/*! @name CHANNEL_PREAC2FSCOEF - Pre-Emphasis Filter Coefficient for 2 FS register */
N#define DMIC_CHANNEL_PREAC2FSCOEF_COMP_MASK      (0x3U)
N#define DMIC_CHANNEL_PREAC2FSCOEF_COMP_SHIFT     (0U)
N#define DMIC_CHANNEL_PREAC2FSCOEF_COMP(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_PREAC2FSCOEF_COMP_SHIFT)) & DMIC_CHANNEL_PREAC2FSCOEF_COMP_MASK)
N
N/* The count of DMIC_CHANNEL_PREAC2FSCOEF */
N#define DMIC_CHANNEL_PREAC2FSCOEF_COUNT          (2U)
N
N/*! @name CHANNEL_PREAC4FSCOEF - Pre-Emphasis Filter Coefficient for 4 FS register */
N#define DMIC_CHANNEL_PREAC4FSCOEF_COMP_MASK      (0x3U)
N#define DMIC_CHANNEL_PREAC4FSCOEF_COMP_SHIFT     (0U)
N#define DMIC_CHANNEL_PREAC4FSCOEF_COMP(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_PREAC4FSCOEF_COMP_SHIFT)) & DMIC_CHANNEL_PREAC4FSCOEF_COMP_MASK)
N
N/* The count of DMIC_CHANNEL_PREAC4FSCOEF */
N#define DMIC_CHANNEL_PREAC4FSCOEF_COUNT          (2U)
N
N/*! @name CHANNEL_GAINSHIFT - Decimator Gain Shift register */
N#define DMIC_CHANNEL_GAINSHIFT_GAIN_MASK         (0x3FU)
N#define DMIC_CHANNEL_GAINSHIFT_GAIN_SHIFT        (0U)
N#define DMIC_CHANNEL_GAINSHIFT_GAIN(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_GAINSHIFT_GAIN_SHIFT)) & DMIC_CHANNEL_GAINSHIFT_GAIN_MASK)
N
N/* The count of DMIC_CHANNEL_GAINSHIFT */
N#define DMIC_CHANNEL_GAINSHIFT_COUNT             (2U)
N
N/*! @name CHANNEL_FIFO_CTRL - FIFO Control register 0 */
N#define DMIC_CHANNEL_FIFO_CTRL_ENABLE_MASK       (0x1U)
N#define DMIC_CHANNEL_FIFO_CTRL_ENABLE_SHIFT      (0U)
N#define DMIC_CHANNEL_FIFO_CTRL_ENABLE(x)         (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_CTRL_ENABLE_SHIFT)) & DMIC_CHANNEL_FIFO_CTRL_ENABLE_MASK)
N#define DMIC_CHANNEL_FIFO_CTRL_RESETN_MASK       (0x2U)
N#define DMIC_CHANNEL_FIFO_CTRL_RESETN_SHIFT      (1U)
N#define DMIC_CHANNEL_FIFO_CTRL_RESETN(x)         (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_CTRL_RESETN_SHIFT)) & DMIC_CHANNEL_FIFO_CTRL_RESETN_MASK)
N#define DMIC_CHANNEL_FIFO_CTRL_INTEN_MASK        (0x4U)
N#define DMIC_CHANNEL_FIFO_CTRL_INTEN_SHIFT       (2U)
N#define DMIC_CHANNEL_FIFO_CTRL_INTEN(x)          (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_CTRL_INTEN_SHIFT)) & DMIC_CHANNEL_FIFO_CTRL_INTEN_MASK)
N#define DMIC_CHANNEL_FIFO_CTRL_DMAEN_MASK        (0x8U)
N#define DMIC_CHANNEL_FIFO_CTRL_DMAEN_SHIFT       (3U)
N#define DMIC_CHANNEL_FIFO_CTRL_DMAEN(x)          (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_CTRL_DMAEN_SHIFT)) & DMIC_CHANNEL_FIFO_CTRL_DMAEN_MASK)
N#define DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_MASK      (0x1F0000U)
N#define DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_SHIFT     (16U)
N#define DMIC_CHANNEL_FIFO_CTRL_TRIGLVL(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_SHIFT)) & DMIC_CHANNEL_FIFO_CTRL_TRIGLVL_MASK)
N
N/* The count of DMIC_CHANNEL_FIFO_CTRL */
N#define DMIC_CHANNEL_FIFO_CTRL_COUNT             (2U)
N
N/*! @name CHANNEL_FIFO_STATUS - FIFO Status register 0 */
N#define DMIC_CHANNEL_FIFO_STATUS_INT_MASK        (0x1U)
N#define DMIC_CHANNEL_FIFO_STATUS_INT_SHIFT       (0U)
N#define DMIC_CHANNEL_FIFO_STATUS_INT(x)          (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_STATUS_INT_SHIFT)) & DMIC_CHANNEL_FIFO_STATUS_INT_MASK)
N#define DMIC_CHANNEL_FIFO_STATUS_OVERRUN_MASK    (0x2U)
N#define DMIC_CHANNEL_FIFO_STATUS_OVERRUN_SHIFT   (1U)
N#define DMIC_CHANNEL_FIFO_STATUS_OVERRUN(x)      (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_STATUS_OVERRUN_SHIFT)) & DMIC_CHANNEL_FIFO_STATUS_OVERRUN_MASK)
N#define DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_MASK   (0x4U)
N#define DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_SHIFT  (2U)
N#define DMIC_CHANNEL_FIFO_STATUS_UNDERRUN(x)     (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_SHIFT)) & DMIC_CHANNEL_FIFO_STATUS_UNDERRUN_MASK)
N
N/* The count of DMIC_CHANNEL_FIFO_STATUS */
N#define DMIC_CHANNEL_FIFO_STATUS_COUNT           (2U)
N
N/*! @name CHANNEL_FIFO_DATA - FIFO Data Register 0 */
N#define DMIC_CHANNEL_FIFO_DATA_DATA_MASK         (0xFFFFFFU)
N#define DMIC_CHANNEL_FIFO_DATA_DATA_SHIFT        (0U)
N#define DMIC_CHANNEL_FIFO_DATA_DATA(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_FIFO_DATA_DATA_SHIFT)) & DMIC_CHANNEL_FIFO_DATA_DATA_MASK)
N
N/* The count of DMIC_CHANNEL_FIFO_DATA */
N#define DMIC_CHANNEL_FIFO_DATA_COUNT             (2U)
N
N/*! @name CHANNEL_PHY_CTRL - PDM Source Configuration register 0 */
N#define DMIC_CHANNEL_PHY_CTRL_PHY_FALL_MASK      (0x1U)
N#define DMIC_CHANNEL_PHY_CTRL_PHY_FALL_SHIFT     (0U)
N#define DMIC_CHANNEL_PHY_CTRL_PHY_FALL(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_PHY_CTRL_PHY_FALL_SHIFT)) & DMIC_CHANNEL_PHY_CTRL_PHY_FALL_MASK)
N#define DMIC_CHANNEL_PHY_CTRL_PHY_HALF_MASK      (0x2U)
N#define DMIC_CHANNEL_PHY_CTRL_PHY_HALF_SHIFT     (1U)
N#define DMIC_CHANNEL_PHY_CTRL_PHY_HALF(x)        (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_PHY_CTRL_PHY_HALF_SHIFT)) & DMIC_CHANNEL_PHY_CTRL_PHY_HALF_MASK)
N
N/* The count of DMIC_CHANNEL_PHY_CTRL */
N#define DMIC_CHANNEL_PHY_CTRL_COUNT              (2U)
N
N/*! @name CHANNEL_DC_CTRL - DC Control register 0 */
N#define DMIC_CHANNEL_DC_CTRL_DCPOLE_MASK         (0x3U)
N#define DMIC_CHANNEL_DC_CTRL_DCPOLE_SHIFT        (0U)
N#define DMIC_CHANNEL_DC_CTRL_DCPOLE(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_DC_CTRL_DCPOLE_SHIFT)) & DMIC_CHANNEL_DC_CTRL_DCPOLE_MASK)
N#define DMIC_CHANNEL_DC_CTRL_DCGAIN_MASK         (0xF0U)
N#define DMIC_CHANNEL_DC_CTRL_DCGAIN_SHIFT        (4U)
N#define DMIC_CHANNEL_DC_CTRL_DCGAIN(x)           (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_DC_CTRL_DCGAIN_SHIFT)) & DMIC_CHANNEL_DC_CTRL_DCGAIN_MASK)
N#define DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_MASK (0x100U)
N#define DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_SHIFT (8U)
N#define DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT(x)  (((uint32_t)(((uint32_t)(x)) << DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_SHIFT)) & DMIC_CHANNEL_DC_CTRL_SATURATEAT16BIT_MASK)
N
N/* The count of DMIC_CHANNEL_DC_CTRL */
N#define DMIC_CHANNEL_DC_CTRL_COUNT               (2U)
N
N/*! @name CHANEN - Channel Enable register */
N#define DMIC_CHANEN_EN_CH0_MASK                  (0x1U)
N#define DMIC_CHANEN_EN_CH0_SHIFT                 (0U)
N#define DMIC_CHANEN_EN_CH0(x)                    (((uint32_t)(((uint32_t)(x)) << DMIC_CHANEN_EN_CH0_SHIFT)) & DMIC_CHANEN_EN_CH0_MASK)
N#define DMIC_CHANEN_EN_CH1_MASK                  (0x2U)
N#define DMIC_CHANEN_EN_CH1_SHIFT                 (1U)
N#define DMIC_CHANEN_EN_CH1(x)                    (((uint32_t)(((uint32_t)(x)) << DMIC_CHANEN_EN_CH1_SHIFT)) & DMIC_CHANEN_EN_CH1_MASK)
N
N/*! @name IOCFG - I/O Configuration register */
N#define DMIC_IOCFG_CLK_BYPASS0_MASK              (0x1U)
N#define DMIC_IOCFG_CLK_BYPASS0_SHIFT             (0U)
N#define DMIC_IOCFG_CLK_BYPASS0(x)                (((uint32_t)(((uint32_t)(x)) << DMIC_IOCFG_CLK_BYPASS0_SHIFT)) & DMIC_IOCFG_CLK_BYPASS0_MASK)
N#define DMIC_IOCFG_CLK_BYPASS1_MASK              (0x2U)
N#define DMIC_IOCFG_CLK_BYPASS1_SHIFT             (1U)
N#define DMIC_IOCFG_CLK_BYPASS1(x)                (((uint32_t)(((uint32_t)(x)) << DMIC_IOCFG_CLK_BYPASS1_SHIFT)) & DMIC_IOCFG_CLK_BYPASS1_MASK)
N#define DMIC_IOCFG_STEREO_DATA0_MASK             (0x4U)
N#define DMIC_IOCFG_STEREO_DATA0_SHIFT            (2U)
N#define DMIC_IOCFG_STEREO_DATA0(x)               (((uint32_t)(((uint32_t)(x)) << DMIC_IOCFG_STEREO_DATA0_SHIFT)) & DMIC_IOCFG_STEREO_DATA0_MASK)
N
N/*! @name USE2FS - Use 2FS register */
N#define DMIC_USE2FS_USE2FS_MASK                  (0x1U)
N#define DMIC_USE2FS_USE2FS_SHIFT                 (0U)
N#define DMIC_USE2FS_USE2FS(x)                    (((uint32_t)(((uint32_t)(x)) << DMIC_USE2FS_USE2FS_SHIFT)) & DMIC_USE2FS_USE2FS_MASK)
N
N/*! @name HWVADGAIN - HWVAD input gain register */
N#define DMIC_HWVADGAIN_INPUTGAIN_MASK            (0xFU)
N#define DMIC_HWVADGAIN_INPUTGAIN_SHIFT           (0U)
N#define DMIC_HWVADGAIN_INPUTGAIN(x)              (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADGAIN_INPUTGAIN_SHIFT)) & DMIC_HWVADGAIN_INPUTGAIN_MASK)
N
N/*! @name HWVADHPFS - HWVAD filter control register */
N#define DMIC_HWVADHPFS_HPFS_MASK                 (0x3U)
N#define DMIC_HWVADHPFS_HPFS_SHIFT                (0U)
N#define DMIC_HWVADHPFS_HPFS(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADHPFS_HPFS_SHIFT)) & DMIC_HWVADHPFS_HPFS_MASK)
N
N/*! @name HWVADST10 - HWVAD control register */
N#define DMIC_HWVADST10_ST10_MASK                 (0x1U)
N#define DMIC_HWVADST10_ST10_SHIFT                (0U)
N#define DMIC_HWVADST10_ST10(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADST10_ST10_SHIFT)) & DMIC_HWVADST10_ST10_MASK)
N
N/*! @name HWVADRSTT - HWVAD filter reset register */
N#define DMIC_HWVADRSTT_RSTT_MASK                 (0x1U)
N#define DMIC_HWVADRSTT_RSTT_SHIFT                (0U)
N#define DMIC_HWVADRSTT_RSTT(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADRSTT_RSTT_SHIFT)) & DMIC_HWVADRSTT_RSTT_MASK)
N
N/*! @name HWVADTHGN - HWVAD noise estimator gain register */
N#define DMIC_HWVADTHGN_THGN_MASK                 (0xFU)
N#define DMIC_HWVADTHGN_THGN_SHIFT                (0U)
N#define DMIC_HWVADTHGN_THGN(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADTHGN_THGN_SHIFT)) & DMIC_HWVADTHGN_THGN_MASK)
N
N/*! @name HWVADTHGS - HWVAD signal estimator gain register */
N#define DMIC_HWVADTHGS_THGS_MASK                 (0xFU)
N#define DMIC_HWVADTHGS_THGS_SHIFT                (0U)
N#define DMIC_HWVADTHGS_THGS(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADTHGS_THGS_SHIFT)) & DMIC_HWVADTHGS_THGS_MASK)
N
N/*! @name HWVADLOWZ - HWVAD noise envelope estimator register */
N#define DMIC_HWVADLOWZ_LOWZ_MASK                 (0xFFFFU)
N#define DMIC_HWVADLOWZ_LOWZ_SHIFT                (0U)
N#define DMIC_HWVADLOWZ_LOWZ(x)                   (((uint32_t)(((uint32_t)(x)) << DMIC_HWVADLOWZ_LOWZ_SHIFT)) & DMIC_HWVADLOWZ_LOWZ_MASK)
N
N/*! @name ID - Module Identification register */
N#define DMIC_ID_ID_MASK                          (0xFFFFFFFFU)
N#define DMIC_ID_ID_SHIFT                         (0U)
N#define DMIC_ID_ID(x)                            (((uint32_t)(((uint32_t)(x)) << DMIC_ID_ID_SHIFT)) & DMIC_ID_ID_MASK)
N
N
N/*!
N * @}
N */ /* end of group DMIC_Register_Masks */
N
N
N/* DMIC - Peripheral instance base addresses */
N/** Peripheral DMIC0 base address */
N#define DMIC0_BASE                               (0x40090000u)
N/** Peripheral DMIC0 base pointer */
N#define DMIC0                                    ((DMIC_Type *)DMIC0_BASE)
N/** Array initializer of DMIC peripheral base addresses */
N#define DMIC_BASE_ADDRS                          { DMIC0_BASE }
N/** Array initializer of DMIC peripheral base pointers */
N#define DMIC_BASE_PTRS                           { DMIC0 }
N/** Interrupt vectors for the DMIC peripheral type */
N#define DMIC_IRQS                                { DMIC0_IRQn }
N#define DMIC_HWVAD_IRQS                          { HWVAD0_IRQn }
N
N/*!
N * @}
N */ /* end of group DMIC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- EEPROM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup EEPROM_Peripheral_Access_Layer EEPROM Peripheral Access Layer
N * @{
N */
N
N/** EEPROM - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CMD;                               /**< EEPROM command register, offset: 0x0 */
X  volatile uint32_t CMD;                                
N       uint8_t RESERVED_0[4];
N  __IO uint32_t RWSTATE;                           /**< EEPROM read wait state register, offset: 0x8 */
X  volatile uint32_t RWSTATE;                            
N  __IO uint32_t AUTOPROG;                          /**< EEPROM auto programming register, offset: 0xC */
X  volatile uint32_t AUTOPROG;                           
N  __IO uint32_t WSTATE;                            /**< EEPROM wait state register, offset: 0x10 */
X  volatile uint32_t WSTATE;                             
N  __IO uint32_t CLKDIV;                            /**< EEPROM clock divider register, offset: 0x14 */
X  volatile uint32_t CLKDIV;                             
N  __IO uint32_t PWRDWN;                            /**< EEPROM power-down register, offset: 0x18 */
X  volatile uint32_t PWRDWN;                             
N       uint8_t RESERVED_1[4028];
N  __O  uint32_t INTENCLR;                          /**< EEPROM interrupt enable clear, offset: 0xFD8 */
X  volatile  uint32_t INTENCLR;                           
N  __O  uint32_t INTENSET;                          /**< EEPROM interrupt enable set, offset: 0xFDC */
X  volatile  uint32_t INTENSET;                           
N  __I  uint32_t INTSTAT;                           /**< EEPROM interrupt status, offset: 0xFE0 */
X  volatile const  uint32_t INTSTAT;                            
N  __I  uint32_t INTEN;                             /**< EEPROM interrupt enable, offset: 0xFE4 */
X  volatile const  uint32_t INTEN;                              
N  __O  uint32_t INTSTATCLR;                        /**< EEPROM interrupt status clear, offset: 0xFE8 */
X  volatile  uint32_t INTSTATCLR;                         
N  __O  uint32_t INTSTATSET;                        /**< EEPROM interrupt status set, offset: 0xFEC */
X  volatile  uint32_t INTSTATSET;                         
N} EEPROM_Type;
N
N/* ----------------------------------------------------------------------------
N   -- EEPROM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup EEPROM_Register_Masks EEPROM Register Masks
N * @{
N */
N
N/*! @name CMD - EEPROM command register */
N#define EEPROM_CMD_CMD_MASK                      (0x7U)
N#define EEPROM_CMD_CMD_SHIFT                     (0U)
N#define EEPROM_CMD_CMD(x)                        (((uint32_t)(((uint32_t)(x)) << EEPROM_CMD_CMD_SHIFT)) & EEPROM_CMD_CMD_MASK)
N
N/*! @name RWSTATE - EEPROM read wait state register */
N#define EEPROM_RWSTATE_RPHASE2_MASK              (0xFFU)
N#define EEPROM_RWSTATE_RPHASE2_SHIFT             (0U)
N#define EEPROM_RWSTATE_RPHASE2(x)                (((uint32_t)(((uint32_t)(x)) << EEPROM_RWSTATE_RPHASE2_SHIFT)) & EEPROM_RWSTATE_RPHASE2_MASK)
N#define EEPROM_RWSTATE_RPHASE1_MASK              (0xFF00U)
N#define EEPROM_RWSTATE_RPHASE1_SHIFT             (8U)
N#define EEPROM_RWSTATE_RPHASE1(x)                (((uint32_t)(((uint32_t)(x)) << EEPROM_RWSTATE_RPHASE1_SHIFT)) & EEPROM_RWSTATE_RPHASE1_MASK)
N
N/*! @name AUTOPROG - EEPROM auto programming register */
N#define EEPROM_AUTOPROG_AUTOPROG_MASK            (0x3U)
N#define EEPROM_AUTOPROG_AUTOPROG_SHIFT           (0U)
N#define EEPROM_AUTOPROG_AUTOPROG(x)              (((uint32_t)(((uint32_t)(x)) << EEPROM_AUTOPROG_AUTOPROG_SHIFT)) & EEPROM_AUTOPROG_AUTOPROG_MASK)
N
N/*! @name WSTATE - EEPROM wait state register */
N#define EEPROM_WSTATE_PHASE3_MASK                (0xFFU)
N#define EEPROM_WSTATE_PHASE3_SHIFT               (0U)
N#define EEPROM_WSTATE_PHASE3(x)                  (((uint32_t)(((uint32_t)(x)) << EEPROM_WSTATE_PHASE3_SHIFT)) & EEPROM_WSTATE_PHASE3_MASK)
N#define EEPROM_WSTATE_PHASE2_MASK                (0xFF00U)
N#define EEPROM_WSTATE_PHASE2_SHIFT               (8U)
N#define EEPROM_WSTATE_PHASE2(x)                  (((uint32_t)(((uint32_t)(x)) << EEPROM_WSTATE_PHASE2_SHIFT)) & EEPROM_WSTATE_PHASE2_MASK)
N#define EEPROM_WSTATE_PHASE1_MASK                (0xFF0000U)
N#define EEPROM_WSTATE_PHASE1_SHIFT               (16U)
N#define EEPROM_WSTATE_PHASE1(x)                  (((uint32_t)(((uint32_t)(x)) << EEPROM_WSTATE_PHASE1_SHIFT)) & EEPROM_WSTATE_PHASE1_MASK)
N#define EEPROM_WSTATE_LCK_PARWEP_MASK            (0x80000000U)
N#define EEPROM_WSTATE_LCK_PARWEP_SHIFT           (31U)
N#define EEPROM_WSTATE_LCK_PARWEP(x)              (((uint32_t)(((uint32_t)(x)) << EEPROM_WSTATE_LCK_PARWEP_SHIFT)) & EEPROM_WSTATE_LCK_PARWEP_MASK)
N
N/*! @name CLKDIV - EEPROM clock divider register */
N#define EEPROM_CLKDIV_CLKDIV_MASK                (0xFFFFU)
N#define EEPROM_CLKDIV_CLKDIV_SHIFT               (0U)
N#define EEPROM_CLKDIV_CLKDIV(x)                  (((uint32_t)(((uint32_t)(x)) << EEPROM_CLKDIV_CLKDIV_SHIFT)) & EEPROM_CLKDIV_CLKDIV_MASK)
N
N/*! @name PWRDWN - EEPROM power-down register */
N#define EEPROM_PWRDWN_PWRDWN_MASK                (0x1U)
N#define EEPROM_PWRDWN_PWRDWN_SHIFT               (0U)
N#define EEPROM_PWRDWN_PWRDWN(x)                  (((uint32_t)(((uint32_t)(x)) << EEPROM_PWRDWN_PWRDWN_SHIFT)) & EEPROM_PWRDWN_PWRDWN_MASK)
N
N/*! @name INTENCLR - EEPROM interrupt enable clear */
N#define EEPROM_INTENCLR_PROG_CLR_EN_MASK         (0x4U)
N#define EEPROM_INTENCLR_PROG_CLR_EN_SHIFT        (2U)
N#define EEPROM_INTENCLR_PROG_CLR_EN(x)           (((uint32_t)(((uint32_t)(x)) << EEPROM_INTENCLR_PROG_CLR_EN_SHIFT)) & EEPROM_INTENCLR_PROG_CLR_EN_MASK)
N
N/*! @name INTENSET - EEPROM interrupt enable set */
N#define EEPROM_INTENSET_PROG_SET_EN_MASK         (0x4U)
N#define EEPROM_INTENSET_PROG_SET_EN_SHIFT        (2U)
N#define EEPROM_INTENSET_PROG_SET_EN(x)           (((uint32_t)(((uint32_t)(x)) << EEPROM_INTENSET_PROG_SET_EN_SHIFT)) & EEPROM_INTENSET_PROG_SET_EN_MASK)
N
N/*! @name INTSTAT - EEPROM interrupt status */
N#define EEPROM_INTSTAT_END_OF_PROG_MASK          (0x4U)
N#define EEPROM_INTSTAT_END_OF_PROG_SHIFT         (2U)
N#define EEPROM_INTSTAT_END_OF_PROG(x)            (((uint32_t)(((uint32_t)(x)) << EEPROM_INTSTAT_END_OF_PROG_SHIFT)) & EEPROM_INTSTAT_END_OF_PROG_MASK)
N
N/*! @name INTEN - EEPROM interrupt enable */
N#define EEPROM_INTEN_EE_PROG_DONE_MASK           (0x4U)
N#define EEPROM_INTEN_EE_PROG_DONE_SHIFT          (2U)
N#define EEPROM_INTEN_EE_PROG_DONE(x)             (((uint32_t)(((uint32_t)(x)) << EEPROM_INTEN_EE_PROG_DONE_SHIFT)) & EEPROM_INTEN_EE_PROG_DONE_MASK)
N
N/*! @name INTSTATCLR - EEPROM interrupt status clear */
N#define EEPROM_INTSTATCLR_PROG_CLR_ST_MASK       (0x4U)
N#define EEPROM_INTSTATCLR_PROG_CLR_ST_SHIFT      (2U)
N#define EEPROM_INTSTATCLR_PROG_CLR_ST(x)         (((uint32_t)(((uint32_t)(x)) << EEPROM_INTSTATCLR_PROG_CLR_ST_SHIFT)) & EEPROM_INTSTATCLR_PROG_CLR_ST_MASK)
N
N/*! @name INTSTATSET - EEPROM interrupt status set */
N#define EEPROM_INTSTATSET_PROG_SET_ST_MASK       (0x4U)
N#define EEPROM_INTSTATSET_PROG_SET_ST_SHIFT      (2U)
N#define EEPROM_INTSTATSET_PROG_SET_ST(x)         (((uint32_t)(((uint32_t)(x)) << EEPROM_INTSTATSET_PROG_SET_ST_SHIFT)) & EEPROM_INTSTATSET_PROG_SET_ST_MASK)
N
N
N/*!
N * @}
N */ /* end of group EEPROM_Register_Masks */
N
N
N/* EEPROM - Peripheral instance base addresses */
N/** Peripheral EEPROM base address */
N#define EEPROM_BASE                              (0x40014000u)
N/** Peripheral EEPROM base pointer */
N#define EEPROM                                   ((EEPROM_Type *)EEPROM_BASE)
N/** Array initializer of EEPROM peripheral base addresses */
N#define EEPROM_BASE_ADDRS                        { EEPROM_BASE }
N/** Array initializer of EEPROM peripheral base pointers */
N#define EEPROM_BASE_PTRS                         { EEPROM }
N/** Interrupt vectors for the EEPROM peripheral type */
N#define EEPROM_IRQS                              { EEPROM_IRQn }
N
N/*!
N * @}
N */ /* end of group EEPROM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- EMC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup EMC_Peripheral_Access_Layer EMC Peripheral Access Layer
N * @{
N */
N
N/** EMC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CONTROL;                           /**< Controls operation of the memory controller, offset: 0x0 */
X  volatile uint32_t CONTROL;                            
N  __I  uint32_t STATUS;                            /**< Provides EMC status information, offset: 0x4 */
X  volatile const  uint32_t STATUS;                             
N  __IO uint32_t CONFIG;                            /**< Configures operation of the memory controller, offset: 0x8 */
X  volatile uint32_t CONFIG;                             
N       uint8_t RESERVED_0[20];
N  __IO uint32_t DYNAMICCONTROL;                    /**< Controls dynamic memory operation, offset: 0x20 */
X  volatile uint32_t DYNAMICCONTROL;                     
N  __IO uint32_t DYNAMICREFRESH;                    /**< Configures dynamic memory refresh, offset: 0x24 */
X  volatile uint32_t DYNAMICREFRESH;                     
N  __IO uint32_t DYNAMICREADCONFIG;                 /**< Configures dynamic memory read strategy, offset: 0x28 */
X  volatile uint32_t DYNAMICREADCONFIG;                  
N       uint8_t RESERVED_1[4];
N  __IO uint32_t DYNAMICRP;                         /**< Precharge command period, offset: 0x30 */
X  volatile uint32_t DYNAMICRP;                          
N  __IO uint32_t DYNAMICRAS;                        /**< Active to precharge command period, offset: 0x34 */
X  volatile uint32_t DYNAMICRAS;                         
N  __IO uint32_t DYNAMICSREX;                       /**< Self-refresh exit time, offset: 0x38 */
X  volatile uint32_t DYNAMICSREX;                        
N  __IO uint32_t DYNAMICAPR;                        /**< Last-data-out to active command time, offset: 0x3C */
X  volatile uint32_t DYNAMICAPR;                         
N  __IO uint32_t DYNAMICDAL;                        /**< Data-in to active command time, offset: 0x40 */
X  volatile uint32_t DYNAMICDAL;                         
N  __IO uint32_t DYNAMICWR;                         /**< Write recovery time, offset: 0x44 */
X  volatile uint32_t DYNAMICWR;                          
N  __IO uint32_t DYNAMICRC;                         /**< Selects the active to active command period, offset: 0x48 */
X  volatile uint32_t DYNAMICRC;                          
N  __IO uint32_t DYNAMICRFC;                        /**< Selects the auto-refresh period, offset: 0x4C */
X  volatile uint32_t DYNAMICRFC;                         
N  __IO uint32_t DYNAMICXSR;                        /**< Time for exit self-refresh to active command, offset: 0x50 */
X  volatile uint32_t DYNAMICXSR;                         
N  __IO uint32_t DYNAMICRRD;                        /**< Latency for active bank A to active bank B, offset: 0x54 */
X  volatile uint32_t DYNAMICRRD;                         
N  __IO uint32_t DYNAMICMRD;                        /**< Time for load mode register to active command, offset: 0x58 */
X  volatile uint32_t DYNAMICMRD;                         
N       uint8_t RESERVED_2[36];
N  __IO uint32_t STATICEXTENDEDWAIT;                /**< Time for long static memory read and write transfers, offset: 0x80 */
X  volatile uint32_t STATICEXTENDEDWAIT;                 
N       uint8_t RESERVED_3[124];
N  struct {                                         /* offset: 0x100, array step: 0x20 */
N    __IO uint32_t DYNAMICCONFIG;                     /**< Configuration information for EMC_DYCSx, array offset: 0x100, array step: 0x20 */
X    volatile uint32_t DYNAMICCONFIG;                      
N    __IO uint32_t DYNAMICRASCAS;                     /**< RAS and CAS latencies for EMC_DYCSx, array offset: 0x104, array step: 0x20 */
X    volatile uint32_t DYNAMICRASCAS;                      
N         uint8_t RESERVED_0[24];
N  } DYNAMIC[4];
N       uint8_t RESERVED_4[128];
N  struct {                                         /* offset: 0x200, array step: 0x20 */
N    __IO uint32_t STATICCONFIG;                      /**< Configuration for EMC_CSx, array offset: 0x200, array step: 0x20 */
X    volatile uint32_t STATICCONFIG;                       
N    __IO uint32_t STATICWAITWEN;                     /**< Delay from EMC_CSx to write enable, array offset: 0x204, array step: 0x20 */
X    volatile uint32_t STATICWAITWEN;                      
N    __IO uint32_t STATICWAITOEN;                     /**< Delay from EMC_CSx or address change, whichever is later, to output enable, array offset: 0x208, array step: 0x20 */
X    volatile uint32_t STATICWAITOEN;                      
N    __IO uint32_t STATICWAITRD;                      /**< Delay from EMC_CSx to a read access, array offset: 0x20C, array step: 0x20 */
X    volatile uint32_t STATICWAITRD;                       
N    __IO uint32_t STATICWAITPAGE;                    /**< Delay for asynchronous page mode sequential accesses for EMC_CSx, array offset: 0x210, array step: 0x20 */
X    volatile uint32_t STATICWAITPAGE;                     
N    __IO uint32_t STATICWAITWR;                      /**< Delay from EMC_CSx to a write access, array offset: 0x214, array step: 0x20 */
X    volatile uint32_t STATICWAITWR;                       
N    __IO uint32_t STATICWAITTURN;                    /**< Number of bus turnaround cycles EMC_CSx, array offset: 0x218, array step: 0x20 */
X    volatile uint32_t STATICWAITTURN;                     
N         uint8_t RESERVED_0[4];
N  } STATIC[4];
N} EMC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- EMC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup EMC_Register_Masks EMC Register Masks
N * @{
N */
N
N/*! @name CONTROL - Controls operation of the memory controller */
N#define EMC_CONTROL_E_MASK                       (0x1U)
N#define EMC_CONTROL_E_SHIFT                      (0U)
N#define EMC_CONTROL_E(x)                         (((uint32_t)(((uint32_t)(x)) << EMC_CONTROL_E_SHIFT)) & EMC_CONTROL_E_MASK)
N#define EMC_CONTROL_M_MASK                       (0x2U)
N#define EMC_CONTROL_M_SHIFT                      (1U)
N#define EMC_CONTROL_M(x)                         (((uint32_t)(((uint32_t)(x)) << EMC_CONTROL_M_SHIFT)) & EMC_CONTROL_M_MASK)
N#define EMC_CONTROL_L_MASK                       (0x4U)
N#define EMC_CONTROL_L_SHIFT                      (2U)
N#define EMC_CONTROL_L(x)                         (((uint32_t)(((uint32_t)(x)) << EMC_CONTROL_L_SHIFT)) & EMC_CONTROL_L_MASK)
N
N/*! @name STATUS - Provides EMC status information */
N#define EMC_STATUS_B_MASK                        (0x1U)
N#define EMC_STATUS_B_SHIFT                       (0U)
N#define EMC_STATUS_B(x)                          (((uint32_t)(((uint32_t)(x)) << EMC_STATUS_B_SHIFT)) & EMC_STATUS_B_MASK)
N#define EMC_STATUS_S_MASK                        (0x2U)
N#define EMC_STATUS_S_SHIFT                       (1U)
N#define EMC_STATUS_S(x)                          (((uint32_t)(((uint32_t)(x)) << EMC_STATUS_S_SHIFT)) & EMC_STATUS_S_MASK)
N#define EMC_STATUS_SA_MASK                       (0x4U)
N#define EMC_STATUS_SA_SHIFT                      (2U)
N#define EMC_STATUS_SA(x)                         (((uint32_t)(((uint32_t)(x)) << EMC_STATUS_SA_SHIFT)) & EMC_STATUS_SA_MASK)
N
N/*! @name CONFIG - Configures operation of the memory controller */
N#define EMC_CONFIG_EM_MASK                       (0x1U)
N#define EMC_CONFIG_EM_SHIFT                      (0U)
N#define EMC_CONFIG_EM(x)                         (((uint32_t)(((uint32_t)(x)) << EMC_CONFIG_EM_SHIFT)) & EMC_CONFIG_EM_MASK)
N#define EMC_CONFIG_CLKR_MASK                     (0x100U)
N#define EMC_CONFIG_CLKR_SHIFT                    (8U)
N#define EMC_CONFIG_CLKR(x)                       (((uint32_t)(((uint32_t)(x)) << EMC_CONFIG_CLKR_SHIFT)) & EMC_CONFIG_CLKR_MASK)
N
N/*! @name DYNAMICCONTROL - Controls dynamic memory operation */
N#define EMC_DYNAMICCONTROL_CE_MASK               (0x1U)
N#define EMC_DYNAMICCONTROL_CE_SHIFT              (0U)
N#define EMC_DYNAMICCONTROL_CE(x)                 (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICCONTROL_CE_SHIFT)) & EMC_DYNAMICCONTROL_CE_MASK)
N#define EMC_DYNAMICCONTROL_CS_MASK               (0x2U)
N#define EMC_DYNAMICCONTROL_CS_SHIFT              (1U)
N#define EMC_DYNAMICCONTROL_CS(x)                 (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICCONTROL_CS_SHIFT)) & EMC_DYNAMICCONTROL_CS_MASK)
N#define EMC_DYNAMICCONTROL_SR_MASK               (0x4U)
N#define EMC_DYNAMICCONTROL_SR_SHIFT              (2U)
N#define EMC_DYNAMICCONTROL_SR(x)                 (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICCONTROL_SR_SHIFT)) & EMC_DYNAMICCONTROL_SR_MASK)
N#define EMC_DYNAMICCONTROL_MMC_MASK              (0x20U)
N#define EMC_DYNAMICCONTROL_MMC_SHIFT             (5U)
N#define EMC_DYNAMICCONTROL_MMC(x)                (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICCONTROL_MMC_SHIFT)) & EMC_DYNAMICCONTROL_MMC_MASK)
N#define EMC_DYNAMICCONTROL_I_MASK                (0x180U)
N#define EMC_DYNAMICCONTROL_I_SHIFT               (7U)
N#define EMC_DYNAMICCONTROL_I(x)                  (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICCONTROL_I_SHIFT)) & EMC_DYNAMICCONTROL_I_MASK)
N
N/*! @name DYNAMICREFRESH - Configures dynamic memory refresh */
N#define EMC_DYNAMICREFRESH_REFRESH_MASK          (0x7FFU)
N#define EMC_DYNAMICREFRESH_REFRESH_SHIFT         (0U)
N#define EMC_DYNAMICREFRESH_REFRESH(x)            (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICREFRESH_REFRESH_SHIFT)) & EMC_DYNAMICREFRESH_REFRESH_MASK)
N
N/*! @name DYNAMICREADCONFIG - Configures dynamic memory read strategy */
N#define EMC_DYNAMICREADCONFIG_RD_MASK            (0x3U)
N#define EMC_DYNAMICREADCONFIG_RD_SHIFT           (0U)
N#define EMC_DYNAMICREADCONFIG_RD(x)              (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICREADCONFIG_RD_SHIFT)) & EMC_DYNAMICREADCONFIG_RD_MASK)
N
N/*! @name DYNAMICRP - Precharge command period */
N#define EMC_DYNAMICRP_TRP_MASK                   (0xFU)
N#define EMC_DYNAMICRP_TRP_SHIFT                  (0U)
N#define EMC_DYNAMICRP_TRP(x)                     (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICRP_TRP_SHIFT)) & EMC_DYNAMICRP_TRP_MASK)
N
N/*! @name DYNAMICRAS - Active to precharge command period */
N#define EMC_DYNAMICRAS_TRAS_MASK                 (0xFU)
N#define EMC_DYNAMICRAS_TRAS_SHIFT                (0U)
N#define EMC_DYNAMICRAS_TRAS(x)                   (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICRAS_TRAS_SHIFT)) & EMC_DYNAMICRAS_TRAS_MASK)
N
N/*! @name DYNAMICSREX - Self-refresh exit time */
N#define EMC_DYNAMICSREX_TSREX_MASK               (0xFU)
N#define EMC_DYNAMICSREX_TSREX_SHIFT              (0U)
N#define EMC_DYNAMICSREX_TSREX(x)                 (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICSREX_TSREX_SHIFT)) & EMC_DYNAMICSREX_TSREX_MASK)
N
N/*! @name DYNAMICAPR - Last-data-out to active command time */
N#define EMC_DYNAMICAPR_TAPR_MASK                 (0xFU)
N#define EMC_DYNAMICAPR_TAPR_SHIFT                (0U)
N#define EMC_DYNAMICAPR_TAPR(x)                   (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICAPR_TAPR_SHIFT)) & EMC_DYNAMICAPR_TAPR_MASK)
N
N/*! @name DYNAMICDAL - Data-in to active command time */
N#define EMC_DYNAMICDAL_TDAL_MASK                 (0xFU)
N#define EMC_DYNAMICDAL_TDAL_SHIFT                (0U)
N#define EMC_DYNAMICDAL_TDAL(x)                   (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICDAL_TDAL_SHIFT)) & EMC_DYNAMICDAL_TDAL_MASK)
N
N/*! @name DYNAMICWR - Write recovery time */
N#define EMC_DYNAMICWR_TWR_MASK                   (0xFU)
N#define EMC_DYNAMICWR_TWR_SHIFT                  (0U)
N#define EMC_DYNAMICWR_TWR(x)                     (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICWR_TWR_SHIFT)) & EMC_DYNAMICWR_TWR_MASK)
N
N/*! @name DYNAMICRC - Selects the active to active command period */
N#define EMC_DYNAMICRC_TRC_MASK                   (0x1FU)
N#define EMC_DYNAMICRC_TRC_SHIFT                  (0U)
N#define EMC_DYNAMICRC_TRC(x)                     (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICRC_TRC_SHIFT)) & EMC_DYNAMICRC_TRC_MASK)
N
N/*! @name DYNAMICRFC - Selects the auto-refresh period */
N#define EMC_DYNAMICRFC_TRFC_MASK                 (0x1FU)
N#define EMC_DYNAMICRFC_TRFC_SHIFT                (0U)
N#define EMC_DYNAMICRFC_TRFC(x)                   (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICRFC_TRFC_SHIFT)) & EMC_DYNAMICRFC_TRFC_MASK)
N
N/*! @name DYNAMICXSR - Time for exit self-refresh to active command */
N#define EMC_DYNAMICXSR_TXSR_MASK                 (0x1FU)
N#define EMC_DYNAMICXSR_TXSR_SHIFT                (0U)
N#define EMC_DYNAMICXSR_TXSR(x)                   (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICXSR_TXSR_SHIFT)) & EMC_DYNAMICXSR_TXSR_MASK)
N
N/*! @name DYNAMICRRD - Latency for active bank A to active bank B */
N#define EMC_DYNAMICRRD_TRRD_MASK                 (0xFU)
N#define EMC_DYNAMICRRD_TRRD_SHIFT                (0U)
N#define EMC_DYNAMICRRD_TRRD(x)                   (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICRRD_TRRD_SHIFT)) & EMC_DYNAMICRRD_TRRD_MASK)
N
N/*! @name DYNAMICMRD - Time for load mode register to active command */
N#define EMC_DYNAMICMRD_TMRD_MASK                 (0xFU)
N#define EMC_DYNAMICMRD_TMRD_SHIFT                (0U)
N#define EMC_DYNAMICMRD_TMRD(x)                   (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMICMRD_TMRD_SHIFT)) & EMC_DYNAMICMRD_TMRD_MASK)
N
N/*! @name STATICEXTENDEDWAIT - Time for long static memory read and write transfers */
N#define EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_MASK (0x3FFU)
N#define EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_SHIFT (0U)
N#define EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT(x)   (((uint32_t)(((uint32_t)(x)) << EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_SHIFT)) & EMC_STATICEXTENDEDWAIT_EXTENDEDWAIT_MASK)
N
N/*! @name DYNAMIC_DYNAMICCONFIG - Configuration information for EMC_DYCSx */
N#define EMC_DYNAMIC_DYNAMICCONFIG_MD_MASK        (0x18U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_MD_SHIFT       (3U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_MD(x)          (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMIC_DYNAMICCONFIG_MD_SHIFT)) & EMC_DYNAMIC_DYNAMICCONFIG_MD_MASK)
N#define EMC_DYNAMIC_DYNAMICCONFIG_AM0_MASK       (0x1F80U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_AM0_SHIFT      (7U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_AM0(x)         (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMIC_DYNAMICCONFIG_AM0_SHIFT)) & EMC_DYNAMIC_DYNAMICCONFIG_AM0_MASK)
N#define EMC_DYNAMIC_DYNAMICCONFIG_AM1_MASK       (0x4000U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_AM1_SHIFT      (14U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_AM1(x)         (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMIC_DYNAMICCONFIG_AM1_SHIFT)) & EMC_DYNAMIC_DYNAMICCONFIG_AM1_MASK)
N#define EMC_DYNAMIC_DYNAMICCONFIG_B_MASK         (0x80000U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_B_SHIFT        (19U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_B(x)           (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMIC_DYNAMICCONFIG_B_SHIFT)) & EMC_DYNAMIC_DYNAMICCONFIG_B_MASK)
N#define EMC_DYNAMIC_DYNAMICCONFIG_P_MASK         (0x100000U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_P_SHIFT        (20U)
N#define EMC_DYNAMIC_DYNAMICCONFIG_P(x)           (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMIC_DYNAMICCONFIG_P_SHIFT)) & EMC_DYNAMIC_DYNAMICCONFIG_P_MASK)
N
N/* The count of EMC_DYNAMIC_DYNAMICCONFIG */
N#define EMC_DYNAMIC_DYNAMICCONFIG_COUNT          (4U)
N
N/*! @name DYNAMIC_DYNAMICRASCAS - RAS and CAS latencies for EMC_DYCSx */
N#define EMC_DYNAMIC_DYNAMICRASCAS_RAS_MASK       (0x3U)
N#define EMC_DYNAMIC_DYNAMICRASCAS_RAS_SHIFT      (0U)
N#define EMC_DYNAMIC_DYNAMICRASCAS_RAS(x)         (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMIC_DYNAMICRASCAS_RAS_SHIFT)) & EMC_DYNAMIC_DYNAMICRASCAS_RAS_MASK)
N#define EMC_DYNAMIC_DYNAMICRASCAS_CAS_MASK       (0x300U)
N#define EMC_DYNAMIC_DYNAMICRASCAS_CAS_SHIFT      (8U)
N#define EMC_DYNAMIC_DYNAMICRASCAS_CAS(x)         (((uint32_t)(((uint32_t)(x)) << EMC_DYNAMIC_DYNAMICRASCAS_CAS_SHIFT)) & EMC_DYNAMIC_DYNAMICRASCAS_CAS_MASK)
N
N/* The count of EMC_DYNAMIC_DYNAMICRASCAS */
N#define EMC_DYNAMIC_DYNAMICRASCAS_COUNT          (4U)
N
N/*! @name STATIC_STATICCONFIG - Configuration for EMC_CSx */
N#define EMC_STATIC_STATICCONFIG_MW_MASK          (0x3U)
N#define EMC_STATIC_STATICCONFIG_MW_SHIFT         (0U)
N#define EMC_STATIC_STATICCONFIG_MW(x)            (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICCONFIG_MW_SHIFT)) & EMC_STATIC_STATICCONFIG_MW_MASK)
N#define EMC_STATIC_STATICCONFIG_PM_MASK          (0x8U)
N#define EMC_STATIC_STATICCONFIG_PM_SHIFT         (3U)
N#define EMC_STATIC_STATICCONFIG_PM(x)            (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICCONFIG_PM_SHIFT)) & EMC_STATIC_STATICCONFIG_PM_MASK)
N#define EMC_STATIC_STATICCONFIG_PC_MASK          (0x40U)
N#define EMC_STATIC_STATICCONFIG_PC_SHIFT         (6U)
N#define EMC_STATIC_STATICCONFIG_PC(x)            (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICCONFIG_PC_SHIFT)) & EMC_STATIC_STATICCONFIG_PC_MASK)
N#define EMC_STATIC_STATICCONFIG_PB_MASK          (0x80U)
N#define EMC_STATIC_STATICCONFIG_PB_SHIFT         (7U)
N#define EMC_STATIC_STATICCONFIG_PB(x)            (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICCONFIG_PB_SHIFT)) & EMC_STATIC_STATICCONFIG_PB_MASK)
N#define EMC_STATIC_STATICCONFIG_EW_MASK          (0x100U)
N#define EMC_STATIC_STATICCONFIG_EW_SHIFT         (8U)
N#define EMC_STATIC_STATICCONFIG_EW(x)            (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICCONFIG_EW_SHIFT)) & EMC_STATIC_STATICCONFIG_EW_MASK)
N#define EMC_STATIC_STATICCONFIG_B_MASK           (0x80000U)
N#define EMC_STATIC_STATICCONFIG_B_SHIFT          (19U)
N#define EMC_STATIC_STATICCONFIG_B(x)             (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICCONFIG_B_SHIFT)) & EMC_STATIC_STATICCONFIG_B_MASK)
N#define EMC_STATIC_STATICCONFIG_P_MASK           (0x100000U)
N#define EMC_STATIC_STATICCONFIG_P_SHIFT          (20U)
N#define EMC_STATIC_STATICCONFIG_P(x)             (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICCONFIG_P_SHIFT)) & EMC_STATIC_STATICCONFIG_P_MASK)
N
N/* The count of EMC_STATIC_STATICCONFIG */
N#define EMC_STATIC_STATICCONFIG_COUNT            (4U)
N
N/*! @name STATIC_STATICWAITWEN - Delay from EMC_CSx to write enable */
N#define EMC_STATIC_STATICWAITWEN_WAITWEN_MASK    (0xFU)
N#define EMC_STATIC_STATICWAITWEN_WAITWEN_SHIFT   (0U)
N#define EMC_STATIC_STATICWAITWEN_WAITWEN(x)      (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICWAITWEN_WAITWEN_SHIFT)) & EMC_STATIC_STATICWAITWEN_WAITWEN_MASK)
N
N/* The count of EMC_STATIC_STATICWAITWEN */
N#define EMC_STATIC_STATICWAITWEN_COUNT           (4U)
N
N/*! @name STATIC_STATICWAITOEN - Delay from EMC_CSx or address change, whichever is later, to output enable */
N#define EMC_STATIC_STATICWAITOEN_WAITOEN_MASK    (0xFU)
N#define EMC_STATIC_STATICWAITOEN_WAITOEN_SHIFT   (0U)
N#define EMC_STATIC_STATICWAITOEN_WAITOEN(x)      (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICWAITOEN_WAITOEN_SHIFT)) & EMC_STATIC_STATICWAITOEN_WAITOEN_MASK)
N
N/* The count of EMC_STATIC_STATICWAITOEN */
N#define EMC_STATIC_STATICWAITOEN_COUNT           (4U)
N
N/*! @name STATIC_STATICWAITRD - Delay from EMC_CSx to a read access */
N#define EMC_STATIC_STATICWAITRD_WAITRD_MASK      (0x1FU)
N#define EMC_STATIC_STATICWAITRD_WAITRD_SHIFT     (0U)
N#define EMC_STATIC_STATICWAITRD_WAITRD(x)        (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICWAITRD_WAITRD_SHIFT)) & EMC_STATIC_STATICWAITRD_WAITRD_MASK)
N
N/* The count of EMC_STATIC_STATICWAITRD */
N#define EMC_STATIC_STATICWAITRD_COUNT            (4U)
N
N/*! @name STATIC_STATICWAITPAGE - Delay for asynchronous page mode sequential accesses for EMC_CSx */
N#define EMC_STATIC_STATICWAITPAGE_WAITPAGE_MASK  (0x1FU)
N#define EMC_STATIC_STATICWAITPAGE_WAITPAGE_SHIFT (0U)
N#define EMC_STATIC_STATICWAITPAGE_WAITPAGE(x)    (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICWAITPAGE_WAITPAGE_SHIFT)) & EMC_STATIC_STATICWAITPAGE_WAITPAGE_MASK)
N
N/* The count of EMC_STATIC_STATICWAITPAGE */
N#define EMC_STATIC_STATICWAITPAGE_COUNT          (4U)
N
N/*! @name STATIC_STATICWAITWR - Delay from EMC_CSx to a write access */
N#define EMC_STATIC_STATICWAITWR_WAITWR_MASK      (0x1FU)
N#define EMC_STATIC_STATICWAITWR_WAITWR_SHIFT     (0U)
N#define EMC_STATIC_STATICWAITWR_WAITWR(x)        (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICWAITWR_WAITWR_SHIFT)) & EMC_STATIC_STATICWAITWR_WAITWR_MASK)
N
N/* The count of EMC_STATIC_STATICWAITWR */
N#define EMC_STATIC_STATICWAITWR_COUNT            (4U)
N
N/*! @name STATIC_STATICWAITTURN - Number of bus turnaround cycles EMC_CSx */
N#define EMC_STATIC_STATICWAITTURN_WAITTURN_MASK  (0xFU)
N#define EMC_STATIC_STATICWAITTURN_WAITTURN_SHIFT (0U)
N#define EMC_STATIC_STATICWAITTURN_WAITTURN(x)    (((uint32_t)(((uint32_t)(x)) << EMC_STATIC_STATICWAITTURN_WAITTURN_SHIFT)) & EMC_STATIC_STATICWAITTURN_WAITTURN_MASK)
N
N/* The count of EMC_STATIC_STATICWAITTURN */
N#define EMC_STATIC_STATICWAITTURN_COUNT          (4U)
N
N
N/*!
N * @}
N */ /* end of group EMC_Register_Masks */
N
N
N/* EMC - Peripheral instance base addresses */
N/** Peripheral EMC base address */
N#define EMC_BASE                                 (0x40081000u)
N/** Peripheral EMC base pointer */
N#define EMC                                      ((EMC_Type *)EMC_BASE)
N/** Array initializer of EMC peripheral base addresses */
N#define EMC_BASE_ADDRS                           { EMC_BASE }
N/** Array initializer of EMC peripheral base pointers */
N#define EMC_BASE_PTRS                            { EMC }
N
N/*!
N * @}
N */ /* end of group EMC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- ENET Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ENET_Peripheral_Access_Layer ENET Peripheral Access Layer
N * @{
N */
N
N/** ENET - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t MAC_CONFIG;                        /**< MAC configuration register, offset: 0x0 */
X  volatile uint32_t MAC_CONFIG;                         
N  __IO uint32_t MAC_EXT_CONFIG;                    /**< , offset: 0x4 */
X  volatile uint32_t MAC_EXT_CONFIG;                     
N  __IO uint32_t MAC_FRAME_FILTER;                  /**< MAC frame filter register, offset: 0x8 */
X  volatile uint32_t MAC_FRAME_FILTER;                   
N  __IO uint32_t MAC_WD_TIMEROUT;                   /**< MAC watchdog Timeout register, offset: 0xC */
X  volatile uint32_t MAC_WD_TIMEROUT;                    
N       uint8_t RESERVED_0[64];
N  __IO uint32_t MAC_VLAN_TAG;                      /**< MAC vlan tag register, offset: 0x50 */
X  volatile uint32_t MAC_VLAN_TAG;                       
N       uint8_t RESERVED_1[28];
N  __IO uint32_t MAC_TX_FLOW_CTRL_Q[2];             /**< Transmit flow control register, array offset: 0x70, array step: 0x4 */
X  volatile uint32_t MAC_TX_FLOW_CTRL_Q[2];              
N       uint8_t RESERVED_2[24];
N  __IO uint32_t MAC_RX_FLOW_CTRL;                  /**< Receive flow control register, offset: 0x90 */
X  volatile uint32_t MAC_RX_FLOW_CTRL;                   
N       uint8_t RESERVED_3[4];
N  __IO uint32_t MAC_TXQ_PRIO_MAP;                  /**< , offset: 0x98 */
X  volatile uint32_t MAC_TXQ_PRIO_MAP;                   
N       uint8_t RESERVED_4[4];
N  __IO uint32_t MAC_RXQ_CTRL[3];                   /**< Receive Queue Control 0 register 0x0000, array offset: 0xA0, array step: 0x4 */
X  volatile uint32_t MAC_RXQ_CTRL[3];                    
N       uint8_t RESERVED_5[4];
N  __I  uint32_t MAC_INTR_STAT;                     /**< Interrupt status register 0x0000, offset: 0xB0 */
X  volatile const  uint32_t MAC_INTR_STAT;                      
N  __IO uint32_t MAC_INTR_EN;                       /**< Interrupt enable register 0x0000, offset: 0xB4 */
X  volatile uint32_t MAC_INTR_EN;                        
N  __I  uint32_t MAC_RXTX_STAT;                     /**< Receive Transmit Status register, offset: 0xB8 */
X  volatile const  uint32_t MAC_RXTX_STAT;                      
N       uint8_t RESERVED_6[4];
N  __IO uint32_t MAC_PMT_CRTL_STAT;                 /**< , offset: 0xC0 */
X  volatile uint32_t MAC_PMT_CRTL_STAT;                  
N  __IO uint32_t MAC_RWAKE_FRFLT;                   /**< Remote wake-up frame filter, offset: 0xC4 */
X  volatile uint32_t MAC_RWAKE_FRFLT;                    
N       uint8_t RESERVED_7[8];
N  __IO uint32_t MAC_LPI_CTRL_STAT;                 /**< LPI Control and Status Register, offset: 0xD0 */
X  volatile uint32_t MAC_LPI_CTRL_STAT;                  
N  __IO uint32_t MAC_LPI_TIMER_CTRL;                /**< LPI Timers Control register, offset: 0xD4 */
X  volatile uint32_t MAC_LPI_TIMER_CTRL;                 
N  __IO uint32_t MAC_LPI_ENTR_TIMR;                 /**< LPI entry Timer register, offset: 0xD8 */
X  volatile uint32_t MAC_LPI_ENTR_TIMR;                  
N  __IO uint32_t MAC_1US_TIC_COUNTR;                /**< , offset: 0xDC */
X  volatile uint32_t MAC_1US_TIC_COUNTR;                 
N       uint8_t RESERVED_8[48];
N  __IO uint32_t MAC_VERSION;                       /**< MAC version register, offset: 0x110 */
X  volatile uint32_t MAC_VERSION;                        
N  __I  uint32_t MAC_DBG;                           /**< MAC debug register, offset: 0x114 */
X  volatile const  uint32_t MAC_DBG;                            
N       uint8_t RESERVED_9[4];
N  __IO uint32_t MAC_HW_FEAT[3];                    /**< MAC hardware feature register 0x0201, array offset: 0x11C, array step: 0x4 */
X  volatile uint32_t MAC_HW_FEAT[3];                     
N       uint8_t RESERVED_10[216];
N  __IO uint32_t MAC_MDIO_ADDR;                     /**< MIDO address Register, offset: 0x200 */
X  volatile uint32_t MAC_MDIO_ADDR;                      
N  __IO uint32_t MAC_MDIO_DATA;                     /**< MDIO Data register, offset: 0x204 */
X  volatile uint32_t MAC_MDIO_DATA;                      
N       uint8_t RESERVED_11[248];
N  __IO uint32_t MAC_ADDR_HIGH;                     /**< MAC address0 high register, offset: 0x300 */
X  volatile uint32_t MAC_ADDR_HIGH;                      
N  __IO uint32_t MAC_ADDR_LOW;                      /**< MAC address0 low register, offset: 0x304 */
X  volatile uint32_t MAC_ADDR_LOW;                       
N       uint8_t RESERVED_12[2040];
N  __IO uint32_t MAC_TIMESTAMP_CTRL;                /**< Time stamp control register, offset: 0xB00 */
X  volatile uint32_t MAC_TIMESTAMP_CTRL;                 
N  __IO uint32_t MAC_SUB_SCND_INCR;                 /**< Sub-second increment register, offset: 0xB04 */
X  volatile uint32_t MAC_SUB_SCND_INCR;                  
N  __I  uint32_t MAC_SYS_TIME_SCND;                 /**< System time seconds register, offset: 0xB08 */
X  volatile const  uint32_t MAC_SYS_TIME_SCND;                  
N  __I  uint32_t MAC_SYS_TIME_NSCND;                /**< System time nanoseconds register, offset: 0xB0C */
X  volatile const  uint32_t MAC_SYS_TIME_NSCND;                 
N  __IO uint32_t MAC_SYS_TIME_SCND_UPD;             /**< , offset: 0xB10 */
X  volatile uint32_t MAC_SYS_TIME_SCND_UPD;              
N  __IO uint32_t MAC_SYS_TIME_NSCND_UPD;            /**< , offset: 0xB14 */
X  volatile uint32_t MAC_SYS_TIME_NSCND_UPD;             
N  __IO uint32_t MAC_SYS_TIMESTMP_ADDEND;           /**< Time stamp addend register, offset: 0xB18 */
X  volatile uint32_t MAC_SYS_TIMESTMP_ADDEND;            
N  __IO uint32_t MAC_SYS_TIME_HWORD_SCND;           /**< , offset: 0xB1C */
X  volatile uint32_t MAC_SYS_TIME_HWORD_SCND;            
N  __I  uint32_t MAC_SYS_TIMESTMP_STAT;             /**< Time stamp status register, offset: 0xB20 */
X  volatile const  uint32_t MAC_SYS_TIMESTMP_STAT;              
N       uint8_t RESERVED_13[220];
N  __IO uint32_t MTL_OP_MODE;                       /**< MTL Operation Mode Register, offset: 0xC00 */
X  volatile uint32_t MTL_OP_MODE;                        
N       uint8_t RESERVED_14[28];
N  __I  uint32_t MTL_INTR_STAT;                     /**< MTL Interrupt Status register, offset: 0xC20 */
X  volatile const  uint32_t MTL_INTR_STAT;                      
N       uint8_t RESERVED_15[12];
N  __IO uint32_t MTL_RXQ_DMA_MAP;                   /**< MTL Receive Queue and DMA Channel Mapping register, offset: 0xC30 */
X  volatile uint32_t MTL_RXQ_DMA_MAP;                    
N       uint8_t RESERVED_16[204];
N  struct {                                         /* offset: 0xD00, array step: 0x40 */
N    __IO uint32_t MTL_TXQX_OP_MODE;                  /**< MTL TxQx Operation Mode register, array offset: 0xD00, array step: 0x40 */
X    volatile uint32_t MTL_TXQX_OP_MODE;                   
N    __I  uint32_t MTL_TXQX_UNDRFLW;                  /**< MTL TxQx Underflow register, array offset: 0xD04, array step: 0x40 */
X    volatile const  uint32_t MTL_TXQX_UNDRFLW;                   
N    __I  uint32_t MTL_TXQX_DBG;                      /**< MTL TxQx Debug register, array offset: 0xD08, array step: 0x40 */
X    volatile const  uint32_t MTL_TXQX_DBG;                       
N         uint8_t RESERVED_0[8];
N    __IO uint32_t MTL_TXQX_ETS_STAT;                 /**< MTL TxQx ETS Status register, array offset: 0xD14, array step: 0x40 */
X    volatile uint32_t MTL_TXQX_ETS_STAT;                  
N    __IO uint32_t MTL_TXQX_QNTM_WGHT;                /**< , array offset: 0xD18, array step: 0x40 */
X    volatile uint32_t MTL_TXQX_QNTM_WGHT;                 
N         uint8_t RESERVED_1[16];
N    __IO uint32_t MTL_TXQX_INTCTRL_STAT;             /**< , array offset: 0xD2C, array step: 0x40 */
X    volatile uint32_t MTL_TXQX_INTCTRL_STAT;              
N    __IO uint32_t MTL_RXQX_OP_MODE;                  /**< MTL RxQx Operation Mode register, array offset: 0xD30, array step: 0x40 */
X    volatile uint32_t MTL_RXQX_OP_MODE;                   
N    __IO uint32_t MTL_RXQX_MISSPKT_OVRFLW_CNT;       /**< MTL RxQx Missed Packet Overflow Counter register, array offset: 0xD34, array step: 0x40 */
X    volatile uint32_t MTL_RXQX_MISSPKT_OVRFLW_CNT;        
N    __IO uint32_t MTL_RXQX_DBG;                      /**< MTL RxQx Debug register, array offset: 0xD38, array step: 0x40 */
X    volatile uint32_t MTL_RXQX_DBG;                       
N    __IO uint32_t MTL_RXQX_CTRL;                     /**< MTL RxQx Control register, array offset: 0xD3C, array step: 0x40 */
X    volatile uint32_t MTL_RXQX_CTRL;                      
N  } MTL_QUEUE[2];
N       uint8_t RESERVED_17[640];
N  __IO uint32_t DMA_MODE;                          /**< DMA mode register, offset: 0x1000 */
X  volatile uint32_t DMA_MODE;                           
N  __IO uint32_t DMA_SYSBUS_MODE;                   /**< DMA System Bus mode, offset: 0x1004 */
X  volatile uint32_t DMA_SYSBUS_MODE;                    
N  __IO uint32_t DMA_INTR_STAT;                     /**< DMA Interrupt status, offset: 0x1008 */
X  volatile uint32_t DMA_INTR_STAT;                      
N  __IO uint32_t DMA_DBG_STAT;                      /**< DMA Debug Status, offset: 0x100C */
X  volatile uint32_t DMA_DBG_STAT;                       
N       uint8_t RESERVED_18[240];
N  struct {                                         /* offset: 0x1100, array step: 0x80 */
N    __IO uint32_t DMA_CHX_CTRL;                      /**< DMA Channelx Control, array offset: 0x1100, array step: 0x80 */
X    volatile uint32_t DMA_CHX_CTRL;                       
N    __IO uint32_t DMA_CHX_TX_CTRL;                   /**< DMA Channelx Transmit Control, array offset: 0x1104, array step: 0x80 */
X    volatile uint32_t DMA_CHX_TX_CTRL;                    
N    __IO uint32_t DMA_CHX_RX_CTRL;                   /**< DMA Channelx Receive Control, array offset: 0x1108, array step: 0x80 */
X    volatile uint32_t DMA_CHX_RX_CTRL;                    
N         uint8_t RESERVED_0[8];
N    __IO uint32_t DMA_CHX_TXDESC_LIST_ADDR;          /**< , array offset: 0x1114, array step: 0x80 */
X    volatile uint32_t DMA_CHX_TXDESC_LIST_ADDR;           
N         uint8_t RESERVED_1[4];
N    __IO uint32_t DMA_CHX_RXDESC_LIST_ADDR;          /**< , array offset: 0x111C, array step: 0x80 */
X    volatile uint32_t DMA_CHX_RXDESC_LIST_ADDR;           
N    __IO uint32_t DMA_CHX_TXDESC_TAIL_PTR;           /**< , array offset: 0x1120, array step: 0x80 */
X    volatile uint32_t DMA_CHX_TXDESC_TAIL_PTR;            
N         uint8_t RESERVED_2[4];
N    __IO uint32_t DMA_CHX_RXDESC_TAIL_PTR;           /**< , array offset: 0x1128, array step: 0x80 */
X    volatile uint32_t DMA_CHX_RXDESC_TAIL_PTR;            
N    __IO uint32_t DMA_CHX_TXDESC_RING_LENGTH;        /**< , array offset: 0x112C, array step: 0x80 */
X    volatile uint32_t DMA_CHX_TXDESC_RING_LENGTH;         
N    __IO uint32_t DMA_CHX_RXDESC_RING_LENGTH;        /**< Channelx Rx descriptor Ring Length, array offset: 0x1130, array step: 0x80 */
X    volatile uint32_t DMA_CHX_RXDESC_RING_LENGTH;         
N    __IO uint32_t DMA_CHX_INT_EN;                    /**< Channelx Interrupt Enable, array offset: 0x1134, array step: 0x80 */
X    volatile uint32_t DMA_CHX_INT_EN;                     
N    __IO uint32_t DMA_CHX_RX_INT_WDTIMER;            /**< Receive Interrupt Watchdog Timer, array offset: 0x1138, array step: 0x80 */
X    volatile uint32_t DMA_CHX_RX_INT_WDTIMER;             
N    __IO uint32_t DMA_CHX_SLOT_FUNC_CTRL_STAT;       /**< Slot Function Control and Status, array offset: 0x113C, array step: 0x80 */
X    volatile uint32_t DMA_CHX_SLOT_FUNC_CTRL_STAT;        
N         uint8_t RESERVED_3[4];
N    __I  uint32_t DMA_CHX_CUR_HST_TXDESC;            /**< Channelx Current Host Transmit descriptor, array offset: 0x1144, array step: 0x80 */
X    volatile const  uint32_t DMA_CHX_CUR_HST_TXDESC;             
N         uint8_t RESERVED_4[4];
N    __I  uint32_t DMA_CHX_CUR_HST_RXDESC;            /**< , array offset: 0x114C, array step: 0x80 */
X    volatile const  uint32_t DMA_CHX_CUR_HST_RXDESC;             
N         uint8_t RESERVED_5[4];
N    __I  uint32_t DMA_CHX_CUR_HST_TXBUF;             /**< , array offset: 0x1154, array step: 0x80 */
X    volatile const  uint32_t DMA_CHX_CUR_HST_TXBUF;              
N         uint8_t RESERVED_6[4];
N    __I  uint32_t DMA_CHX_CUR_HST_RXBUF;             /**< Channelx Current Application Receive Buffer Address, array offset: 0x115C, array step: 0x80 */
X    volatile const  uint32_t DMA_CHX_CUR_HST_RXBUF;              
N    __IO uint32_t DMA_CHX_STAT;                      /**< Channelx DMA status register, array offset: 0x1160, array step: 0x80 */
X    volatile uint32_t DMA_CHX_STAT;                       
N         uint8_t RESERVED_7[28];
N  } DMA_CH[2];
N} ENET_Type;
N
N/* ----------------------------------------------------------------------------
N   -- ENET Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ENET_Register_Masks ENET Register Masks
N * @{
N */
N
N/*! @name MAC_CONFIG - MAC configuration register */
N#define ENET_MAC_CONFIG_RE_MASK                  (0x1U)
N#define ENET_MAC_CONFIG_RE_SHIFT                 (0U)
N#define ENET_MAC_CONFIG_RE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_RE_SHIFT)) & ENET_MAC_CONFIG_RE_MASK)
N#define ENET_MAC_CONFIG_TE_MASK                  (0x2U)
N#define ENET_MAC_CONFIG_TE_SHIFT                 (1U)
N#define ENET_MAC_CONFIG_TE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_TE_SHIFT)) & ENET_MAC_CONFIG_TE_MASK)
N#define ENET_MAC_CONFIG_PRELEN_MASK              (0xCU)
N#define ENET_MAC_CONFIG_PRELEN_SHIFT             (2U)
N#define ENET_MAC_CONFIG_PRELEN(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_PRELEN_SHIFT)) & ENET_MAC_CONFIG_PRELEN_MASK)
N#define ENET_MAC_CONFIG_DC_MASK                  (0x10U)
N#define ENET_MAC_CONFIG_DC_SHIFT                 (4U)
N#define ENET_MAC_CONFIG_DC(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_DC_SHIFT)) & ENET_MAC_CONFIG_DC_MASK)
N#define ENET_MAC_CONFIG_BL_MASK                  (0x60U)
N#define ENET_MAC_CONFIG_BL_SHIFT                 (5U)
N#define ENET_MAC_CONFIG_BL(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_BL_SHIFT)) & ENET_MAC_CONFIG_BL_MASK)
N#define ENET_MAC_CONFIG_DR_MASK                  (0x100U)
N#define ENET_MAC_CONFIG_DR_SHIFT                 (8U)
N#define ENET_MAC_CONFIG_DR(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_DR_SHIFT)) & ENET_MAC_CONFIG_DR_MASK)
N#define ENET_MAC_CONFIG_DCRS_MASK                (0x200U)
N#define ENET_MAC_CONFIG_DCRS_SHIFT               (9U)
N#define ENET_MAC_CONFIG_DCRS(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_DCRS_SHIFT)) & ENET_MAC_CONFIG_DCRS_MASK)
N#define ENET_MAC_CONFIG_DO_MASK                  (0x400U)
N#define ENET_MAC_CONFIG_DO_SHIFT                 (10U)
N#define ENET_MAC_CONFIG_DO(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_DO_SHIFT)) & ENET_MAC_CONFIG_DO_MASK)
N#define ENET_MAC_CONFIG_ECRSFD_MASK              (0x800U)
N#define ENET_MAC_CONFIG_ECRSFD_SHIFT             (11U)
N#define ENET_MAC_CONFIG_ECRSFD(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_ECRSFD_SHIFT)) & ENET_MAC_CONFIG_ECRSFD_MASK)
N#define ENET_MAC_CONFIG_LM_MASK                  (0x1000U)
N#define ENET_MAC_CONFIG_LM_SHIFT                 (12U)
N#define ENET_MAC_CONFIG_LM(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_LM_SHIFT)) & ENET_MAC_CONFIG_LM_MASK)
N#define ENET_MAC_CONFIG_DM_MASK                  (0x2000U)
N#define ENET_MAC_CONFIG_DM_SHIFT                 (13U)
N#define ENET_MAC_CONFIG_DM(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_DM_SHIFT)) & ENET_MAC_CONFIG_DM_MASK)
N#define ENET_MAC_CONFIG_FES_MASK                 (0x4000U)
N#define ENET_MAC_CONFIG_FES_SHIFT                (14U)
N#define ENET_MAC_CONFIG_FES(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_FES_SHIFT)) & ENET_MAC_CONFIG_FES_MASK)
N#define ENET_MAC_CONFIG_PS_MASK                  (0x8000U)
N#define ENET_MAC_CONFIG_PS_SHIFT                 (15U)
N#define ENET_MAC_CONFIG_PS(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_PS_SHIFT)) & ENET_MAC_CONFIG_PS_MASK)
N#define ENET_MAC_CONFIG_JE_MASK                  (0x10000U)
N#define ENET_MAC_CONFIG_JE_SHIFT                 (16U)
N#define ENET_MAC_CONFIG_JE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_JE_SHIFT)) & ENET_MAC_CONFIG_JE_MASK)
N#define ENET_MAC_CONFIG_JD_MASK                  (0x20000U)
N#define ENET_MAC_CONFIG_JD_SHIFT                 (17U)
N#define ENET_MAC_CONFIG_JD(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_JD_SHIFT)) & ENET_MAC_CONFIG_JD_MASK)
N#define ENET_MAC_CONFIG_BE_MASK                  (0x40000U)
N#define ENET_MAC_CONFIG_BE_SHIFT                 (18U)
N#define ENET_MAC_CONFIG_BE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_BE_SHIFT)) & ENET_MAC_CONFIG_BE_MASK)
N#define ENET_MAC_CONFIG_WD_MASK                  (0x80000U)
N#define ENET_MAC_CONFIG_WD_SHIFT                 (19U)
N#define ENET_MAC_CONFIG_WD(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_WD_SHIFT)) & ENET_MAC_CONFIG_WD_MASK)
N#define ENET_MAC_CONFIG_ACS_MASK                 (0x100000U)
N#define ENET_MAC_CONFIG_ACS_SHIFT                (20U)
N#define ENET_MAC_CONFIG_ACS(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_ACS_SHIFT)) & ENET_MAC_CONFIG_ACS_MASK)
N#define ENET_MAC_CONFIG_CST_MASK                 (0x200000U)
N#define ENET_MAC_CONFIG_CST_SHIFT                (21U)
N#define ENET_MAC_CONFIG_CST(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_CST_SHIFT)) & ENET_MAC_CONFIG_CST_MASK)
N#define ENET_MAC_CONFIG_S2KP_MASK                (0x400000U)
N#define ENET_MAC_CONFIG_S2KP_SHIFT               (22U)
N#define ENET_MAC_CONFIG_S2KP(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_S2KP_SHIFT)) & ENET_MAC_CONFIG_S2KP_MASK)
N#define ENET_MAC_CONFIG_GPSLCE_MASK              (0x800000U)
N#define ENET_MAC_CONFIG_GPSLCE_SHIFT             (23U)
N#define ENET_MAC_CONFIG_GPSLCE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_GPSLCE_SHIFT)) & ENET_MAC_CONFIG_GPSLCE_MASK)
N#define ENET_MAC_CONFIG_IPG_MASK                 (0x7000000U)
N#define ENET_MAC_CONFIG_IPG_SHIFT                (24U)
N#define ENET_MAC_CONFIG_IPG(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_IPG_SHIFT)) & ENET_MAC_CONFIG_IPG_MASK)
N#define ENET_MAC_CONFIG_IPC_MASK                 (0x8000000U)
N#define ENET_MAC_CONFIG_IPC_SHIFT                (27U)
N#define ENET_MAC_CONFIG_IPC(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_CONFIG_IPC_SHIFT)) & ENET_MAC_CONFIG_IPC_MASK)
N
N/*! @name MAC_EXT_CONFIG -  */
N#define ENET_MAC_EXT_CONFIG_GPSL_MASK            (0x3FFFU)
N#define ENET_MAC_EXT_CONFIG_GPSL_SHIFT           (0U)
N#define ENET_MAC_EXT_CONFIG_GPSL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_EXT_CONFIG_GPSL_SHIFT)) & ENET_MAC_EXT_CONFIG_GPSL_MASK)
N#define ENET_MAC_EXT_CONFIG_DCRCC_MASK           (0x10000U)
N#define ENET_MAC_EXT_CONFIG_DCRCC_SHIFT          (16U)
N#define ENET_MAC_EXT_CONFIG_DCRCC(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_EXT_CONFIG_DCRCC_SHIFT)) & ENET_MAC_EXT_CONFIG_DCRCC_MASK)
N#define ENET_MAC_EXT_CONFIG_SPEN_MASK            (0x20000U)
N#define ENET_MAC_EXT_CONFIG_SPEN_SHIFT           (17U)
N#define ENET_MAC_EXT_CONFIG_SPEN(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_EXT_CONFIG_SPEN_SHIFT)) & ENET_MAC_EXT_CONFIG_SPEN_MASK)
N#define ENET_MAC_EXT_CONFIG_USP_MASK             (0x40000U)
N#define ENET_MAC_EXT_CONFIG_USP_SHIFT            (18U)
N#define ENET_MAC_EXT_CONFIG_USP(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_EXT_CONFIG_USP_SHIFT)) & ENET_MAC_EXT_CONFIG_USP_MASK)
N
N/*! @name MAC_FRAME_FILTER - MAC frame filter register */
N#define ENET_MAC_FRAME_FILTER_PR_MASK            (0x1U)
N#define ENET_MAC_FRAME_FILTER_PR_SHIFT           (0U)
N#define ENET_MAC_FRAME_FILTER_PR(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_PR_SHIFT)) & ENET_MAC_FRAME_FILTER_PR_MASK)
N#define ENET_MAC_FRAME_FILTER_DAIF_MASK          (0x8U)
N#define ENET_MAC_FRAME_FILTER_DAIF_SHIFT         (3U)
N#define ENET_MAC_FRAME_FILTER_DAIF(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_DAIF_SHIFT)) & ENET_MAC_FRAME_FILTER_DAIF_MASK)
N#define ENET_MAC_FRAME_FILTER_PM_MASK            (0x10U)
N#define ENET_MAC_FRAME_FILTER_PM_SHIFT           (4U)
N#define ENET_MAC_FRAME_FILTER_PM(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_PM_SHIFT)) & ENET_MAC_FRAME_FILTER_PM_MASK)
N#define ENET_MAC_FRAME_FILTER_DBF_MASK           (0x20U)
N#define ENET_MAC_FRAME_FILTER_DBF_SHIFT          (5U)
N#define ENET_MAC_FRAME_FILTER_DBF(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_DBF_SHIFT)) & ENET_MAC_FRAME_FILTER_DBF_MASK)
N#define ENET_MAC_FRAME_FILTER_PCF_MASK           (0xC0U)
N#define ENET_MAC_FRAME_FILTER_PCF_SHIFT          (6U)
N#define ENET_MAC_FRAME_FILTER_PCF(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_PCF_SHIFT)) & ENET_MAC_FRAME_FILTER_PCF_MASK)
N#define ENET_MAC_FRAME_FILTER_SAIF_MASK          (0x100U)
N#define ENET_MAC_FRAME_FILTER_SAIF_SHIFT         (8U)
N#define ENET_MAC_FRAME_FILTER_SAIF(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_SAIF_SHIFT)) & ENET_MAC_FRAME_FILTER_SAIF_MASK)
N#define ENET_MAC_FRAME_FILTER_SAF_MASK           (0x200U)
N#define ENET_MAC_FRAME_FILTER_SAF_SHIFT          (9U)
N#define ENET_MAC_FRAME_FILTER_SAF(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_SAF_SHIFT)) & ENET_MAC_FRAME_FILTER_SAF_MASK)
N#define ENET_MAC_FRAME_FILTER_RA_MASK            (0x80000000U)
N#define ENET_MAC_FRAME_FILTER_RA_SHIFT           (31U)
N#define ENET_MAC_FRAME_FILTER_RA(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_FRAME_FILTER_RA_SHIFT)) & ENET_MAC_FRAME_FILTER_RA_MASK)
N
N/*! @name MAC_WD_TIMEROUT - MAC watchdog Timeout register */
N#define ENET_MAC_WD_TIMEROUT_WTO_MASK            (0xFU)
N#define ENET_MAC_WD_TIMEROUT_WTO_SHIFT           (0U)
N#define ENET_MAC_WD_TIMEROUT_WTO(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_WD_TIMEROUT_WTO_SHIFT)) & ENET_MAC_WD_TIMEROUT_WTO_MASK)
N#define ENET_MAC_WD_TIMEROUT_PWE_MASK            (0x100U)
N#define ENET_MAC_WD_TIMEROUT_PWE_SHIFT           (8U)
N#define ENET_MAC_WD_TIMEROUT_PWE(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_WD_TIMEROUT_PWE_SHIFT)) & ENET_MAC_WD_TIMEROUT_PWE_MASK)
N
N/*! @name MAC_VLAN_TAG - MAC vlan tag register */
N#define ENET_MAC_VLAN_TAG_VL_MASK                (0xFFFFU)
N#define ENET_MAC_VLAN_TAG_VL_SHIFT               (0U)
N#define ENET_MAC_VLAN_TAG_VL(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_VL_SHIFT)) & ENET_MAC_VLAN_TAG_VL_MASK)
N#define ENET_MAC_VLAN_TAG_ETV_MASK               (0x10000U)
N#define ENET_MAC_VLAN_TAG_ETV_SHIFT              (16U)
N#define ENET_MAC_VLAN_TAG_ETV(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_ETV_SHIFT)) & ENET_MAC_VLAN_TAG_ETV_MASK)
N#define ENET_MAC_VLAN_TAG_VTIM_MASK              (0x20000U)
N#define ENET_MAC_VLAN_TAG_VTIM_SHIFT             (17U)
N#define ENET_MAC_VLAN_TAG_VTIM(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_VTIM_SHIFT)) & ENET_MAC_VLAN_TAG_VTIM_MASK)
N#define ENET_MAC_VLAN_TAG_ESVL_MASK              (0x40000U)
N#define ENET_MAC_VLAN_TAG_ESVL_SHIFT             (18U)
N#define ENET_MAC_VLAN_TAG_ESVL(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_ESVL_SHIFT)) & ENET_MAC_VLAN_TAG_ESVL_MASK)
N#define ENET_MAC_VLAN_TAG_ERSVLM_MASK            (0x80000U)
N#define ENET_MAC_VLAN_TAG_ERSVLM_SHIFT           (19U)
N#define ENET_MAC_VLAN_TAG_ERSVLM(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_ERSVLM_SHIFT)) & ENET_MAC_VLAN_TAG_ERSVLM_MASK)
N#define ENET_MAC_VLAN_TAG_DOVLTC_MASK            (0x100000U)
N#define ENET_MAC_VLAN_TAG_DOVLTC_SHIFT           (20U)
N#define ENET_MAC_VLAN_TAG_DOVLTC(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_DOVLTC_SHIFT)) & ENET_MAC_VLAN_TAG_DOVLTC_MASK)
N#define ENET_MAC_VLAN_TAG_EVLS_MASK              (0x600000U)
N#define ENET_MAC_VLAN_TAG_EVLS_SHIFT             (21U)
N#define ENET_MAC_VLAN_TAG_EVLS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_EVLS_SHIFT)) & ENET_MAC_VLAN_TAG_EVLS_MASK)
N#define ENET_MAC_VLAN_TAG_EVLRXS_MASK            (0x1000000U)
N#define ENET_MAC_VLAN_TAG_EVLRXS_SHIFT           (24U)
N#define ENET_MAC_VLAN_TAG_EVLRXS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_EVLRXS_SHIFT)) & ENET_MAC_VLAN_TAG_EVLRXS_MASK)
N#define ENET_MAC_VLAN_TAG_VTHM_MASK              (0x2000000U)
N#define ENET_MAC_VLAN_TAG_VTHM_SHIFT             (25U)
N#define ENET_MAC_VLAN_TAG_VTHM(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_VTHM_SHIFT)) & ENET_MAC_VLAN_TAG_VTHM_MASK)
N#define ENET_MAC_VLAN_TAG_EDVLP_MASK             (0x4000000U)
N#define ENET_MAC_VLAN_TAG_EDVLP_SHIFT            (26U)
N#define ENET_MAC_VLAN_TAG_EDVLP(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_EDVLP_SHIFT)) & ENET_MAC_VLAN_TAG_EDVLP_MASK)
N#define ENET_MAC_VLAN_TAG_ERIVLT_MASK            (0x8000000U)
N#define ENET_MAC_VLAN_TAG_ERIVLT_SHIFT           (27U)
N#define ENET_MAC_VLAN_TAG_ERIVLT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_ERIVLT_SHIFT)) & ENET_MAC_VLAN_TAG_ERIVLT_MASK)
N#define ENET_MAC_VLAN_TAG_EIVLS_MASK             (0x30000000U)
N#define ENET_MAC_VLAN_TAG_EIVLS_SHIFT            (28U)
N#define ENET_MAC_VLAN_TAG_EIVLS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_EIVLS_SHIFT)) & ENET_MAC_VLAN_TAG_EIVLS_MASK)
N#define ENET_MAC_VLAN_TAG_EIVLRXS_MASK           (0x80000000U)
N#define ENET_MAC_VLAN_TAG_EIVLRXS_SHIFT          (31U)
N#define ENET_MAC_VLAN_TAG_EIVLRXS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VLAN_TAG_EIVLRXS_SHIFT)) & ENET_MAC_VLAN_TAG_EIVLRXS_MASK)
N
N/*! @name MAC_TX_FLOW_CTRL_Q - Transmit flow control register */
N#define ENET_MAC_TX_FLOW_CTRL_Q_FCB_MASK         (0x1U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_FCB_SHIFT        (0U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_FCB(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TX_FLOW_CTRL_Q_FCB_SHIFT)) & ENET_MAC_TX_FLOW_CTRL_Q_FCB_MASK)
N#define ENET_MAC_TX_FLOW_CTRL_Q_TFE_MASK         (0x2U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_TFE_SHIFT        (1U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_TFE(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TX_FLOW_CTRL_Q_TFE_SHIFT)) & ENET_MAC_TX_FLOW_CTRL_Q_TFE_MASK)
N#define ENET_MAC_TX_FLOW_CTRL_Q_PLT_MASK         (0x70U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_PLT_SHIFT        (4U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_PLT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TX_FLOW_CTRL_Q_PLT_SHIFT)) & ENET_MAC_TX_FLOW_CTRL_Q_PLT_MASK)
N#define ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_MASK        (0x80U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_SHIFT       (7U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_DZPQ(x)          (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_SHIFT)) & ENET_MAC_TX_FLOW_CTRL_Q_DZPQ_MASK)
N#define ENET_MAC_TX_FLOW_CTRL_Q_PT_MASK          (0xFFFF0000U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_PT_SHIFT         (16U)
N#define ENET_MAC_TX_FLOW_CTRL_Q_PT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TX_FLOW_CTRL_Q_PT_SHIFT)) & ENET_MAC_TX_FLOW_CTRL_Q_PT_MASK)
N
N/* The count of ENET_MAC_TX_FLOW_CTRL_Q */
N#define ENET_MAC_TX_FLOW_CTRL_Q_COUNT            (2U)
N
N/*! @name MAC_RX_FLOW_CTRL - Receive flow control register */
N#define ENET_MAC_RX_FLOW_CTRL_RFE_MASK           (0x1U)
N#define ENET_MAC_RX_FLOW_CTRL_RFE_SHIFT          (0U)
N#define ENET_MAC_RX_FLOW_CTRL_RFE(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RX_FLOW_CTRL_RFE_SHIFT)) & ENET_MAC_RX_FLOW_CTRL_RFE_MASK)
N#define ENET_MAC_RX_FLOW_CTRL_UP_MASK            (0x2U)
N#define ENET_MAC_RX_FLOW_CTRL_UP_SHIFT           (1U)
N#define ENET_MAC_RX_FLOW_CTRL_UP(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RX_FLOW_CTRL_UP_SHIFT)) & ENET_MAC_RX_FLOW_CTRL_UP_MASK)
N
N/*! @name MAC_TXQ_PRIO_MAP -  */
N#define ENET_MAC_TXQ_PRIO_MAP_PSTQ0_MASK         (0xFFU)
N#define ENET_MAC_TXQ_PRIO_MAP_PSTQ0_SHIFT        (0U)
N#define ENET_MAC_TXQ_PRIO_MAP_PSTQ0(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TXQ_PRIO_MAP_PSTQ0_SHIFT)) & ENET_MAC_TXQ_PRIO_MAP_PSTQ0_MASK)
N#define ENET_MAC_TXQ_PRIO_MAP_PSTQ1_MASK         (0xFF00U)
N#define ENET_MAC_TXQ_PRIO_MAP_PSTQ1_SHIFT        (8U)
N#define ENET_MAC_TXQ_PRIO_MAP_PSTQ1(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TXQ_PRIO_MAP_PSTQ1_SHIFT)) & ENET_MAC_TXQ_PRIO_MAP_PSTQ1_MASK)
N
N/*! @name MAC_RXQ_CTRL - Receive Queue Control 0 register 0x0000 */
N#define ENET_MAC_RXQ_CTRL_RXQ0EN_MASK            (0x3U)
N#define ENET_MAC_RXQ_CTRL_RXQ0EN_SHIFT           (0U)
N#define ENET_MAC_RXQ_CTRL_RXQ0EN(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_RXQ0EN_SHIFT)) & ENET_MAC_RXQ_CTRL_RXQ0EN_MASK)
N#define ENET_MAC_RXQ_CTRL_PSRQ0_MASK             (0xFFU)
N#define ENET_MAC_RXQ_CTRL_PSRQ0_SHIFT            (0U)
N#define ENET_MAC_RXQ_CTRL_PSRQ0(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_PSRQ0_SHIFT)) & ENET_MAC_RXQ_CTRL_PSRQ0_MASK)
N#define ENET_MAC_RXQ_CTRL_AVCPQ_MASK             (0x7U)
N#define ENET_MAC_RXQ_CTRL_AVCPQ_SHIFT            (0U)
N#define ENET_MAC_RXQ_CTRL_AVCPQ(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_AVCPQ_SHIFT)) & ENET_MAC_RXQ_CTRL_AVCPQ_MASK)
N#define ENET_MAC_RXQ_CTRL_RXQ1EN_MASK            (0xCU)
N#define ENET_MAC_RXQ_CTRL_RXQ1EN_SHIFT           (2U)
N#define ENET_MAC_RXQ_CTRL_RXQ1EN(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_RXQ1EN_SHIFT)) & ENET_MAC_RXQ_CTRL_RXQ1EN_MASK)
N#define ENET_MAC_RXQ_CTRL_AVPTPQ_MASK            (0x70U)
N#define ENET_MAC_RXQ_CTRL_AVPTPQ_SHIFT           (4U)
N#define ENET_MAC_RXQ_CTRL_AVPTPQ(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_AVPTPQ_SHIFT)) & ENET_MAC_RXQ_CTRL_AVPTPQ_MASK)
N#define ENET_MAC_RXQ_CTRL_PSRQ1_MASK             (0xFF00U)
N#define ENET_MAC_RXQ_CTRL_PSRQ1_SHIFT            (8U)
N#define ENET_MAC_RXQ_CTRL_PSRQ1(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_PSRQ1_SHIFT)) & ENET_MAC_RXQ_CTRL_PSRQ1_MASK)
N#define ENET_MAC_RXQ_CTRL_UPQ_MASK               (0x7000U)
N#define ENET_MAC_RXQ_CTRL_UPQ_SHIFT              (12U)
N#define ENET_MAC_RXQ_CTRL_UPQ(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_UPQ_SHIFT)) & ENET_MAC_RXQ_CTRL_UPQ_MASK)
N#define ENET_MAC_RXQ_CTRL_PSRQ2_MASK             (0xFF0000U)
N#define ENET_MAC_RXQ_CTRL_PSRQ2_SHIFT            (16U)
N#define ENET_MAC_RXQ_CTRL_PSRQ2(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_PSRQ2_SHIFT)) & ENET_MAC_RXQ_CTRL_PSRQ2_MASK)
N#define ENET_MAC_RXQ_CTRL_MCBCQ_MASK             (0x70000U)
N#define ENET_MAC_RXQ_CTRL_MCBCQ_SHIFT            (16U)
N#define ENET_MAC_RXQ_CTRL_MCBCQ(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_MCBCQ_SHIFT)) & ENET_MAC_RXQ_CTRL_MCBCQ_MASK)
N#define ENET_MAC_RXQ_CTRL_MCBCQEN_MASK           (0x100000U)
N#define ENET_MAC_RXQ_CTRL_MCBCQEN_SHIFT          (20U)
N#define ENET_MAC_RXQ_CTRL_MCBCQEN(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_MCBCQEN_SHIFT)) & ENET_MAC_RXQ_CTRL_MCBCQEN_MASK)
N#define ENET_MAC_RXQ_CTRL_PSRQ3_MASK             (0xFF000000U)
N#define ENET_MAC_RXQ_CTRL_PSRQ3_SHIFT            (24U)
N#define ENET_MAC_RXQ_CTRL_PSRQ3(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXQ_CTRL_PSRQ3_SHIFT)) & ENET_MAC_RXQ_CTRL_PSRQ3_MASK)
N
N/* The count of ENET_MAC_RXQ_CTRL */
N#define ENET_MAC_RXQ_CTRL_COUNT                  (3U)
N
N/*! @name MAC_INTR_STAT - Interrupt status register 0x0000 */
N#define ENET_MAC_INTR_STAT_PHYIS_MASK            (0x8U)
N#define ENET_MAC_INTR_STAT_PHYIS_SHIFT           (3U)
N#define ENET_MAC_INTR_STAT_PHYIS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_STAT_PHYIS_SHIFT)) & ENET_MAC_INTR_STAT_PHYIS_MASK)
N#define ENET_MAC_INTR_STAT_PMTIS_MASK            (0x10U)
N#define ENET_MAC_INTR_STAT_PMTIS_SHIFT           (4U)
N#define ENET_MAC_INTR_STAT_PMTIS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_STAT_PMTIS_SHIFT)) & ENET_MAC_INTR_STAT_PMTIS_MASK)
N#define ENET_MAC_INTR_STAT_LPIIS_MASK            (0x20U)
N#define ENET_MAC_INTR_STAT_LPIIS_SHIFT           (5U)
N#define ENET_MAC_INTR_STAT_LPIIS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_STAT_LPIIS_SHIFT)) & ENET_MAC_INTR_STAT_LPIIS_MASK)
N#define ENET_MAC_INTR_STAT_TSIS_MASK             (0x1000U)
N#define ENET_MAC_INTR_STAT_TSIS_SHIFT            (12U)
N#define ENET_MAC_INTR_STAT_TSIS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_STAT_TSIS_SHIFT)) & ENET_MAC_INTR_STAT_TSIS_MASK)
N#define ENET_MAC_INTR_STAT_TXSTSIS_MASK          (0x2000U)
N#define ENET_MAC_INTR_STAT_TXSTSIS_SHIFT         (13U)
N#define ENET_MAC_INTR_STAT_TXSTSIS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_STAT_TXSTSIS_SHIFT)) & ENET_MAC_INTR_STAT_TXSTSIS_MASK)
N#define ENET_MAC_INTR_STAT_RXSTSIS_MASK          (0x4000U)
N#define ENET_MAC_INTR_STAT_RXSTSIS_SHIFT         (14U)
N#define ENET_MAC_INTR_STAT_RXSTSIS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_STAT_RXSTSIS_SHIFT)) & ENET_MAC_INTR_STAT_RXSTSIS_MASK)
N
N/*! @name MAC_INTR_EN - Interrupt enable register 0x0000 */
N#define ENET_MAC_INTR_EN_PHYIE_MASK              (0x8U)
N#define ENET_MAC_INTR_EN_PHYIE_SHIFT             (3U)
N#define ENET_MAC_INTR_EN_PHYIE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_EN_PHYIE_SHIFT)) & ENET_MAC_INTR_EN_PHYIE_MASK)
N#define ENET_MAC_INTR_EN_PMTIE_MASK              (0x10U)
N#define ENET_MAC_INTR_EN_PMTIE_SHIFT             (4U)
N#define ENET_MAC_INTR_EN_PMTIE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_EN_PMTIE_SHIFT)) & ENET_MAC_INTR_EN_PMTIE_MASK)
N#define ENET_MAC_INTR_EN_LPIIE_MASK              (0x20U)
N#define ENET_MAC_INTR_EN_LPIIE_SHIFT             (5U)
N#define ENET_MAC_INTR_EN_LPIIE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_EN_LPIIE_SHIFT)) & ENET_MAC_INTR_EN_LPIIE_MASK)
N#define ENET_MAC_INTR_EN_TSIE_MASK               (0x1000U)
N#define ENET_MAC_INTR_EN_TSIE_SHIFT              (12U)
N#define ENET_MAC_INTR_EN_TSIE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_EN_TSIE_SHIFT)) & ENET_MAC_INTR_EN_TSIE_MASK)
N#define ENET_MAC_INTR_EN_TXSTSIE_MASK            (0x2000U)
N#define ENET_MAC_INTR_EN_TXSTSIE_SHIFT           (13U)
N#define ENET_MAC_INTR_EN_TXSTSIE(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_EN_TXSTSIE_SHIFT)) & ENET_MAC_INTR_EN_TXSTSIE_MASK)
N#define ENET_MAC_INTR_EN_RXSTSIS_MASK            (0x4000U)
N#define ENET_MAC_INTR_EN_RXSTSIS_SHIFT           (14U)
N#define ENET_MAC_INTR_EN_RXSTSIS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_INTR_EN_RXSTSIS_SHIFT)) & ENET_MAC_INTR_EN_RXSTSIS_MASK)
N
N/*! @name MAC_RXTX_STAT - Receive Transmit Status register */
N#define ENET_MAC_RXTX_STAT_TJT_MASK              (0x1U)
N#define ENET_MAC_RXTX_STAT_TJT_SHIFT             (0U)
N#define ENET_MAC_RXTX_STAT_TJT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXTX_STAT_TJT_SHIFT)) & ENET_MAC_RXTX_STAT_TJT_MASK)
N#define ENET_MAC_RXTX_STAT_NCARR_MASK            (0x2U)
N#define ENET_MAC_RXTX_STAT_NCARR_SHIFT           (1U)
N#define ENET_MAC_RXTX_STAT_NCARR(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXTX_STAT_NCARR_SHIFT)) & ENET_MAC_RXTX_STAT_NCARR_MASK)
N#define ENET_MAC_RXTX_STAT_LCARR_MASK            (0x4U)
N#define ENET_MAC_RXTX_STAT_LCARR_SHIFT           (2U)
N#define ENET_MAC_RXTX_STAT_LCARR(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXTX_STAT_LCARR_SHIFT)) & ENET_MAC_RXTX_STAT_LCARR_MASK)
N#define ENET_MAC_RXTX_STAT_EXDEF_MASK            (0x8U)
N#define ENET_MAC_RXTX_STAT_EXDEF_SHIFT           (3U)
N#define ENET_MAC_RXTX_STAT_EXDEF(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXTX_STAT_EXDEF_SHIFT)) & ENET_MAC_RXTX_STAT_EXDEF_MASK)
N#define ENET_MAC_RXTX_STAT_LCOL_MASK             (0x10U)
N#define ENET_MAC_RXTX_STAT_LCOL_SHIFT            (4U)
N#define ENET_MAC_RXTX_STAT_LCOL(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXTX_STAT_LCOL_SHIFT)) & ENET_MAC_RXTX_STAT_LCOL_MASK)
N#define ENET_MAC_RXTX_STAT_EXCOL_MASK            (0x20U)
N#define ENET_MAC_RXTX_STAT_EXCOL_SHIFT           (5U)
N#define ENET_MAC_RXTX_STAT_EXCOL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXTX_STAT_EXCOL_SHIFT)) & ENET_MAC_RXTX_STAT_EXCOL_MASK)
N#define ENET_MAC_RXTX_STAT_RWT_MASK              (0x100U)
N#define ENET_MAC_RXTX_STAT_RWT_SHIFT             (8U)
N#define ENET_MAC_RXTX_STAT_RWT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RXTX_STAT_RWT_SHIFT)) & ENET_MAC_RXTX_STAT_RWT_MASK)
N
N/*! @name MAC_PMT_CRTL_STAT -  */
N#define ENET_MAC_PMT_CRTL_STAT_PWRDWN_MASK       (0x1U)
N#define ENET_MAC_PMT_CRTL_STAT_PWRDWN_SHIFT      (0U)
N#define ENET_MAC_PMT_CRTL_STAT_PWRDWN(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_PWRDWN_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_PWRDWN_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_MASK     (0x2U)
N#define ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_SHIFT    (1U)
N#define ENET_MAC_PMT_CRTL_STAT_MGKPKTEN(x)       (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_MGKPKTEN_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_MASK     (0x4U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_SHIFT    (2U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPKTEN(x)       (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_RWKPKTEN_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_MASK     (0x20U)
N#define ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_SHIFT    (5U)
N#define ENET_MAC_PMT_CRTL_STAT_MGKPRCVD(x)       (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_MGKPRCVD_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_MASK     (0x40U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_SHIFT    (6U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPRCVD(x)       (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_RWKPRCVD_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_MASK    (0x200U)
N#define ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_SHIFT   (9U)
N#define ENET_MAC_PMT_CRTL_STAT_GLBLUCAST(x)      (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_GLBLUCAST_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPFE_MASK       (0x400U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPFE_SHIFT      (10U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPFE(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_RWKPFE_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_RWKPFE_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPTR_MASK       (0x1F000000U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPTR_SHIFT      (24U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKPTR(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_RWKPTR_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_RWKPTR_MASK)
N#define ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_MASK   (0x80000000U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_SHIFT  (31U)
N#define ENET_MAC_PMT_CRTL_STAT_RWKFILTRST(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_SHIFT)) & ENET_MAC_PMT_CRTL_STAT_RWKFILTRST_MASK)
N
N/*! @name MAC_RWAKE_FRFLT - Remote wake-up frame filter */
N#define ENET_MAC_RWAKE_FRFLT_ADDR_MASK           (0xFFFFFFFFU)
N#define ENET_MAC_RWAKE_FRFLT_ADDR_SHIFT          (0U)
N#define ENET_MAC_RWAKE_FRFLT_ADDR(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_RWAKE_FRFLT_ADDR_SHIFT)) & ENET_MAC_RWAKE_FRFLT_ADDR_MASK)
N
N/*! @name MAC_LPI_CTRL_STAT - LPI Control and Status Register */
N#define ENET_MAC_LPI_CTRL_STAT_TLPIEN_MASK       (0x1U)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIEN_SHIFT      (0U)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIEN(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_TLPIEN_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_TLPIEN_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIEX_MASK       (0x2U)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIEX_SHIFT      (1U)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIEX(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_TLPIEX_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_TLPIEX_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIEN_MASK       (0x4U)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIEN_SHIFT      (2U)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIEN(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_RLPIEN_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_RLPIEN_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIEX_MASK       (0x8U)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIEX_SHIFT      (3U)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIEX(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_RLPIEX_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_RLPIEX_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIST_MASK       (0x100U)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIST_SHIFT      (8U)
N#define ENET_MAC_LPI_CTRL_STAT_TLPIST(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_TLPIST_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_TLPIST_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIST_MASK       (0x200U)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIST_SHIFT      (9U)
N#define ENET_MAC_LPI_CTRL_STAT_RLPIST(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_RLPIST_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_RLPIST_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_LPIEN_MASK        (0x10000U)
N#define ENET_MAC_LPI_CTRL_STAT_LPIEN_SHIFT       (16U)
N#define ENET_MAC_LPI_CTRL_STAT_LPIEN(x)          (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_LPIEN_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_LPIEN_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_PLS_MASK          (0x20000U)
N#define ENET_MAC_LPI_CTRL_STAT_PLS_SHIFT         (17U)
N#define ENET_MAC_LPI_CTRL_STAT_PLS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_PLS_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_PLS_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_LPITXA_MASK       (0x80000U)
N#define ENET_MAC_LPI_CTRL_STAT_LPITXA_SHIFT      (19U)
N#define ENET_MAC_LPI_CTRL_STAT_LPITXA(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_LPITXA_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_LPITXA_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_LPIATE_MASK       (0x100000U)
N#define ENET_MAC_LPI_CTRL_STAT_LPIATE_SHIFT      (20U)
N#define ENET_MAC_LPI_CTRL_STAT_LPIATE(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_LPIATE_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_LPIATE_MASK)
N#define ENET_MAC_LPI_CTRL_STAT_LPITCSE_MASK      (0x200000U)
N#define ENET_MAC_LPI_CTRL_STAT_LPITCSE_SHIFT     (21U)
N#define ENET_MAC_LPI_CTRL_STAT_LPITCSE(x)        (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_CTRL_STAT_LPITCSE_SHIFT)) & ENET_MAC_LPI_CTRL_STAT_LPITCSE_MASK)
N
N/*! @name MAC_LPI_TIMER_CTRL - LPI Timers Control register */
N#define ENET_MAC_LPI_TIMER_CTRL_TWT_MASK         (0xFFFFU)
N#define ENET_MAC_LPI_TIMER_CTRL_TWT_SHIFT        (0U)
N#define ENET_MAC_LPI_TIMER_CTRL_TWT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_TIMER_CTRL_TWT_SHIFT)) & ENET_MAC_LPI_TIMER_CTRL_TWT_MASK)
N#define ENET_MAC_LPI_TIMER_CTRL_LST_MASK         (0x3FF0000U)
N#define ENET_MAC_LPI_TIMER_CTRL_LST_SHIFT        (16U)
N#define ENET_MAC_LPI_TIMER_CTRL_LST(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_TIMER_CTRL_LST_SHIFT)) & ENET_MAC_LPI_TIMER_CTRL_LST_MASK)
N
N/*! @name MAC_LPI_ENTR_TIMR - LPI entry Timer register */
N#define ENET_MAC_LPI_ENTR_TIMR_LPIET_MASK        (0xFFFF8U)
N#define ENET_MAC_LPI_ENTR_TIMR_LPIET_SHIFT       (3U)
N#define ENET_MAC_LPI_ENTR_TIMR_LPIET(x)          (((uint32_t)(((uint32_t)(x)) << ENET_MAC_LPI_ENTR_TIMR_LPIET_SHIFT)) & ENET_MAC_LPI_ENTR_TIMR_LPIET_MASK)
N
N/*! @name MAC_1US_TIC_COUNTR -  */
N#define ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_MASK (0xFFFU)
N#define ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_SHIFT (0U)
N#define ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR(x)  (((uint32_t)(((uint32_t)(x)) << ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_SHIFT)) & ENET_MAC_1US_TIC_COUNTR_TIC_1US_CNTR_MASK)
N
N/*! @name MAC_VERSION - MAC version register */
N#define ENET_MAC_VERSION_SNPVER_MASK             (0xFFU)
N#define ENET_MAC_VERSION_SNPVER_SHIFT            (0U)
N#define ENET_MAC_VERSION_SNPVER(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VERSION_SNPVER_SHIFT)) & ENET_MAC_VERSION_SNPVER_MASK)
N#define ENET_MAC_VERSION_USERVER_MASK            (0xFF00U)
N#define ENET_MAC_VERSION_USERVER_SHIFT           (8U)
N#define ENET_MAC_VERSION_USERVER(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_VERSION_USERVER_SHIFT)) & ENET_MAC_VERSION_USERVER_MASK)
N
N/*! @name MAC_DBG - MAC debug register */
N#define ENET_MAC_DBG_REPESTS_MASK                (0x1U)
N#define ENET_MAC_DBG_REPESTS_SHIFT               (0U)
N#define ENET_MAC_DBG_REPESTS(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MAC_DBG_REPESTS_SHIFT)) & ENET_MAC_DBG_REPESTS_MASK)
N#define ENET_MAC_DBG_RFCFCSTS_MASK               (0x6U)
N#define ENET_MAC_DBG_RFCFCSTS_SHIFT              (1U)
N#define ENET_MAC_DBG_RFCFCSTS(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_DBG_RFCFCSTS_SHIFT)) & ENET_MAC_DBG_RFCFCSTS_MASK)
N#define ENET_MAC_DBG_TPESTS_MASK                 (0x10000U)
N#define ENET_MAC_DBG_TPESTS_SHIFT                (16U)
N#define ENET_MAC_DBG_TPESTS(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_DBG_TPESTS_SHIFT)) & ENET_MAC_DBG_TPESTS_MASK)
N#define ENET_MAC_DBG_TFCSTS_MASK                 (0x60000U)
N#define ENET_MAC_DBG_TFCSTS_SHIFT                (17U)
N#define ENET_MAC_DBG_TFCSTS(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_DBG_TFCSTS_SHIFT)) & ENET_MAC_DBG_TFCSTS_MASK)
N
N/*! @name MAC_HW_FEAT - MAC hardware feature register 0x0201 */
N#define ENET_MAC_HW_FEAT_RXFIFOSIZE_MASK         (0x1FU)
N#define ENET_MAC_HW_FEAT_RXFIFOSIZE_SHIFT        (0U)
N#define ENET_MAC_HW_FEAT_RXFIFOSIZE(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_RXFIFOSIZE_SHIFT)) & ENET_MAC_HW_FEAT_RXFIFOSIZE_MASK)
N#define ENET_MAC_HW_FEAT_RXQCNT_MASK             (0xFU)
N#define ENET_MAC_HW_FEAT_RXQCNT_SHIFT            (0U)
N#define ENET_MAC_HW_FEAT_RXQCNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_RXQCNT_SHIFT)) & ENET_MAC_HW_FEAT_RXQCNT_MASK)
N#define ENET_MAC_HW_FEAT_MIISEL_MASK             (0x1U)
N#define ENET_MAC_HW_FEAT_MIISEL_SHIFT            (0U)
N#define ENET_MAC_HW_FEAT_MIISEL(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_MIISEL_SHIFT)) & ENET_MAC_HW_FEAT_MIISEL_MASK)
N#define ENET_MAC_HW_FEAT_HDSEL_MASK              (0x4U)
N#define ENET_MAC_HW_FEAT_HDSEL_SHIFT             (2U)
N#define ENET_MAC_HW_FEAT_HDSEL(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_HDSEL_SHIFT)) & ENET_MAC_HW_FEAT_HDSEL_MASK)
N#define ENET_MAC_HW_FEAT_VLHASH_MASK             (0x10U)
N#define ENET_MAC_HW_FEAT_VLHASH_SHIFT            (4U)
N#define ENET_MAC_HW_FEAT_VLHASH(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_VLHASH_SHIFT)) & ENET_MAC_HW_FEAT_VLHASH_MASK)
N#define ENET_MAC_HW_FEAT_SMASEL_MASK             (0x20U)
N#define ENET_MAC_HW_FEAT_SMASEL_SHIFT            (5U)
N#define ENET_MAC_HW_FEAT_SMASEL(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_SMASEL_SHIFT)) & ENET_MAC_HW_FEAT_SMASEL_MASK)
N#define ENET_MAC_HW_FEAT_TXQCNT_MASK             (0x3C0U)
N#define ENET_MAC_HW_FEAT_TXQCNT_SHIFT            (6U)
N#define ENET_MAC_HW_FEAT_TXQCNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_TXQCNT_SHIFT)) & ENET_MAC_HW_FEAT_TXQCNT_MASK)
N#define ENET_MAC_HW_FEAT_RWKSEL_MASK             (0x40U)
N#define ENET_MAC_HW_FEAT_RWKSEL_SHIFT            (6U)
N#define ENET_MAC_HW_FEAT_RWKSEL(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_RWKSEL_SHIFT)) & ENET_MAC_HW_FEAT_RWKSEL_MASK)
N#define ENET_MAC_HW_FEAT_TXFIFOSIZE_MASK         (0x7C0U)
N#define ENET_MAC_HW_FEAT_TXFIFOSIZE_SHIFT        (6U)
N#define ENET_MAC_HW_FEAT_TXFIFOSIZE(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_TXFIFOSIZE_SHIFT)) & ENET_MAC_HW_FEAT_TXFIFOSIZE_MASK)
N#define ENET_MAC_HW_FEAT_MGKSEL_MASK             (0x80U)
N#define ENET_MAC_HW_FEAT_MGKSEL_SHIFT            (7U)
N#define ENET_MAC_HW_FEAT_MGKSEL(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_MGKSEL_SHIFT)) & ENET_MAC_HW_FEAT_MGKSEL_MASK)
N#define ENET_MAC_HW_FEAT_MMCSEL_MASK             (0x100U)
N#define ENET_MAC_HW_FEAT_MMCSEL_SHIFT            (8U)
N#define ENET_MAC_HW_FEAT_MMCSEL(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_MMCSEL_SHIFT)) & ENET_MAC_HW_FEAT_MMCSEL_MASK)
N#define ENET_MAC_HW_FEAT_ARPOFFSEL_MASK          (0x200U)
N#define ENET_MAC_HW_FEAT_ARPOFFSEL_SHIFT         (9U)
N#define ENET_MAC_HW_FEAT_ARPOFFSEL(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_ARPOFFSEL_SHIFT)) & ENET_MAC_HW_FEAT_ARPOFFSEL_MASK)
N#define ENET_MAC_HW_FEAT_OSTEN_MASK              (0x800U)
N#define ENET_MAC_HW_FEAT_OSTEN_SHIFT             (11U)
N#define ENET_MAC_HW_FEAT_OSTEN(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_OSTEN_SHIFT)) & ENET_MAC_HW_FEAT_OSTEN_MASK)
N#define ENET_MAC_HW_FEAT_RXCHCNT_MASK            (0xF000U)
N#define ENET_MAC_HW_FEAT_RXCHCNT_SHIFT           (12U)
N#define ENET_MAC_HW_FEAT_RXCHCNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_RXCHCNT_SHIFT)) & ENET_MAC_HW_FEAT_RXCHCNT_MASK)
N#define ENET_MAC_HW_FEAT_TSSEL_MASK              (0x1000U)
N#define ENET_MAC_HW_FEAT_TSSEL_SHIFT             (12U)
N#define ENET_MAC_HW_FEAT_TSSEL(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_TSSEL_SHIFT)) & ENET_MAC_HW_FEAT_TSSEL_MASK)
N#define ENET_MAC_HW_FEAT_PTOEN_MASK              (0x1000U)
N#define ENET_MAC_HW_FEAT_PTOEN_SHIFT             (12U)
N#define ENET_MAC_HW_FEAT_PTOEN(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_PTOEN_SHIFT)) & ENET_MAC_HW_FEAT_PTOEN_MASK)
N#define ENET_MAC_HW_FEAT_EEESEL_MASK             (0x2000U)
N#define ENET_MAC_HW_FEAT_EEESEL_SHIFT            (13U)
N#define ENET_MAC_HW_FEAT_EEESEL(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_EEESEL_SHIFT)) & ENET_MAC_HW_FEAT_EEESEL_MASK)
N#define ENET_MAC_HW_FEAT_ADVTHWORD_MASK          (0x2000U)
N#define ENET_MAC_HW_FEAT_ADVTHWORD_SHIFT         (13U)
N#define ENET_MAC_HW_FEAT_ADVTHWORD(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_ADVTHWORD_SHIFT)) & ENET_MAC_HW_FEAT_ADVTHWORD_MASK)
N#define ENET_MAC_HW_FEAT_ADDR64_MASK             (0xC000U)
N#define ENET_MAC_HW_FEAT_ADDR64_SHIFT            (14U)
N#define ENET_MAC_HW_FEAT_ADDR64(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_ADDR64_SHIFT)) & ENET_MAC_HW_FEAT_ADDR64_MASK)
N#define ENET_MAC_HW_FEAT_TXCOESEL_MASK           (0x4000U)
N#define ENET_MAC_HW_FEAT_TXCOESEL_SHIFT          (14U)
N#define ENET_MAC_HW_FEAT_TXCOESEL(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_TXCOESEL_SHIFT)) & ENET_MAC_HW_FEAT_TXCOESEL_MASK)
N#define ENET_MAC_HW_FEAT_DCBEN_MASK              (0x10000U)
N#define ENET_MAC_HW_FEAT_DCBEN_SHIFT             (16U)
N#define ENET_MAC_HW_FEAT_DCBEN(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_DCBEN_SHIFT)) & ENET_MAC_HW_FEAT_DCBEN_MASK)
N#define ENET_MAC_HW_FEAT_RXCOESEL_MASK           (0x10000U)
N#define ENET_MAC_HW_FEAT_RXCOESEL_SHIFT          (16U)
N#define ENET_MAC_HW_FEAT_RXCOESEL(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_RXCOESEL_SHIFT)) & ENET_MAC_HW_FEAT_RXCOESEL_MASK)
N#define ENET_MAC_HW_FEAT_SPEN_MASK               (0x20000U)
N#define ENET_MAC_HW_FEAT_SPEN_SHIFT              (17U)
N#define ENET_MAC_HW_FEAT_SPEN(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_SPEN_SHIFT)) & ENET_MAC_HW_FEAT_SPEN_MASK)
N#define ENET_MAC_HW_FEAT_TXCHCNT_MASK            (0x3C0000U)
N#define ENET_MAC_HW_FEAT_TXCHCNT_SHIFT           (18U)
N#define ENET_MAC_HW_FEAT_TXCHCNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_TXCHCNT_SHIFT)) & ENET_MAC_HW_FEAT_TXCHCNT_MASK)
N#define ENET_MAC_HW_FEAT_TSOEN_MASK              (0x40000U)
N#define ENET_MAC_HW_FEAT_TSOEN_SHIFT             (18U)
N#define ENET_MAC_HW_FEAT_TSOEN(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_TSOEN_SHIFT)) & ENET_MAC_HW_FEAT_TSOEN_MASK)
N#define ENET_MAC_HW_FEAT_DBGMEMA_MASK            (0x80000U)
N#define ENET_MAC_HW_FEAT_DBGMEMA_SHIFT           (19U)
N#define ENET_MAC_HW_FEAT_DBGMEMA(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_DBGMEMA_SHIFT)) & ENET_MAC_HW_FEAT_DBGMEMA_MASK)
N#define ENET_MAC_HW_FEAT_AVSEL_MASK              (0x100000U)
N#define ENET_MAC_HW_FEAT_AVSEL_SHIFT             (20U)
N#define ENET_MAC_HW_FEAT_AVSEL(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_AVSEL_SHIFT)) & ENET_MAC_HW_FEAT_AVSEL_MASK)
N#define ENET_MAC_HW_FEAT_LPMODEEN_MASK           (0x800000U)
N#define ENET_MAC_HW_FEAT_LPMODEEN_SHIFT          (23U)
N#define ENET_MAC_HW_FEAT_LPMODEEN(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_LPMODEEN_SHIFT)) & ENET_MAC_HW_FEAT_LPMODEEN_MASK)
N#define ENET_MAC_HW_FEAT_PPSOUTNUM_MASK          (0x7000000U)
N#define ENET_MAC_HW_FEAT_PPSOUTNUM_SHIFT         (24U)
N#define ENET_MAC_HW_FEAT_PPSOUTNUM(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_PPSOUTNUM_SHIFT)) & ENET_MAC_HW_FEAT_PPSOUTNUM_MASK)
N#define ENET_MAC_HW_FEAT_HASHTBLSZ_MASK          (0x3000000U)
N#define ENET_MAC_HW_FEAT_HASHTBLSZ_SHIFT         (24U)
N#define ENET_MAC_HW_FEAT_HASHTBLSZ(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_HASHTBLSZ_SHIFT)) & ENET_MAC_HW_FEAT_HASHTBLSZ_MASK)
N#define ENET_MAC_HW_FEAT_TSSTSSEL_MASK           (0x6000000U)
N#define ENET_MAC_HW_FEAT_TSSTSSEL_SHIFT          (25U)
N#define ENET_MAC_HW_FEAT_TSSTSSEL(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_TSSTSSEL_SHIFT)) & ENET_MAC_HW_FEAT_TSSTSSEL_MASK)
N#define ENET_MAC_HW_FEAT_L3_L4_FILTER_MASK       (0x78000000U)
N#define ENET_MAC_HW_FEAT_L3_L4_FILTER_SHIFT      (27U)
N#define ENET_MAC_HW_FEAT_L3_L4_FILTER(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_L3_L4_FILTER_SHIFT)) & ENET_MAC_HW_FEAT_L3_L4_FILTER_MASK)
N#define ENET_MAC_HW_FEAT_AUXSNAPNUM_MASK         (0x70000000U)
N#define ENET_MAC_HW_FEAT_AUXSNAPNUM_SHIFT        (28U)
N#define ENET_MAC_HW_FEAT_AUXSNAPNUM(x)           (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_AUXSNAPNUM_SHIFT)) & ENET_MAC_HW_FEAT_AUXSNAPNUM_MASK)
N#define ENET_MAC_HW_FEAT_ACTPHYSEL_MASK          (0x70000000U)
N#define ENET_MAC_HW_FEAT_ACTPHYSEL_SHIFT         (28U)
N#define ENET_MAC_HW_FEAT_ACTPHYSEL(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_HW_FEAT_ACTPHYSEL_SHIFT)) & ENET_MAC_HW_FEAT_ACTPHYSEL_MASK)
N
N/* The count of ENET_MAC_HW_FEAT */
N#define ENET_MAC_HW_FEAT_COUNT                   (3U)
N
N/*! @name MAC_MDIO_ADDR - MIDO address Register */
N#define ENET_MAC_MDIO_ADDR_MB_MASK               (0x1U)
N#define ENET_MAC_MDIO_ADDR_MB_SHIFT              (0U)
N#define ENET_MAC_MDIO_ADDR_MB(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_MB_SHIFT)) & ENET_MAC_MDIO_ADDR_MB_MASK)
N#define ENET_MAC_MDIO_ADDR_MOC_MASK              (0xCU)
N#define ENET_MAC_MDIO_ADDR_MOC_SHIFT             (2U)
N#define ENET_MAC_MDIO_ADDR_MOC(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_MOC_SHIFT)) & ENET_MAC_MDIO_ADDR_MOC_MASK)
N#define ENET_MAC_MDIO_ADDR_CR_MASK               (0xF00U)
N#define ENET_MAC_MDIO_ADDR_CR_SHIFT              (8U)
N#define ENET_MAC_MDIO_ADDR_CR(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_CR_SHIFT)) & ENET_MAC_MDIO_ADDR_CR_MASK)
N#define ENET_MAC_MDIO_ADDR_NTC_MASK              (0x7000U)
N#define ENET_MAC_MDIO_ADDR_NTC_SHIFT             (12U)
N#define ENET_MAC_MDIO_ADDR_NTC(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_NTC_SHIFT)) & ENET_MAC_MDIO_ADDR_NTC_MASK)
N#define ENET_MAC_MDIO_ADDR_RDA_MASK              (0x1F0000U)
N#define ENET_MAC_MDIO_ADDR_RDA_SHIFT             (16U)
N#define ENET_MAC_MDIO_ADDR_RDA(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_RDA_SHIFT)) & ENET_MAC_MDIO_ADDR_RDA_MASK)
N#define ENET_MAC_MDIO_ADDR_PA_MASK               (0x3E00000U)
N#define ENET_MAC_MDIO_ADDR_PA_SHIFT              (21U)
N#define ENET_MAC_MDIO_ADDR_PA(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_PA_SHIFT)) & ENET_MAC_MDIO_ADDR_PA_MASK)
N#define ENET_MAC_MDIO_ADDR_BTB_MASK              (0x4000000U)
N#define ENET_MAC_MDIO_ADDR_BTB_SHIFT             (26U)
N#define ENET_MAC_MDIO_ADDR_BTB(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_BTB_SHIFT)) & ENET_MAC_MDIO_ADDR_BTB_MASK)
N#define ENET_MAC_MDIO_ADDR_PSE_MASK              (0x8000000U)
N#define ENET_MAC_MDIO_ADDR_PSE_SHIFT             (27U)
N#define ENET_MAC_MDIO_ADDR_PSE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_ADDR_PSE_SHIFT)) & ENET_MAC_MDIO_ADDR_PSE_MASK)
N
N/*! @name MAC_MDIO_DATA - MDIO Data register */
N#define ENET_MAC_MDIO_DATA_MD_MASK               (0xFFFFU)
N#define ENET_MAC_MDIO_DATA_MD_SHIFT              (0U)
N#define ENET_MAC_MDIO_DATA_MD(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_MDIO_DATA_MD_SHIFT)) & ENET_MAC_MDIO_DATA_MD_MASK)
N
N/*! @name MAC_ADDR_HIGH - MAC address0 high register */
N#define ENET_MAC_ADDR_HIGH_A47_32_MASK           (0xFFFFU)
N#define ENET_MAC_ADDR_HIGH_A47_32_SHIFT          (0U)
N#define ENET_MAC_ADDR_HIGH_A47_32(x)             (((uint32_t)(((uint32_t)(x)) << ENET_MAC_ADDR_HIGH_A47_32_SHIFT)) & ENET_MAC_ADDR_HIGH_A47_32_MASK)
N#define ENET_MAC_ADDR_HIGH_DCS_MASK              (0x10000U)
N#define ENET_MAC_ADDR_HIGH_DCS_SHIFT             (16U)
N#define ENET_MAC_ADDR_HIGH_DCS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_MAC_ADDR_HIGH_DCS_SHIFT)) & ENET_MAC_ADDR_HIGH_DCS_MASK)
N#define ENET_MAC_ADDR_HIGH_AE_MASK               (0x80000000U)
N#define ENET_MAC_ADDR_HIGH_AE_SHIFT              (31U)
N#define ENET_MAC_ADDR_HIGH_AE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MAC_ADDR_HIGH_AE_SHIFT)) & ENET_MAC_ADDR_HIGH_AE_MASK)
N
N/*! @name MAC_ADDR_LOW - MAC address0 low register */
N#define ENET_MAC_ADDR_LOW_A31_0_MASK             (0xFFFFFFFFU)
N#define ENET_MAC_ADDR_LOW_A31_0_SHIFT            (0U)
N#define ENET_MAC_ADDR_LOW_A31_0(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MAC_ADDR_LOW_A31_0_SHIFT)) & ENET_MAC_ADDR_LOW_A31_0_MASK)
N
N/*! @name MAC_TIMESTAMP_CTRL - Time stamp control register */
N#define ENET_MAC_TIMESTAMP_CTRL_TSENA_MASK       (0x1U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENA_SHIFT      (0U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENA(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSENA_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSENA_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_MASK    (0x2U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_SHIFT   (1U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT(x)      (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSCFUPDT_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSINIT_MASK      (0x4U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSINIT_SHIFT     (2U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSINIT(x)        (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSINIT_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSINIT_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSUPDT_MASK      (0x8U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSUPDT_SHIFT     (3U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSUPDT(x)        (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSUPDT_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSUPDT_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSTRIG_MASK      (0x10U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSTRIG_SHIFT     (4U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSTRIG(x)        (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSTRIG_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSTRIG_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TADDREG_MASK     (0x20U)
N#define ENET_MAC_TIMESTAMP_CTRL_TADDREG_SHIFT    (5U)
N#define ENET_MAC_TIMESTAMP_CTRL_TADDREG(x)       (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TADDREG_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TADDREG_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENALL_MASK     (0x100U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENALL_SHIFT    (8U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENALL(x)       (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSENALL_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSENALL_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_MASK   (0x200U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_SHIFT  (9U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSCTRLSSR_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_MASK   (0x400U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_SHIFT  (10U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSVER2ENA_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPENA_MASK     (0x800U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPENA_SHIFT    (11U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPENA(x)       (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSIPENA_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSIPENA_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_MASK   (0x1000U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_SHIFT  (12U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSIPV6ENA_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_MASK   (0x2000U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_SHIFT  (13U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSIPV4ENA_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_MASK    (0x4000U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_SHIFT   (14U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSEVTENA(x)      (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSEVTENA_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_MASK   (0x8000U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_SHIFT  (15U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSMSTRENA_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_MASK  (0x30000U)
N#define ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_SHIFT (16U)
N#define ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_SNAPTYPSEL_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_MASK (0x40000U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_SHIFT (18U)
N#define ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TSENMACADDR_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_MASK   (0x1000000U)
N#define ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_SHIFT  (24U)
N#define ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_TXTTSSTSM_MASK)
N#define ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_MASK (0x10000000U)
N#define ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_SHIFT (28U)
N#define ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_SHIFT)) & ENET_MAC_TIMESTAMP_CTRL_AV8021ASMEN_MASK)
N
N/*! @name MAC_SUB_SCND_INCR - Sub-second increment register */
N#define ENET_MAC_SUB_SCND_INCR_SSINC_MASK        (0xFF0000U)
N#define ENET_MAC_SUB_SCND_INCR_SSINC_SHIFT       (16U)
N#define ENET_MAC_SUB_SCND_INCR_SSINC(x)          (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SUB_SCND_INCR_SSINC_SHIFT)) & ENET_MAC_SUB_SCND_INCR_SSINC_MASK)
N
N/*! @name MAC_SYS_TIME_SCND - System time seconds register */
N#define ENET_MAC_SYS_TIME_SCND_TSS_MASK          (0xFFFFFFFFU)
N#define ENET_MAC_SYS_TIME_SCND_TSS_SHIFT         (0U)
N#define ENET_MAC_SYS_TIME_SCND_TSS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIME_SCND_TSS_SHIFT)) & ENET_MAC_SYS_TIME_SCND_TSS_MASK)
N
N/*! @name MAC_SYS_TIME_NSCND - System time nanoseconds register */
N#define ENET_MAC_SYS_TIME_NSCND_TSSS_MASK        (0x7FFFFFFFU)
N#define ENET_MAC_SYS_TIME_NSCND_TSSS_SHIFT       (0U)
N#define ENET_MAC_SYS_TIME_NSCND_TSSS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIME_NSCND_TSSS_SHIFT)) & ENET_MAC_SYS_TIME_NSCND_TSSS_MASK)
N
N/*! @name MAC_SYS_TIME_SCND_UPD -  */
N#define ENET_MAC_SYS_TIME_SCND_UPD_TSS_MASK      (0xFFFFFFFFU)
N#define ENET_MAC_SYS_TIME_SCND_UPD_TSS_SHIFT     (0U)
N#define ENET_MAC_SYS_TIME_SCND_UPD_TSS(x)        (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIME_SCND_UPD_TSS_SHIFT)) & ENET_MAC_SYS_TIME_SCND_UPD_TSS_MASK)
N
N/*! @name MAC_SYS_TIME_NSCND_UPD -  */
N#define ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_MASK    (0x7FFFFFFFU)
N#define ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_SHIFT   (0U)
N#define ENET_MAC_SYS_TIME_NSCND_UPD_TSSS(x)      (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_SHIFT)) & ENET_MAC_SYS_TIME_NSCND_UPD_TSSS_MASK)
N#define ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_MASK  (0x80000000U)
N#define ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_SHIFT (31U)
N#define ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_SHIFT)) & ENET_MAC_SYS_TIME_NSCND_UPD_ADDSUB_MASK)
N
N/*! @name MAC_SYS_TIMESTMP_ADDEND - Time stamp addend register */
N#define ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_MASK   (0xFFFFFFFFU)
N#define ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_SHIFT  (0U)
N#define ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_SHIFT)) & ENET_MAC_SYS_TIMESTMP_ADDEND_TSAR_MASK)
N
N/*! @name MAC_SYS_TIME_HWORD_SCND -  */
N#define ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_MASK  (0xFFFFU)
N#define ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_SHIFT (0U)
N#define ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_SHIFT)) & ENET_MAC_SYS_TIME_HWORD_SCND_TSHWR_MASK)
N
N/*! @name MAC_SYS_TIMESTMP_STAT - Time stamp status register */
N#define ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_MASK   (0x1U)
N#define ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_SHIFT  (0U)
N#define ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF(x)     (((uint32_t)(((uint32_t)(x)) << ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_SHIFT)) & ENET_MAC_SYS_TIMESTMP_STAT_TSSOVF_MASK)
N
N/*! @name MTL_OP_MODE - MTL Operation Mode Register */
N#define ENET_MTL_OP_MODE_DTXSTS_MASK             (0x2U)
N#define ENET_MTL_OP_MODE_DTXSTS_SHIFT            (1U)
N#define ENET_MTL_OP_MODE_DTXSTS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MTL_OP_MODE_DTXSTS_SHIFT)) & ENET_MTL_OP_MODE_DTXSTS_MASK)
N#define ENET_MTL_OP_MODE_RAA_MASK                (0x4U)
N#define ENET_MTL_OP_MODE_RAA_SHIFT               (2U)
N#define ENET_MTL_OP_MODE_RAA(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MTL_OP_MODE_RAA_SHIFT)) & ENET_MTL_OP_MODE_RAA_MASK)
N#define ENET_MTL_OP_MODE_SCHALG_MASK             (0x60U)
N#define ENET_MTL_OP_MODE_SCHALG_SHIFT            (5U)
N#define ENET_MTL_OP_MODE_SCHALG(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MTL_OP_MODE_SCHALG_SHIFT)) & ENET_MTL_OP_MODE_SCHALG_MASK)
N#define ENET_MTL_OP_MODE_CNTPRST_MASK            (0x100U)
N#define ENET_MTL_OP_MODE_CNTPRST_SHIFT           (8U)
N#define ENET_MTL_OP_MODE_CNTPRST(x)              (((uint32_t)(((uint32_t)(x)) << ENET_MTL_OP_MODE_CNTPRST_SHIFT)) & ENET_MTL_OP_MODE_CNTPRST_MASK)
N#define ENET_MTL_OP_MODE_CNTCLR_MASK             (0x200U)
N#define ENET_MTL_OP_MODE_CNTCLR_SHIFT            (9U)
N#define ENET_MTL_OP_MODE_CNTCLR(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MTL_OP_MODE_CNTCLR_SHIFT)) & ENET_MTL_OP_MODE_CNTCLR_MASK)
N
N/*! @name MTL_INTR_STAT - MTL Interrupt Status register */
N#define ENET_MTL_INTR_STAT_Q0IS_MASK             (0x1U)
N#define ENET_MTL_INTR_STAT_Q0IS_SHIFT            (0U)
N#define ENET_MTL_INTR_STAT_Q0IS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MTL_INTR_STAT_Q0IS_SHIFT)) & ENET_MTL_INTR_STAT_Q0IS_MASK)
N#define ENET_MTL_INTR_STAT_Q1IS_MASK             (0x2U)
N#define ENET_MTL_INTR_STAT_Q1IS_SHIFT            (1U)
N#define ENET_MTL_INTR_STAT_Q1IS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_MTL_INTR_STAT_Q1IS_SHIFT)) & ENET_MTL_INTR_STAT_Q1IS_MASK)
N
N/*! @name MTL_RXQ_DMA_MAP - MTL Receive Queue and DMA Channel Mapping register */
N#define ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_MASK       (0x1U)
N#define ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_SHIFT      (0U)
N#define ENET_MTL_RXQ_DMA_MAP_Q0MDMACH(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_SHIFT)) & ENET_MTL_RXQ_DMA_MAP_Q0MDMACH_MASK)
N#define ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_MASK       (0x10U)
N#define ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_SHIFT      (4U)
N#define ENET_MTL_RXQ_DMA_MAP_Q0DDMACH(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_SHIFT)) & ENET_MTL_RXQ_DMA_MAP_Q0DDMACH_MASK)
N#define ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_MASK       (0x100U)
N#define ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_SHIFT      (8U)
N#define ENET_MTL_RXQ_DMA_MAP_Q1MDMACH(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_SHIFT)) & ENET_MTL_RXQ_DMA_MAP_Q1MDMACH_MASK)
N#define ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_MASK       (0x1000U)
N#define ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_SHIFT      (12U)
N#define ENET_MTL_RXQ_DMA_MAP_Q1DDMACH(x)         (((uint32_t)(((uint32_t)(x)) << ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_SHIFT)) & ENET_MTL_RXQ_DMA_MAP_Q1DDMACH_MASK)
N
N/*! @name MTL_QUEUE_MTL_TXQX_OP_MODE - MTL TxQx Operation Mode register */
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_MASK (0x1U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_FTQ_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_MASK (0x2U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_SHIFT (1U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TSF_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_MASK (0xCU)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_SHIFT (2U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TXQEN_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_MASK (0x70U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_SHIFT (4U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TTC_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_MASK (0x70000U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_SHIFT (16U)
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_TQS_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_TXQX_OP_MODE */
N#define ENET_MTL_QUEUE_MTL_TXQX_OP_MODE_COUNT    (2U)
N
N/*! @name MTL_QUEUE_MTL_TXQX_UNDRFLW - MTL TxQx Underflow register */
N#define ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_MASK (0x7FFU)
N#define ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFFRMCNT_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_MASK (0x800U)
N#define ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_SHIFT (11U)
N#define ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_UFCNTOVF_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW */
N#define ENET_MTL_QUEUE_MTL_TXQX_UNDRFLW_COUNT    (2U)
N
N/*! @name MTL_QUEUE_MTL_TXQX_DBG - MTL TxQx Debug register */
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_MASK (0x1U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQPAUSED_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_MASK  (0x6U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_SHIFT (1U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_DBG_TRCSTS_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_MASK  (0x8U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_SHIFT (3U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_DBG_TWCSTS_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_MASK  (0x10U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_SHIFT (4U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_DBG_TXQSTS_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_MASK (0x20U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_SHIFT (5U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_DBG_TXSTSFSTS_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_MASK    (0x70000U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_SHIFT   (16U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ(x)      (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_DBG_PTXQ_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_MASK (0x700000U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_SHIFT (20U)
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF(x)  (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_DBG_STSXSTSF_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_TXQX_DBG */
N#define ENET_MTL_QUEUE_MTL_TXQX_DBG_COUNT        (2U)
N
N/*! @name MTL_QUEUE_MTL_TXQX_ETS_STAT - MTL TxQx ETS Status register */
N#define ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_MASK (0xFFFFFFU)
N#define ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS(x)  (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_ABS_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT */
N#define ENET_MTL_QUEUE_MTL_TXQX_ETS_STAT_COUNT   (2U)
N
N/*! @name MTL_QUEUE_MTL_TXQX_QNTM_WGHT -  */
N#define ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_MASK (0x1FFFFFU)
N#define ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_ISCQW_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT */
N#define ENET_MTL_QUEUE_MTL_TXQX_QNTM_WGHT_COUNT  (2U)
N
N/*! @name MTL_QUEUE_MTL_TXQX_INTCTRL_STAT -  */
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_MASK (0x1U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUNFIS_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_MASK (0x2U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_SHIFT (1U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIS_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_MASK (0x100U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_SHIFT (8U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_TXUIE_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_MASK (0x200U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_SHIFT (9U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_ABPSIE_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_MASK (0x10000U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_SHIFT (16U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOVFIS_MASK)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_MASK (0x1000000U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_SHIFT (24U)
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_SHIFT)) & ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_RXOIE_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT */
N#define ENET_MTL_QUEUE_MTL_TXQX_INTCTRL_STAT_COUNT (2U)
N
N/*! @name MTL_QUEUE_MTL_RXQX_OP_MODE - MTL RxQx Operation Mode register */
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_MASK (0x3U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RTC_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_MASK (0x8U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_SHIFT (3U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FUP_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_MASK (0x10U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_SHIFT (4U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_FEP_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_MASK (0x20U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_SHIFT (5U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RSF_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_MASK (0x40U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_SHIFT (6U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_DIS_TCP_EF_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_MASK (0x700000U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_SHIFT (20U)
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS(x)   (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_RQS_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_RXQX_OP_MODE */
N#define ENET_MTL_QUEUE_MTL_RXQX_OP_MODE_COUNT    (2U)
N
N/*! @name MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT - MTL RxQx Missed Packet Overflow Counter register */
N#define ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_MASK (0x7FFU)
N#define ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFPKTCNT_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_MASK (0x800U)
N#define ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_SHIFT (11U)
N#define ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_OVFCNTOVF_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT */
N#define ENET_MTL_QUEUE_MTL_RXQX_MISSPKT_OVRFLW_CNT_COUNT (2U)
N
N/*! @name MTL_QUEUE_MTL_RXQX_DBG - MTL RxQx Debug register */
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_MASK  (0x1U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_DBG_RWCSTS_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_MASK  (0x6U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_SHIFT (1U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_DBG_RRCSTS_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_MASK  (0x30U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_SHIFT (4U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS(x)    (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_DBG_RXQSTS_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_MASK    (0x3FFF0000U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_SHIFT   (16U)
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ(x)      (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_DBG_PRXQ_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_RXQX_DBG */
N#define ENET_MTL_QUEUE_MTL_RXQX_DBG_COUNT        (2U)
N
N/*! @name MTL_QUEUE_MTL_RXQX_CTRL - MTL RxQx Control register */
N#define ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_MASK (0x7U)
N#define ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_SHIFT (0U)
N#define ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_WEGT_MASK)
N#define ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_MASK (0x8U)
N#define ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_SHIFT (3U)
N#define ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT(x) (((uint32_t)(((uint32_t)(x)) << ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_SHIFT)) & ENET_MTL_QUEUE_MTL_RXQX_CTRL_RXQ_FRM_ARBIT_MASK)
N
N/* The count of ENET_MTL_QUEUE_MTL_RXQX_CTRL */
N#define ENET_MTL_QUEUE_MTL_RXQX_CTRL_COUNT       (2U)
N
N/*! @name DMA_MODE - DMA mode register */
N#define ENET_DMA_MODE_SWR_MASK                   (0x1U)
N#define ENET_DMA_MODE_SWR_SHIFT                  (0U)
N#define ENET_DMA_MODE_SWR(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_DMA_MODE_SWR_SHIFT)) & ENET_DMA_MODE_SWR_MASK)
N#define ENET_DMA_MODE_DA_MASK                    (0x2U)
N#define ENET_DMA_MODE_DA_SHIFT                   (1U)
N#define ENET_DMA_MODE_DA(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_DMA_MODE_DA_SHIFT)) & ENET_DMA_MODE_DA_MASK)
N#define ENET_DMA_MODE_TAA_MASK                   (0x1CU)
N#define ENET_DMA_MODE_TAA_SHIFT                  (2U)
N#define ENET_DMA_MODE_TAA(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_DMA_MODE_TAA_SHIFT)) & ENET_DMA_MODE_TAA_MASK)
N#define ENET_DMA_MODE_TXPR_MASK                  (0x800U)
N#define ENET_DMA_MODE_TXPR_SHIFT                 (11U)
N#define ENET_DMA_MODE_TXPR(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_DMA_MODE_TXPR_SHIFT)) & ENET_DMA_MODE_TXPR_MASK)
N#define ENET_DMA_MODE_PR_MASK                    (0x7000U)
N#define ENET_DMA_MODE_PR_SHIFT                   (12U)
N#define ENET_DMA_MODE_PR(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_DMA_MODE_PR_SHIFT)) & ENET_DMA_MODE_PR_MASK)
N
N/*! @name DMA_SYSBUS_MODE - DMA System Bus mode */
N#define ENET_DMA_SYSBUS_MODE_FB_MASK             (0x1U)
N#define ENET_DMA_SYSBUS_MODE_FB_SHIFT            (0U)
N#define ENET_DMA_SYSBUS_MODE_FB(x)               (((uint32_t)(((uint32_t)(x)) << ENET_DMA_SYSBUS_MODE_FB_SHIFT)) & ENET_DMA_SYSBUS_MODE_FB_MASK)
N#define ENET_DMA_SYSBUS_MODE_AAL_MASK            (0x1000U)
N#define ENET_DMA_SYSBUS_MODE_AAL_SHIFT           (12U)
N#define ENET_DMA_SYSBUS_MODE_AAL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_DMA_SYSBUS_MODE_AAL_SHIFT)) & ENET_DMA_SYSBUS_MODE_AAL_MASK)
N#define ENET_DMA_SYSBUS_MODE_MB_MASK             (0x4000U)
N#define ENET_DMA_SYSBUS_MODE_MB_SHIFT            (14U)
N#define ENET_DMA_SYSBUS_MODE_MB(x)               (((uint32_t)(((uint32_t)(x)) << ENET_DMA_SYSBUS_MODE_MB_SHIFT)) & ENET_DMA_SYSBUS_MODE_MB_MASK)
N#define ENET_DMA_SYSBUS_MODE_RB_MASK             (0x8000U)
N#define ENET_DMA_SYSBUS_MODE_RB_SHIFT            (15U)
N#define ENET_DMA_SYSBUS_MODE_RB(x)               (((uint32_t)(((uint32_t)(x)) << ENET_DMA_SYSBUS_MODE_RB_SHIFT)) & ENET_DMA_SYSBUS_MODE_RB_MASK)
N
N/*! @name DMA_INTR_STAT - DMA Interrupt status */
N#define ENET_DMA_INTR_STAT_DC0IS_MASK            (0x1U)
N#define ENET_DMA_INTR_STAT_DC0IS_SHIFT           (0U)
N#define ENET_DMA_INTR_STAT_DC0IS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_DMA_INTR_STAT_DC0IS_SHIFT)) & ENET_DMA_INTR_STAT_DC0IS_MASK)
N#define ENET_DMA_INTR_STAT_DC1IS_MASK            (0x2U)
N#define ENET_DMA_INTR_STAT_DC1IS_SHIFT           (1U)
N#define ENET_DMA_INTR_STAT_DC1IS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_DMA_INTR_STAT_DC1IS_SHIFT)) & ENET_DMA_INTR_STAT_DC1IS_MASK)
N#define ENET_DMA_INTR_STAT_MTLIS_MASK            (0x10000U)
N#define ENET_DMA_INTR_STAT_MTLIS_SHIFT           (16U)
N#define ENET_DMA_INTR_STAT_MTLIS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_DMA_INTR_STAT_MTLIS_SHIFT)) & ENET_DMA_INTR_STAT_MTLIS_MASK)
N#define ENET_DMA_INTR_STAT_MACIS_MASK            (0x20000U)
N#define ENET_DMA_INTR_STAT_MACIS_SHIFT           (17U)
N#define ENET_DMA_INTR_STAT_MACIS(x)              (((uint32_t)(((uint32_t)(x)) << ENET_DMA_INTR_STAT_MACIS_SHIFT)) & ENET_DMA_INTR_STAT_MACIS_MASK)
N
N/*! @name DMA_DBG_STAT - DMA Debug Status */
N#define ENET_DMA_DBG_STAT_AHSTS_MASK             (0x1U)
N#define ENET_DMA_DBG_STAT_AHSTS_SHIFT            (0U)
N#define ENET_DMA_DBG_STAT_AHSTS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_DMA_DBG_STAT_AHSTS_SHIFT)) & ENET_DMA_DBG_STAT_AHSTS_MASK)
N#define ENET_DMA_DBG_STAT_RPS0_MASK              (0xF00U)
N#define ENET_DMA_DBG_STAT_RPS0_SHIFT             (8U)
N#define ENET_DMA_DBG_STAT_RPS0(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMA_DBG_STAT_RPS0_SHIFT)) & ENET_DMA_DBG_STAT_RPS0_MASK)
N#define ENET_DMA_DBG_STAT_TPS0_MASK              (0xF000U)
N#define ENET_DMA_DBG_STAT_TPS0_SHIFT             (12U)
N#define ENET_DMA_DBG_STAT_TPS0(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMA_DBG_STAT_TPS0_SHIFT)) & ENET_DMA_DBG_STAT_TPS0_MASK)
N#define ENET_DMA_DBG_STAT_RPS1_MASK              (0xF0000U)
N#define ENET_DMA_DBG_STAT_RPS1_SHIFT             (16U)
N#define ENET_DMA_DBG_STAT_RPS1(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMA_DBG_STAT_RPS1_SHIFT)) & ENET_DMA_DBG_STAT_RPS1_MASK)
N#define ENET_DMA_DBG_STAT_TPS1_MASK              (0xF00000U)
N#define ENET_DMA_DBG_STAT_TPS1_SHIFT             (20U)
N#define ENET_DMA_DBG_STAT_TPS1(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMA_DBG_STAT_TPS1_SHIFT)) & ENET_DMA_DBG_STAT_TPS1_MASK)
N
N/*! @name DMA_CH_DMA_CHX_CTRL - DMA Channelx Control */
N#define ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_MASK      (0x10000U)
N#define ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_SHIFT     (16U)
N#define ENET_DMA_CH_DMA_CHX_CTRL_PBLx8(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_SHIFT)) & ENET_DMA_CH_DMA_CHX_CTRL_PBLx8_MASK)
N#define ENET_DMA_CH_DMA_CHX_CTRL_DSL_MASK        (0x1C0000U)
N#define ENET_DMA_CH_DMA_CHX_CTRL_DSL_SHIFT       (18U)
N#define ENET_DMA_CH_DMA_CHX_CTRL_DSL(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_CTRL_DSL_SHIFT)) & ENET_DMA_CH_DMA_CHX_CTRL_DSL_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_CTRL */
N#define ENET_DMA_CH_DMA_CHX_CTRL_COUNT           (2U)
N
N/*! @name DMA_CH_DMA_CHX_TX_CTRL - DMA Channelx Transmit Control */
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_MASK      (0x1U)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_SHIFT     (0U)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_ST(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_SHIFT)) & ENET_DMA_CH_DMA_CHX_TX_CTRL_ST_MASK)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_MASK     (0xEU)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_SHIFT    (1U)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_SHIFT)) & ENET_DMA_CH_DMA_CHX_TX_CTRL_TCW_MASK)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_MASK     (0x10U)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_SHIFT    (4U)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_SHIFT)) & ENET_DMA_CH_DMA_CHX_TX_CTRL_OSF_MASK)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_MASK   (0x3F0000U)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_SHIFT  (16U)
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL(x)     (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_SHIFT)) & ENET_DMA_CH_DMA_CHX_TX_CTRL_TxPBL_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_TX_CTRL */
N#define ENET_DMA_CH_DMA_CHX_TX_CTRL_COUNT        (2U)
N
N/*! @name DMA_CH_DMA_CHX_RX_CTRL - DMA Channelx Receive Control */
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_MASK      (0x1U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_SHIFT     (0U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_SR(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_SHIFT)) & ENET_DMA_CH_DMA_CHX_RX_CTRL_SR_MASK)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_MASK    (0x7FF8U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_SHIFT   (3U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ(x)      (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_SHIFT)) & ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ_MASK)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_MASK   (0x3F0000U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_SHIFT  (16U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL(x)     (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_SHIFT)) & ENET_DMA_CH_DMA_CHX_RX_CTRL_RxPBL_MASK)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_MASK     (0x80000000U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_SHIFT    (31U)
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_SHIFT)) & ENET_DMA_CH_DMA_CHX_RX_CTRL_RPF_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_RX_CTRL */
N#define ENET_DMA_CH_DMA_CHX_RX_CTRL_COUNT        (2U)
N
N/*! @name DMA_CH_DMA_CHX_TXDESC_LIST_ADDR -  */
N#define ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_MASK (0xFFFFFFFCU)
N#define ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_SHIFT (2U)
N#define ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_SHIFT)) & ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_STL_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR */
N#define ENET_DMA_CH_DMA_CHX_TXDESC_LIST_ADDR_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_RXDESC_LIST_ADDR -  */
N#define ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_MASK (0xFFFFFFFCU)
N#define ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_SHIFT (2U)
N#define ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_SHIFT)) & ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_SRL_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR */
N#define ENET_DMA_CH_DMA_CHX_RXDESC_LIST_ADDR_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_TXDESC_TAIL_PTR -  */
N#define ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_MASK (0xFFFFFFFCU)
N#define ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_SHIFT (2U)
N#define ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_SHIFT)) & ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_TDTP_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR */
N#define ENET_DMA_CH_DMA_CHX_TXDESC_TAIL_PTR_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_RXDESC_TAIL_PTR -  */
N#define ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_MASK (0xFFFFFFFCU)
N#define ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_SHIFT (2U)
N#define ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_SHIFT)) & ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_RDTP_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR */
N#define ENET_DMA_CH_DMA_CHX_RXDESC_TAIL_PTR_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_TXDESC_RING_LENGTH -  */
N#define ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_MASK (0x3FFU)
N#define ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_SHIFT)) & ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_TDRL_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH */
N#define ENET_DMA_CH_DMA_CHX_TXDESC_RING_LENGTH_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_RXDESC_RING_LENGTH - Channelx Rx descriptor Ring Length */
N#define ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_MASK (0x3FFU)
N#define ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_SHIFT)) & ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_RDRL_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH */
N#define ENET_DMA_CH_DMA_CHX_RXDESC_RING_LENGTH_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_INT_EN - Channelx Interrupt Enable */
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TIE_MASK      (0x1U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TIE_SHIFT     (0U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TIE(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_TIE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_TIE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TSE_MASK      (0x2U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TSE_SHIFT     (1U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TSE(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_TSE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_TSE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_MASK     (0x4U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_SHIFT    (2U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_TBUE(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_TBUE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RIE_MASK      (0x40U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RIE_SHIFT     (6U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RIE(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_RIE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_RIE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_MASK     (0x80U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_SHIFT    (7U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RBUE(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_RBUE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RSE_MASK      (0x100U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RSE_SHIFT     (8U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RSE(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_RSE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_RSE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_MASK     (0x200U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_SHIFT    (9U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_RWTE(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_RWTE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_MASK     (0x400U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_SHIFT    (10U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_ETIE(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_ETIE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_MASK     (0x800U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_SHIFT    (11U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_ERIE(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_ERIE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_MASK     (0x1000U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_SHIFT    (12U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_FBEE(x)       (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_FBEE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_AIE_MASK      (0x4000U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_AIE_SHIFT     (14U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_AIE(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_AIE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_AIE_MASK)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_NIE_MASK      (0x8000U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_NIE_SHIFT     (15U)
N#define ENET_DMA_CH_DMA_CHX_INT_EN_NIE(x)        (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_INT_EN_NIE_SHIFT)) & ENET_DMA_CH_DMA_CHX_INT_EN_NIE_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_INT_EN */
N#define ENET_DMA_CH_DMA_CHX_INT_EN_COUNT         (2U)
N
N/*! @name DMA_CH_DMA_CHX_RX_INT_WDTIMER - Receive Interrupt Watchdog Timer */
N#define ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_MASK (0xFFU)
N#define ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_SHIFT)) & ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_RIWT_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER */
N#define ENET_DMA_CH_DMA_CHX_RX_INT_WDTIMER_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT - Slot Function Control and Status */
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_MASK (0x1U)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_SHIFT)) & ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ESC_MASK)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_MASK (0x2U)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_SHIFT (1U)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_SHIFT)) & ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_ASC_MASK)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_MASK (0xF0000U)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_SHIFT (16U)
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_SHIFT)) & ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_RSN_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT */
N#define ENET_DMA_CH_DMA_CHX_SLOT_FUNC_CTRL_STAT_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_CUR_HST_TXDESC - Channelx Current Host Transmit descriptor */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_MASK (0xFFFFFFFFU)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_SHIFT)) & ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_HTD_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXDESC_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_CUR_HST_RXDESC -  */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_MASK (0xFFFFFFFFU)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_SHIFT)) & ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_HRD_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXDESC_COUNT (2U)
N
N/*! @name DMA_CH_DMA_CHX_CUR_HST_TXBUF -  */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_MASK (0xFFFFFFFFU)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_SHIFT)) & ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_HTB_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_TXBUF_COUNT  (2U)
N
N/*! @name DMA_CH_DMA_CHX_CUR_HST_RXBUF - Channelx Current Application Receive Buffer Address */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_MASK (0xFFFFFFFFU)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_SHIFT (0U)
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB(x) (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_SHIFT)) & ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_HRB_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF */
N#define ENET_DMA_CH_DMA_CHX_CUR_HST_RXBUF_COUNT  (2U)
N
N/*! @name DMA_CH_DMA_CHX_STAT - Channelx DMA status register */
N#define ENET_DMA_CH_DMA_CHX_STAT_TI_MASK         (0x1U)
N#define ENET_DMA_CH_DMA_CHX_STAT_TI_SHIFT        (0U)
N#define ENET_DMA_CH_DMA_CHX_STAT_TI(x)           (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_TI_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_TI_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_TPS_MASK        (0x2U)
N#define ENET_DMA_CH_DMA_CHX_STAT_TPS_SHIFT       (1U)
N#define ENET_DMA_CH_DMA_CHX_STAT_TPS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_TPS_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_TPS_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_TBU_MASK        (0x4U)
N#define ENET_DMA_CH_DMA_CHX_STAT_TBU_SHIFT       (2U)
N#define ENET_DMA_CH_DMA_CHX_STAT_TBU(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_TBU_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_TBU_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_RI_MASK         (0x40U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RI_SHIFT        (6U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RI(x)           (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_RI_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_RI_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_RBU_MASK        (0x80U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RBU_SHIFT       (7U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RBU(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_RBU_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_RBU_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_RPS_MASK        (0x100U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RPS_SHIFT       (8U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RPS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_RPS_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_RPS_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_RWT_MASK        (0x200U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RWT_SHIFT       (9U)
N#define ENET_DMA_CH_DMA_CHX_STAT_RWT(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_RWT_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_RWT_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_ETI_MASK        (0x400U)
N#define ENET_DMA_CH_DMA_CHX_STAT_ETI_SHIFT       (10U)
N#define ENET_DMA_CH_DMA_CHX_STAT_ETI(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_ETI_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_ETI_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_ERI_MASK        (0x800U)
N#define ENET_DMA_CH_DMA_CHX_STAT_ERI_SHIFT       (11U)
N#define ENET_DMA_CH_DMA_CHX_STAT_ERI(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_ERI_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_ERI_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_FBE_MASK        (0x1000U)
N#define ENET_DMA_CH_DMA_CHX_STAT_FBE_SHIFT       (12U)
N#define ENET_DMA_CH_DMA_CHX_STAT_FBE(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_FBE_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_FBE_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_AIS_MASK        (0x4000U)
N#define ENET_DMA_CH_DMA_CHX_STAT_AIS_SHIFT       (14U)
N#define ENET_DMA_CH_DMA_CHX_STAT_AIS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_AIS_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_AIS_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_NIS_MASK        (0x8000U)
N#define ENET_DMA_CH_DMA_CHX_STAT_NIS_SHIFT       (15U)
N#define ENET_DMA_CH_DMA_CHX_STAT_NIS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_NIS_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_NIS_MASK)
N#define ENET_DMA_CH_DMA_CHX_STAT_EB_MASK         (0x70000U)
N#define ENET_DMA_CH_DMA_CHX_STAT_EB_SHIFT        (16U)
N#define ENET_DMA_CH_DMA_CHX_STAT_EB(x)           (((uint32_t)(((uint32_t)(x)) << ENET_DMA_CH_DMA_CHX_STAT_EB_SHIFT)) & ENET_DMA_CH_DMA_CHX_STAT_EB_MASK)
N
N/* The count of ENET_DMA_CH_DMA_CHX_STAT */
N#define ENET_DMA_CH_DMA_CHX_STAT_COUNT           (2U)
N
N
N/*!
N * @}
N */ /* end of group ENET_Register_Masks */
N
N
N/* ENET - Peripheral instance base addresses */
N/** Peripheral ENET base address */
N#define ENET_BASE                                (0x40092000u)
N/** Peripheral ENET base pointer */
N#define ENET                                     ((ENET_Type *)ENET_BASE)
N/** Array initializer of ENET peripheral base addresses */
N#define ENET_BASE_ADDRS                          { ENET_BASE }
N/** Array initializer of ENET peripheral base pointers */
N#define ENET_BASE_PTRS                           { ENET }
N/** Interrupt vectors for the ENET peripheral type */
N#define ENET_IRQS                                { ETHERNET_IRQn }
N#define ENET_PMT_IRQS                            { ETHERNET_PMT_IRQn }
N#define ENET_MACLP_IRQS                          { ETHERNET_MACLP_IRQn }
N
N/*!
N * @}
N */ /* end of group ENET_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- FLEXCOMM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FLEXCOMM_Peripheral_Access_Layer FLEXCOMM Peripheral Access Layer
N * @{
N */
N
N/** FLEXCOMM - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[4088];
N  __IO uint32_t PSELID;                            /**< Peripheral Select and Flexcomm ID register., offset: 0xFF8 */
X  volatile uint32_t PSELID;                             
N  __IO uint32_t PID;                               /**< Peripheral identification register., offset: 0xFFC */
X  volatile uint32_t PID;                                
N} FLEXCOMM_Type;
N
N/* ----------------------------------------------------------------------------
N   -- FLEXCOMM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FLEXCOMM_Register_Masks FLEXCOMM Register Masks
N * @{
N */
N
N/*! @name PSELID - Peripheral Select and Flexcomm ID register. */
N#define FLEXCOMM_PSELID_PERSEL_MASK              (0x7U)
N#define FLEXCOMM_PSELID_PERSEL_SHIFT             (0U)
N#define FLEXCOMM_PSELID_PERSEL(x)                (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_PERSEL_SHIFT)) & FLEXCOMM_PSELID_PERSEL_MASK)
N#define FLEXCOMM_PSELID_LOCK_MASK                (0x8U)
N#define FLEXCOMM_PSELID_LOCK_SHIFT               (3U)
N#define FLEXCOMM_PSELID_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_LOCK_SHIFT)) & FLEXCOMM_PSELID_LOCK_MASK)
N#define FLEXCOMM_PSELID_USARTPRESENT_MASK        (0x10U)
N#define FLEXCOMM_PSELID_USARTPRESENT_SHIFT       (4U)
N#define FLEXCOMM_PSELID_USARTPRESENT(x)          (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_USARTPRESENT_SHIFT)) & FLEXCOMM_PSELID_USARTPRESENT_MASK)
N#define FLEXCOMM_PSELID_SPIPRESENT_MASK          (0x20U)
N#define FLEXCOMM_PSELID_SPIPRESENT_SHIFT         (5U)
N#define FLEXCOMM_PSELID_SPIPRESENT(x)            (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_SPIPRESENT_SHIFT)) & FLEXCOMM_PSELID_SPIPRESENT_MASK)
N#define FLEXCOMM_PSELID_I2CPRESENT_MASK          (0x40U)
N#define FLEXCOMM_PSELID_I2CPRESENT_SHIFT         (6U)
N#define FLEXCOMM_PSELID_I2CPRESENT(x)            (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_I2CPRESENT_SHIFT)) & FLEXCOMM_PSELID_I2CPRESENT_MASK)
N#define FLEXCOMM_PSELID_I2SPRESENT_MASK          (0x80U)
N#define FLEXCOMM_PSELID_I2SPRESENT_SHIFT         (7U)
N#define FLEXCOMM_PSELID_I2SPRESENT(x)            (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_I2SPRESENT_SHIFT)) & FLEXCOMM_PSELID_I2SPRESENT_MASK)
N#define FLEXCOMM_PSELID_ID_MASK                  (0xFFFFF000U)
N#define FLEXCOMM_PSELID_ID_SHIFT                 (12U)
N#define FLEXCOMM_PSELID_ID(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PSELID_ID_SHIFT)) & FLEXCOMM_PSELID_ID_MASK)
N
N/*! @name PID - Peripheral identification register. */
N#define FLEXCOMM_PID_Minor_Rev_MASK              (0xF00U)
N#define FLEXCOMM_PID_Minor_Rev_SHIFT             (8U)
N#define FLEXCOMM_PID_Minor_Rev(x)                (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PID_Minor_Rev_SHIFT)) & FLEXCOMM_PID_Minor_Rev_MASK)
N#define FLEXCOMM_PID_Major_Rev_MASK              (0xF000U)
N#define FLEXCOMM_PID_Major_Rev_SHIFT             (12U)
N#define FLEXCOMM_PID_Major_Rev(x)                (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PID_Major_Rev_SHIFT)) & FLEXCOMM_PID_Major_Rev_MASK)
N#define FLEXCOMM_PID_ID_MASK                     (0xFFFF0000U)
N#define FLEXCOMM_PID_ID_SHIFT                    (16U)
N#define FLEXCOMM_PID_ID(x)                       (((uint32_t)(((uint32_t)(x)) << FLEXCOMM_PID_ID_SHIFT)) & FLEXCOMM_PID_ID_MASK)
N
N
N/*!
N * @}
N */ /* end of group FLEXCOMM_Register_Masks */
N
N
N/* FLEXCOMM - Peripheral instance base addresses */
N/** Peripheral FLEXCOMM0 base address */
N#define FLEXCOMM0_BASE                           (0x40086000u)
N/** Peripheral FLEXCOMM0 base pointer */
N#define FLEXCOMM0                                ((FLEXCOMM_Type *)FLEXCOMM0_BASE)
N/** Peripheral FLEXCOMM1 base address */
N#define FLEXCOMM1_BASE                           (0x40087000u)
N/** Peripheral FLEXCOMM1 base pointer */
N#define FLEXCOMM1                                ((FLEXCOMM_Type *)FLEXCOMM1_BASE)
N/** Peripheral FLEXCOMM2 base address */
N#define FLEXCOMM2_BASE                           (0x40088000u)
N/** Peripheral FLEXCOMM2 base pointer */
N#define FLEXCOMM2                                ((FLEXCOMM_Type *)FLEXCOMM2_BASE)
N/** Peripheral FLEXCOMM3 base address */
N#define FLEXCOMM3_BASE                           (0x40089000u)
N/** Peripheral FLEXCOMM3 base pointer */
N#define FLEXCOMM3                                ((FLEXCOMM_Type *)FLEXCOMM3_BASE)
N/** Peripheral FLEXCOMM4 base address */
N#define FLEXCOMM4_BASE                           (0x4008A000u)
N/** Peripheral FLEXCOMM4 base pointer */
N#define FLEXCOMM4                                ((FLEXCOMM_Type *)FLEXCOMM4_BASE)
N/** Peripheral FLEXCOMM5 base address */
N#define FLEXCOMM5_BASE                           (0x40096000u)
N/** Peripheral FLEXCOMM5 base pointer */
N#define FLEXCOMM5                                ((FLEXCOMM_Type *)FLEXCOMM5_BASE)
N/** Peripheral FLEXCOMM6 base address */
N#define FLEXCOMM6_BASE                           (0x40097000u)
N/** Peripheral FLEXCOMM6 base pointer */
N#define FLEXCOMM6                                ((FLEXCOMM_Type *)FLEXCOMM6_BASE)
N/** Peripheral FLEXCOMM7 base address */
N#define FLEXCOMM7_BASE                           (0x40098000u)
N/** Peripheral FLEXCOMM7 base pointer */
N#define FLEXCOMM7                                ((FLEXCOMM_Type *)FLEXCOMM7_BASE)
N/** Peripheral FLEXCOMM8 base address */
N#define FLEXCOMM8_BASE                           (0x40099000u)
N/** Peripheral FLEXCOMM8 base pointer */
N#define FLEXCOMM8                                ((FLEXCOMM_Type *)FLEXCOMM8_BASE)
N/** Peripheral FLEXCOMM9 base address */
N#define FLEXCOMM9_BASE                           (0x4009A000u)
N/** Peripheral FLEXCOMM9 base pointer */
N#define FLEXCOMM9                                ((FLEXCOMM_Type *)FLEXCOMM9_BASE)
N/** Array initializer of FLEXCOMM peripheral base addresses */
N#define FLEXCOMM_BASE_ADDRS                      { FLEXCOMM0_BASE, FLEXCOMM1_BASE, FLEXCOMM2_BASE, FLEXCOMM3_BASE, FLEXCOMM4_BASE, FLEXCOMM5_BASE, FLEXCOMM6_BASE, FLEXCOMM7_BASE, FLEXCOMM8_BASE, FLEXCOMM9_BASE }
N/** Array initializer of FLEXCOMM peripheral base pointers */
N#define FLEXCOMM_BASE_PTRS                       { FLEXCOMM0, FLEXCOMM1, FLEXCOMM2, FLEXCOMM3, FLEXCOMM4, FLEXCOMM5, FLEXCOMM6, FLEXCOMM7, FLEXCOMM8, FLEXCOMM9 }
N/** Interrupt vectors for the FLEXCOMM peripheral type */
N#define FLEXCOMM_IRQS                            { FLEXCOMM0_IRQn, FLEXCOMM1_IRQn, FLEXCOMM2_IRQn, FLEXCOMM3_IRQn, FLEXCOMM4_IRQn, FLEXCOMM5_IRQn, FLEXCOMM6_IRQn, FLEXCOMM7_IRQn, FLEXCOMM8_IRQn, FLEXCOMM9_IRQn }
N
N/*!
N * @}
N */ /* end of group FLEXCOMM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- FMC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FMC_Peripheral_Access_Layer FMC Peripheral Access Layer
N * @{
N */
N
N/** FMC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t FCTR;                              /**< Control register, offset: 0x0 */
X  volatile uint32_t FCTR;                               
N       uint8_t RESERVED_0[12];
N  __IO uint32_t FBWST;                             /**< Wait state register, offset: 0x10 */
X  volatile uint32_t FBWST;                              
N       uint8_t RESERVED_1[12];
N  __IO uint32_t FMSSTART;                          /**< Signature start address register, offset: 0x20 */
X  volatile uint32_t FMSSTART;                           
N  __IO uint32_t FMSSTOP;                           /**< Signature stop-address register, offset: 0x24 */
X  volatile uint32_t FMSSTOP;                            
N       uint8_t RESERVED_2[4];
N  __I  uint32_t FMSW[4];                           /**< Words of 128-bit signature word, array offset: 0x2C, array step: 0x4 */
X  volatile const  uint32_t FMSW[4];                            
N       uint8_t RESERVED_3[4004];
N  __I  uint32_t FMSTAT;                            /**< Signature generation status register, offset: 0xFE0 */
X  volatile const  uint32_t FMSTAT;                             
N       uint8_t RESERVED_4[4];
N  __O  uint32_t FMSTATCLR;                         /**< Signature generation status clear register, offset: 0xFE8 */
X  volatile  uint32_t FMSTATCLR;                          
N} FMC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- FMC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FMC_Register_Masks FMC Register Masks
N * @{
N */
N
N/*! @name FCTR - Control register */
N#define FMC_FCTR_FS_RD0_MASK                     (0x8U)
N#define FMC_FCTR_FS_RD0_SHIFT                    (3U)
N#define FMC_FCTR_FS_RD0(x)                       (((uint32_t)(((uint32_t)(x)) << FMC_FCTR_FS_RD0_SHIFT)) & FMC_FCTR_FS_RD0_MASK)
N#define FMC_FCTR_FS_RD1_MASK                     (0x10U)
N#define FMC_FCTR_FS_RD1_SHIFT                    (4U)
N#define FMC_FCTR_FS_RD1(x)                       (((uint32_t)(((uint32_t)(x)) << FMC_FCTR_FS_RD1_SHIFT)) & FMC_FCTR_FS_RD1_MASK)
N
N/*! @name FBWST - Wait state register */
N#define FMC_FBWST_WAITSTATES_MASK                (0xFFU)
N#define FMC_FBWST_WAITSTATES_SHIFT               (0U)
N#define FMC_FBWST_WAITSTATES(x)                  (((uint32_t)(((uint32_t)(x)) << FMC_FBWST_WAITSTATES_SHIFT)) & FMC_FBWST_WAITSTATES_MASK)
N
N/*! @name FMSSTART - Signature start address register */
N#define FMC_FMSSTART_START_MASK                  (0x1FFFFU)
N#define FMC_FMSSTART_START_SHIFT                 (0U)
N#define FMC_FMSSTART_START(x)                    (((uint32_t)(((uint32_t)(x)) << FMC_FMSSTART_START_SHIFT)) & FMC_FMSSTART_START_MASK)
N
N/*! @name FMSSTOP - Signature stop-address register */
N#define FMC_FMSSTOP_STOP_MASK                    (0x1FFFFU)
N#define FMC_FMSSTOP_STOP_SHIFT                   (0U)
N#define FMC_FMSSTOP_STOP(x)                      (((uint32_t)(((uint32_t)(x)) << FMC_FMSSTOP_STOP_SHIFT)) & FMC_FMSSTOP_STOP_MASK)
N#define FMC_FMSSTOP_SIG_START_MASK               (0x20000U)
N#define FMC_FMSSTOP_SIG_START_SHIFT              (17U)
N#define FMC_FMSSTOP_SIG_START(x)                 (((uint32_t)(((uint32_t)(x)) << FMC_FMSSTOP_SIG_START_SHIFT)) & FMC_FMSSTOP_SIG_START_MASK)
N
N/*! @name FMSW - Words of 128-bit signature word */
N#define FMC_FMSW_SW_MASK                         (0xFFFFFFFFU)
N#define FMC_FMSW_SW_SHIFT                        (0U)
N#define FMC_FMSW_SW(x)                           (((uint32_t)(((uint32_t)(x)) << FMC_FMSW_SW_SHIFT)) & FMC_FMSW_SW_MASK)
N
N/* The count of FMC_FMSW */
N#define FMC_FMSW_COUNT                           (4U)
N
N/*! @name FMSTAT - Signature generation status register */
N#define FMC_FMSTAT_SIG_DONE_MASK                 (0x4U)
N#define FMC_FMSTAT_SIG_DONE_SHIFT                (2U)
N#define FMC_FMSTAT_SIG_DONE(x)                   (((uint32_t)(((uint32_t)(x)) << FMC_FMSTAT_SIG_DONE_SHIFT)) & FMC_FMSTAT_SIG_DONE_MASK)
N
N/*! @name FMSTATCLR - Signature generation status clear register */
N#define FMC_FMSTATCLR_SIG_DONE_CLR_MASK          (0x4U)
N#define FMC_FMSTATCLR_SIG_DONE_CLR_SHIFT         (2U)
N#define FMC_FMSTATCLR_SIG_DONE_CLR(x)            (((uint32_t)(((uint32_t)(x)) << FMC_FMSTATCLR_SIG_DONE_CLR_SHIFT)) & FMC_FMSTATCLR_SIG_DONE_CLR_MASK)
N
N
N/*!
N * @}
N */ /* end of group FMC_Register_Masks */
N
N
N/* FMC - Peripheral instance base addresses */
N/** Peripheral FMC base address */
N#define FMC_BASE                                 (0x40034000u)
N/** Peripheral FMC base pointer */
N#define FMC                                      ((FMC_Type *)FMC_BASE)
N/** Array initializer of FMC peripheral base addresses */
N#define FMC_BASE_ADDRS                           { FMC_BASE }
N/** Array initializer of FMC peripheral base pointers */
N#define FMC_BASE_PTRS                            { FMC }
N
N/*!
N * @}
N */ /* end of group FMC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- GINT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GINT_Peripheral_Access_Layer GINT Peripheral Access Layer
N * @{
N */
N
N/** GINT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CTRL;                              /**< GPIO grouped interrupt control register, offset: 0x0 */
X  volatile uint32_t CTRL;                               
N       uint8_t RESERVED_0[28];
N  __IO uint32_t PORT_POL[2];                       /**< GPIO grouped interrupt port 0 polarity register, array offset: 0x20, array step: 0x4 */
X  volatile uint32_t PORT_POL[2];                        
N       uint8_t RESERVED_1[24];
N  __IO uint32_t PORT_ENA[2];                       /**< GPIO grouped interrupt port 0 enable register, array offset: 0x40, array step: 0x4 */
X  volatile uint32_t PORT_ENA[2];                        
N} GINT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- GINT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GINT_Register_Masks GINT Register Masks
N * @{
N */
N
N/*! @name CTRL - GPIO grouped interrupt control register */
N#define GINT_CTRL_INT_MASK                       (0x1U)
N#define GINT_CTRL_INT_SHIFT                      (0U)
N#define GINT_CTRL_INT(x)                         (((uint32_t)(((uint32_t)(x)) << GINT_CTRL_INT_SHIFT)) & GINT_CTRL_INT_MASK)
N#define GINT_CTRL_COMB_MASK                      (0x2U)
N#define GINT_CTRL_COMB_SHIFT                     (1U)
N#define GINT_CTRL_COMB(x)                        (((uint32_t)(((uint32_t)(x)) << GINT_CTRL_COMB_SHIFT)) & GINT_CTRL_COMB_MASK)
N#define GINT_CTRL_TRIG_MASK                      (0x4U)
N#define GINT_CTRL_TRIG_SHIFT                     (2U)
N#define GINT_CTRL_TRIG(x)                        (((uint32_t)(((uint32_t)(x)) << GINT_CTRL_TRIG_SHIFT)) & GINT_CTRL_TRIG_MASK)
N
N/*! @name PORT_POL - GPIO grouped interrupt port 0 polarity register */
N#define GINT_PORT_POL_POL_MASK                   (0xFFFFFFFFU)
N#define GINT_PORT_POL_POL_SHIFT                  (0U)
N#define GINT_PORT_POL_POL(x)                     (((uint32_t)(((uint32_t)(x)) << GINT_PORT_POL_POL_SHIFT)) & GINT_PORT_POL_POL_MASK)
N
N/* The count of GINT_PORT_POL */
N#define GINT_PORT_POL_COUNT                      (2U)
N
N/*! @name PORT_ENA - GPIO grouped interrupt port 0 enable register */
N#define GINT_PORT_ENA_ENA_MASK                   (0xFFFFFFFFU)
N#define GINT_PORT_ENA_ENA_SHIFT                  (0U)
N#define GINT_PORT_ENA_ENA(x)                     (((uint32_t)(((uint32_t)(x)) << GINT_PORT_ENA_ENA_SHIFT)) & GINT_PORT_ENA_ENA_MASK)
N
N/* The count of GINT_PORT_ENA */
N#define GINT_PORT_ENA_COUNT                      (2U)
N
N
N/*!
N * @}
N */ /* end of group GINT_Register_Masks */
N
N
N/* GINT - Peripheral instance base addresses */
N/** Peripheral GINT0 base address */
N#define GINT0_BASE                               (0x40002000u)
N/** Peripheral GINT0 base pointer */
N#define GINT0                                    ((GINT_Type *)GINT0_BASE)
N/** Peripheral GINT1 base address */
N#define GINT1_BASE                               (0x40003000u)
N/** Peripheral GINT1 base pointer */
N#define GINT1                                    ((GINT_Type *)GINT1_BASE)
N/** Array initializer of GINT peripheral base addresses */
N#define GINT_BASE_ADDRS                          { GINT0_BASE, GINT1_BASE }
N/** Array initializer of GINT peripheral base pointers */
N#define GINT_BASE_PTRS                           { GINT0, GINT1 }
N/** Interrupt vectors for the GINT peripheral type */
N#define GINT_IRQS                                { GINT0_IRQn, GINT1_IRQn }
N
N/*!
N * @}
N */ /* end of group GINT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- GPIO Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Peripheral_Access_Layer GPIO Peripheral Access Layer
N * @{
N */
N
N/** GPIO - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t B[6][32];                           /**< Byte pin registers for all port 0 and 1 GPIO pins, array offset: 0x0, array step: index*0x20, index2*0x1 */
X  volatile uint8_t B[6][32];                            
N       uint8_t RESERVED_0[3904];
N  __IO uint32_t W[6][32];                          /**< Word pin registers for all port 0 and 1 GPIO pins, array offset: 0x1000, array step: index*0x80, index2*0x4 */
X  volatile uint32_t W[6][32];                           
N       uint8_t RESERVED_1[3328];
N  __IO uint32_t DIR[6];                            /**< Direction registers, array offset: 0x2000, array step: 0x4 */
X  volatile uint32_t DIR[6];                             
N       uint8_t RESERVED_2[104];
N  __IO uint32_t MASK[6];                           /**< Mask register, array offset: 0x2080, array step: 0x4 */
X  volatile uint32_t MASK[6];                            
N       uint8_t RESERVED_3[104];
N  __IO uint32_t PIN[6];                            /**< Port pin register, array offset: 0x2100, array step: 0x4 */
X  volatile uint32_t PIN[6];                             
N       uint8_t RESERVED_4[104];
N  __IO uint32_t MPIN[6];                           /**< Masked port register, array offset: 0x2180, array step: 0x4 */
X  volatile uint32_t MPIN[6];                            
N       uint8_t RESERVED_5[104];
N  __IO uint32_t SET[6];                            /**< Write: Set register for port Read: output bits for port, array offset: 0x2200, array step: 0x4 */
X  volatile uint32_t SET[6];                             
N       uint8_t RESERVED_6[104];
N  __O  uint32_t CLR[6];                            /**< Clear port, array offset: 0x2280, array step: 0x4 */
X  volatile  uint32_t CLR[6];                             
N       uint8_t RESERVED_7[104];
N  __O  uint32_t NOT[6];                            /**< Toggle port, array offset: 0x2300, array step: 0x4 */
X  volatile  uint32_t NOT[6];                             
N       uint8_t RESERVED_8[104];
N  __O  uint32_t DIRSET[6];                         /**< Set pin direction bits for port, array offset: 0x2380, array step: 0x4 */
X  volatile  uint32_t DIRSET[6];                          
N       uint8_t RESERVED_9[104];
N  __O  uint32_t DIRCLR[6];                         /**< Clear pin direction bits for port, array offset: 0x2400, array step: 0x4 */
X  volatile  uint32_t DIRCLR[6];                          
N       uint8_t RESERVED_10[104];
N  __O  uint32_t DIRNOT[6];                         /**< Toggle pin direction bits for port, array offset: 0x2480, array step: 0x4 */
X  volatile  uint32_t DIRNOT[6];                          
N} GPIO_Type;
N
N/* ----------------------------------------------------------------------------
N   -- GPIO Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Register_Masks GPIO Register Masks
N * @{
N */
N
N/*! @name B - Byte pin registers for all port 0 and 1 GPIO pins */
N#define GPIO_B_PBYTE_MASK                        (0x1U)
N#define GPIO_B_PBYTE_SHIFT                       (0U)
N#define GPIO_B_PBYTE(x)                          (((uint8_t)(((uint8_t)(x)) << GPIO_B_PBYTE_SHIFT)) & GPIO_B_PBYTE_MASK)
N
N/* The count of GPIO_B */
N#define GPIO_B_COUNT                             (6U)
N
N/* The count of GPIO_B */
N#define GPIO_B_COUNT2                            (32U)
N
N/*! @name W - Word pin registers for all port 0 and 1 GPIO pins */
N#define GPIO_W_PWORD_MASK                        (0xFFFFFFFFU)
N#define GPIO_W_PWORD_SHIFT                       (0U)
N#define GPIO_W_PWORD(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_W_PWORD_SHIFT)) & GPIO_W_PWORD_MASK)
N
N/* The count of GPIO_W */
N#define GPIO_W_COUNT                             (6U)
N
N/* The count of GPIO_W */
N#define GPIO_W_COUNT2                            (32U)
N
N/*! @name DIR - Direction registers */
N#define GPIO_DIR_DIRP_MASK                       (0xFFFFFFFFU)
N#define GPIO_DIR_DIRP_SHIFT                      (0U)
N#define GPIO_DIR_DIRP(x)                         (((uint32_t)(((uint32_t)(x)) << GPIO_DIR_DIRP_SHIFT)) & GPIO_DIR_DIRP_MASK)
N
N/* The count of GPIO_DIR */
N#define GPIO_DIR_COUNT                           (6U)
N
N/*! @name MASK - Mask register */
N#define GPIO_MASK_MASKP_MASK                     (0xFFFFFFFFU)
N#define GPIO_MASK_MASKP_SHIFT                    (0U)
N#define GPIO_MASK_MASKP(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_MASK_MASKP_SHIFT)) & GPIO_MASK_MASKP_MASK)
N
N/* The count of GPIO_MASK */
N#define GPIO_MASK_COUNT                          (6U)
N
N/*! @name PIN - Port pin register */
N#define GPIO_PIN_PORT_MASK                       (0xFFFFFFFFU)
N#define GPIO_PIN_PORT_SHIFT                      (0U)
N#define GPIO_PIN_PORT(x)                         (((uint32_t)(((uint32_t)(x)) << GPIO_PIN_PORT_SHIFT)) & GPIO_PIN_PORT_MASK)
N
N/* The count of GPIO_PIN */
N#define GPIO_PIN_COUNT                           (6U)
N
N/*! @name MPIN - Masked port register */
N#define GPIO_MPIN_MPORTP_MASK                    (0xFFFFFFFFU)
N#define GPIO_MPIN_MPORTP_SHIFT                   (0U)
N#define GPIO_MPIN_MPORTP(x)                      (((uint32_t)(((uint32_t)(x)) << GPIO_MPIN_MPORTP_SHIFT)) & GPIO_MPIN_MPORTP_MASK)
N
N/* The count of GPIO_MPIN */
N#define GPIO_MPIN_COUNT                          (6U)
N
N/*! @name SET - Write: Set register for port Read: output bits for port */
N#define GPIO_SET_SETP_MASK                       (0xFFFFFFFFU)
N#define GPIO_SET_SETP_SHIFT                      (0U)
N#define GPIO_SET_SETP(x)                         (((uint32_t)(((uint32_t)(x)) << GPIO_SET_SETP_SHIFT)) & GPIO_SET_SETP_MASK)
N
N/* The count of GPIO_SET */
N#define GPIO_SET_COUNT                           (6U)
N
N/*! @name CLR - Clear port */
N#define GPIO_CLR_CLRP_MASK                       (0xFFFFFFFFU)
N#define GPIO_CLR_CLRP_SHIFT                      (0U)
N#define GPIO_CLR_CLRP(x)                         (((uint32_t)(((uint32_t)(x)) << GPIO_CLR_CLRP_SHIFT)) & GPIO_CLR_CLRP_MASK)
N
N/* The count of GPIO_CLR */
N#define GPIO_CLR_COUNT                           (6U)
N
N/*! @name NOT - Toggle port */
N#define GPIO_NOT_NOTP_MASK                       (0xFFFFFFFFU)
N#define GPIO_NOT_NOTP_SHIFT                      (0U)
N#define GPIO_NOT_NOTP(x)                         (((uint32_t)(((uint32_t)(x)) << GPIO_NOT_NOTP_SHIFT)) & GPIO_NOT_NOTP_MASK)
N
N/* The count of GPIO_NOT */
N#define GPIO_NOT_COUNT                           (6U)
N
N/*! @name DIRSET - Set pin direction bits for port */
N#define GPIO_DIRSET_DIRSETP_MASK                 (0x1FFFFFFFU)
N#define GPIO_DIRSET_DIRSETP_SHIFT                (0U)
N#define GPIO_DIRSET_DIRSETP(x)                   (((uint32_t)(((uint32_t)(x)) << GPIO_DIRSET_DIRSETP_SHIFT)) & GPIO_DIRSET_DIRSETP_MASK)
N
N/* The count of GPIO_DIRSET */
N#define GPIO_DIRSET_COUNT                        (6U)
N
N/*! @name DIRCLR - Clear pin direction bits for port */
N#define GPIO_DIRCLR_DIRCLRP_MASK                 (0x1FFFFFFFU)
N#define GPIO_DIRCLR_DIRCLRP_SHIFT                (0U)
N#define GPIO_DIRCLR_DIRCLRP(x)                   (((uint32_t)(((uint32_t)(x)) << GPIO_DIRCLR_DIRCLRP_SHIFT)) & GPIO_DIRCLR_DIRCLRP_MASK)
N
N/* The count of GPIO_DIRCLR */
N#define GPIO_DIRCLR_COUNT                        (6U)
N
N/*! @name DIRNOT - Toggle pin direction bits for port */
N#define GPIO_DIRNOT_DIRNOTP_MASK                 (0x1FFFFFFFU)
N#define GPIO_DIRNOT_DIRNOTP_SHIFT                (0U)
N#define GPIO_DIRNOT_DIRNOTP(x)                   (((uint32_t)(((uint32_t)(x)) << GPIO_DIRNOT_DIRNOTP_SHIFT)) & GPIO_DIRNOT_DIRNOTP_MASK)
N
N/* The count of GPIO_DIRNOT */
N#define GPIO_DIRNOT_COUNT                        (6U)
N
N
N/*!
N * @}
N */ /* end of group GPIO_Register_Masks */
N
N
N/* GPIO - Peripheral instance base addresses */
N/** Peripheral GPIO base address */
N#define GPIO_BASE                                (0x4008C000u)
N/** Peripheral GPIO base pointer */
N#define GPIO                                     ((GPIO_Type *)GPIO_BASE)
N/** Array initializer of GPIO peripheral base addresses */
N#define GPIO_BASE_ADDRS                          { GPIO_BASE }
N/** Array initializer of GPIO peripheral base pointers */
N#define GPIO_BASE_PTRS                           { GPIO }
N
N/*!
N * @}
N */ /* end of group GPIO_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- I2C Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Peripheral_Access_Layer I2C Peripheral Access Layer
N * @{
N */
N
N/** I2C - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[2048];
N  __IO uint32_t CFG;                               /**< Configuration for shared functions., offset: 0x800 */
X  volatile uint32_t CFG;                                
N  __IO uint32_t STAT;                              /**< Status register for Master, Slave, and Monitor functions., offset: 0x804 */
X  volatile uint32_t STAT;                               
N  __IO uint32_t INTENSET;                          /**< Interrupt Enable Set and read register., offset: 0x808 */
X  volatile uint32_t INTENSET;                           
N  __O  uint32_t INTENCLR;                          /**< Interrupt Enable Clear register., offset: 0x80C */
X  volatile  uint32_t INTENCLR;                           
N  __IO uint32_t TIMEOUT;                           /**< Time-out value register., offset: 0x810 */
X  volatile uint32_t TIMEOUT;                            
N  __IO uint32_t CLKDIV;                            /**< Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function., offset: 0x814 */
X  volatile uint32_t CLKDIV;                             
N  __I  uint32_t INTSTAT;                           /**< Interrupt Status register for Master, Slave, and Monitor functions., offset: 0x818 */
X  volatile const  uint32_t INTSTAT;                            
N       uint8_t RESERVED_1[4];
N  __IO uint32_t MSTCTL;                            /**< Master control register., offset: 0x820 */
X  volatile uint32_t MSTCTL;                             
N  __IO uint32_t MSTTIME;                           /**< Master timing configuration., offset: 0x824 */
X  volatile uint32_t MSTTIME;                            
N  __IO uint32_t MSTDAT;                            /**< Combined Master receiver and transmitter data register., offset: 0x828 */
X  volatile uint32_t MSTDAT;                             
N       uint8_t RESERVED_2[20];
N  __IO uint32_t SLVCTL;                            /**< Slave control register., offset: 0x840 */
X  volatile uint32_t SLVCTL;                             
N  __IO uint32_t SLVDAT;                            /**< Combined Slave receiver and transmitter data register., offset: 0x844 */
X  volatile uint32_t SLVDAT;                             
N  __IO uint32_t SLVADR[4];                         /**< Slave address register., array offset: 0x848, array step: 0x4 */
X  volatile uint32_t SLVADR[4];                          
N  __IO uint32_t SLVQUAL0;                          /**< Slave Qualification for address 0., offset: 0x858 */
X  volatile uint32_t SLVQUAL0;                           
N       uint8_t RESERVED_3[36];
N  __I  uint32_t MONRXDAT;                          /**< Monitor receiver data register., offset: 0x880 */
X  volatile const  uint32_t MONRXDAT;                           
N       uint8_t RESERVED_4[1912];
N  __I  uint32_t ID;                                /**< Peripheral identification register., offset: 0xFFC */
X  volatile const  uint32_t ID;                                 
N} I2C_Type;
N
N/* ----------------------------------------------------------------------------
N   -- I2C Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Register_Masks I2C Register Masks
N * @{
N */
N
N/*! @name CFG - Configuration for shared functions. */
N#define I2C_CFG_MSTEN_MASK                       (0x1U)
N#define I2C_CFG_MSTEN_SHIFT                      (0U)
N#define I2C_CFG_MSTEN(x)                         (((uint32_t)(((uint32_t)(x)) << I2C_CFG_MSTEN_SHIFT)) & I2C_CFG_MSTEN_MASK)
N#define I2C_CFG_SLVEN_MASK                       (0x2U)
N#define I2C_CFG_SLVEN_SHIFT                      (1U)
N#define I2C_CFG_SLVEN(x)                         (((uint32_t)(((uint32_t)(x)) << I2C_CFG_SLVEN_SHIFT)) & I2C_CFG_SLVEN_MASK)
N#define I2C_CFG_MONEN_MASK                       (0x4U)
N#define I2C_CFG_MONEN_SHIFT                      (2U)
N#define I2C_CFG_MONEN(x)                         (((uint32_t)(((uint32_t)(x)) << I2C_CFG_MONEN_SHIFT)) & I2C_CFG_MONEN_MASK)
N#define I2C_CFG_TIMEOUTEN_MASK                   (0x8U)
N#define I2C_CFG_TIMEOUTEN_SHIFT                  (3U)
N#define I2C_CFG_TIMEOUTEN(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_CFG_TIMEOUTEN_SHIFT)) & I2C_CFG_TIMEOUTEN_MASK)
N#define I2C_CFG_MONCLKSTR_MASK                   (0x10U)
N#define I2C_CFG_MONCLKSTR_SHIFT                  (4U)
N#define I2C_CFG_MONCLKSTR(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_CFG_MONCLKSTR_SHIFT)) & I2C_CFG_MONCLKSTR_MASK)
N#define I2C_CFG_HSCAPABLE_MASK                   (0x20U)
N#define I2C_CFG_HSCAPABLE_SHIFT                  (5U)
N#define I2C_CFG_HSCAPABLE(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_CFG_HSCAPABLE_SHIFT)) & I2C_CFG_HSCAPABLE_MASK)
N
N/*! @name STAT - Status register for Master, Slave, and Monitor functions. */
N#define I2C_STAT_MSTPENDING_MASK                 (0x1U)
N#define I2C_STAT_MSTPENDING_SHIFT                (0U)
N#define I2C_STAT_MSTPENDING(x)                   (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MSTPENDING_SHIFT)) & I2C_STAT_MSTPENDING_MASK)
N#define I2C_STAT_MSTSTATE_MASK                   (0xEU)
N#define I2C_STAT_MSTSTATE_SHIFT                  (1U)
N#define I2C_STAT_MSTSTATE(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MSTSTATE_SHIFT)) & I2C_STAT_MSTSTATE_MASK)
N#define I2C_STAT_MSTARBLOSS_MASK                 (0x10U)
N#define I2C_STAT_MSTARBLOSS_SHIFT                (4U)
N#define I2C_STAT_MSTARBLOSS(x)                   (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MSTARBLOSS_SHIFT)) & I2C_STAT_MSTARBLOSS_MASK)
N#define I2C_STAT_MSTSTSTPERR_MASK                (0x40U)
N#define I2C_STAT_MSTSTSTPERR_SHIFT               (6U)
N#define I2C_STAT_MSTSTSTPERR(x)                  (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MSTSTSTPERR_SHIFT)) & I2C_STAT_MSTSTSTPERR_MASK)
N#define I2C_STAT_SLVPENDING_MASK                 (0x100U)
N#define I2C_STAT_SLVPENDING_SHIFT                (8U)
N#define I2C_STAT_SLVPENDING(x)                   (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVPENDING_SHIFT)) & I2C_STAT_SLVPENDING_MASK)
N#define I2C_STAT_SLVSTATE_MASK                   (0x600U)
N#define I2C_STAT_SLVSTATE_SHIFT                  (9U)
N#define I2C_STAT_SLVSTATE(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVSTATE_SHIFT)) & I2C_STAT_SLVSTATE_MASK)
N#define I2C_STAT_SLVNOTSTR_MASK                  (0x800U)
N#define I2C_STAT_SLVNOTSTR_SHIFT                 (11U)
N#define I2C_STAT_SLVNOTSTR(x)                    (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVNOTSTR_SHIFT)) & I2C_STAT_SLVNOTSTR_MASK)
N#define I2C_STAT_SLVIDX_MASK                     (0x3000U)
N#define I2C_STAT_SLVIDX_SHIFT                    (12U)
N#define I2C_STAT_SLVIDX(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVIDX_SHIFT)) & I2C_STAT_SLVIDX_MASK)
N#define I2C_STAT_SLVSEL_MASK                     (0x4000U)
N#define I2C_STAT_SLVSEL_SHIFT                    (14U)
N#define I2C_STAT_SLVSEL(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVSEL_SHIFT)) & I2C_STAT_SLVSEL_MASK)
N#define I2C_STAT_SLVDESEL_MASK                   (0x8000U)
N#define I2C_STAT_SLVDESEL_SHIFT                  (15U)
N#define I2C_STAT_SLVDESEL(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SLVDESEL_SHIFT)) & I2C_STAT_SLVDESEL_MASK)
N#define I2C_STAT_MONRDY_MASK                     (0x10000U)
N#define I2C_STAT_MONRDY_SHIFT                    (16U)
N#define I2C_STAT_MONRDY(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MONRDY_SHIFT)) & I2C_STAT_MONRDY_MASK)
N#define I2C_STAT_MONOV_MASK                      (0x20000U)
N#define I2C_STAT_MONOV_SHIFT                     (17U)
N#define I2C_STAT_MONOV(x)                        (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MONOV_SHIFT)) & I2C_STAT_MONOV_MASK)
N#define I2C_STAT_MONACTIVE_MASK                  (0x40000U)
N#define I2C_STAT_MONACTIVE_SHIFT                 (18U)
N#define I2C_STAT_MONACTIVE(x)                    (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MONACTIVE_SHIFT)) & I2C_STAT_MONACTIVE_MASK)
N#define I2C_STAT_MONIDLE_MASK                    (0x80000U)
N#define I2C_STAT_MONIDLE_SHIFT                   (19U)
N#define I2C_STAT_MONIDLE(x)                      (((uint32_t)(((uint32_t)(x)) << I2C_STAT_MONIDLE_SHIFT)) & I2C_STAT_MONIDLE_MASK)
N#define I2C_STAT_EVENTTIMEOUT_MASK               (0x1000000U)
N#define I2C_STAT_EVENTTIMEOUT_SHIFT              (24U)
N#define I2C_STAT_EVENTTIMEOUT(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_STAT_EVENTTIMEOUT_SHIFT)) & I2C_STAT_EVENTTIMEOUT_MASK)
N#define I2C_STAT_SCLTIMEOUT_MASK                 (0x2000000U)
N#define I2C_STAT_SCLTIMEOUT_SHIFT                (25U)
N#define I2C_STAT_SCLTIMEOUT(x)                   (((uint32_t)(((uint32_t)(x)) << I2C_STAT_SCLTIMEOUT_SHIFT)) & I2C_STAT_SCLTIMEOUT_MASK)
N
N/*! @name INTENSET - Interrupt Enable Set and read register. */
N#define I2C_INTENSET_MSTPENDINGEN_MASK           (0x1U)
N#define I2C_INTENSET_MSTPENDINGEN_SHIFT          (0U)
N#define I2C_INTENSET_MSTPENDINGEN(x)             (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_MSTPENDINGEN_SHIFT)) & I2C_INTENSET_MSTPENDINGEN_MASK)
N#define I2C_INTENSET_MSTARBLOSSEN_MASK           (0x10U)
N#define I2C_INTENSET_MSTARBLOSSEN_SHIFT          (4U)
N#define I2C_INTENSET_MSTARBLOSSEN(x)             (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_MSTARBLOSSEN_SHIFT)) & I2C_INTENSET_MSTARBLOSSEN_MASK)
N#define I2C_INTENSET_MSTSTSTPERREN_MASK          (0x40U)
N#define I2C_INTENSET_MSTSTSTPERREN_SHIFT         (6U)
N#define I2C_INTENSET_MSTSTSTPERREN(x)            (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_MSTSTSTPERREN_SHIFT)) & I2C_INTENSET_MSTSTSTPERREN_MASK)
N#define I2C_INTENSET_SLVPENDINGEN_MASK           (0x100U)
N#define I2C_INTENSET_SLVPENDINGEN_SHIFT          (8U)
N#define I2C_INTENSET_SLVPENDINGEN(x)             (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_SLVPENDINGEN_SHIFT)) & I2C_INTENSET_SLVPENDINGEN_MASK)
N#define I2C_INTENSET_SLVNOTSTREN_MASK            (0x800U)
N#define I2C_INTENSET_SLVNOTSTREN_SHIFT           (11U)
N#define I2C_INTENSET_SLVNOTSTREN(x)              (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_SLVNOTSTREN_SHIFT)) & I2C_INTENSET_SLVNOTSTREN_MASK)
N#define I2C_INTENSET_SLVDESELEN_MASK             (0x8000U)
N#define I2C_INTENSET_SLVDESELEN_SHIFT            (15U)
N#define I2C_INTENSET_SLVDESELEN(x)               (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_SLVDESELEN_SHIFT)) & I2C_INTENSET_SLVDESELEN_MASK)
N#define I2C_INTENSET_MONRDYEN_MASK               (0x10000U)
N#define I2C_INTENSET_MONRDYEN_SHIFT              (16U)
N#define I2C_INTENSET_MONRDYEN(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_MONRDYEN_SHIFT)) & I2C_INTENSET_MONRDYEN_MASK)
N#define I2C_INTENSET_MONOVEN_MASK                (0x20000U)
N#define I2C_INTENSET_MONOVEN_SHIFT               (17U)
N#define I2C_INTENSET_MONOVEN(x)                  (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_MONOVEN_SHIFT)) & I2C_INTENSET_MONOVEN_MASK)
N#define I2C_INTENSET_MONIDLEEN_MASK              (0x80000U)
N#define I2C_INTENSET_MONIDLEEN_SHIFT             (19U)
N#define I2C_INTENSET_MONIDLEEN(x)                (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_MONIDLEEN_SHIFT)) & I2C_INTENSET_MONIDLEEN_MASK)
N#define I2C_INTENSET_EVENTTIMEOUTEN_MASK         (0x1000000U)
N#define I2C_INTENSET_EVENTTIMEOUTEN_SHIFT        (24U)
N#define I2C_INTENSET_EVENTTIMEOUTEN(x)           (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_EVENTTIMEOUTEN_SHIFT)) & I2C_INTENSET_EVENTTIMEOUTEN_MASK)
N#define I2C_INTENSET_SCLTIMEOUTEN_MASK           (0x2000000U)
N#define I2C_INTENSET_SCLTIMEOUTEN_SHIFT          (25U)
N#define I2C_INTENSET_SCLTIMEOUTEN(x)             (((uint32_t)(((uint32_t)(x)) << I2C_INTENSET_SCLTIMEOUTEN_SHIFT)) & I2C_INTENSET_SCLTIMEOUTEN_MASK)
N
N/*! @name INTENCLR - Interrupt Enable Clear register. */
N#define I2C_INTENCLR_MSTPENDINGCLR_MASK          (0x1U)
N#define I2C_INTENCLR_MSTPENDINGCLR_SHIFT         (0U)
N#define I2C_INTENCLR_MSTPENDINGCLR(x)            (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_MSTPENDINGCLR_SHIFT)) & I2C_INTENCLR_MSTPENDINGCLR_MASK)
N#define I2C_INTENCLR_MSTARBLOSSCLR_MASK          (0x10U)
N#define I2C_INTENCLR_MSTARBLOSSCLR_SHIFT         (4U)
N#define I2C_INTENCLR_MSTARBLOSSCLR(x)            (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_MSTARBLOSSCLR_SHIFT)) & I2C_INTENCLR_MSTARBLOSSCLR_MASK)
N#define I2C_INTENCLR_MSTSTSTPERRCLR_MASK         (0x40U)
N#define I2C_INTENCLR_MSTSTSTPERRCLR_SHIFT        (6U)
N#define I2C_INTENCLR_MSTSTSTPERRCLR(x)           (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_MSTSTSTPERRCLR_SHIFT)) & I2C_INTENCLR_MSTSTSTPERRCLR_MASK)
N#define I2C_INTENCLR_SLVPENDINGCLR_MASK          (0x100U)
N#define I2C_INTENCLR_SLVPENDINGCLR_SHIFT         (8U)
N#define I2C_INTENCLR_SLVPENDINGCLR(x)            (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_SLVPENDINGCLR_SHIFT)) & I2C_INTENCLR_SLVPENDINGCLR_MASK)
N#define I2C_INTENCLR_SLVNOTSTRCLR_MASK           (0x800U)
N#define I2C_INTENCLR_SLVNOTSTRCLR_SHIFT          (11U)
N#define I2C_INTENCLR_SLVNOTSTRCLR(x)             (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_SLVNOTSTRCLR_SHIFT)) & I2C_INTENCLR_SLVNOTSTRCLR_MASK)
N#define I2C_INTENCLR_SLVDESELCLR_MASK            (0x8000U)
N#define I2C_INTENCLR_SLVDESELCLR_SHIFT           (15U)
N#define I2C_INTENCLR_SLVDESELCLR(x)              (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_SLVDESELCLR_SHIFT)) & I2C_INTENCLR_SLVDESELCLR_MASK)
N#define I2C_INTENCLR_MONRDYCLR_MASK              (0x10000U)
N#define I2C_INTENCLR_MONRDYCLR_SHIFT             (16U)
N#define I2C_INTENCLR_MONRDYCLR(x)                (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_MONRDYCLR_SHIFT)) & I2C_INTENCLR_MONRDYCLR_MASK)
N#define I2C_INTENCLR_MONOVCLR_MASK               (0x20000U)
N#define I2C_INTENCLR_MONOVCLR_SHIFT              (17U)
N#define I2C_INTENCLR_MONOVCLR(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_MONOVCLR_SHIFT)) & I2C_INTENCLR_MONOVCLR_MASK)
N#define I2C_INTENCLR_MONIDLECLR_MASK             (0x80000U)
N#define I2C_INTENCLR_MONIDLECLR_SHIFT            (19U)
N#define I2C_INTENCLR_MONIDLECLR(x)               (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_MONIDLECLR_SHIFT)) & I2C_INTENCLR_MONIDLECLR_MASK)
N#define I2C_INTENCLR_EVENTTIMEOUTCLR_MASK        (0x1000000U)
N#define I2C_INTENCLR_EVENTTIMEOUTCLR_SHIFT       (24U)
N#define I2C_INTENCLR_EVENTTIMEOUTCLR(x)          (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_EVENTTIMEOUTCLR_SHIFT)) & I2C_INTENCLR_EVENTTIMEOUTCLR_MASK)
N#define I2C_INTENCLR_SCLTIMEOUTCLR_MASK          (0x2000000U)
N#define I2C_INTENCLR_SCLTIMEOUTCLR_SHIFT         (25U)
N#define I2C_INTENCLR_SCLTIMEOUTCLR(x)            (((uint32_t)(((uint32_t)(x)) << I2C_INTENCLR_SCLTIMEOUTCLR_SHIFT)) & I2C_INTENCLR_SCLTIMEOUTCLR_MASK)
N
N/*! @name TIMEOUT - Time-out value register. */
N#define I2C_TIMEOUT_TOMIN_MASK                   (0xFU)
N#define I2C_TIMEOUT_TOMIN_SHIFT                  (0U)
N#define I2C_TIMEOUT_TOMIN(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_TIMEOUT_TOMIN_SHIFT)) & I2C_TIMEOUT_TOMIN_MASK)
N#define I2C_TIMEOUT_TO_MASK                      (0xFFF0U)
N#define I2C_TIMEOUT_TO_SHIFT                     (4U)
N#define I2C_TIMEOUT_TO(x)                        (((uint32_t)(((uint32_t)(x)) << I2C_TIMEOUT_TO_SHIFT)) & I2C_TIMEOUT_TO_MASK)
N
N/*! @name CLKDIV - Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function. */
N#define I2C_CLKDIV_DIVVAL_MASK                   (0xFFFFU)
N#define I2C_CLKDIV_DIVVAL_SHIFT                  (0U)
N#define I2C_CLKDIV_DIVVAL(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_CLKDIV_DIVVAL_SHIFT)) & I2C_CLKDIV_DIVVAL_MASK)
N
N/*! @name INTSTAT - Interrupt Status register for Master, Slave, and Monitor functions. */
N#define I2C_INTSTAT_MSTPENDING_MASK              (0x1U)
N#define I2C_INTSTAT_MSTPENDING_SHIFT             (0U)
N#define I2C_INTSTAT_MSTPENDING(x)                (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_MSTPENDING_SHIFT)) & I2C_INTSTAT_MSTPENDING_MASK)
N#define I2C_INTSTAT_MSTARBLOSS_MASK              (0x10U)
N#define I2C_INTSTAT_MSTARBLOSS_SHIFT             (4U)
N#define I2C_INTSTAT_MSTARBLOSS(x)                (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_MSTARBLOSS_SHIFT)) & I2C_INTSTAT_MSTARBLOSS_MASK)
N#define I2C_INTSTAT_MSTSTSTPERR_MASK             (0x40U)
N#define I2C_INTSTAT_MSTSTSTPERR_SHIFT            (6U)
N#define I2C_INTSTAT_MSTSTSTPERR(x)               (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_MSTSTSTPERR_SHIFT)) & I2C_INTSTAT_MSTSTSTPERR_MASK)
N#define I2C_INTSTAT_SLVPENDING_MASK              (0x100U)
N#define I2C_INTSTAT_SLVPENDING_SHIFT             (8U)
N#define I2C_INTSTAT_SLVPENDING(x)                (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_SLVPENDING_SHIFT)) & I2C_INTSTAT_SLVPENDING_MASK)
N#define I2C_INTSTAT_SLVNOTSTR_MASK               (0x800U)
N#define I2C_INTSTAT_SLVNOTSTR_SHIFT              (11U)
N#define I2C_INTSTAT_SLVNOTSTR(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_SLVNOTSTR_SHIFT)) & I2C_INTSTAT_SLVNOTSTR_MASK)
N#define I2C_INTSTAT_SLVDESEL_MASK                (0x8000U)
N#define I2C_INTSTAT_SLVDESEL_SHIFT               (15U)
N#define I2C_INTSTAT_SLVDESEL(x)                  (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_SLVDESEL_SHIFT)) & I2C_INTSTAT_SLVDESEL_MASK)
N#define I2C_INTSTAT_MONRDY_MASK                  (0x10000U)
N#define I2C_INTSTAT_MONRDY_SHIFT                 (16U)
N#define I2C_INTSTAT_MONRDY(x)                    (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_MONRDY_SHIFT)) & I2C_INTSTAT_MONRDY_MASK)
N#define I2C_INTSTAT_MONOV_MASK                   (0x20000U)
N#define I2C_INTSTAT_MONOV_SHIFT                  (17U)
N#define I2C_INTSTAT_MONOV(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_MONOV_SHIFT)) & I2C_INTSTAT_MONOV_MASK)
N#define I2C_INTSTAT_MONIDLE_MASK                 (0x80000U)
N#define I2C_INTSTAT_MONIDLE_SHIFT                (19U)
N#define I2C_INTSTAT_MONIDLE(x)                   (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_MONIDLE_SHIFT)) & I2C_INTSTAT_MONIDLE_MASK)
N#define I2C_INTSTAT_EVENTTIMEOUT_MASK            (0x1000000U)
N#define I2C_INTSTAT_EVENTTIMEOUT_SHIFT           (24U)
N#define I2C_INTSTAT_EVENTTIMEOUT(x)              (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_EVENTTIMEOUT_SHIFT)) & I2C_INTSTAT_EVENTTIMEOUT_MASK)
N#define I2C_INTSTAT_SCLTIMEOUT_MASK              (0x2000000U)
N#define I2C_INTSTAT_SCLTIMEOUT_SHIFT             (25U)
N#define I2C_INTSTAT_SCLTIMEOUT(x)                (((uint32_t)(((uint32_t)(x)) << I2C_INTSTAT_SCLTIMEOUT_SHIFT)) & I2C_INTSTAT_SCLTIMEOUT_MASK)
N
N/*! @name MSTCTL - Master control register. */
N#define I2C_MSTCTL_MSTCONTINUE_MASK              (0x1U)
N#define I2C_MSTCTL_MSTCONTINUE_SHIFT             (0U)
N#define I2C_MSTCTL_MSTCONTINUE(x)                (((uint32_t)(((uint32_t)(x)) << I2C_MSTCTL_MSTCONTINUE_SHIFT)) & I2C_MSTCTL_MSTCONTINUE_MASK)
N#define I2C_MSTCTL_MSTSTART_MASK                 (0x2U)
N#define I2C_MSTCTL_MSTSTART_SHIFT                (1U)
N#define I2C_MSTCTL_MSTSTART(x)                   (((uint32_t)(((uint32_t)(x)) << I2C_MSTCTL_MSTSTART_SHIFT)) & I2C_MSTCTL_MSTSTART_MASK)
N#define I2C_MSTCTL_MSTSTOP_MASK                  (0x4U)
N#define I2C_MSTCTL_MSTSTOP_SHIFT                 (2U)
N#define I2C_MSTCTL_MSTSTOP(x)                    (((uint32_t)(((uint32_t)(x)) << I2C_MSTCTL_MSTSTOP_SHIFT)) & I2C_MSTCTL_MSTSTOP_MASK)
N#define I2C_MSTCTL_MSTDMA_MASK                   (0x8U)
N#define I2C_MSTCTL_MSTDMA_SHIFT                  (3U)
N#define I2C_MSTCTL_MSTDMA(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_MSTCTL_MSTDMA_SHIFT)) & I2C_MSTCTL_MSTDMA_MASK)
N
N/*! @name MSTTIME - Master timing configuration. */
N#define I2C_MSTTIME_MSTSCLLOW_MASK               (0x7U)
N#define I2C_MSTTIME_MSTSCLLOW_SHIFT              (0U)
N#define I2C_MSTTIME_MSTSCLLOW(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_MSTTIME_MSTSCLLOW_SHIFT)) & I2C_MSTTIME_MSTSCLLOW_MASK)
N#define I2C_MSTTIME_MSTSCLHIGH_MASK              (0x70U)
N#define I2C_MSTTIME_MSTSCLHIGH_SHIFT             (4U)
N#define I2C_MSTTIME_MSTSCLHIGH(x)                (((uint32_t)(((uint32_t)(x)) << I2C_MSTTIME_MSTSCLHIGH_SHIFT)) & I2C_MSTTIME_MSTSCLHIGH_MASK)
N
N/*! @name MSTDAT - Combined Master receiver and transmitter data register. */
N#define I2C_MSTDAT_DATA_MASK                     (0xFFU)
N#define I2C_MSTDAT_DATA_SHIFT                    (0U)
N#define I2C_MSTDAT_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_MSTDAT_DATA_SHIFT)) & I2C_MSTDAT_DATA_MASK)
N
N/*! @name SLVCTL - Slave control register. */
N#define I2C_SLVCTL_SLVCONTINUE_MASK              (0x1U)
N#define I2C_SLVCTL_SLVCONTINUE_SHIFT             (0U)
N#define I2C_SLVCTL_SLVCONTINUE(x)                (((uint32_t)(((uint32_t)(x)) << I2C_SLVCTL_SLVCONTINUE_SHIFT)) & I2C_SLVCTL_SLVCONTINUE_MASK)
N#define I2C_SLVCTL_SLVNACK_MASK                  (0x2U)
N#define I2C_SLVCTL_SLVNACK_SHIFT                 (1U)
N#define I2C_SLVCTL_SLVNACK(x)                    (((uint32_t)(((uint32_t)(x)) << I2C_SLVCTL_SLVNACK_SHIFT)) & I2C_SLVCTL_SLVNACK_MASK)
N#define I2C_SLVCTL_SLVDMA_MASK                   (0x8U)
N#define I2C_SLVCTL_SLVDMA_SHIFT                  (3U)
N#define I2C_SLVCTL_SLVDMA(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_SLVCTL_SLVDMA_SHIFT)) & I2C_SLVCTL_SLVDMA_MASK)
N#define I2C_SLVCTL_AUTOACK_MASK                  (0x100U)
N#define I2C_SLVCTL_AUTOACK_SHIFT                 (8U)
N#define I2C_SLVCTL_AUTOACK(x)                    (((uint32_t)(((uint32_t)(x)) << I2C_SLVCTL_AUTOACK_SHIFT)) & I2C_SLVCTL_AUTOACK_MASK)
N#define I2C_SLVCTL_AUTOMATCHREAD_MASK            (0x200U)
N#define I2C_SLVCTL_AUTOMATCHREAD_SHIFT           (9U)
N#define I2C_SLVCTL_AUTOMATCHREAD(x)              (((uint32_t)(((uint32_t)(x)) << I2C_SLVCTL_AUTOMATCHREAD_SHIFT)) & I2C_SLVCTL_AUTOMATCHREAD_MASK)
N
N/*! @name SLVDAT - Combined Slave receiver and transmitter data register. */
N#define I2C_SLVDAT_DATA_MASK                     (0xFFU)
N#define I2C_SLVDAT_DATA_SHIFT                    (0U)
N#define I2C_SLVDAT_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_SLVDAT_DATA_SHIFT)) & I2C_SLVDAT_DATA_MASK)
N
N/*! @name SLVADR - Slave address register. */
N#define I2C_SLVADR_SADISABLE_MASK                (0x1U)
N#define I2C_SLVADR_SADISABLE_SHIFT               (0U)
N#define I2C_SLVADR_SADISABLE(x)                  (((uint32_t)(((uint32_t)(x)) << I2C_SLVADR_SADISABLE_SHIFT)) & I2C_SLVADR_SADISABLE_MASK)
N#define I2C_SLVADR_SLVADR_MASK                   (0xFEU)
N#define I2C_SLVADR_SLVADR_SHIFT                  (1U)
N#define I2C_SLVADR_SLVADR(x)                     (((uint32_t)(((uint32_t)(x)) << I2C_SLVADR_SLVADR_SHIFT)) & I2C_SLVADR_SLVADR_MASK)
N#define I2C_SLVADR_AUTONACK_MASK                 (0x8000U)
N#define I2C_SLVADR_AUTONACK_SHIFT                (15U)
N#define I2C_SLVADR_AUTONACK(x)                   (((uint32_t)(((uint32_t)(x)) << I2C_SLVADR_AUTONACK_SHIFT)) & I2C_SLVADR_AUTONACK_MASK)
N
N/* The count of I2C_SLVADR */
N#define I2C_SLVADR_COUNT                         (4U)
N
N/*! @name SLVQUAL0 - Slave Qualification for address 0. */
N#define I2C_SLVQUAL0_QUALMODE0_MASK              (0x1U)
N#define I2C_SLVQUAL0_QUALMODE0_SHIFT             (0U)
N#define I2C_SLVQUAL0_QUALMODE0(x)                (((uint32_t)(((uint32_t)(x)) << I2C_SLVQUAL0_QUALMODE0_SHIFT)) & I2C_SLVQUAL0_QUALMODE0_MASK)
N#define I2C_SLVQUAL0_SLVQUAL0_MASK               (0xFEU)
N#define I2C_SLVQUAL0_SLVQUAL0_SHIFT              (1U)
N#define I2C_SLVQUAL0_SLVQUAL0(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_SLVQUAL0_SLVQUAL0_SHIFT)) & I2C_SLVQUAL0_SLVQUAL0_MASK)
N
N/*! @name MONRXDAT - Monitor receiver data register. */
N#define I2C_MONRXDAT_MONRXDAT_MASK               (0xFFU)
N#define I2C_MONRXDAT_MONRXDAT_SHIFT              (0U)
N#define I2C_MONRXDAT_MONRXDAT(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_MONRXDAT_MONRXDAT_SHIFT)) & I2C_MONRXDAT_MONRXDAT_MASK)
N#define I2C_MONRXDAT_MONSTART_MASK               (0x100U)
N#define I2C_MONRXDAT_MONSTART_SHIFT              (8U)
N#define I2C_MONRXDAT_MONSTART(x)                 (((uint32_t)(((uint32_t)(x)) << I2C_MONRXDAT_MONSTART_SHIFT)) & I2C_MONRXDAT_MONSTART_MASK)
N#define I2C_MONRXDAT_MONRESTART_MASK             (0x200U)
N#define I2C_MONRXDAT_MONRESTART_SHIFT            (9U)
N#define I2C_MONRXDAT_MONRESTART(x)               (((uint32_t)(((uint32_t)(x)) << I2C_MONRXDAT_MONRESTART_SHIFT)) & I2C_MONRXDAT_MONRESTART_MASK)
N#define I2C_MONRXDAT_MONNACK_MASK                (0x400U)
N#define I2C_MONRXDAT_MONNACK_SHIFT               (10U)
N#define I2C_MONRXDAT_MONNACK(x)                  (((uint32_t)(((uint32_t)(x)) << I2C_MONRXDAT_MONNACK_SHIFT)) & I2C_MONRXDAT_MONNACK_MASK)
N
N/*! @name ID - Peripheral identification register. */
N#define I2C_ID_APERTURE_MASK                     (0xFFU)
N#define I2C_ID_APERTURE_SHIFT                    (0U)
N#define I2C_ID_APERTURE(x)                       (((uint32_t)(((uint32_t)(x)) << I2C_ID_APERTURE_SHIFT)) & I2C_ID_APERTURE_MASK)
N#define I2C_ID_MINOR_REV_MASK                    (0xF00U)
N#define I2C_ID_MINOR_REV_SHIFT                   (8U)
N#define I2C_ID_MINOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << I2C_ID_MINOR_REV_SHIFT)) & I2C_ID_MINOR_REV_MASK)
N#define I2C_ID_MAJOR_REV_MASK                    (0xF000U)
N#define I2C_ID_MAJOR_REV_SHIFT                   (12U)
N#define I2C_ID_MAJOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << I2C_ID_MAJOR_REV_SHIFT)) & I2C_ID_MAJOR_REV_MASK)
N#define I2C_ID_ID_MASK                           (0xFFFF0000U)
N#define I2C_ID_ID_SHIFT                          (16U)
N#define I2C_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << I2C_ID_ID_SHIFT)) & I2C_ID_ID_MASK)
N
N
N/*!
N * @}
N */ /* end of group I2C_Register_Masks */
N
N
N/* I2C - Peripheral instance base addresses */
N/** Peripheral I2C0 base address */
N#define I2C0_BASE                                (0x40086000u)
N/** Peripheral I2C0 base pointer */
N#define I2C0                                     ((I2C_Type *)I2C0_BASE)
N/** Peripheral I2C1 base address */
N#define I2C1_BASE                                (0x40087000u)
N/** Peripheral I2C1 base pointer */
N#define I2C1                                     ((I2C_Type *)I2C1_BASE)
N/** Peripheral I2C2 base address */
N#define I2C2_BASE                                (0x40088000u)
N/** Peripheral I2C2 base pointer */
N#define I2C2                                     ((I2C_Type *)I2C2_BASE)
N/** Peripheral I2C3 base address */
N#define I2C3_BASE                                (0x40089000u)
N/** Peripheral I2C3 base pointer */
N#define I2C3                                     ((I2C_Type *)I2C3_BASE)
N/** Peripheral I2C4 base address */
N#define I2C4_BASE                                (0x4008A000u)
N/** Peripheral I2C4 base pointer */
N#define I2C4                                     ((I2C_Type *)I2C4_BASE)
N/** Peripheral I2C5 base address */
N#define I2C5_BASE                                (0x40096000u)
N/** Peripheral I2C5 base pointer */
N#define I2C5                                     ((I2C_Type *)I2C5_BASE)
N/** Peripheral I2C6 base address */
N#define I2C6_BASE                                (0x40097000u)
N/** Peripheral I2C6 base pointer */
N#define I2C6                                     ((I2C_Type *)I2C6_BASE)
N/** Peripheral I2C7 base address */
N#define I2C7_BASE                                (0x40098000u)
N/** Peripheral I2C7 base pointer */
N#define I2C7                                     ((I2C_Type *)I2C7_BASE)
N/** Peripheral I2C8 base address */
N#define I2C8_BASE                                (0x40099000u)
N/** Peripheral I2C8 base pointer */
N#define I2C8                                     ((I2C_Type *)I2C8_BASE)
N/** Peripheral I2C9 base address */
N#define I2C9_BASE                                (0x4009A000u)
N/** Peripheral I2C9 base pointer */
N#define I2C9                                     ((I2C_Type *)I2C9_BASE)
N/** Array initializer of I2C peripheral base addresses */
N#define I2C_BASE_ADDRS                           { I2C0_BASE, I2C1_BASE, I2C2_BASE, I2C3_BASE, I2C4_BASE, I2C5_BASE, I2C6_BASE, I2C7_BASE, I2C8_BASE, I2C9_BASE }
N/** Array initializer of I2C peripheral base pointers */
N#define I2C_BASE_PTRS                            { I2C0, I2C1, I2C2, I2C3, I2C4, I2C5, I2C6, I2C7, I2C8, I2C9 }
N/** Interrupt vectors for the I2C peripheral type */
N#define I2C_IRQS                                 { FLEXCOMM0_IRQn, FLEXCOMM1_IRQn, FLEXCOMM2_IRQn, FLEXCOMM3_IRQn, FLEXCOMM4_IRQn, FLEXCOMM5_IRQn, FLEXCOMM6_IRQn, FLEXCOMM7_IRQn, FLEXCOMM8_IRQn, FLEXCOMM9_IRQn }
N
N/*!
N * @}
N */ /* end of group I2C_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- I2S Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2S_Peripheral_Access_Layer I2S Peripheral Access Layer
N * @{
N */
N
N/** I2S - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[32];
N  struct {                                         /* offset: 0x20, array step: 0x20 */
N    __IO uint32_t PCFG1;                             /**< Configuration register 1 for channel pair, array offset: 0x20, array step: 0x20 */
X    volatile uint32_t PCFG1;                              
N    __IO uint32_t PCFG2;                             /**< Configuration register 2 for channel pair, array offset: 0x24, array step: 0x20 */
X    volatile uint32_t PCFG2;                              
N    __IO uint32_t PSTAT;                             /**< Status register for channel pair, array offset: 0x28, array step: 0x20 */
X    volatile uint32_t PSTAT;                              
N         uint8_t RESERVED_0[20];
N  } SECCHANNEL[3];
N       uint8_t RESERVED_1[2944];
N  __IO uint32_t CFG1;                              /**< Configuration register 1 for the primary channel pair., offset: 0xC00 */
X  volatile uint32_t CFG1;                               
N  __IO uint32_t CFG2;                              /**< Configuration register 2 for the primary channel pair., offset: 0xC04 */
X  volatile uint32_t CFG2;                               
N  __IO uint32_t STAT;                              /**< Status register for the primary channel pair., offset: 0xC08 */
X  volatile uint32_t STAT;                               
N       uint8_t RESERVED_2[16];
N  __IO uint32_t DIV;                               /**< Clock divider, used by all channel pairs., offset: 0xC1C */
X  volatile uint32_t DIV;                                
N       uint8_t RESERVED_3[480];
N  __IO uint32_t FIFOCFG;                           /**< FIFO configuration and enable register., offset: 0xE00 */
X  volatile uint32_t FIFOCFG;                            
N  __IO uint32_t FIFOSTAT;                          /**< FIFO status register., offset: 0xE04 */
X  volatile uint32_t FIFOSTAT;                           
N  __IO uint32_t FIFOTRIG;                          /**< FIFO trigger settings for interrupt and DMA request., offset: 0xE08 */
X  volatile uint32_t FIFOTRIG;                           
N       uint8_t RESERVED_4[4];
N  __IO uint32_t FIFOINTENSET;                      /**< FIFO interrupt enable set (enable) and read register., offset: 0xE10 */
X  volatile uint32_t FIFOINTENSET;                       
N  __IO uint32_t FIFOINTENCLR;                      /**< FIFO interrupt enable clear (disable) and read register., offset: 0xE14 */
X  volatile uint32_t FIFOINTENCLR;                       
N  __I  uint32_t FIFOINTSTAT;                       /**< FIFO interrupt status register., offset: 0xE18 */
X  volatile const  uint32_t FIFOINTSTAT;                        
N       uint8_t RESERVED_5[4];
N  __O  uint32_t FIFOWR;                            /**< FIFO write data., offset: 0xE20 */
X  volatile  uint32_t FIFOWR;                             
N  __O  uint32_t FIFOWR48H;                         /**< FIFO write data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA., offset: 0xE24 */
X  volatile  uint32_t FIFOWR48H;                          
N       uint8_t RESERVED_6[8];
N  __I  uint32_t FIFORD;                            /**< FIFO read data., offset: 0xE30 */
X  volatile const  uint32_t FIFORD;                             
N  __I  uint32_t FIFORD48H;                         /**< FIFO read data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA., offset: 0xE34 */
X  volatile const  uint32_t FIFORD48H;                          
N       uint8_t RESERVED_7[8];
N  __I  uint32_t FIFORDNOPOP;                       /**< FIFO data read with no FIFO pop., offset: 0xE40 */
X  volatile const  uint32_t FIFORDNOPOP;                        
N  __I  uint32_t FIFORD48HNOPOP;                    /**< FIFO data read for upper data bits with no FIFO pop. May only be used if the I2S is configured for 2x 24-bit data and not using DMA., offset: 0xE44 */
X  volatile const  uint32_t FIFORD48HNOPOP;                     
N       uint8_t RESERVED_8[4020];
N  __I  uint32_t ID;                                /**< I2S Module identification, offset: 0x1DFC */
X  volatile const  uint32_t ID;                                 
N} I2S_Type;
N
N/* ----------------------------------------------------------------------------
N   -- I2S Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2S_Register_Masks I2S Register Masks
N * @{
N */
N
N/*! @name SECCHANNEL_PCFG1 - Configuration register 1 for channel pair */
N#define I2S_SECCHANNEL_PCFG1_PAIRENABLE_MASK     (0x1U)
N#define I2S_SECCHANNEL_PCFG1_PAIRENABLE_SHIFT    (0U)
N#define I2S_SECCHANNEL_PCFG1_PAIRENABLE(x)       (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PCFG1_PAIRENABLE_SHIFT)) & I2S_SECCHANNEL_PCFG1_PAIRENABLE_MASK)
N#define I2S_SECCHANNEL_PCFG1_ONECHANNEL_MASK     (0x400U)
N#define I2S_SECCHANNEL_PCFG1_ONECHANNEL_SHIFT    (10U)
N#define I2S_SECCHANNEL_PCFG1_ONECHANNEL(x)       (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PCFG1_ONECHANNEL_SHIFT)) & I2S_SECCHANNEL_PCFG1_ONECHANNEL_MASK)
N
N/* The count of I2S_SECCHANNEL_PCFG1 */
N#define I2S_SECCHANNEL_PCFG1_COUNT               (3U)
N
N/*! @name SECCHANNEL_PCFG2 - Configuration register 2 for channel pair */
N#define I2S_SECCHANNEL_PCFG2_POSITION_MASK       (0x1FF0000U)
N#define I2S_SECCHANNEL_PCFG2_POSITION_SHIFT      (16U)
N#define I2S_SECCHANNEL_PCFG2_POSITION(x)         (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PCFG2_POSITION_SHIFT)) & I2S_SECCHANNEL_PCFG2_POSITION_MASK)
N
N/* The count of I2S_SECCHANNEL_PCFG2 */
N#define I2S_SECCHANNEL_PCFG2_COUNT               (3U)
N
N/*! @name SECCHANNEL_PSTAT - Status register for channel pair */
N#define I2S_SECCHANNEL_PSTAT_BUSY_MASK           (0x1U)
N#define I2S_SECCHANNEL_PSTAT_BUSY_SHIFT          (0U)
N#define I2S_SECCHANNEL_PSTAT_BUSY(x)             (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PSTAT_BUSY_SHIFT)) & I2S_SECCHANNEL_PSTAT_BUSY_MASK)
N#define I2S_SECCHANNEL_PSTAT_SLVFRMERR_MASK      (0x2U)
N#define I2S_SECCHANNEL_PSTAT_SLVFRMERR_SHIFT     (1U)
N#define I2S_SECCHANNEL_PSTAT_SLVFRMERR(x)        (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PSTAT_SLVFRMERR_SHIFT)) & I2S_SECCHANNEL_PSTAT_SLVFRMERR_MASK)
N#define I2S_SECCHANNEL_PSTAT_LR_MASK             (0x4U)
N#define I2S_SECCHANNEL_PSTAT_LR_SHIFT            (2U)
N#define I2S_SECCHANNEL_PSTAT_LR(x)               (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PSTAT_LR_SHIFT)) & I2S_SECCHANNEL_PSTAT_LR_MASK)
N#define I2S_SECCHANNEL_PSTAT_DATAPAUSED_MASK     (0x8U)
N#define I2S_SECCHANNEL_PSTAT_DATAPAUSED_SHIFT    (3U)
N#define I2S_SECCHANNEL_PSTAT_DATAPAUSED(x)       (((uint32_t)(((uint32_t)(x)) << I2S_SECCHANNEL_PSTAT_DATAPAUSED_SHIFT)) & I2S_SECCHANNEL_PSTAT_DATAPAUSED_MASK)
N
N/* The count of I2S_SECCHANNEL_PSTAT */
N#define I2S_SECCHANNEL_PSTAT_COUNT               (3U)
N
N/*! @name CFG1 - Configuration register 1 for the primary channel pair. */
N#define I2S_CFG1_MAINENABLE_MASK                 (0x1U)
N#define I2S_CFG1_MAINENABLE_SHIFT                (0U)
N#define I2S_CFG1_MAINENABLE(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_MAINENABLE_SHIFT)) & I2S_CFG1_MAINENABLE_MASK)
N#define I2S_CFG1_DATAPAUSE_MASK                  (0x2U)
N#define I2S_CFG1_DATAPAUSE_SHIFT                 (1U)
N#define I2S_CFG1_DATAPAUSE(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_DATAPAUSE_SHIFT)) & I2S_CFG1_DATAPAUSE_MASK)
N#define I2S_CFG1_PAIRCOUNT_MASK                  (0xCU)
N#define I2S_CFG1_PAIRCOUNT_SHIFT                 (2U)
N#define I2S_CFG1_PAIRCOUNT(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_PAIRCOUNT_SHIFT)) & I2S_CFG1_PAIRCOUNT_MASK)
N#define I2S_CFG1_MSTSLVCFG_MASK                  (0x30U)
N#define I2S_CFG1_MSTSLVCFG_SHIFT                 (4U)
N#define I2S_CFG1_MSTSLVCFG(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_MSTSLVCFG_SHIFT)) & I2S_CFG1_MSTSLVCFG_MASK)
N#define I2S_CFG1_MODE_MASK                       (0xC0U)
N#define I2S_CFG1_MODE_SHIFT                      (6U)
N#define I2S_CFG1_MODE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_MODE_SHIFT)) & I2S_CFG1_MODE_MASK)
N#define I2S_CFG1_RIGHTLOW_MASK                   (0x100U)
N#define I2S_CFG1_RIGHTLOW_SHIFT                  (8U)
N#define I2S_CFG1_RIGHTLOW(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_RIGHTLOW_SHIFT)) & I2S_CFG1_RIGHTLOW_MASK)
N#define I2S_CFG1_LEFTJUST_MASK                   (0x200U)
N#define I2S_CFG1_LEFTJUST_SHIFT                  (9U)
N#define I2S_CFG1_LEFTJUST(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_LEFTJUST_SHIFT)) & I2S_CFG1_LEFTJUST_MASK)
N#define I2S_CFG1_ONECHANNEL_MASK                 (0x400U)
N#define I2S_CFG1_ONECHANNEL_SHIFT                (10U)
N#define I2S_CFG1_ONECHANNEL(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_ONECHANNEL_SHIFT)) & I2S_CFG1_ONECHANNEL_MASK)
N#define I2S_CFG1_PDMDATA_MASK                    (0x800U)
N#define I2S_CFG1_PDMDATA_SHIFT                   (11U)
N#define I2S_CFG1_PDMDATA(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_PDMDATA_SHIFT)) & I2S_CFG1_PDMDATA_MASK)
N#define I2S_CFG1_SCK_POL_MASK                    (0x1000U)
N#define I2S_CFG1_SCK_POL_SHIFT                   (12U)
N#define I2S_CFG1_SCK_POL(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_SCK_POL_SHIFT)) & I2S_CFG1_SCK_POL_MASK)
N#define I2S_CFG1_WS_POL_MASK                     (0x2000U)
N#define I2S_CFG1_WS_POL_SHIFT                    (13U)
N#define I2S_CFG1_WS_POL(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_WS_POL_SHIFT)) & I2S_CFG1_WS_POL_MASK)
N#define I2S_CFG1_DATALEN_MASK                    (0x1F0000U)
N#define I2S_CFG1_DATALEN_SHIFT                   (16U)
N#define I2S_CFG1_DATALEN(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_CFG1_DATALEN_SHIFT)) & I2S_CFG1_DATALEN_MASK)
N
N/*! @name CFG2 - Configuration register 2 for the primary channel pair. */
N#define I2S_CFG2_FRAMELEN_MASK                   (0x1FFU)
N#define I2S_CFG2_FRAMELEN_SHIFT                  (0U)
N#define I2S_CFG2_FRAMELEN(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_CFG2_FRAMELEN_SHIFT)) & I2S_CFG2_FRAMELEN_MASK)
N#define I2S_CFG2_POSITION_MASK                   (0x1FF0000U)
N#define I2S_CFG2_POSITION_SHIFT                  (16U)
N#define I2S_CFG2_POSITION(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_CFG2_POSITION_SHIFT)) & I2S_CFG2_POSITION_MASK)
N
N/*! @name STAT - Status register for the primary channel pair. */
N#define I2S_STAT_BUSY_MASK                       (0x1U)
N#define I2S_STAT_BUSY_SHIFT                      (0U)
N#define I2S_STAT_BUSY(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_STAT_BUSY_SHIFT)) & I2S_STAT_BUSY_MASK)
N#define I2S_STAT_SLVFRMERR_MASK                  (0x2U)
N#define I2S_STAT_SLVFRMERR_SHIFT                 (1U)
N#define I2S_STAT_SLVFRMERR(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_STAT_SLVFRMERR_SHIFT)) & I2S_STAT_SLVFRMERR_MASK)
N#define I2S_STAT_LR_MASK                         (0x4U)
N#define I2S_STAT_LR_SHIFT                        (2U)
N#define I2S_STAT_LR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_STAT_LR_SHIFT)) & I2S_STAT_LR_MASK)
N#define I2S_STAT_DATAPAUSED_MASK                 (0x8U)
N#define I2S_STAT_DATAPAUSED_SHIFT                (3U)
N#define I2S_STAT_DATAPAUSED(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_STAT_DATAPAUSED_SHIFT)) & I2S_STAT_DATAPAUSED_MASK)
N
N/*! @name DIV - Clock divider, used by all channel pairs. */
N#define I2S_DIV_DIV_MASK                         (0xFFFU)
N#define I2S_DIV_DIV_SHIFT                        (0U)
N#define I2S_DIV_DIV(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_DIV_DIV_SHIFT)) & I2S_DIV_DIV_MASK)
N
N/*! @name FIFOCFG - FIFO configuration and enable register. */
N#define I2S_FIFOCFG_ENABLETX_MASK                (0x1U)
N#define I2S_FIFOCFG_ENABLETX_SHIFT               (0U)
N#define I2S_FIFOCFG_ENABLETX(x)                  (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_ENABLETX_SHIFT)) & I2S_FIFOCFG_ENABLETX_MASK)
N#define I2S_FIFOCFG_ENABLERX_MASK                (0x2U)
N#define I2S_FIFOCFG_ENABLERX_SHIFT               (1U)
N#define I2S_FIFOCFG_ENABLERX(x)                  (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_ENABLERX_SHIFT)) & I2S_FIFOCFG_ENABLERX_MASK)
N#define I2S_FIFOCFG_TXI2SE0_MASK                 (0x4U)
N#define I2S_FIFOCFG_TXI2SE0_SHIFT                (2U)
N#define I2S_FIFOCFG_TXI2SE0(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_TXI2SE0_SHIFT)) & I2S_FIFOCFG_TXI2SE0_MASK)
N#define I2S_FIFOCFG_PACK48_MASK                  (0x8U)
N#define I2S_FIFOCFG_PACK48_SHIFT                 (3U)
N#define I2S_FIFOCFG_PACK48(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_PACK48_SHIFT)) & I2S_FIFOCFG_PACK48_MASK)
N#define I2S_FIFOCFG_SIZE_MASK                    (0x30U)
N#define I2S_FIFOCFG_SIZE_SHIFT                   (4U)
N#define I2S_FIFOCFG_SIZE(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_SIZE_SHIFT)) & I2S_FIFOCFG_SIZE_MASK)
N#define I2S_FIFOCFG_DMATX_MASK                   (0x1000U)
N#define I2S_FIFOCFG_DMATX_SHIFT                  (12U)
N#define I2S_FIFOCFG_DMATX(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_DMATX_SHIFT)) & I2S_FIFOCFG_DMATX_MASK)
N#define I2S_FIFOCFG_DMARX_MASK                   (0x2000U)
N#define I2S_FIFOCFG_DMARX_SHIFT                  (13U)
N#define I2S_FIFOCFG_DMARX(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_DMARX_SHIFT)) & I2S_FIFOCFG_DMARX_MASK)
N#define I2S_FIFOCFG_WAKETX_MASK                  (0x4000U)
N#define I2S_FIFOCFG_WAKETX_SHIFT                 (14U)
N#define I2S_FIFOCFG_WAKETX(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_WAKETX_SHIFT)) & I2S_FIFOCFG_WAKETX_MASK)
N#define I2S_FIFOCFG_WAKERX_MASK                  (0x8000U)
N#define I2S_FIFOCFG_WAKERX_SHIFT                 (15U)
N#define I2S_FIFOCFG_WAKERX(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_WAKERX_SHIFT)) & I2S_FIFOCFG_WAKERX_MASK)
N#define I2S_FIFOCFG_EMPTYTX_MASK                 (0x10000U)
N#define I2S_FIFOCFG_EMPTYTX_SHIFT                (16U)
N#define I2S_FIFOCFG_EMPTYTX(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_EMPTYTX_SHIFT)) & I2S_FIFOCFG_EMPTYTX_MASK)
N#define I2S_FIFOCFG_EMPTYRX_MASK                 (0x20000U)
N#define I2S_FIFOCFG_EMPTYRX_SHIFT                (17U)
N#define I2S_FIFOCFG_EMPTYRX(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_EMPTYRX_SHIFT)) & I2S_FIFOCFG_EMPTYRX_MASK)
N#define I2S_FIFOCFG_POPDBG_MASK                  (0x40000U)
N#define I2S_FIFOCFG_POPDBG_SHIFT                 (18U)
N#define I2S_FIFOCFG_POPDBG(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOCFG_POPDBG_SHIFT)) & I2S_FIFOCFG_POPDBG_MASK)
N
N/*! @name FIFOSTAT - FIFO status register. */
N#define I2S_FIFOSTAT_TXERR_MASK                  (0x1U)
N#define I2S_FIFOSTAT_TXERR_SHIFT                 (0U)
N#define I2S_FIFOSTAT_TXERR(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_TXERR_SHIFT)) & I2S_FIFOSTAT_TXERR_MASK)
N#define I2S_FIFOSTAT_RXERR_MASK                  (0x2U)
N#define I2S_FIFOSTAT_RXERR_SHIFT                 (1U)
N#define I2S_FIFOSTAT_RXERR(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_RXERR_SHIFT)) & I2S_FIFOSTAT_RXERR_MASK)
N#define I2S_FIFOSTAT_PERINT_MASK                 (0x8U)
N#define I2S_FIFOSTAT_PERINT_SHIFT                (3U)
N#define I2S_FIFOSTAT_PERINT(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_PERINT_SHIFT)) & I2S_FIFOSTAT_PERINT_MASK)
N#define I2S_FIFOSTAT_TXEMPTY_MASK                (0x10U)
N#define I2S_FIFOSTAT_TXEMPTY_SHIFT               (4U)
N#define I2S_FIFOSTAT_TXEMPTY(x)                  (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_TXEMPTY_SHIFT)) & I2S_FIFOSTAT_TXEMPTY_MASK)
N#define I2S_FIFOSTAT_TXNOTFULL_MASK              (0x20U)
N#define I2S_FIFOSTAT_TXNOTFULL_SHIFT             (5U)
N#define I2S_FIFOSTAT_TXNOTFULL(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_TXNOTFULL_SHIFT)) & I2S_FIFOSTAT_TXNOTFULL_MASK)
N#define I2S_FIFOSTAT_RXNOTEMPTY_MASK             (0x40U)
N#define I2S_FIFOSTAT_RXNOTEMPTY_SHIFT            (6U)
N#define I2S_FIFOSTAT_RXNOTEMPTY(x)               (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_RXNOTEMPTY_SHIFT)) & I2S_FIFOSTAT_RXNOTEMPTY_MASK)
N#define I2S_FIFOSTAT_RXFULL_MASK                 (0x80U)
N#define I2S_FIFOSTAT_RXFULL_SHIFT                (7U)
N#define I2S_FIFOSTAT_RXFULL(x)                   (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_RXFULL_SHIFT)) & I2S_FIFOSTAT_RXFULL_MASK)
N#define I2S_FIFOSTAT_TXLVL_MASK                  (0x1F00U)
N#define I2S_FIFOSTAT_TXLVL_SHIFT                 (8U)
N#define I2S_FIFOSTAT_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_TXLVL_SHIFT)) & I2S_FIFOSTAT_TXLVL_MASK)
N#define I2S_FIFOSTAT_RXLVL_MASK                  (0x1F0000U)
N#define I2S_FIFOSTAT_RXLVL_SHIFT                 (16U)
N#define I2S_FIFOSTAT_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOSTAT_RXLVL_SHIFT)) & I2S_FIFOSTAT_RXLVL_MASK)
N
N/*! @name FIFOTRIG - FIFO trigger settings for interrupt and DMA request. */
N#define I2S_FIFOTRIG_TXLVLENA_MASK               (0x1U)
N#define I2S_FIFOTRIG_TXLVLENA_SHIFT              (0U)
N#define I2S_FIFOTRIG_TXLVLENA(x)                 (((uint32_t)(((uint32_t)(x)) << I2S_FIFOTRIG_TXLVLENA_SHIFT)) & I2S_FIFOTRIG_TXLVLENA_MASK)
N#define I2S_FIFOTRIG_RXLVLENA_MASK               (0x2U)
N#define I2S_FIFOTRIG_RXLVLENA_SHIFT              (1U)
N#define I2S_FIFOTRIG_RXLVLENA(x)                 (((uint32_t)(((uint32_t)(x)) << I2S_FIFOTRIG_RXLVLENA_SHIFT)) & I2S_FIFOTRIG_RXLVLENA_MASK)
N#define I2S_FIFOTRIG_TXLVL_MASK                  (0xF00U)
N#define I2S_FIFOTRIG_TXLVL_SHIFT                 (8U)
N#define I2S_FIFOTRIG_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOTRIG_TXLVL_SHIFT)) & I2S_FIFOTRIG_TXLVL_MASK)
N#define I2S_FIFOTRIG_RXLVL_MASK                  (0xF0000U)
N#define I2S_FIFOTRIG_RXLVL_SHIFT                 (16U)
N#define I2S_FIFOTRIG_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_FIFOTRIG_RXLVL_SHIFT)) & I2S_FIFOTRIG_RXLVL_MASK)
N
N/*! @name FIFOINTENSET - FIFO interrupt enable set (enable) and read register. */
N#define I2S_FIFOINTENSET_TXERR_MASK              (0x1U)
N#define I2S_FIFOINTENSET_TXERR_SHIFT             (0U)
N#define I2S_FIFOINTENSET_TXERR(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENSET_TXERR_SHIFT)) & I2S_FIFOINTENSET_TXERR_MASK)
N#define I2S_FIFOINTENSET_RXERR_MASK              (0x2U)
N#define I2S_FIFOINTENSET_RXERR_SHIFT             (1U)
N#define I2S_FIFOINTENSET_RXERR(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENSET_RXERR_SHIFT)) & I2S_FIFOINTENSET_RXERR_MASK)
N#define I2S_FIFOINTENSET_TXLVL_MASK              (0x4U)
N#define I2S_FIFOINTENSET_TXLVL_SHIFT             (2U)
N#define I2S_FIFOINTENSET_TXLVL(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENSET_TXLVL_SHIFT)) & I2S_FIFOINTENSET_TXLVL_MASK)
N#define I2S_FIFOINTENSET_RXLVL_MASK              (0x8U)
N#define I2S_FIFOINTENSET_RXLVL_SHIFT             (3U)
N#define I2S_FIFOINTENSET_RXLVL(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENSET_RXLVL_SHIFT)) & I2S_FIFOINTENSET_RXLVL_MASK)
N
N/*! @name FIFOINTENCLR - FIFO interrupt enable clear (disable) and read register. */
N#define I2S_FIFOINTENCLR_TXERR_MASK              (0x1U)
N#define I2S_FIFOINTENCLR_TXERR_SHIFT             (0U)
N#define I2S_FIFOINTENCLR_TXERR(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENCLR_TXERR_SHIFT)) & I2S_FIFOINTENCLR_TXERR_MASK)
N#define I2S_FIFOINTENCLR_RXERR_MASK              (0x2U)
N#define I2S_FIFOINTENCLR_RXERR_SHIFT             (1U)
N#define I2S_FIFOINTENCLR_RXERR(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENCLR_RXERR_SHIFT)) & I2S_FIFOINTENCLR_RXERR_MASK)
N#define I2S_FIFOINTENCLR_TXLVL_MASK              (0x4U)
N#define I2S_FIFOINTENCLR_TXLVL_SHIFT             (2U)
N#define I2S_FIFOINTENCLR_TXLVL(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENCLR_TXLVL_SHIFT)) & I2S_FIFOINTENCLR_TXLVL_MASK)
N#define I2S_FIFOINTENCLR_RXLVL_MASK              (0x8U)
N#define I2S_FIFOINTENCLR_RXLVL_SHIFT             (3U)
N#define I2S_FIFOINTENCLR_RXLVL(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTENCLR_RXLVL_SHIFT)) & I2S_FIFOINTENCLR_RXLVL_MASK)
N
N/*! @name FIFOINTSTAT - FIFO interrupt status register. */
N#define I2S_FIFOINTSTAT_TXERR_MASK               (0x1U)
N#define I2S_FIFOINTSTAT_TXERR_SHIFT              (0U)
N#define I2S_FIFOINTSTAT_TXERR(x)                 (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTSTAT_TXERR_SHIFT)) & I2S_FIFOINTSTAT_TXERR_MASK)
N#define I2S_FIFOINTSTAT_RXERR_MASK               (0x2U)
N#define I2S_FIFOINTSTAT_RXERR_SHIFT              (1U)
N#define I2S_FIFOINTSTAT_RXERR(x)                 (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTSTAT_RXERR_SHIFT)) & I2S_FIFOINTSTAT_RXERR_MASK)
N#define I2S_FIFOINTSTAT_TXLVL_MASK               (0x4U)
N#define I2S_FIFOINTSTAT_TXLVL_SHIFT              (2U)
N#define I2S_FIFOINTSTAT_TXLVL(x)                 (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTSTAT_TXLVL_SHIFT)) & I2S_FIFOINTSTAT_TXLVL_MASK)
N#define I2S_FIFOINTSTAT_RXLVL_MASK               (0x8U)
N#define I2S_FIFOINTSTAT_RXLVL_SHIFT              (3U)
N#define I2S_FIFOINTSTAT_RXLVL(x)                 (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTSTAT_RXLVL_SHIFT)) & I2S_FIFOINTSTAT_RXLVL_MASK)
N#define I2S_FIFOINTSTAT_PERINT_MASK              (0x10U)
N#define I2S_FIFOINTSTAT_PERINT_SHIFT             (4U)
N#define I2S_FIFOINTSTAT_PERINT(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFOINTSTAT_PERINT_SHIFT)) & I2S_FIFOINTSTAT_PERINT_MASK)
N
N/*! @name FIFOWR - FIFO write data. */
N#define I2S_FIFOWR_TXDATA_MASK                   (0xFFFFFFFFU)
N#define I2S_FIFOWR_TXDATA_SHIFT                  (0U)
N#define I2S_FIFOWR_TXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_FIFOWR_TXDATA_SHIFT)) & I2S_FIFOWR_TXDATA_MASK)
N
N/*! @name FIFOWR48H - FIFO write data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA. */
N#define I2S_FIFOWR48H_TXDATA_MASK                (0xFFFFFFU)
N#define I2S_FIFOWR48H_TXDATA_SHIFT               (0U)
N#define I2S_FIFOWR48H_TXDATA(x)                  (((uint32_t)(((uint32_t)(x)) << I2S_FIFOWR48H_TXDATA_SHIFT)) & I2S_FIFOWR48H_TXDATA_MASK)
N
N/*! @name FIFORD - FIFO read data. */
N#define I2S_FIFORD_RXDATA_MASK                   (0xFFFFFFFFU)
N#define I2S_FIFORD_RXDATA_SHIFT                  (0U)
N#define I2S_FIFORD_RXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_FIFORD_RXDATA_SHIFT)) & I2S_FIFORD_RXDATA_MASK)
N
N/*! @name FIFORD48H - FIFO read data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA. */
N#define I2S_FIFORD48H_RXDATA_MASK                (0xFFFFFFU)
N#define I2S_FIFORD48H_RXDATA_SHIFT               (0U)
N#define I2S_FIFORD48H_RXDATA(x)                  (((uint32_t)(((uint32_t)(x)) << I2S_FIFORD48H_RXDATA_SHIFT)) & I2S_FIFORD48H_RXDATA_MASK)
N
N/*! @name FIFORDNOPOP - FIFO data read with no FIFO pop. */
N#define I2S_FIFORDNOPOP_RXDATA_MASK              (0xFFFFFFFFU)
N#define I2S_FIFORDNOPOP_RXDATA_SHIFT             (0U)
N#define I2S_FIFORDNOPOP_RXDATA(x)                (((uint32_t)(((uint32_t)(x)) << I2S_FIFORDNOPOP_RXDATA_SHIFT)) & I2S_FIFORDNOPOP_RXDATA_MASK)
N
N/*! @name FIFORD48HNOPOP - FIFO data read for upper data bits with no FIFO pop. May only be used if the I2S is configured for 2x 24-bit data and not using DMA. */
N#define I2S_FIFORD48HNOPOP_RXDATA_MASK           (0xFFFFFFU)
N#define I2S_FIFORD48HNOPOP_RXDATA_SHIFT          (0U)
N#define I2S_FIFORD48HNOPOP_RXDATA(x)             (((uint32_t)(((uint32_t)(x)) << I2S_FIFORD48HNOPOP_RXDATA_SHIFT)) & I2S_FIFORD48HNOPOP_RXDATA_MASK)
N
N/*! @name ID - I2S Module identification */
N#define I2S_ID_Aperture_MASK                     (0xFFU)
N#define I2S_ID_Aperture_SHIFT                    (0U)
N#define I2S_ID_Aperture(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_ID_Aperture_SHIFT)) & I2S_ID_Aperture_MASK)
N#define I2S_ID_Minor_Rev_MASK                    (0xF00U)
N#define I2S_ID_Minor_Rev_SHIFT                   (8U)
N#define I2S_ID_Minor_Rev(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_ID_Minor_Rev_SHIFT)) & I2S_ID_Minor_Rev_MASK)
N#define I2S_ID_Major_Rev_MASK                    (0xF000U)
N#define I2S_ID_Major_Rev_SHIFT                   (12U)
N#define I2S_ID_Major_Rev(x)                      (((uint32_t)(((uint32_t)(x)) << I2S_ID_Major_Rev_SHIFT)) & I2S_ID_Major_Rev_MASK)
N#define I2S_ID_ID_MASK                           (0xFFFF0000U)
N#define I2S_ID_ID_SHIFT                          (16U)
N#define I2S_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << I2S_ID_ID_SHIFT)) & I2S_ID_ID_MASK)
N
N
N/*!
N * @}
N */ /* end of group I2S_Register_Masks */
N
N
N/* I2S - Peripheral instance base addresses */
N/** Peripheral I2S0 base address */
N#define I2S0_BASE                                (0x40097000u)
N/** Peripheral I2S0 base pointer */
N#define I2S0                                     ((I2S_Type *)I2S0_BASE)
N/** Peripheral I2S1 base address */
N#define I2S1_BASE                                (0x40098000u)
N/** Peripheral I2S1 base pointer */
N#define I2S1                                     ((I2S_Type *)I2S1_BASE)
N/** Array initializer of I2S peripheral base addresses */
N#define I2S_BASE_ADDRS                           { I2S0_BASE, I2S1_BASE }
N/** Array initializer of I2S peripheral base pointers */
N#define I2S_BASE_PTRS                            { I2S0, I2S1 }
N/** Interrupt vectors for the I2S peripheral type */
N#define I2S_IRQS                                 { FLEXCOMM6_IRQn, FLEXCOMM7_IRQn }
N
N/*!
N * @}
N */ /* end of group I2S_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- INPUTMUX Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup INPUTMUX_Peripheral_Access_Layer INPUTMUX Peripheral Access Layer
N * @{
N */
N
N/** INPUTMUX - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t SCT0_INMUX[7];                     /**< Trigger select register for DMA channel, array offset: 0x0, array step: 0x4 */
X  volatile uint32_t SCT0_INMUX[7];                      
N       uint8_t RESERVED_0[164];
N  __IO uint32_t PINTSEL[8];                        /**< Pin interrupt select register, array offset: 0xC0, array step: 0x4 */
X  volatile uint32_t PINTSEL[8];                         
N  __IO uint32_t DMA_ITRIG_INMUX[30];               /**< Trigger select register for DMA channel, array offset: 0xE0, array step: 0x4 */
X  volatile uint32_t DMA_ITRIG_INMUX[30];                
N       uint8_t RESERVED_1[8];
N  __IO uint32_t DMA_OTRIG_INMUX[4];                /**< DMA output trigger selection to become DMA trigger, array offset: 0x160, array step: 0x4 */
X  volatile uint32_t DMA_OTRIG_INMUX[4];                 
N       uint8_t RESERVED_2[16];
N  __IO uint32_t FREQMEAS_REF;                      /**< Selection for frequency measurement reference clock, offset: 0x180 */
X  volatile uint32_t FREQMEAS_REF;                       
N  __IO uint32_t FREQMEAS_TARGET;                   /**< Selection for frequency measurement target clock, offset: 0x184 */
X  volatile uint32_t FREQMEAS_TARGET;                    
N} INPUTMUX_Type;
N
N/* ----------------------------------------------------------------------------
N   -- INPUTMUX Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup INPUTMUX_Register_Masks INPUTMUX Register Masks
N * @{
N */
N
N/*! @name SCT0_INMUX - Trigger select register for DMA channel */
N#define INPUTMUX_SCT0_INMUX_INP_N_MASK           (0x1FU)
N#define INPUTMUX_SCT0_INMUX_INP_N_SHIFT          (0U)
N#define INPUTMUX_SCT0_INMUX_INP_N(x)             (((uint32_t)(((uint32_t)(x)) << INPUTMUX_SCT0_INMUX_INP_N_SHIFT)) & INPUTMUX_SCT0_INMUX_INP_N_MASK)
N
N/* The count of INPUTMUX_SCT0_INMUX */
N#define INPUTMUX_SCT0_INMUX_COUNT                (7U)
N
N/*! @name PINTSEL - Pin interrupt select register */
N#define INPUTMUX_PINTSEL_INTPIN_MASK             (0xFFU)
N#define INPUTMUX_PINTSEL_INTPIN_SHIFT            (0U)
N#define INPUTMUX_PINTSEL_INTPIN(x)               (((uint32_t)(((uint32_t)(x)) << INPUTMUX_PINTSEL_INTPIN_SHIFT)) & INPUTMUX_PINTSEL_INTPIN_MASK)
N
N/* The count of INPUTMUX_PINTSEL */
N#define INPUTMUX_PINTSEL_COUNT                   (8U)
N
N/*! @name DMA_ITRIG_INMUX - Trigger select register for DMA channel */
N#define INPUTMUX_DMA_ITRIG_INMUX_INP_MASK        (0x1FU)
N#define INPUTMUX_DMA_ITRIG_INMUX_INP_SHIFT       (0U)
N#define INPUTMUX_DMA_ITRIG_INMUX_INP(x)          (((uint32_t)(((uint32_t)(x)) << INPUTMUX_DMA_ITRIG_INMUX_INP_SHIFT)) & INPUTMUX_DMA_ITRIG_INMUX_INP_MASK)
N
N/* The count of INPUTMUX_DMA_ITRIG_INMUX */
N#define INPUTMUX_DMA_ITRIG_INMUX_COUNT           (30U)
N
N/*! @name DMA_OTRIG_INMUX - DMA output trigger selection to become DMA trigger */
N#define INPUTMUX_DMA_OTRIG_INMUX_INP_MASK        (0x1FU)
N#define INPUTMUX_DMA_OTRIG_INMUX_INP_SHIFT       (0U)
N#define INPUTMUX_DMA_OTRIG_INMUX_INP(x)          (((uint32_t)(((uint32_t)(x)) << INPUTMUX_DMA_OTRIG_INMUX_INP_SHIFT)) & INPUTMUX_DMA_OTRIG_INMUX_INP_MASK)
N
N/* The count of INPUTMUX_DMA_OTRIG_INMUX */
N#define INPUTMUX_DMA_OTRIG_INMUX_COUNT           (4U)
N
N/*! @name FREQMEAS_REF - Selection for frequency measurement reference clock */
N#define INPUTMUX_FREQMEAS_REF_CLKIN_MASK         (0x1FU)
N#define INPUTMUX_FREQMEAS_REF_CLKIN_SHIFT        (0U)
N#define INPUTMUX_FREQMEAS_REF_CLKIN(x)           (((uint32_t)(((uint32_t)(x)) << INPUTMUX_FREQMEAS_REF_CLKIN_SHIFT)) & INPUTMUX_FREQMEAS_REF_CLKIN_MASK)
N
N/*! @name FREQMEAS_TARGET - Selection for frequency measurement target clock */
N#define INPUTMUX_FREQMEAS_TARGET_CLKIN_MASK      (0x1FU)
N#define INPUTMUX_FREQMEAS_TARGET_CLKIN_SHIFT     (0U)
N#define INPUTMUX_FREQMEAS_TARGET_CLKIN(x)        (((uint32_t)(((uint32_t)(x)) << INPUTMUX_FREQMEAS_TARGET_CLKIN_SHIFT)) & INPUTMUX_FREQMEAS_TARGET_CLKIN_MASK)
N
N
N/*!
N * @}
N */ /* end of group INPUTMUX_Register_Masks */
N
N
N/* INPUTMUX - Peripheral instance base addresses */
N/** Peripheral INPUTMUX base address */
N#define INPUTMUX_BASE                            (0x40005000u)
N/** Peripheral INPUTMUX base pointer */
N#define INPUTMUX                                 ((INPUTMUX_Type *)INPUTMUX_BASE)
N/** Array initializer of INPUTMUX peripheral base addresses */
N#define INPUTMUX_BASE_ADDRS                      { INPUTMUX_BASE }
N/** Array initializer of INPUTMUX peripheral base pointers */
N#define INPUTMUX_BASE_PTRS                       { INPUTMUX }
N
N/*!
N * @}
N */ /* end of group INPUTMUX_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- IOCON Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup IOCON_Peripheral_Access_Layer IOCON Peripheral Access Layer
N * @{
N */
N
N/** IOCON - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t PIO[6][32];                        /**< Digital I/O control for port 0 pins PIO0_0..Digital I/O control for port 5 pins PIO5_31, array offset: 0x0, array step: index*0x80, index2*0x4 */
X  volatile uint32_t PIO[6][32];                         
N} IOCON_Type;
N
N/* ----------------------------------------------------------------------------
N   -- IOCON Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup IOCON_Register_Masks IOCON Register Masks
N * @{
N */
N
N/*! @name PIO - Digital I/O control for port 0 pins PIO0_0..Digital I/O control for port 5 pins PIO5_31 */
N#define IOCON_PIO_FUNC_MASK                      (0xFU)
N#define IOCON_PIO_FUNC_SHIFT                     (0U)
N#define IOCON_PIO_FUNC(x)                        (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_FUNC_SHIFT)) & IOCON_PIO_FUNC_MASK)
N#define IOCON_PIO_MODE_MASK                      (0x30U)
N#define IOCON_PIO_MODE_SHIFT                     (4U)
N#define IOCON_PIO_MODE(x)                        (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_MODE_SHIFT)) & IOCON_PIO_MODE_MASK)
N#define IOCON_PIO_I2CSLEW_MASK                   (0x40U)
N#define IOCON_PIO_I2CSLEW_SHIFT                  (6U)
N#define IOCON_PIO_I2CSLEW(x)                     (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_I2CSLEW_SHIFT)) & IOCON_PIO_I2CSLEW_MASK)
N#define IOCON_PIO_INVERT_MASK                    (0x80U)
N#define IOCON_PIO_INVERT_SHIFT                   (7U)
N#define IOCON_PIO_INVERT(x)                      (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_INVERT_SHIFT)) & IOCON_PIO_INVERT_MASK)
N#define IOCON_PIO_DIGIMODE_MASK                  (0x100U)
N#define IOCON_PIO_DIGIMODE_SHIFT                 (8U)
N#define IOCON_PIO_DIGIMODE(x)                    (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_DIGIMODE_SHIFT)) & IOCON_PIO_DIGIMODE_MASK)
N#define IOCON_PIO_FILTEROFF_MASK                 (0x200U)
N#define IOCON_PIO_FILTEROFF_SHIFT                (9U)
N#define IOCON_PIO_FILTEROFF(x)                   (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_FILTEROFF_SHIFT)) & IOCON_PIO_FILTEROFF_MASK)
N#define IOCON_PIO_I2CDRIVE_MASK                  (0x400U)
N#define IOCON_PIO_I2CDRIVE_SHIFT                 (10U)
N#define IOCON_PIO_I2CDRIVE(x)                    (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_I2CDRIVE_SHIFT)) & IOCON_PIO_I2CDRIVE_MASK)
N#define IOCON_PIO_SLEW_MASK                      (0x400U)
N#define IOCON_PIO_SLEW_SHIFT                     (10U)
N#define IOCON_PIO_SLEW(x)                        (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_SLEW_SHIFT)) & IOCON_PIO_SLEW_MASK)
N#define IOCON_PIO_OD_MASK                        (0x800U)
N#define IOCON_PIO_OD_SHIFT                       (11U)
N#define IOCON_PIO_OD(x)                          (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_OD_SHIFT)) & IOCON_PIO_OD_MASK)
N#define IOCON_PIO_I2CFILTER_MASK                 (0x800U)
N#define IOCON_PIO_I2CFILTER_SHIFT                (11U)
N#define IOCON_PIO_I2CFILTER(x)                   (((uint32_t)(((uint32_t)(x)) << IOCON_PIO_I2CFILTER_SHIFT)) & IOCON_PIO_I2CFILTER_MASK)
N
N/* The count of IOCON_PIO */
N#define IOCON_PIO_COUNT                          (6U)
N
N/* The count of IOCON_PIO */
N#define IOCON_PIO_COUNT2                         (32U)
N
N
N/*!
N * @}
N */ /* end of group IOCON_Register_Masks */
N
N
N/* IOCON - Peripheral instance base addresses */
N/** Peripheral IOCON base address */
N#define IOCON_BASE                               (0x40001000u)
N/** Peripheral IOCON base pointer */
N#define IOCON                                    ((IOCON_Type *)IOCON_BASE)
N/** Array initializer of IOCON peripheral base addresses */
N#define IOCON_BASE_ADDRS                         { IOCON_BASE }
N/** Array initializer of IOCON peripheral base pointers */
N#define IOCON_BASE_PTRS                          { IOCON }
N
N/*!
N * @}
N */ /* end of group IOCON_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- LCD Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LCD_Peripheral_Access_Layer LCD Peripheral Access Layer
N * @{
N */
N
N/** LCD - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t TIMH;                              /**< Horizontal Timing Control register, offset: 0x0 */
X  volatile uint32_t TIMH;                               
N  __IO uint32_t TIMV;                              /**< Vertical Timing Control register, offset: 0x4 */
X  volatile uint32_t TIMV;                               
N  __IO uint32_t POL;                               /**< Clock and Signal Polarity Control register, offset: 0x8 */
X  volatile uint32_t POL;                                
N  __IO uint32_t LE;                                /**< Line End Control register, offset: 0xC */
X  volatile uint32_t LE;                                 
N  __IO uint32_t UPBASE;                            /**< Upper Panel Frame Base Address register, offset: 0x10 */
X  volatile uint32_t UPBASE;                             
N  __IO uint32_t LPBASE;                            /**< Lower Panel Frame Base Address register, offset: 0x14 */
X  volatile uint32_t LPBASE;                             
N  __IO uint32_t CTRL;                              /**< LCD Control register, offset: 0x18 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t INTMSK;                            /**< Interrupt Mask register, offset: 0x1C */
X  volatile uint32_t INTMSK;                             
N  __I  uint32_t INTRAW;                            /**< Raw Interrupt Status register, offset: 0x20 */
X  volatile const  uint32_t INTRAW;                             
N  __I  uint32_t INTSTAT;                           /**< Masked Interrupt Status register, offset: 0x24 */
X  volatile const  uint32_t INTSTAT;                            
N  __IO uint32_t INTCLR;                            /**< Interrupt Clear register, offset: 0x28 */
X  volatile uint32_t INTCLR;                             
N  __I  uint32_t UPCURR;                            /**< Upper Panel Current Address Value register, offset: 0x2C */
X  volatile const  uint32_t UPCURR;                             
N  __I  uint32_t LPCURR;                            /**< Lower Panel Current Address Value register, offset: 0x30 */
X  volatile const  uint32_t LPCURR;                             
N       uint8_t RESERVED_0[460];
N  __IO uint32_t PAL[128];                          /**< 256x16-bit Color Palette registers, array offset: 0x200, array step: 0x4 */
X  volatile uint32_t PAL[128];                           
N       uint8_t RESERVED_1[1024];
N  __IO uint32_t CRSR_IMG[256];                     /**< Cursor Image registers, array offset: 0x800, array step: 0x4 */
X  volatile uint32_t CRSR_IMG[256];                      
N  __IO uint32_t CRSR_CTRL;                         /**< Cursor Control register, offset: 0xC00 */
X  volatile uint32_t CRSR_CTRL;                          
N  __IO uint32_t CRSR_CFG;                          /**< Cursor Configuration register, offset: 0xC04 */
X  volatile uint32_t CRSR_CFG;                           
N  __IO uint32_t CRSR_PAL0;                         /**< Cursor Palette register 0, offset: 0xC08 */
X  volatile uint32_t CRSR_PAL0;                          
N  __IO uint32_t CRSR_PAL1;                         /**< Cursor Palette register 1, offset: 0xC0C */
X  volatile uint32_t CRSR_PAL1;                          
N  __IO uint32_t CRSR_XY;                           /**< Cursor XY Position register, offset: 0xC10 */
X  volatile uint32_t CRSR_XY;                            
N  __IO uint32_t CRSR_CLIP;                         /**< Cursor Clip Position register, offset: 0xC14 */
X  volatile uint32_t CRSR_CLIP;                          
N       uint8_t RESERVED_2[8];
N  __IO uint32_t CRSR_INTMSK;                       /**< Cursor Interrupt Mask register, offset: 0xC20 */
X  volatile uint32_t CRSR_INTMSK;                        
N  __O  uint32_t CRSR_INTCLR;                       /**< Cursor Interrupt Clear register, offset: 0xC24 */
X  volatile  uint32_t CRSR_INTCLR;                        
N  __I  uint32_t CRSR_INTRAW;                       /**< Cursor Raw Interrupt Status register, offset: 0xC28 */
X  volatile const  uint32_t CRSR_INTRAW;                        
N  __I  uint32_t CRSR_INTSTAT;                      /**< Cursor Masked Interrupt Status register, offset: 0xC2C */
X  volatile const  uint32_t CRSR_INTSTAT;                       
N} LCD_Type;
N
N/* ----------------------------------------------------------------------------
N   -- LCD Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LCD_Register_Masks LCD Register Masks
N * @{
N */
N
N/*! @name TIMH - Horizontal Timing Control register */
N#define LCD_TIMH_PPL_MASK                        (0xFCU)
N#define LCD_TIMH_PPL_SHIFT                       (2U)
N#define LCD_TIMH_PPL(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMH_PPL_SHIFT)) & LCD_TIMH_PPL_MASK)
N#define LCD_TIMH_HSW_MASK                        (0xFF00U)
N#define LCD_TIMH_HSW_SHIFT                       (8U)
N#define LCD_TIMH_HSW(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMH_HSW_SHIFT)) & LCD_TIMH_HSW_MASK)
N#define LCD_TIMH_HFP_MASK                        (0xFF0000U)
N#define LCD_TIMH_HFP_SHIFT                       (16U)
N#define LCD_TIMH_HFP(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMH_HFP_SHIFT)) & LCD_TIMH_HFP_MASK)
N#define LCD_TIMH_HBP_MASK                        (0xFF000000U)
N#define LCD_TIMH_HBP_SHIFT                       (24U)
N#define LCD_TIMH_HBP(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMH_HBP_SHIFT)) & LCD_TIMH_HBP_MASK)
N
N/*! @name TIMV - Vertical Timing Control register */
N#define LCD_TIMV_LPP_MASK                        (0x3FFU)
N#define LCD_TIMV_LPP_SHIFT                       (0U)
N#define LCD_TIMV_LPP(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMV_LPP_SHIFT)) & LCD_TIMV_LPP_MASK)
N#define LCD_TIMV_VSW_MASK                        (0xFC00U)
N#define LCD_TIMV_VSW_SHIFT                       (10U)
N#define LCD_TIMV_VSW(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMV_VSW_SHIFT)) & LCD_TIMV_VSW_MASK)
N#define LCD_TIMV_VFP_MASK                        (0xFF0000U)
N#define LCD_TIMV_VFP_SHIFT                       (16U)
N#define LCD_TIMV_VFP(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMV_VFP_SHIFT)) & LCD_TIMV_VFP_MASK)
N#define LCD_TIMV_VBP_MASK                        (0xFF000000U)
N#define LCD_TIMV_VBP_SHIFT                       (24U)
N#define LCD_TIMV_VBP(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_TIMV_VBP_SHIFT)) & LCD_TIMV_VBP_MASK)
N
N/*! @name POL - Clock and Signal Polarity Control register */
N#define LCD_POL_PCD_LO_MASK                      (0x1FU)
N#define LCD_POL_PCD_LO_SHIFT                     (0U)
N#define LCD_POL_PCD_LO(x)                        (((uint32_t)(((uint32_t)(x)) << LCD_POL_PCD_LO_SHIFT)) & LCD_POL_PCD_LO_MASK)
N#define LCD_POL_ACB_MASK                         (0x7C0U)
N#define LCD_POL_ACB_SHIFT                        (6U)
N#define LCD_POL_ACB(x)                           (((uint32_t)(((uint32_t)(x)) << LCD_POL_ACB_SHIFT)) & LCD_POL_ACB_MASK)
N#define LCD_POL_IVS_MASK                         (0x800U)
N#define LCD_POL_IVS_SHIFT                        (11U)
N#define LCD_POL_IVS(x)                           (((uint32_t)(((uint32_t)(x)) << LCD_POL_IVS_SHIFT)) & LCD_POL_IVS_MASK)
N#define LCD_POL_IHS_MASK                         (0x1000U)
N#define LCD_POL_IHS_SHIFT                        (12U)
N#define LCD_POL_IHS(x)                           (((uint32_t)(((uint32_t)(x)) << LCD_POL_IHS_SHIFT)) & LCD_POL_IHS_MASK)
N#define LCD_POL_IPC_MASK                         (0x2000U)
N#define LCD_POL_IPC_SHIFT                        (13U)
N#define LCD_POL_IPC(x)                           (((uint32_t)(((uint32_t)(x)) << LCD_POL_IPC_SHIFT)) & LCD_POL_IPC_MASK)
N#define LCD_POL_IOE_MASK                         (0x4000U)
N#define LCD_POL_IOE_SHIFT                        (14U)
N#define LCD_POL_IOE(x)                           (((uint32_t)(((uint32_t)(x)) << LCD_POL_IOE_SHIFT)) & LCD_POL_IOE_MASK)
N#define LCD_POL_CPL_MASK                         (0x3FF0000U)
N#define LCD_POL_CPL_SHIFT                        (16U)
N#define LCD_POL_CPL(x)                           (((uint32_t)(((uint32_t)(x)) << LCD_POL_CPL_SHIFT)) & LCD_POL_CPL_MASK)
N#define LCD_POL_BCD_MASK                         (0x4000000U)
N#define LCD_POL_BCD_SHIFT                        (26U)
N#define LCD_POL_BCD(x)                           (((uint32_t)(((uint32_t)(x)) << LCD_POL_BCD_SHIFT)) & LCD_POL_BCD_MASK)
N#define LCD_POL_PCD_HI_MASK                      (0xF8000000U)
N#define LCD_POL_PCD_HI_SHIFT                     (27U)
N#define LCD_POL_PCD_HI(x)                        (((uint32_t)(((uint32_t)(x)) << LCD_POL_PCD_HI_SHIFT)) & LCD_POL_PCD_HI_MASK)
N
N/*! @name LE - Line End Control register */
N#define LCD_LE_LED_MASK                          (0x7FU)
N#define LCD_LE_LED_SHIFT                         (0U)
N#define LCD_LE_LED(x)                            (((uint32_t)(((uint32_t)(x)) << LCD_LE_LED_SHIFT)) & LCD_LE_LED_MASK)
N#define LCD_LE_LEE_MASK                          (0x10000U)
N#define LCD_LE_LEE_SHIFT                         (16U)
N#define LCD_LE_LEE(x)                            (((uint32_t)(((uint32_t)(x)) << LCD_LE_LEE_SHIFT)) & LCD_LE_LEE_MASK)
N
N/*! @name UPBASE - Upper Panel Frame Base Address register */
N#define LCD_UPBASE_LCDUPBASE_MASK                (0xFFFFFFF8U)
N#define LCD_UPBASE_LCDUPBASE_SHIFT               (3U)
N#define LCD_UPBASE_LCDUPBASE(x)                  (((uint32_t)(((uint32_t)(x)) << LCD_UPBASE_LCDUPBASE_SHIFT)) & LCD_UPBASE_LCDUPBASE_MASK)
N
N/*! @name LPBASE - Lower Panel Frame Base Address register */
N#define LCD_LPBASE_LCDLPBASE_MASK                (0xFFFFFFF8U)
N#define LCD_LPBASE_LCDLPBASE_SHIFT               (3U)
N#define LCD_LPBASE_LCDLPBASE(x)                  (((uint32_t)(((uint32_t)(x)) << LCD_LPBASE_LCDLPBASE_SHIFT)) & LCD_LPBASE_LCDLPBASE_MASK)
N
N/*! @name CTRL - LCD Control register */
N#define LCD_CTRL_LCDEN_MASK                      (0x1U)
N#define LCD_CTRL_LCDEN_SHIFT                     (0U)
N#define LCD_CTRL_LCDEN(x)                        (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDEN_SHIFT)) & LCD_CTRL_LCDEN_MASK)
N#define LCD_CTRL_LCDBPP_MASK                     (0xEU)
N#define LCD_CTRL_LCDBPP_SHIFT                    (1U)
N#define LCD_CTRL_LCDBPP(x)                       (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDBPP_SHIFT)) & LCD_CTRL_LCDBPP_MASK)
N#define LCD_CTRL_LCDBW_MASK                      (0x10U)
N#define LCD_CTRL_LCDBW_SHIFT                     (4U)
N#define LCD_CTRL_LCDBW(x)                        (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDBW_SHIFT)) & LCD_CTRL_LCDBW_MASK)
N#define LCD_CTRL_LCDTFT_MASK                     (0x20U)
N#define LCD_CTRL_LCDTFT_SHIFT                    (5U)
N#define LCD_CTRL_LCDTFT(x)                       (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDTFT_SHIFT)) & LCD_CTRL_LCDTFT_MASK)
N#define LCD_CTRL_LCDMONO8_MASK                   (0x40U)
N#define LCD_CTRL_LCDMONO8_SHIFT                  (6U)
N#define LCD_CTRL_LCDMONO8(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDMONO8_SHIFT)) & LCD_CTRL_LCDMONO8_MASK)
N#define LCD_CTRL_LCDDUAL_MASK                    (0x80U)
N#define LCD_CTRL_LCDDUAL_SHIFT                   (7U)
N#define LCD_CTRL_LCDDUAL(x)                      (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDDUAL_SHIFT)) & LCD_CTRL_LCDDUAL_MASK)
N#define LCD_CTRL_BGR_MASK                        (0x100U)
N#define LCD_CTRL_BGR_SHIFT                       (8U)
N#define LCD_CTRL_BGR(x)                          (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_BGR_SHIFT)) & LCD_CTRL_BGR_MASK)
N#define LCD_CTRL_BEBO_MASK                       (0x200U)
N#define LCD_CTRL_BEBO_SHIFT                      (9U)
N#define LCD_CTRL_BEBO(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_BEBO_SHIFT)) & LCD_CTRL_BEBO_MASK)
N#define LCD_CTRL_BEPO_MASK                       (0x400U)
N#define LCD_CTRL_BEPO_SHIFT                      (10U)
N#define LCD_CTRL_BEPO(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_BEPO_SHIFT)) & LCD_CTRL_BEPO_MASK)
N#define LCD_CTRL_LCDPWR_MASK                     (0x800U)
N#define LCD_CTRL_LCDPWR_SHIFT                    (11U)
N#define LCD_CTRL_LCDPWR(x)                       (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDPWR_SHIFT)) & LCD_CTRL_LCDPWR_MASK)
N#define LCD_CTRL_LCDVCOMP_MASK                   (0x3000U)
N#define LCD_CTRL_LCDVCOMP_SHIFT                  (12U)
N#define LCD_CTRL_LCDVCOMP(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_LCDVCOMP_SHIFT)) & LCD_CTRL_LCDVCOMP_MASK)
N#define LCD_CTRL_WATERMARK_MASK                  (0x10000U)
N#define LCD_CTRL_WATERMARK_SHIFT                 (16U)
N#define LCD_CTRL_WATERMARK(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_CTRL_WATERMARK_SHIFT)) & LCD_CTRL_WATERMARK_MASK)
N
N/*! @name INTMSK - Interrupt Mask register */
N#define LCD_INTMSK_FUFIM_MASK                    (0x2U)
N#define LCD_INTMSK_FUFIM_SHIFT                   (1U)
N#define LCD_INTMSK_FUFIM(x)                      (((uint32_t)(((uint32_t)(x)) << LCD_INTMSK_FUFIM_SHIFT)) & LCD_INTMSK_FUFIM_MASK)
N#define LCD_INTMSK_LNBUIM_MASK                   (0x4U)
N#define LCD_INTMSK_LNBUIM_SHIFT                  (2U)
N#define LCD_INTMSK_LNBUIM(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_INTMSK_LNBUIM_SHIFT)) & LCD_INTMSK_LNBUIM_MASK)
N#define LCD_INTMSK_VCOMPIM_MASK                  (0x8U)
N#define LCD_INTMSK_VCOMPIM_SHIFT                 (3U)
N#define LCD_INTMSK_VCOMPIM(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_INTMSK_VCOMPIM_SHIFT)) & LCD_INTMSK_VCOMPIM_MASK)
N#define LCD_INTMSK_BERIM_MASK                    (0x10U)
N#define LCD_INTMSK_BERIM_SHIFT                   (4U)
N#define LCD_INTMSK_BERIM(x)                      (((uint32_t)(((uint32_t)(x)) << LCD_INTMSK_BERIM_SHIFT)) & LCD_INTMSK_BERIM_MASK)
N
N/*! @name INTRAW - Raw Interrupt Status register */
N#define LCD_INTRAW_FUFRIS_MASK                   (0x2U)
N#define LCD_INTRAW_FUFRIS_SHIFT                  (1U)
N#define LCD_INTRAW_FUFRIS(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_INTRAW_FUFRIS_SHIFT)) & LCD_INTRAW_FUFRIS_MASK)
N#define LCD_INTRAW_LNBURIS_MASK                  (0x4U)
N#define LCD_INTRAW_LNBURIS_SHIFT                 (2U)
N#define LCD_INTRAW_LNBURIS(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_INTRAW_LNBURIS_SHIFT)) & LCD_INTRAW_LNBURIS_MASK)
N#define LCD_INTRAW_VCOMPRIS_MASK                 (0x8U)
N#define LCD_INTRAW_VCOMPRIS_SHIFT                (3U)
N#define LCD_INTRAW_VCOMPRIS(x)                   (((uint32_t)(((uint32_t)(x)) << LCD_INTRAW_VCOMPRIS_SHIFT)) & LCD_INTRAW_VCOMPRIS_MASK)
N#define LCD_INTRAW_BERRAW_MASK                   (0x10U)
N#define LCD_INTRAW_BERRAW_SHIFT                  (4U)
N#define LCD_INTRAW_BERRAW(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_INTRAW_BERRAW_SHIFT)) & LCD_INTRAW_BERRAW_MASK)
N
N/*! @name INTSTAT - Masked Interrupt Status register */
N#define LCD_INTSTAT_FUFMIS_MASK                  (0x2U)
N#define LCD_INTSTAT_FUFMIS_SHIFT                 (1U)
N#define LCD_INTSTAT_FUFMIS(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_INTSTAT_FUFMIS_SHIFT)) & LCD_INTSTAT_FUFMIS_MASK)
N#define LCD_INTSTAT_LNBUMIS_MASK                 (0x4U)
N#define LCD_INTSTAT_LNBUMIS_SHIFT                (2U)
N#define LCD_INTSTAT_LNBUMIS(x)                   (((uint32_t)(((uint32_t)(x)) << LCD_INTSTAT_LNBUMIS_SHIFT)) & LCD_INTSTAT_LNBUMIS_MASK)
N#define LCD_INTSTAT_VCOMPMIS_MASK                (0x8U)
N#define LCD_INTSTAT_VCOMPMIS_SHIFT               (3U)
N#define LCD_INTSTAT_VCOMPMIS(x)                  (((uint32_t)(((uint32_t)(x)) << LCD_INTSTAT_VCOMPMIS_SHIFT)) & LCD_INTSTAT_VCOMPMIS_MASK)
N#define LCD_INTSTAT_BERMIS_MASK                  (0x10U)
N#define LCD_INTSTAT_BERMIS_SHIFT                 (4U)
N#define LCD_INTSTAT_BERMIS(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_INTSTAT_BERMIS_SHIFT)) & LCD_INTSTAT_BERMIS_MASK)
N
N/*! @name INTCLR - Interrupt Clear register */
N#define LCD_INTCLR_FUFIC_MASK                    (0x2U)
N#define LCD_INTCLR_FUFIC_SHIFT                   (1U)
N#define LCD_INTCLR_FUFIC(x)                      (((uint32_t)(((uint32_t)(x)) << LCD_INTCLR_FUFIC_SHIFT)) & LCD_INTCLR_FUFIC_MASK)
N#define LCD_INTCLR_LNBUIC_MASK                   (0x4U)
N#define LCD_INTCLR_LNBUIC_SHIFT                  (2U)
N#define LCD_INTCLR_LNBUIC(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_INTCLR_LNBUIC_SHIFT)) & LCD_INTCLR_LNBUIC_MASK)
N#define LCD_INTCLR_VCOMPIC_MASK                  (0x8U)
N#define LCD_INTCLR_VCOMPIC_SHIFT                 (3U)
N#define LCD_INTCLR_VCOMPIC(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_INTCLR_VCOMPIC_SHIFT)) & LCD_INTCLR_VCOMPIC_MASK)
N#define LCD_INTCLR_BERIC_MASK                    (0x10U)
N#define LCD_INTCLR_BERIC_SHIFT                   (4U)
N#define LCD_INTCLR_BERIC(x)                      (((uint32_t)(((uint32_t)(x)) << LCD_INTCLR_BERIC_SHIFT)) & LCD_INTCLR_BERIC_MASK)
N
N/*! @name UPCURR - Upper Panel Current Address Value register */
N#define LCD_UPCURR_LCDUPCURR_MASK                (0xFFFFFFFFU)
N#define LCD_UPCURR_LCDUPCURR_SHIFT               (0U)
N#define LCD_UPCURR_LCDUPCURR(x)                  (((uint32_t)(((uint32_t)(x)) << LCD_UPCURR_LCDUPCURR_SHIFT)) & LCD_UPCURR_LCDUPCURR_MASK)
N
N/*! @name LPCURR - Lower Panel Current Address Value register */
N#define LCD_LPCURR_LCDLPCURR_MASK                (0xFFFFFFFFU)
N#define LCD_LPCURR_LCDLPCURR_SHIFT               (0U)
N#define LCD_LPCURR_LCDLPCURR(x)                  (((uint32_t)(((uint32_t)(x)) << LCD_LPCURR_LCDLPCURR_SHIFT)) & LCD_LPCURR_LCDLPCURR_MASK)
N
N/*! @name PAL - 256x16-bit Color Palette registers */
N#define LCD_PAL_R04_0_MASK                       (0x1FU)
N#define LCD_PAL_R04_0_SHIFT                      (0U)
N#define LCD_PAL_R04_0(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_PAL_R04_0_SHIFT)) & LCD_PAL_R04_0_MASK)
N#define LCD_PAL_G04_0_MASK                       (0x3E0U)
N#define LCD_PAL_G04_0_SHIFT                      (5U)
N#define LCD_PAL_G04_0(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_PAL_G04_0_SHIFT)) & LCD_PAL_G04_0_MASK)
N#define LCD_PAL_B04_0_MASK                       (0x7C00U)
N#define LCD_PAL_B04_0_SHIFT                      (10U)
N#define LCD_PAL_B04_0(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_PAL_B04_0_SHIFT)) & LCD_PAL_B04_0_MASK)
N#define LCD_PAL_I0_MASK                          (0x8000U)
N#define LCD_PAL_I0_SHIFT                         (15U)
N#define LCD_PAL_I0(x)                            (((uint32_t)(((uint32_t)(x)) << LCD_PAL_I0_SHIFT)) & LCD_PAL_I0_MASK)
N#define LCD_PAL_R14_0_MASK                       (0x1F0000U)
N#define LCD_PAL_R14_0_SHIFT                      (16U)
N#define LCD_PAL_R14_0(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_PAL_R14_0_SHIFT)) & LCD_PAL_R14_0_MASK)
N#define LCD_PAL_G14_0_MASK                       (0x3E00000U)
N#define LCD_PAL_G14_0_SHIFT                      (21U)
N#define LCD_PAL_G14_0(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_PAL_G14_0_SHIFT)) & LCD_PAL_G14_0_MASK)
N#define LCD_PAL_B14_0_MASK                       (0x7C000000U)
N#define LCD_PAL_B14_0_SHIFT                      (26U)
N#define LCD_PAL_B14_0(x)                         (((uint32_t)(((uint32_t)(x)) << LCD_PAL_B14_0_SHIFT)) & LCD_PAL_B14_0_MASK)
N#define LCD_PAL_I1_MASK                          (0x80000000U)
N#define LCD_PAL_I1_SHIFT                         (31U)
N#define LCD_PAL_I1(x)                            (((uint32_t)(((uint32_t)(x)) << LCD_PAL_I1_SHIFT)) & LCD_PAL_I1_MASK)
N
N/* The count of LCD_PAL */
N#define LCD_PAL_COUNT                            (128U)
N
N/*! @name CRSR_IMG - Cursor Image registers */
N#define LCD_CRSR_IMG_CRSR_IMG_MASK               (0xFFFFFFFFU)
N#define LCD_CRSR_IMG_CRSR_IMG_SHIFT              (0U)
N#define LCD_CRSR_IMG_CRSR_IMG(x)                 (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_IMG_CRSR_IMG_SHIFT)) & LCD_CRSR_IMG_CRSR_IMG_MASK)
N
N/* The count of LCD_CRSR_IMG */
N#define LCD_CRSR_IMG_COUNT                       (256U)
N
N/*! @name CRSR_CTRL - Cursor Control register */
N#define LCD_CRSR_CTRL_CRSRON_MASK                (0x1U)
N#define LCD_CRSR_CTRL_CRSRON_SHIFT               (0U)
N#define LCD_CRSR_CTRL_CRSRON(x)                  (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_CTRL_CRSRON_SHIFT)) & LCD_CRSR_CTRL_CRSRON_MASK)
N#define LCD_CRSR_CTRL_CRSRNUM1_0_MASK            (0x30U)
N#define LCD_CRSR_CTRL_CRSRNUM1_0_SHIFT           (4U)
N#define LCD_CRSR_CTRL_CRSRNUM1_0(x)              (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_CTRL_CRSRNUM1_0_SHIFT)) & LCD_CRSR_CTRL_CRSRNUM1_0_MASK)
N
N/*! @name CRSR_CFG - Cursor Configuration register */
N#define LCD_CRSR_CFG_CRSRSIZE_MASK               (0x1U)
N#define LCD_CRSR_CFG_CRSRSIZE_SHIFT              (0U)
N#define LCD_CRSR_CFG_CRSRSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_CFG_CRSRSIZE_SHIFT)) & LCD_CRSR_CFG_CRSRSIZE_MASK)
N#define LCD_CRSR_CFG_FRAMESYNC_MASK              (0x2U)
N#define LCD_CRSR_CFG_FRAMESYNC_SHIFT             (1U)
N#define LCD_CRSR_CFG_FRAMESYNC(x)                (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_CFG_FRAMESYNC_SHIFT)) & LCD_CRSR_CFG_FRAMESYNC_MASK)
N
N/*! @name CRSR_PAL0 - Cursor Palette register 0 */
N#define LCD_CRSR_PAL0_RED_MASK                   (0xFFU)
N#define LCD_CRSR_PAL0_RED_SHIFT                  (0U)
N#define LCD_CRSR_PAL0_RED(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_PAL0_RED_SHIFT)) & LCD_CRSR_PAL0_RED_MASK)
N#define LCD_CRSR_PAL0_GREEN_MASK                 (0xFF00U)
N#define LCD_CRSR_PAL0_GREEN_SHIFT                (8U)
N#define LCD_CRSR_PAL0_GREEN(x)                   (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_PAL0_GREEN_SHIFT)) & LCD_CRSR_PAL0_GREEN_MASK)
N#define LCD_CRSR_PAL0_BLUE_MASK                  (0xFF0000U)
N#define LCD_CRSR_PAL0_BLUE_SHIFT                 (16U)
N#define LCD_CRSR_PAL0_BLUE(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_PAL0_BLUE_SHIFT)) & LCD_CRSR_PAL0_BLUE_MASK)
N
N/*! @name CRSR_PAL1 - Cursor Palette register 1 */
N#define LCD_CRSR_PAL1_RED_MASK                   (0xFFU)
N#define LCD_CRSR_PAL1_RED_SHIFT                  (0U)
N#define LCD_CRSR_PAL1_RED(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_PAL1_RED_SHIFT)) & LCD_CRSR_PAL1_RED_MASK)
N#define LCD_CRSR_PAL1_GREEN_MASK                 (0xFF00U)
N#define LCD_CRSR_PAL1_GREEN_SHIFT                (8U)
N#define LCD_CRSR_PAL1_GREEN(x)                   (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_PAL1_GREEN_SHIFT)) & LCD_CRSR_PAL1_GREEN_MASK)
N#define LCD_CRSR_PAL1_BLUE_MASK                  (0xFF0000U)
N#define LCD_CRSR_PAL1_BLUE_SHIFT                 (16U)
N#define LCD_CRSR_PAL1_BLUE(x)                    (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_PAL1_BLUE_SHIFT)) & LCD_CRSR_PAL1_BLUE_MASK)
N
N/*! @name CRSR_XY - Cursor XY Position register */
N#define LCD_CRSR_XY_CRSRX_MASK                   (0x3FFU)
N#define LCD_CRSR_XY_CRSRX_SHIFT                  (0U)
N#define LCD_CRSR_XY_CRSRX(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_XY_CRSRX_SHIFT)) & LCD_CRSR_XY_CRSRX_MASK)
N#define LCD_CRSR_XY_CRSRY_MASK                   (0x3FF0000U)
N#define LCD_CRSR_XY_CRSRY_SHIFT                  (16U)
N#define LCD_CRSR_XY_CRSRY(x)                     (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_XY_CRSRY_SHIFT)) & LCD_CRSR_XY_CRSRY_MASK)
N
N/*! @name CRSR_CLIP - Cursor Clip Position register */
N#define LCD_CRSR_CLIP_CRSRCLIPX_MASK             (0x3FU)
N#define LCD_CRSR_CLIP_CRSRCLIPX_SHIFT            (0U)
N#define LCD_CRSR_CLIP_CRSRCLIPX(x)               (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_CLIP_CRSRCLIPX_SHIFT)) & LCD_CRSR_CLIP_CRSRCLIPX_MASK)
N#define LCD_CRSR_CLIP_CRSRCLIPY_MASK             (0x3F00U)
N#define LCD_CRSR_CLIP_CRSRCLIPY_SHIFT            (8U)
N#define LCD_CRSR_CLIP_CRSRCLIPY(x)               (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_CLIP_CRSRCLIPY_SHIFT)) & LCD_CRSR_CLIP_CRSRCLIPY_MASK)
N
N/*! @name CRSR_INTMSK - Cursor Interrupt Mask register */
N#define LCD_CRSR_INTMSK_CRSRIM_MASK              (0x1U)
N#define LCD_CRSR_INTMSK_CRSRIM_SHIFT             (0U)
N#define LCD_CRSR_INTMSK_CRSRIM(x)                (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_INTMSK_CRSRIM_SHIFT)) & LCD_CRSR_INTMSK_CRSRIM_MASK)
N
N/*! @name CRSR_INTCLR - Cursor Interrupt Clear register */
N#define LCD_CRSR_INTCLR_CRSRIC_MASK              (0x1U)
N#define LCD_CRSR_INTCLR_CRSRIC_SHIFT             (0U)
N#define LCD_CRSR_INTCLR_CRSRIC(x)                (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_INTCLR_CRSRIC_SHIFT)) & LCD_CRSR_INTCLR_CRSRIC_MASK)
N
N/*! @name CRSR_INTRAW - Cursor Raw Interrupt Status register */
N#define LCD_CRSR_INTRAW_CRSRRIS_MASK             (0x1U)
N#define LCD_CRSR_INTRAW_CRSRRIS_SHIFT            (0U)
N#define LCD_CRSR_INTRAW_CRSRRIS(x)               (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_INTRAW_CRSRRIS_SHIFT)) & LCD_CRSR_INTRAW_CRSRRIS_MASK)
N
N/*! @name CRSR_INTSTAT - Cursor Masked Interrupt Status register */
N#define LCD_CRSR_INTSTAT_CRSRMIS_MASK            (0x1U)
N#define LCD_CRSR_INTSTAT_CRSRMIS_SHIFT           (0U)
N#define LCD_CRSR_INTSTAT_CRSRMIS(x)              (((uint32_t)(((uint32_t)(x)) << LCD_CRSR_INTSTAT_CRSRMIS_SHIFT)) & LCD_CRSR_INTSTAT_CRSRMIS_MASK)
N
N
N/*!
N * @}
N */ /* end of group LCD_Register_Masks */
N
N
N/* LCD - Peripheral instance base addresses */
N/** Peripheral LCD base address */
N#define LCD_BASE                                 (0x40083000u)
N/** Peripheral LCD base pointer */
N#define LCD                                      ((LCD_Type *)LCD_BASE)
N/** Array initializer of LCD peripheral base addresses */
N#define LCD_BASE_ADDRS                           { LCD_BASE }
N/** Array initializer of LCD peripheral base pointers */
N#define LCD_BASE_PTRS                            { LCD }
N/** Interrupt vectors for the LCD peripheral type */
N#define LCD_IRQS                                 { LCD_IRQn }
N
N/*!
N * @}
N */ /* end of group LCD_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MRT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MRT_Peripheral_Access_Layer MRT Peripheral Access Layer
N * @{
N */
N
N/** MRT - Register Layout Typedef */
Ntypedef struct {
N  struct {                                         /* offset: 0x0, array step: 0x10 */
N    __IO uint32_t INTVAL;                            /**< MRT Time interval value register. This value is loaded into the TIMER register., array offset: 0x0, array step: 0x10 */
X    volatile uint32_t INTVAL;                             
N    __I  uint32_t TIMER;                             /**< MRT Timer register. This register reads the value of the down-counter., array offset: 0x4, array step: 0x10 */
X    volatile const  uint32_t TIMER;                              
N    __IO uint32_t CTRL;                              /**< MRT Control register. This register controls the MRT modes., array offset: 0x8, array step: 0x10 */
X    volatile uint32_t CTRL;                               
N    __IO uint32_t STAT;                              /**< MRT Status register., array offset: 0xC, array step: 0x10 */
X    volatile uint32_t STAT;                               
N  } CHANNEL[4];
N       uint8_t RESERVED_0[176];
N  __IO uint32_t MODCFG;                            /**< Module Configuration register. This register provides information about this particular MRT instance, and allows choosing an overall mode for the idle channel feature., offset: 0xF0 */
X  volatile uint32_t MODCFG;                             
N  __I  uint32_t IDLE_CH;                           /**< Idle channel register. This register returns the number of the first idle channel., offset: 0xF4 */
X  volatile const  uint32_t IDLE_CH;                            
N  __IO uint32_t IRQ_FLAG;                          /**< Global interrupt flag register, offset: 0xF8 */
X  volatile uint32_t IRQ_FLAG;                           
N} MRT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- MRT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MRT_Register_Masks MRT Register Masks
N * @{
N */
N
N/*! @name CHANNEL_INTVAL - MRT Time interval value register. This value is loaded into the TIMER register. */
N#define MRT_CHANNEL_INTVAL_IVALUE_MASK           (0xFFFFFFU)
N#define MRT_CHANNEL_INTVAL_IVALUE_SHIFT          (0U)
N#define MRT_CHANNEL_INTVAL_IVALUE(x)             (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_INTVAL_IVALUE_SHIFT)) & MRT_CHANNEL_INTVAL_IVALUE_MASK)
N#define MRT_CHANNEL_INTVAL_LOAD_MASK             (0x80000000U)
N#define MRT_CHANNEL_INTVAL_LOAD_SHIFT            (31U)
N#define MRT_CHANNEL_INTVAL_LOAD(x)               (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_INTVAL_LOAD_SHIFT)) & MRT_CHANNEL_INTVAL_LOAD_MASK)
N
N/* The count of MRT_CHANNEL_INTVAL */
N#define MRT_CHANNEL_INTVAL_COUNT                 (4U)
N
N/*! @name CHANNEL_TIMER - MRT Timer register. This register reads the value of the down-counter. */
N#define MRT_CHANNEL_TIMER_VALUE_MASK             (0xFFFFFFU)
N#define MRT_CHANNEL_TIMER_VALUE_SHIFT            (0U)
N#define MRT_CHANNEL_TIMER_VALUE(x)               (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_TIMER_VALUE_SHIFT)) & MRT_CHANNEL_TIMER_VALUE_MASK)
N
N/* The count of MRT_CHANNEL_TIMER */
N#define MRT_CHANNEL_TIMER_COUNT                  (4U)
N
N/*! @name CHANNEL_CTRL - MRT Control register. This register controls the MRT modes. */
N#define MRT_CHANNEL_CTRL_INTEN_MASK              (0x1U)
N#define MRT_CHANNEL_CTRL_INTEN_SHIFT             (0U)
N#define MRT_CHANNEL_CTRL_INTEN(x)                (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_CTRL_INTEN_SHIFT)) & MRT_CHANNEL_CTRL_INTEN_MASK)
N#define MRT_CHANNEL_CTRL_MODE_MASK               (0x6U)
N#define MRT_CHANNEL_CTRL_MODE_SHIFT              (1U)
N#define MRT_CHANNEL_CTRL_MODE(x)                 (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_CTRL_MODE_SHIFT)) & MRT_CHANNEL_CTRL_MODE_MASK)
N
N/* The count of MRT_CHANNEL_CTRL */
N#define MRT_CHANNEL_CTRL_COUNT                   (4U)
N
N/*! @name CHANNEL_STAT - MRT Status register. */
N#define MRT_CHANNEL_STAT_INTFLAG_MASK            (0x1U)
N#define MRT_CHANNEL_STAT_INTFLAG_SHIFT           (0U)
N#define MRT_CHANNEL_STAT_INTFLAG(x)              (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_STAT_INTFLAG_SHIFT)) & MRT_CHANNEL_STAT_INTFLAG_MASK)
N#define MRT_CHANNEL_STAT_RUN_MASK                (0x2U)
N#define MRT_CHANNEL_STAT_RUN_SHIFT               (1U)
N#define MRT_CHANNEL_STAT_RUN(x)                  (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_STAT_RUN_SHIFT)) & MRT_CHANNEL_STAT_RUN_MASK)
N#define MRT_CHANNEL_STAT_INUSE_MASK              (0x4U)
N#define MRT_CHANNEL_STAT_INUSE_SHIFT             (2U)
N#define MRT_CHANNEL_STAT_INUSE(x)                (((uint32_t)(((uint32_t)(x)) << MRT_CHANNEL_STAT_INUSE_SHIFT)) & MRT_CHANNEL_STAT_INUSE_MASK)
N
N/* The count of MRT_CHANNEL_STAT */
N#define MRT_CHANNEL_STAT_COUNT                   (4U)
N
N/*! @name MODCFG - Module Configuration register. This register provides information about this particular MRT instance, and allows choosing an overall mode for the idle channel feature. */
N#define MRT_MODCFG_NOC_MASK                      (0xFU)
N#define MRT_MODCFG_NOC_SHIFT                     (0U)
N#define MRT_MODCFG_NOC(x)                        (((uint32_t)(((uint32_t)(x)) << MRT_MODCFG_NOC_SHIFT)) & MRT_MODCFG_NOC_MASK)
N#define MRT_MODCFG_NOB_MASK                      (0x1F0U)
N#define MRT_MODCFG_NOB_SHIFT                     (4U)
N#define MRT_MODCFG_NOB(x)                        (((uint32_t)(((uint32_t)(x)) << MRT_MODCFG_NOB_SHIFT)) & MRT_MODCFG_NOB_MASK)
N#define MRT_MODCFG_MULTITASK_MASK                (0x80000000U)
N#define MRT_MODCFG_MULTITASK_SHIFT               (31U)
N#define MRT_MODCFG_MULTITASK(x)                  (((uint32_t)(((uint32_t)(x)) << MRT_MODCFG_MULTITASK_SHIFT)) & MRT_MODCFG_MULTITASK_MASK)
N
N/*! @name IDLE_CH - Idle channel register. This register returns the number of the first idle channel. */
N#define MRT_IDLE_CH_CHAN_MASK                    (0xF0U)
N#define MRT_IDLE_CH_CHAN_SHIFT                   (4U)
N#define MRT_IDLE_CH_CHAN(x)                      (((uint32_t)(((uint32_t)(x)) << MRT_IDLE_CH_CHAN_SHIFT)) & MRT_IDLE_CH_CHAN_MASK)
N
N/*! @name IRQ_FLAG - Global interrupt flag register */
N#define MRT_IRQ_FLAG_GFLAG0_MASK                 (0x1U)
N#define MRT_IRQ_FLAG_GFLAG0_SHIFT                (0U)
N#define MRT_IRQ_FLAG_GFLAG0(x)                   (((uint32_t)(((uint32_t)(x)) << MRT_IRQ_FLAG_GFLAG0_SHIFT)) & MRT_IRQ_FLAG_GFLAG0_MASK)
N#define MRT_IRQ_FLAG_GFLAG1_MASK                 (0x2U)
N#define MRT_IRQ_FLAG_GFLAG1_SHIFT                (1U)
N#define MRT_IRQ_FLAG_GFLAG1(x)                   (((uint32_t)(((uint32_t)(x)) << MRT_IRQ_FLAG_GFLAG1_SHIFT)) & MRT_IRQ_FLAG_GFLAG1_MASK)
N#define MRT_IRQ_FLAG_GFLAG2_MASK                 (0x4U)
N#define MRT_IRQ_FLAG_GFLAG2_SHIFT                (2U)
N#define MRT_IRQ_FLAG_GFLAG2(x)                   (((uint32_t)(((uint32_t)(x)) << MRT_IRQ_FLAG_GFLAG2_SHIFT)) & MRT_IRQ_FLAG_GFLAG2_MASK)
N#define MRT_IRQ_FLAG_GFLAG3_MASK                 (0x8U)
N#define MRT_IRQ_FLAG_GFLAG3_SHIFT                (3U)
N#define MRT_IRQ_FLAG_GFLAG3(x)                   (((uint32_t)(((uint32_t)(x)) << MRT_IRQ_FLAG_GFLAG3_SHIFT)) & MRT_IRQ_FLAG_GFLAG3_MASK)
N
N
N/*!
N * @}
N */ /* end of group MRT_Register_Masks */
N
N
N/* MRT - Peripheral instance base addresses */
N/** Peripheral MRT0 base address */
N#define MRT0_BASE                                (0x4000D000u)
N/** Peripheral MRT0 base pointer */
N#define MRT0                                     ((MRT_Type *)MRT0_BASE)
N/** Array initializer of MRT peripheral base addresses */
N#define MRT_BASE_ADDRS                           { MRT0_BASE }
N/** Array initializer of MRT peripheral base pointers */
N#define MRT_BASE_PTRS                            { MRT0 }
N/** Interrupt vectors for the MRT peripheral type */
N#define MRT_IRQS                                 { MRT0_IRQn }
N
N/*!
N * @}
N */ /* end of group MRT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- OTPC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OTPC_Peripheral_Access_Layer OTPC Peripheral Access Layer
N * @{
N */
N
N/** OTPC - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[16];
N  __I  uint32_t AESKEY[8];                         /**< Register for reading the AES key., array offset: 0x10, array step: 0x4 */
X  volatile const  uint32_t AESKEY[8];                          
N  __I  uint32_t ECRP;                              /**< ECRP options., offset: 0x30 */
X  volatile const  uint32_t ECRP;                               
N       uint8_t RESERVED_1[4];
N  __I  uint32_t USER0;                             /**< User application specific options., offset: 0x38 */
X  volatile const  uint32_t USER0;                              
N  __I  uint32_t USER1;                             /**< User application specific options., offset: 0x3C */
X  volatile const  uint32_t USER1;                              
N} OTPC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- OTPC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OTPC_Register_Masks OTPC Register Masks
N * @{
N */
N
N/*! @name AESKEY - Register for reading the AES key. */
N#define OTPC_AESKEY_KEY_MASK                     (0xFFFFFFFFU)
N#define OTPC_AESKEY_KEY_SHIFT                    (0U)
N#define OTPC_AESKEY_KEY(x)                       (((uint32_t)(((uint32_t)(x)) << OTPC_AESKEY_KEY_SHIFT)) & OTPC_AESKEY_KEY_MASK)
N
N/* The count of OTPC_AESKEY */
N#define OTPC_AESKEY_COUNT                        (8U)
N
N/*! @name ECRP - ECRP options. */
N#define OTPC_ECRP_CRP_MASS_ERASE_DISABLE_MASK    (0x10U)
N#define OTPC_ECRP_CRP_MASS_ERASE_DISABLE_SHIFT   (4U)
N#define OTPC_ECRP_CRP_MASS_ERASE_DISABLE(x)      (((uint32_t)(((uint32_t)(x)) << OTPC_ECRP_CRP_MASS_ERASE_DISABLE_SHIFT)) & OTPC_ECRP_CRP_MASS_ERASE_DISABLE_MASK)
N#define OTPC_ECRP_IAP_PROTECTION_ENABLE_MASK     (0x20U)
N#define OTPC_ECRP_IAP_PROTECTION_ENABLE_SHIFT    (5U)
N#define OTPC_ECRP_IAP_PROTECTION_ENABLE(x)       (((uint32_t)(((uint32_t)(x)) << OTPC_ECRP_IAP_PROTECTION_ENABLE_SHIFT)) & OTPC_ECRP_IAP_PROTECTION_ENABLE_MASK)
N#define OTPC_ECRP_CRP_ISP_DISABLE_PIN_MASK       (0x40U)
N#define OTPC_ECRP_CRP_ISP_DISABLE_PIN_SHIFT      (6U)
N#define OTPC_ECRP_CRP_ISP_DISABLE_PIN(x)         (((uint32_t)(((uint32_t)(x)) << OTPC_ECRP_CRP_ISP_DISABLE_PIN_SHIFT)) & OTPC_ECRP_CRP_ISP_DISABLE_PIN_MASK)
N#define OTPC_ECRP_CRP_ISP_DISABLE_IAP_MASK       (0x80U)
N#define OTPC_ECRP_CRP_ISP_DISABLE_IAP_SHIFT      (7U)
N#define OTPC_ECRP_CRP_ISP_DISABLE_IAP(x)         (((uint32_t)(((uint32_t)(x)) << OTPC_ECRP_CRP_ISP_DISABLE_IAP_SHIFT)) & OTPC_ECRP_CRP_ISP_DISABLE_IAP_MASK)
N#define OTPC_ECRP_CRP_ALLOW_ZERO_MASK            (0x200U)
N#define OTPC_ECRP_CRP_ALLOW_ZERO_SHIFT           (9U)
N#define OTPC_ECRP_CRP_ALLOW_ZERO(x)              (((uint32_t)(((uint32_t)(x)) << OTPC_ECRP_CRP_ALLOW_ZERO_SHIFT)) & OTPC_ECRP_CRP_ALLOW_ZERO_MASK)
N#define OTPC_ECRP_JTAG_DISABLE_MASK              (0x80000000U)
N#define OTPC_ECRP_JTAG_DISABLE_SHIFT             (31U)
N#define OTPC_ECRP_JTAG_DISABLE(x)                (((uint32_t)(((uint32_t)(x)) << OTPC_ECRP_JTAG_DISABLE_SHIFT)) & OTPC_ECRP_JTAG_DISABLE_MASK)
N
N/*! @name USER0 - User application specific options. */
N#define OTPC_USER0_USER0_MASK                    (0xFFFFFFFFU)
N#define OTPC_USER0_USER0_SHIFT                   (0U)
N#define OTPC_USER0_USER0(x)                      (((uint32_t)(((uint32_t)(x)) << OTPC_USER0_USER0_SHIFT)) & OTPC_USER0_USER0_MASK)
N
N/*! @name USER1 - User application specific options. */
N#define OTPC_USER1_USER1_MASK                    (0xFFFFFFFFU)
N#define OTPC_USER1_USER1_SHIFT                   (0U)
N#define OTPC_USER1_USER1(x)                      (((uint32_t)(((uint32_t)(x)) << OTPC_USER1_USER1_SHIFT)) & OTPC_USER1_USER1_MASK)
N
N
N/*!
N * @}
N */ /* end of group OTPC_Register_Masks */
N
N
N/* OTPC - Peripheral instance base addresses */
N/** Peripheral OTPC base address */
N#define OTPC_BASE                                (0x40015000u)
N/** Peripheral OTPC base pointer */
N#define OTPC                                     ((OTPC_Type *)OTPC_BASE)
N/** Array initializer of OTPC peripheral base addresses */
N#define OTPC_BASE_ADDRS                          { OTPC_BASE }
N/** Array initializer of OTPC peripheral base pointers */
N#define OTPC_BASE_PTRS                           { OTPC }
N
N/*!
N * @}
N */ /* end of group OTPC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- PINT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PINT_Peripheral_Access_Layer PINT Peripheral Access Layer
N * @{
N */
N
N/** PINT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t ISEL;                              /**< Pin Interrupt Mode register, offset: 0x0 */
X  volatile uint32_t ISEL;                               
N  __IO uint32_t IENR;                              /**< Pin interrupt level or rising edge interrupt enable register, offset: 0x4 */
X  volatile uint32_t IENR;                               
N  __O  uint32_t SIENR;                             /**< Pin interrupt level or rising edge interrupt set register, offset: 0x8 */
X  volatile  uint32_t SIENR;                              
N  __O  uint32_t CIENR;                             /**< Pin interrupt level (rising edge interrupt) clear register, offset: 0xC */
X  volatile  uint32_t CIENR;                              
N  __IO uint32_t IENF;                              /**< Pin interrupt active level or falling edge interrupt enable register, offset: 0x10 */
X  volatile uint32_t IENF;                               
N  __O  uint32_t SIENF;                             /**< Pin interrupt active level or falling edge interrupt set register, offset: 0x14 */
X  volatile  uint32_t SIENF;                              
N  __O  uint32_t CIENF;                             /**< Pin interrupt active level or falling edge interrupt clear register, offset: 0x18 */
X  volatile  uint32_t CIENF;                              
N  __IO uint32_t RISE;                              /**< Pin interrupt rising edge register, offset: 0x1C */
X  volatile uint32_t RISE;                               
N  __IO uint32_t FALL;                              /**< Pin interrupt falling edge register, offset: 0x20 */
X  volatile uint32_t FALL;                               
N  __IO uint32_t IST;                               /**< Pin interrupt status register, offset: 0x24 */
X  volatile uint32_t IST;                                
N  __IO uint32_t PMCTRL;                            /**< Pattern match interrupt control register, offset: 0x28 */
X  volatile uint32_t PMCTRL;                             
N  __IO uint32_t PMSRC;                             /**< Pattern match interrupt bit-slice source register, offset: 0x2C */
X  volatile uint32_t PMSRC;                              
N  __IO uint32_t PMCFG;                             /**< Pattern match interrupt bit slice configuration register, offset: 0x30 */
X  volatile uint32_t PMCFG;                              
N} PINT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- PINT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PINT_Register_Masks PINT Register Masks
N * @{
N */
N
N/*! @name ISEL - Pin Interrupt Mode register */
N#define PINT_ISEL_PMODE_MASK                     (0xFFU)
N#define PINT_ISEL_PMODE_SHIFT                    (0U)
N#define PINT_ISEL_PMODE(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_ISEL_PMODE_SHIFT)) & PINT_ISEL_PMODE_MASK)
N
N/*! @name IENR - Pin interrupt level or rising edge interrupt enable register */
N#define PINT_IENR_ENRL_MASK                      (0xFFU)
N#define PINT_IENR_ENRL_SHIFT                     (0U)
N#define PINT_IENR_ENRL(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_IENR_ENRL_SHIFT)) & PINT_IENR_ENRL_MASK)
N
N/*! @name SIENR - Pin interrupt level or rising edge interrupt set register */
N#define PINT_SIENR_SETENRL_MASK                  (0xFFU)
N#define PINT_SIENR_SETENRL_SHIFT                 (0U)
N#define PINT_SIENR_SETENRL(x)                    (((uint32_t)(((uint32_t)(x)) << PINT_SIENR_SETENRL_SHIFT)) & PINT_SIENR_SETENRL_MASK)
N
N/*! @name CIENR - Pin interrupt level (rising edge interrupt) clear register */
N#define PINT_CIENR_CENRL_MASK                    (0xFFU)
N#define PINT_CIENR_CENRL_SHIFT                   (0U)
N#define PINT_CIENR_CENRL(x)                      (((uint32_t)(((uint32_t)(x)) << PINT_CIENR_CENRL_SHIFT)) & PINT_CIENR_CENRL_MASK)
N
N/*! @name IENF - Pin interrupt active level or falling edge interrupt enable register */
N#define PINT_IENF_ENAF_MASK                      (0xFFU)
N#define PINT_IENF_ENAF_SHIFT                     (0U)
N#define PINT_IENF_ENAF(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_IENF_ENAF_SHIFT)) & PINT_IENF_ENAF_MASK)
N
N/*! @name SIENF - Pin interrupt active level or falling edge interrupt set register */
N#define PINT_SIENF_SETENAF_MASK                  (0xFFU)
N#define PINT_SIENF_SETENAF_SHIFT                 (0U)
N#define PINT_SIENF_SETENAF(x)                    (((uint32_t)(((uint32_t)(x)) << PINT_SIENF_SETENAF_SHIFT)) & PINT_SIENF_SETENAF_MASK)
N
N/*! @name CIENF - Pin interrupt active level or falling edge interrupt clear register */
N#define PINT_CIENF_CENAF_MASK                    (0xFFU)
N#define PINT_CIENF_CENAF_SHIFT                   (0U)
N#define PINT_CIENF_CENAF(x)                      (((uint32_t)(((uint32_t)(x)) << PINT_CIENF_CENAF_SHIFT)) & PINT_CIENF_CENAF_MASK)
N
N/*! @name RISE - Pin interrupt rising edge register */
N#define PINT_RISE_RDET_MASK                      (0xFFU)
N#define PINT_RISE_RDET_SHIFT                     (0U)
N#define PINT_RISE_RDET(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_RISE_RDET_SHIFT)) & PINT_RISE_RDET_MASK)
N
N/*! @name FALL - Pin interrupt falling edge register */
N#define PINT_FALL_FDET_MASK                      (0xFFU)
N#define PINT_FALL_FDET_SHIFT                     (0U)
N#define PINT_FALL_FDET(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_FALL_FDET_SHIFT)) & PINT_FALL_FDET_MASK)
N
N/*! @name IST - Pin interrupt status register */
N#define PINT_IST_PSTAT_MASK                      (0xFFU)
N#define PINT_IST_PSTAT_SHIFT                     (0U)
N#define PINT_IST_PSTAT(x)                        (((uint32_t)(((uint32_t)(x)) << PINT_IST_PSTAT_SHIFT)) & PINT_IST_PSTAT_MASK)
N
N/*! @name PMCTRL - Pattern match interrupt control register */
N#define PINT_PMCTRL_SEL_PMATCH_MASK              (0x1U)
N#define PINT_PMCTRL_SEL_PMATCH_SHIFT             (0U)
N#define PINT_PMCTRL_SEL_PMATCH(x)                (((uint32_t)(((uint32_t)(x)) << PINT_PMCTRL_SEL_PMATCH_SHIFT)) & PINT_PMCTRL_SEL_PMATCH_MASK)
N#define PINT_PMCTRL_ENA_RXEV_MASK                (0x2U)
N#define PINT_PMCTRL_ENA_RXEV_SHIFT               (1U)
N#define PINT_PMCTRL_ENA_RXEV(x)                  (((uint32_t)(((uint32_t)(x)) << PINT_PMCTRL_ENA_RXEV_SHIFT)) & PINT_PMCTRL_ENA_RXEV_MASK)
N#define PINT_PMCTRL_PMAT_MASK                    (0xFF000000U)
N#define PINT_PMCTRL_PMAT_SHIFT                   (24U)
N#define PINT_PMCTRL_PMAT(x)                      (((uint32_t)(((uint32_t)(x)) << PINT_PMCTRL_PMAT_SHIFT)) & PINT_PMCTRL_PMAT_MASK)
N
N/*! @name PMSRC - Pattern match interrupt bit-slice source register */
N#define PINT_PMSRC_SRC0_MASK                     (0x700U)
N#define PINT_PMSRC_SRC0_SHIFT                    (8U)
N#define PINT_PMSRC_SRC0(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC0_SHIFT)) & PINT_PMSRC_SRC0_MASK)
N#define PINT_PMSRC_SRC1_MASK                     (0x3800U)
N#define PINT_PMSRC_SRC1_SHIFT                    (11U)
N#define PINT_PMSRC_SRC1(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC1_SHIFT)) & PINT_PMSRC_SRC1_MASK)
N#define PINT_PMSRC_SRC2_MASK                     (0x1C000U)
N#define PINT_PMSRC_SRC2_SHIFT                    (14U)
N#define PINT_PMSRC_SRC2(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC2_SHIFT)) & PINT_PMSRC_SRC2_MASK)
N#define PINT_PMSRC_SRC3_MASK                     (0xE0000U)
N#define PINT_PMSRC_SRC3_SHIFT                    (17U)
N#define PINT_PMSRC_SRC3(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC3_SHIFT)) & PINT_PMSRC_SRC3_MASK)
N#define PINT_PMSRC_SRC4_MASK                     (0x700000U)
N#define PINT_PMSRC_SRC4_SHIFT                    (20U)
N#define PINT_PMSRC_SRC4(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC4_SHIFT)) & PINT_PMSRC_SRC4_MASK)
N#define PINT_PMSRC_SRC5_MASK                     (0x3800000U)
N#define PINT_PMSRC_SRC5_SHIFT                    (23U)
N#define PINT_PMSRC_SRC5(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC5_SHIFT)) & PINT_PMSRC_SRC5_MASK)
N#define PINT_PMSRC_SRC6_MASK                     (0x1C000000U)
N#define PINT_PMSRC_SRC6_SHIFT                    (26U)
N#define PINT_PMSRC_SRC6(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC6_SHIFT)) & PINT_PMSRC_SRC6_MASK)
N#define PINT_PMSRC_SRC7_MASK                     (0xE0000000U)
N#define PINT_PMSRC_SRC7_SHIFT                    (29U)
N#define PINT_PMSRC_SRC7(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMSRC_SRC7_SHIFT)) & PINT_PMSRC_SRC7_MASK)
N
N/*! @name PMCFG - Pattern match interrupt bit slice configuration register */
N#define PINT_PMCFG_PROD_ENDPTS0_MASK             (0x1U)
N#define PINT_PMCFG_PROD_ENDPTS0_SHIFT            (0U)
N#define PINT_PMCFG_PROD_ENDPTS0(x)               (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_PROD_ENDPTS0_SHIFT)) & PINT_PMCFG_PROD_ENDPTS0_MASK)
N#define PINT_PMCFG_PROD_ENDPTS1_MASK             (0x2U)
N#define PINT_PMCFG_PROD_ENDPTS1_SHIFT            (1U)
N#define PINT_PMCFG_PROD_ENDPTS1(x)               (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_PROD_ENDPTS1_SHIFT)) & PINT_PMCFG_PROD_ENDPTS1_MASK)
N#define PINT_PMCFG_PROD_ENDPTS2_MASK             (0x4U)
N#define PINT_PMCFG_PROD_ENDPTS2_SHIFT            (2U)
N#define PINT_PMCFG_PROD_ENDPTS2(x)               (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_PROD_ENDPTS2_SHIFT)) & PINT_PMCFG_PROD_ENDPTS2_MASK)
N#define PINT_PMCFG_PROD_ENDPTS3_MASK             (0x8U)
N#define PINT_PMCFG_PROD_ENDPTS3_SHIFT            (3U)
N#define PINT_PMCFG_PROD_ENDPTS3(x)               (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_PROD_ENDPTS3_SHIFT)) & PINT_PMCFG_PROD_ENDPTS3_MASK)
N#define PINT_PMCFG_PROD_ENDPTS4_MASK             (0x10U)
N#define PINT_PMCFG_PROD_ENDPTS4_SHIFT            (4U)
N#define PINT_PMCFG_PROD_ENDPTS4(x)               (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_PROD_ENDPTS4_SHIFT)) & PINT_PMCFG_PROD_ENDPTS4_MASK)
N#define PINT_PMCFG_PROD_ENDPTS5_MASK             (0x20U)
N#define PINT_PMCFG_PROD_ENDPTS5_SHIFT            (5U)
N#define PINT_PMCFG_PROD_ENDPTS5(x)               (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_PROD_ENDPTS5_SHIFT)) & PINT_PMCFG_PROD_ENDPTS5_MASK)
N#define PINT_PMCFG_PROD_ENDPTS6_MASK             (0x40U)
N#define PINT_PMCFG_PROD_ENDPTS6_SHIFT            (6U)
N#define PINT_PMCFG_PROD_ENDPTS6(x)               (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_PROD_ENDPTS6_SHIFT)) & PINT_PMCFG_PROD_ENDPTS6_MASK)
N#define PINT_PMCFG_CFG0_MASK                     (0x700U)
N#define PINT_PMCFG_CFG0_SHIFT                    (8U)
N#define PINT_PMCFG_CFG0(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG0_SHIFT)) & PINT_PMCFG_CFG0_MASK)
N#define PINT_PMCFG_CFG1_MASK                     (0x3800U)
N#define PINT_PMCFG_CFG1_SHIFT                    (11U)
N#define PINT_PMCFG_CFG1(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG1_SHIFT)) & PINT_PMCFG_CFG1_MASK)
N#define PINT_PMCFG_CFG2_MASK                     (0x1C000U)
N#define PINT_PMCFG_CFG2_SHIFT                    (14U)
N#define PINT_PMCFG_CFG2(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG2_SHIFT)) & PINT_PMCFG_CFG2_MASK)
N#define PINT_PMCFG_CFG3_MASK                     (0xE0000U)
N#define PINT_PMCFG_CFG3_SHIFT                    (17U)
N#define PINT_PMCFG_CFG3(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG3_SHIFT)) & PINT_PMCFG_CFG3_MASK)
N#define PINT_PMCFG_CFG4_MASK                     (0x700000U)
N#define PINT_PMCFG_CFG4_SHIFT                    (20U)
N#define PINT_PMCFG_CFG4(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG4_SHIFT)) & PINT_PMCFG_CFG4_MASK)
N#define PINT_PMCFG_CFG5_MASK                     (0x3800000U)
N#define PINT_PMCFG_CFG5_SHIFT                    (23U)
N#define PINT_PMCFG_CFG5(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG5_SHIFT)) & PINT_PMCFG_CFG5_MASK)
N#define PINT_PMCFG_CFG6_MASK                     (0x1C000000U)
N#define PINT_PMCFG_CFG6_SHIFT                    (26U)
N#define PINT_PMCFG_CFG6(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG6_SHIFT)) & PINT_PMCFG_CFG6_MASK)
N#define PINT_PMCFG_CFG7_MASK                     (0xE0000000U)
N#define PINT_PMCFG_CFG7_SHIFT                    (29U)
N#define PINT_PMCFG_CFG7(x)                       (((uint32_t)(((uint32_t)(x)) << PINT_PMCFG_CFG7_SHIFT)) & PINT_PMCFG_CFG7_MASK)
N
N
N/*!
N * @}
N */ /* end of group PINT_Register_Masks */
N
N
N/* PINT - Peripheral instance base addresses */
N/** Peripheral PINT base address */
N#define PINT_BASE                                (0x40004000u)
N/** Peripheral PINT base pointer */
N#define PINT                                     ((PINT_Type *)PINT_BASE)
N/** Array initializer of PINT peripheral base addresses */
N#define PINT_BASE_ADDRS                          { PINT_BASE }
N/** Array initializer of PINT peripheral base pointers */
N#define PINT_BASE_PTRS                           { PINT }
N/** Interrupt vectors for the PINT peripheral type */
N#define PINT_IRQS                                { PIN_INT0_IRQn, PIN_INT1_IRQn, PIN_INT2_IRQn, PIN_INT3_IRQn, PIN_INT4_IRQn, PIN_INT5_IRQn, PIN_INT6_IRQn, PIN_INT7_IRQn }
N
N/*!
N * @}
N */ /* end of group PINT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- RIT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RIT_Peripheral_Access_Layer RIT Peripheral Access Layer
N * @{
N */
N
N/** RIT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t COMPVAL;                           /**< Compare value LSB register, offset: 0x0 */
X  volatile uint32_t COMPVAL;                            
N  __IO uint32_t MASK;                              /**< Mask LSB register, offset: 0x4 */
X  volatile uint32_t MASK;                               
N  __IO uint32_t CTRL;                              /**< Control register, offset: 0x8 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t COUNTER;                           /**< Counter LSB register, offset: 0xC */
X  volatile uint32_t COUNTER;                            
N  __IO uint32_t COMPVAL_H;                         /**< Compare value MSB register, offset: 0x10 */
X  volatile uint32_t COMPVAL_H;                          
N  __IO uint32_t MASK_H;                            /**< Mask MSB register, offset: 0x14 */
X  volatile uint32_t MASK_H;                             
N       uint8_t RESERVED_0[4];
N  __IO uint32_t COUNTER_H;                         /**< Counter MSB register, offset: 0x1C */
X  volatile uint32_t COUNTER_H;                          
N} RIT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- RIT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RIT_Register_Masks RIT Register Masks
N * @{
N */
N
N/*! @name COMPVAL - Compare value LSB register */
N#define RIT_COMPVAL_RICOMP_MASK                  (0xFFFFFFFFU)
N#define RIT_COMPVAL_RICOMP_SHIFT                 (0U)
N#define RIT_COMPVAL_RICOMP(x)                    (((uint32_t)(((uint32_t)(x)) << RIT_COMPVAL_RICOMP_SHIFT)) & RIT_COMPVAL_RICOMP_MASK)
N
N/*! @name MASK - Mask LSB register */
N#define RIT_MASK_RIMASK_MASK                     (0xFFFFFFFFU)
N#define RIT_MASK_RIMASK_SHIFT                    (0U)
N#define RIT_MASK_RIMASK(x)                       (((uint32_t)(((uint32_t)(x)) << RIT_MASK_RIMASK_SHIFT)) & RIT_MASK_RIMASK_MASK)
N
N/*! @name CTRL - Control register */
N#define RIT_CTRL_RITINT_MASK                     (0x1U)
N#define RIT_CTRL_RITINT_SHIFT                    (0U)
N#define RIT_CTRL_RITINT(x)                       (((uint32_t)(((uint32_t)(x)) << RIT_CTRL_RITINT_SHIFT)) & RIT_CTRL_RITINT_MASK)
N#define RIT_CTRL_RITENCLR_MASK                   (0x2U)
N#define RIT_CTRL_RITENCLR_SHIFT                  (1U)
N#define RIT_CTRL_RITENCLR(x)                     (((uint32_t)(((uint32_t)(x)) << RIT_CTRL_RITENCLR_SHIFT)) & RIT_CTRL_RITENCLR_MASK)
N#define RIT_CTRL_RITENBR_MASK                    (0x4U)
N#define RIT_CTRL_RITENBR_SHIFT                   (2U)
N#define RIT_CTRL_RITENBR(x)                      (((uint32_t)(((uint32_t)(x)) << RIT_CTRL_RITENBR_SHIFT)) & RIT_CTRL_RITENBR_MASK)
N#define RIT_CTRL_RITEN_MASK                      (0x8U)
N#define RIT_CTRL_RITEN_SHIFT                     (3U)
N#define RIT_CTRL_RITEN(x)                        (((uint32_t)(((uint32_t)(x)) << RIT_CTRL_RITEN_SHIFT)) & RIT_CTRL_RITEN_MASK)
N
N/*! @name COUNTER - Counter LSB register */
N#define RIT_COUNTER_RICOUNTER_MASK               (0xFFFFFFFFU)
N#define RIT_COUNTER_RICOUNTER_SHIFT              (0U)
N#define RIT_COUNTER_RICOUNTER(x)                 (((uint32_t)(((uint32_t)(x)) << RIT_COUNTER_RICOUNTER_SHIFT)) & RIT_COUNTER_RICOUNTER_MASK)
N
N/*! @name COMPVAL_H - Compare value MSB register */
N#define RIT_COMPVAL_H_RICOMP_MASK                (0xFFFFU)
N#define RIT_COMPVAL_H_RICOMP_SHIFT               (0U)
N#define RIT_COMPVAL_H_RICOMP(x)                  (((uint32_t)(((uint32_t)(x)) << RIT_COMPVAL_H_RICOMP_SHIFT)) & RIT_COMPVAL_H_RICOMP_MASK)
N
N/*! @name MASK_H - Mask MSB register */
N#define RIT_MASK_H_RIMASK_MASK                   (0xFFFFU)
N#define RIT_MASK_H_RIMASK_SHIFT                  (0U)
N#define RIT_MASK_H_RIMASK(x)                     (((uint32_t)(((uint32_t)(x)) << RIT_MASK_H_RIMASK_SHIFT)) & RIT_MASK_H_RIMASK_MASK)
N
N/*! @name COUNTER_H - Counter MSB register */
N#define RIT_COUNTER_H_RICOUNTER_MASK             (0xFFFFU)
N#define RIT_COUNTER_H_RICOUNTER_SHIFT            (0U)
N#define RIT_COUNTER_H_RICOUNTER(x)               (((uint32_t)(((uint32_t)(x)) << RIT_COUNTER_H_RICOUNTER_SHIFT)) & RIT_COUNTER_H_RICOUNTER_MASK)
N
N
N/*!
N * @}
N */ /* end of group RIT_Register_Masks */
N
N
N/* RIT - Peripheral instance base addresses */
N/** Peripheral RIT base address */
N#define RIT_BASE                                 (0x4002D000u)
N/** Peripheral RIT base pointer */
N#define RIT                                      ((RIT_Type *)RIT_BASE)
N/** Array initializer of RIT peripheral base addresses */
N#define RIT_BASE_ADDRS                           { RIT_BASE }
N/** Array initializer of RIT peripheral base pointers */
N#define RIT_BASE_PTRS                            { RIT }
N/** Interrupt vectors for the RIT peripheral type */
N#define RIT_IRQS                                 { RIT_IRQn }
N
N/*!
N * @}
N */ /* end of group RIT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- RTC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Peripheral_Access_Layer RTC Peripheral Access Layer
N * @{
N */
N
N/** RTC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CTRL;                              /**< RTC control register, offset: 0x0 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t MATCH;                             /**< RTC match register, offset: 0x4 */
X  volatile uint32_t MATCH;                              
N  __IO uint32_t COUNT;                             /**< RTC counter register, offset: 0x8 */
X  volatile uint32_t COUNT;                              
N  __IO uint32_t WAKE;                              /**< High-resolution/wake-up timer control register, offset: 0xC */
X  volatile uint32_t WAKE;                               
N       uint8_t RESERVED_0[48];
N  __IO uint32_t GPREG[8];                          /**< General Purpose register, array offset: 0x40, array step: 0x4 */
X  volatile uint32_t GPREG[8];                           
N} RTC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- RTC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Register_Masks RTC Register Masks
N * @{
N */
N
N/*! @name CTRL - RTC control register */
N#define RTC_CTRL_SWRESET_MASK                    (0x1U)
N#define RTC_CTRL_SWRESET_SHIFT                   (0U)
N#define RTC_CTRL_SWRESET(x)                      (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_SWRESET_SHIFT)) & RTC_CTRL_SWRESET_MASK)
N#define RTC_CTRL_ALARM1HZ_MASK                   (0x4U)
N#define RTC_CTRL_ALARM1HZ_SHIFT                  (2U)
N#define RTC_CTRL_ALARM1HZ(x)                     (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_ALARM1HZ_SHIFT)) & RTC_CTRL_ALARM1HZ_MASK)
N#define RTC_CTRL_WAKE1KHZ_MASK                   (0x8U)
N#define RTC_CTRL_WAKE1KHZ_SHIFT                  (3U)
N#define RTC_CTRL_WAKE1KHZ(x)                     (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_WAKE1KHZ_SHIFT)) & RTC_CTRL_WAKE1KHZ_MASK)
N#define RTC_CTRL_ALARMDPD_EN_MASK                (0x10U)
N#define RTC_CTRL_ALARMDPD_EN_SHIFT               (4U)
N#define RTC_CTRL_ALARMDPD_EN(x)                  (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_ALARMDPD_EN_SHIFT)) & RTC_CTRL_ALARMDPD_EN_MASK)
N#define RTC_CTRL_WAKEDPD_EN_MASK                 (0x20U)
N#define RTC_CTRL_WAKEDPD_EN_SHIFT                (5U)
N#define RTC_CTRL_WAKEDPD_EN(x)                   (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_WAKEDPD_EN_SHIFT)) & RTC_CTRL_WAKEDPD_EN_MASK)
N#define RTC_CTRL_RTC1KHZ_EN_MASK                 (0x40U)
N#define RTC_CTRL_RTC1KHZ_EN_SHIFT                (6U)
N#define RTC_CTRL_RTC1KHZ_EN(x)                   (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_RTC1KHZ_EN_SHIFT)) & RTC_CTRL_RTC1KHZ_EN_MASK)
N#define RTC_CTRL_RTC_EN_MASK                     (0x80U)
N#define RTC_CTRL_RTC_EN_SHIFT                    (7U)
N#define RTC_CTRL_RTC_EN(x)                       (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_RTC_EN_SHIFT)) & RTC_CTRL_RTC_EN_MASK)
N#define RTC_CTRL_RTC_OSC_PD_MASK                 (0x100U)
N#define RTC_CTRL_RTC_OSC_PD_SHIFT                (8U)
N#define RTC_CTRL_RTC_OSC_PD(x)                   (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_RTC_OSC_PD_SHIFT)) & RTC_CTRL_RTC_OSC_PD_MASK)
N#define RTC_CTRL_RTC_OSC_BYPASS_MASK             (0x200U)
N#define RTC_CTRL_RTC_OSC_BYPASS_SHIFT            (9U)
N#define RTC_CTRL_RTC_OSC_BYPASS(x)               (((uint32_t)(((uint32_t)(x)) << RTC_CTRL_RTC_OSC_BYPASS_SHIFT)) & RTC_CTRL_RTC_OSC_BYPASS_MASK)
N
N/*! @name MATCH - RTC match register */
N#define RTC_MATCH_MATVAL_MASK                    (0xFFFFFFFFU)
N#define RTC_MATCH_MATVAL_SHIFT                   (0U)
N#define RTC_MATCH_MATVAL(x)                      (((uint32_t)(((uint32_t)(x)) << RTC_MATCH_MATVAL_SHIFT)) & RTC_MATCH_MATVAL_MASK)
N
N/*! @name COUNT - RTC counter register */
N#define RTC_COUNT_VAL_MASK                       (0xFFFFFFFFU)
N#define RTC_COUNT_VAL_SHIFT                      (0U)
N#define RTC_COUNT_VAL(x)                         (((uint32_t)(((uint32_t)(x)) << RTC_COUNT_VAL_SHIFT)) & RTC_COUNT_VAL_MASK)
N
N/*! @name WAKE - High-resolution/wake-up timer control register */
N#define RTC_WAKE_VAL_MASK                        (0xFFFFU)
N#define RTC_WAKE_VAL_SHIFT                       (0U)
N#define RTC_WAKE_VAL(x)                          (((uint32_t)(((uint32_t)(x)) << RTC_WAKE_VAL_SHIFT)) & RTC_WAKE_VAL_MASK)
N
N/*! @name GPREG - General Purpose register */
N#define RTC_GPREG_GPDATA_MASK                    (0xFFFFFFFFU)
N#define RTC_GPREG_GPDATA_SHIFT                   (0U)
N#define RTC_GPREG_GPDATA(x)                      (((uint32_t)(((uint32_t)(x)) << RTC_GPREG_GPDATA_SHIFT)) & RTC_GPREG_GPDATA_MASK)
N
N/* The count of RTC_GPREG */
N#define RTC_GPREG_COUNT                          (8U)
N
N
N/*!
N * @}
N */ /* end of group RTC_Register_Masks */
N
N
N/* RTC - Peripheral instance base addresses */
N/** Peripheral RTC base address */
N#define RTC_BASE                                 (0x4002C000u)
N/** Peripheral RTC base pointer */
N#define RTC                                      ((RTC_Type *)RTC_BASE)
N/** Array initializer of RTC peripheral base addresses */
N#define RTC_BASE_ADDRS                           { RTC_BASE }
N/** Array initializer of RTC peripheral base pointers */
N#define RTC_BASE_PTRS                            { RTC }
N/** Interrupt vectors for the RTC peripheral type */
N#define RTC_IRQS                                 { RTC_IRQn }
N
N/*!
N * @}
N */ /* end of group RTC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SCT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SCT_Peripheral_Access_Layer SCT Peripheral Access Layer
N * @{
N */
N
N/** SCT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CONFIG;                            /**< SCT configuration register, offset: 0x0 */
X  volatile uint32_t CONFIG;                             
N  __IO uint32_t CTRL;                              /**< SCT control register, offset: 0x4 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t LIMIT;                             /**< SCT limit event select register, offset: 0x8 */
X  volatile uint32_t LIMIT;                              
N  __IO uint32_t HALT;                              /**< SCT halt event select register, offset: 0xC */
X  volatile uint32_t HALT;                               
N  __IO uint32_t STOP;                              /**< SCT stop event select register, offset: 0x10 */
X  volatile uint32_t STOP;                               
N  __IO uint32_t START;                             /**< SCT start event select register, offset: 0x14 */
X  volatile uint32_t START;                              
N       uint8_t RESERVED_0[40];
N  __IO uint32_t COUNT;                             /**< SCT counter register, offset: 0x40 */
X  volatile uint32_t COUNT;                              
N  __IO uint32_t STATE;                             /**< SCT state register, offset: 0x44 */
X  volatile uint32_t STATE;                              
N  __I  uint32_t INPUT;                             /**< SCT input register, offset: 0x48 */
X  volatile const  uint32_t INPUT;                              
N  __IO uint32_t REGMODE;                           /**< SCT match/capture mode register, offset: 0x4C */
X  volatile uint32_t REGMODE;                            
N  __IO uint32_t OUTPUT;                            /**< SCT output register, offset: 0x50 */
X  volatile uint32_t OUTPUT;                             
N  __IO uint32_t OUTPUTDIRCTRL;                     /**< SCT output counter direction control register, offset: 0x54 */
X  volatile uint32_t OUTPUTDIRCTRL;                      
N  __IO uint32_t RES;                               /**< SCT conflict resolution register, offset: 0x58 */
X  volatile uint32_t RES;                                
N  __IO uint32_t DMA0REQUEST;                       /**< SCT DMA request 0 register, offset: 0x5C */
X  volatile uint32_t DMA0REQUEST;                        
N  __IO uint32_t DMA1REQUEST;                       /**< SCT DMA request 1 register, offset: 0x60 */
X  volatile uint32_t DMA1REQUEST;                        
N       uint8_t RESERVED_1[140];
N  __IO uint32_t EVEN;                              /**< SCT event interrupt enable register, offset: 0xF0 */
X  volatile uint32_t EVEN;                               
N  __IO uint32_t EVFLAG;                            /**< SCT event flag register, offset: 0xF4 */
X  volatile uint32_t EVFLAG;                             
N  __IO uint32_t CONEN;                             /**< SCT conflict interrupt enable register, offset: 0xF8 */
X  volatile uint32_t CONEN;                              
N  __IO uint32_t CONFLAG;                           /**< SCT conflict flag register, offset: 0xFC */
X  volatile uint32_t CONFLAG;                            
N  union {                                          /* offset: 0x100 */
N    __IO uint32_t SCTCAP[10];                        /**< SCT capture register of capture channel, array offset: 0x100, array step: 0x4 */
X    volatile uint32_t SCTCAP[10];                         
N    __IO uint32_t SCTMATCH[10];                      /**< SCT match value register of match channels, array offset: 0x100, array step: 0x4 */
X    volatile uint32_t SCTMATCH[10];                       
N  };
N       uint8_t RESERVED_2[216];
N  union {                                          /* offset: 0x200 */
N    __IO uint32_t SCTCAPCTRL[10];                    /**< SCT capture control register, array offset: 0x200, array step: 0x4 */
X    volatile uint32_t SCTCAPCTRL[10];                     
N    __IO uint32_t SCTMATCHREL[10];                   /**< SCT match reload value register, array offset: 0x200, array step: 0x4 */
X    volatile uint32_t SCTMATCHREL[10];                    
N  };
N       uint8_t RESERVED_3[216];
N  struct {                                         /* offset: 0x300, array step: 0x8 */
N    __IO uint32_t STATE;                             /**< SCT event state register 0, array offset: 0x300, array step: 0x8 */
X    volatile uint32_t STATE;                              
N    __IO uint32_t CTRL;                              /**< SCT event control register 0, array offset: 0x304, array step: 0x8 */
X    volatile uint32_t CTRL;                               
N  } EVENT[10];
N       uint8_t RESERVED_4[432];
N  struct {                                         /* offset: 0x500, array step: 0x8 */
N    __IO uint32_t SET;                               /**< SCT output 0 set register, array offset: 0x500, array step: 0x8 */
X    volatile uint32_t SET;                                
N    __IO uint32_t CLR;                               /**< SCT output 0 clear register, array offset: 0x504, array step: 0x8 */
X    volatile uint32_t CLR;                                
N  } OUT[10];
N} SCT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SCT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SCT_Register_Masks SCT Register Masks
N * @{
N */
N
N/*! @name CONFIG - SCT configuration register */
N#define SCT_CONFIG_UNIFY_MASK                    (0x1U)
N#define SCT_CONFIG_UNIFY_SHIFT                   (0U)
N#define SCT_CONFIG_UNIFY(x)                      (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_UNIFY_SHIFT)) & SCT_CONFIG_UNIFY_MASK)
N#define SCT_CONFIG_CLKMODE_MASK                  (0x6U)
N#define SCT_CONFIG_CLKMODE_SHIFT                 (1U)
N#define SCT_CONFIG_CLKMODE(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_CLKMODE_SHIFT)) & SCT_CONFIG_CLKMODE_MASK)
N#define SCT_CONFIG_CKSEL_MASK                    (0x78U)
N#define SCT_CONFIG_CKSEL_SHIFT                   (3U)
N#define SCT_CONFIG_CKSEL(x)                      (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_CKSEL_SHIFT)) & SCT_CONFIG_CKSEL_MASK)
N#define SCT_CONFIG_NORELAOD_L_MASK               (0x80U)
N#define SCT_CONFIG_NORELAOD_L_SHIFT              (7U)
N#define SCT_CONFIG_NORELAOD_L(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_NORELAOD_L_SHIFT)) & SCT_CONFIG_NORELAOD_L_MASK)
N#define SCT_CONFIG_NORELOAD_H_MASK               (0x100U)
N#define SCT_CONFIG_NORELOAD_H_SHIFT              (8U)
N#define SCT_CONFIG_NORELOAD_H(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_NORELOAD_H_SHIFT)) & SCT_CONFIG_NORELOAD_H_MASK)
N#define SCT_CONFIG_INSYNC_MASK                   (0x1E00U)
N#define SCT_CONFIG_INSYNC_SHIFT                  (9U)
N#define SCT_CONFIG_INSYNC(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_INSYNC_SHIFT)) & SCT_CONFIG_INSYNC_MASK)
N#define SCT_CONFIG_AUTOLIMIT_L_MASK              (0x20000U)
N#define SCT_CONFIG_AUTOLIMIT_L_SHIFT             (17U)
N#define SCT_CONFIG_AUTOLIMIT_L(x)                (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_AUTOLIMIT_L_SHIFT)) & SCT_CONFIG_AUTOLIMIT_L_MASK)
N#define SCT_CONFIG_AUTOLIMIT_H_MASK              (0x40000U)
N#define SCT_CONFIG_AUTOLIMIT_H_SHIFT             (18U)
N#define SCT_CONFIG_AUTOLIMIT_H(x)                (((uint32_t)(((uint32_t)(x)) << SCT_CONFIG_AUTOLIMIT_H_SHIFT)) & SCT_CONFIG_AUTOLIMIT_H_MASK)
N
N/*! @name CTRL - SCT control register */
N#define SCT_CTRL_DOWN_L_MASK                     (0x1U)
N#define SCT_CTRL_DOWN_L_SHIFT                    (0U)
N#define SCT_CTRL_DOWN_L(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_DOWN_L_SHIFT)) & SCT_CTRL_DOWN_L_MASK)
N#define SCT_CTRL_STOP_L_MASK                     (0x2U)
N#define SCT_CTRL_STOP_L_SHIFT                    (1U)
N#define SCT_CTRL_STOP_L(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_STOP_L_SHIFT)) & SCT_CTRL_STOP_L_MASK)
N#define SCT_CTRL_HALT_L_MASK                     (0x4U)
N#define SCT_CTRL_HALT_L_SHIFT                    (2U)
N#define SCT_CTRL_HALT_L(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_HALT_L_SHIFT)) & SCT_CTRL_HALT_L_MASK)
N#define SCT_CTRL_CLRCTR_L_MASK                   (0x8U)
N#define SCT_CTRL_CLRCTR_L_SHIFT                  (3U)
N#define SCT_CTRL_CLRCTR_L(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_CLRCTR_L_SHIFT)) & SCT_CTRL_CLRCTR_L_MASK)
N#define SCT_CTRL_BIDIR_L_MASK                    (0x10U)
N#define SCT_CTRL_BIDIR_L_SHIFT                   (4U)
N#define SCT_CTRL_BIDIR_L(x)                      (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_BIDIR_L_SHIFT)) & SCT_CTRL_BIDIR_L_MASK)
N#define SCT_CTRL_PRE_L_MASK                      (0x1FE0U)
N#define SCT_CTRL_PRE_L_SHIFT                     (5U)
N#define SCT_CTRL_PRE_L(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_PRE_L_SHIFT)) & SCT_CTRL_PRE_L_MASK)
N#define SCT_CTRL_DOWN_H_MASK                     (0x10000U)
N#define SCT_CTRL_DOWN_H_SHIFT                    (16U)
N#define SCT_CTRL_DOWN_H(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_DOWN_H_SHIFT)) & SCT_CTRL_DOWN_H_MASK)
N#define SCT_CTRL_STOP_H_MASK                     (0x20000U)
N#define SCT_CTRL_STOP_H_SHIFT                    (17U)
N#define SCT_CTRL_STOP_H(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_STOP_H_SHIFT)) & SCT_CTRL_STOP_H_MASK)
N#define SCT_CTRL_HALT_H_MASK                     (0x40000U)
N#define SCT_CTRL_HALT_H_SHIFT                    (18U)
N#define SCT_CTRL_HALT_H(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_HALT_H_SHIFT)) & SCT_CTRL_HALT_H_MASK)
N#define SCT_CTRL_CLRCTR_H_MASK                   (0x80000U)
N#define SCT_CTRL_CLRCTR_H_SHIFT                  (19U)
N#define SCT_CTRL_CLRCTR_H(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_CLRCTR_H_SHIFT)) & SCT_CTRL_CLRCTR_H_MASK)
N#define SCT_CTRL_BIDIR_H_MASK                    (0x100000U)
N#define SCT_CTRL_BIDIR_H_SHIFT                   (20U)
N#define SCT_CTRL_BIDIR_H(x)                      (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_BIDIR_H_SHIFT)) & SCT_CTRL_BIDIR_H_MASK)
N#define SCT_CTRL_PRE_H_MASK                      (0x1FE00000U)
N#define SCT_CTRL_PRE_H_SHIFT                     (21U)
N#define SCT_CTRL_PRE_H(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_CTRL_PRE_H_SHIFT)) & SCT_CTRL_PRE_H_MASK)
N
N/*! @name LIMIT - SCT limit event select register */
N#define SCT_LIMIT_LIMMSK_L_MASK                  (0xFFFFU)
N#define SCT_LIMIT_LIMMSK_L_SHIFT                 (0U)
N#define SCT_LIMIT_LIMMSK_L(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_LIMIT_LIMMSK_L_SHIFT)) & SCT_LIMIT_LIMMSK_L_MASK)
N#define SCT_LIMIT_LIMMSK_H_MASK                  (0xFFFF0000U)
N#define SCT_LIMIT_LIMMSK_H_SHIFT                 (16U)
N#define SCT_LIMIT_LIMMSK_H(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_LIMIT_LIMMSK_H_SHIFT)) & SCT_LIMIT_LIMMSK_H_MASK)
N
N/*! @name HALT - SCT halt event select register */
N#define SCT_HALT_HALTMSK_L_MASK                  (0xFFFFU)
N#define SCT_HALT_HALTMSK_L_SHIFT                 (0U)
N#define SCT_HALT_HALTMSK_L(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_HALT_HALTMSK_L_SHIFT)) & SCT_HALT_HALTMSK_L_MASK)
N#define SCT_HALT_HALTMSK_H_MASK                  (0xFFFF0000U)
N#define SCT_HALT_HALTMSK_H_SHIFT                 (16U)
N#define SCT_HALT_HALTMSK_H(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_HALT_HALTMSK_H_SHIFT)) & SCT_HALT_HALTMSK_H_MASK)
N
N/*! @name STOP - SCT stop event select register */
N#define SCT_STOP_STOPMSK_L_MASK                  (0xFFFFU)
N#define SCT_STOP_STOPMSK_L_SHIFT                 (0U)
N#define SCT_STOP_STOPMSK_L(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_STOP_STOPMSK_L_SHIFT)) & SCT_STOP_STOPMSK_L_MASK)
N#define SCT_STOP_STOPMSK_H_MASK                  (0xFFFF0000U)
N#define SCT_STOP_STOPMSK_H_SHIFT                 (16U)
N#define SCT_STOP_STOPMSK_H(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_STOP_STOPMSK_H_SHIFT)) & SCT_STOP_STOPMSK_H_MASK)
N
N/*! @name START - SCT start event select register */
N#define SCT_START_STARTMSK_L_MASK                (0xFFFFU)
N#define SCT_START_STARTMSK_L_SHIFT               (0U)
N#define SCT_START_STARTMSK_L(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_START_STARTMSK_L_SHIFT)) & SCT_START_STARTMSK_L_MASK)
N#define SCT_START_STARTMSK_H_MASK                (0xFFFF0000U)
N#define SCT_START_STARTMSK_H_SHIFT               (16U)
N#define SCT_START_STARTMSK_H(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_START_STARTMSK_H_SHIFT)) & SCT_START_STARTMSK_H_MASK)
N
N/*! @name COUNT - SCT counter register */
N#define SCT_COUNT_CTR_L_MASK                     (0xFFFFU)
N#define SCT_COUNT_CTR_L_SHIFT                    (0U)
N#define SCT_COUNT_CTR_L(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_COUNT_CTR_L_SHIFT)) & SCT_COUNT_CTR_L_MASK)
N#define SCT_COUNT_CTR_H_MASK                     (0xFFFF0000U)
N#define SCT_COUNT_CTR_H_SHIFT                    (16U)
N#define SCT_COUNT_CTR_H(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_COUNT_CTR_H_SHIFT)) & SCT_COUNT_CTR_H_MASK)
N
N/*! @name STATE - SCT state register */
N#define SCT_STATE_STATE_L_MASK                   (0x1FU)
N#define SCT_STATE_STATE_L_SHIFT                  (0U)
N#define SCT_STATE_STATE_L(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_STATE_STATE_L_SHIFT)) & SCT_STATE_STATE_L_MASK)
N#define SCT_STATE_STATE_H_MASK                   (0x1F0000U)
N#define SCT_STATE_STATE_H_SHIFT                  (16U)
N#define SCT_STATE_STATE_H(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_STATE_STATE_H_SHIFT)) & SCT_STATE_STATE_H_MASK)
N
N/*! @name INPUT - SCT input register */
N#define SCT_INPUT_AIN0_MASK                      (0x1U)
N#define SCT_INPUT_AIN0_SHIFT                     (0U)
N#define SCT_INPUT_AIN0(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN0_SHIFT)) & SCT_INPUT_AIN0_MASK)
N#define SCT_INPUT_AIN1_MASK                      (0x2U)
N#define SCT_INPUT_AIN1_SHIFT                     (1U)
N#define SCT_INPUT_AIN1(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN1_SHIFT)) & SCT_INPUT_AIN1_MASK)
N#define SCT_INPUT_AIN2_MASK                      (0x4U)
N#define SCT_INPUT_AIN2_SHIFT                     (2U)
N#define SCT_INPUT_AIN2(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN2_SHIFT)) & SCT_INPUT_AIN2_MASK)
N#define SCT_INPUT_AIN3_MASK                      (0x8U)
N#define SCT_INPUT_AIN3_SHIFT                     (3U)
N#define SCT_INPUT_AIN3(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN3_SHIFT)) & SCT_INPUT_AIN3_MASK)
N#define SCT_INPUT_AIN4_MASK                      (0x10U)
N#define SCT_INPUT_AIN4_SHIFT                     (4U)
N#define SCT_INPUT_AIN4(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN4_SHIFT)) & SCT_INPUT_AIN4_MASK)
N#define SCT_INPUT_AIN5_MASK                      (0x20U)
N#define SCT_INPUT_AIN5_SHIFT                     (5U)
N#define SCT_INPUT_AIN5(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN5_SHIFT)) & SCT_INPUT_AIN5_MASK)
N#define SCT_INPUT_AIN6_MASK                      (0x40U)
N#define SCT_INPUT_AIN6_SHIFT                     (6U)
N#define SCT_INPUT_AIN6(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN6_SHIFT)) & SCT_INPUT_AIN6_MASK)
N#define SCT_INPUT_AIN7_MASK                      (0x80U)
N#define SCT_INPUT_AIN7_SHIFT                     (7U)
N#define SCT_INPUT_AIN7(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN7_SHIFT)) & SCT_INPUT_AIN7_MASK)
N#define SCT_INPUT_AIN8_MASK                      (0x100U)
N#define SCT_INPUT_AIN8_SHIFT                     (8U)
N#define SCT_INPUT_AIN8(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN8_SHIFT)) & SCT_INPUT_AIN8_MASK)
N#define SCT_INPUT_AIN9_MASK                      (0x200U)
N#define SCT_INPUT_AIN9_SHIFT                     (9U)
N#define SCT_INPUT_AIN9(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN9_SHIFT)) & SCT_INPUT_AIN9_MASK)
N#define SCT_INPUT_AIN10_MASK                     (0x400U)
N#define SCT_INPUT_AIN10_SHIFT                    (10U)
N#define SCT_INPUT_AIN10(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN10_SHIFT)) & SCT_INPUT_AIN10_MASK)
N#define SCT_INPUT_AIN11_MASK                     (0x800U)
N#define SCT_INPUT_AIN11_SHIFT                    (11U)
N#define SCT_INPUT_AIN11(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN11_SHIFT)) & SCT_INPUT_AIN11_MASK)
N#define SCT_INPUT_AIN12_MASK                     (0x1000U)
N#define SCT_INPUT_AIN12_SHIFT                    (12U)
N#define SCT_INPUT_AIN12(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN12_SHIFT)) & SCT_INPUT_AIN12_MASK)
N#define SCT_INPUT_AIN13_MASK                     (0x2000U)
N#define SCT_INPUT_AIN13_SHIFT                    (13U)
N#define SCT_INPUT_AIN13(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN13_SHIFT)) & SCT_INPUT_AIN13_MASK)
N#define SCT_INPUT_AIN14_MASK                     (0x4000U)
N#define SCT_INPUT_AIN14_SHIFT                    (14U)
N#define SCT_INPUT_AIN14(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN14_SHIFT)) & SCT_INPUT_AIN14_MASK)
N#define SCT_INPUT_AIN15_MASK                     (0x8000U)
N#define SCT_INPUT_AIN15_SHIFT                    (15U)
N#define SCT_INPUT_AIN15(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_AIN15_SHIFT)) & SCT_INPUT_AIN15_MASK)
N#define SCT_INPUT_SIN0_MASK                      (0x10000U)
N#define SCT_INPUT_SIN0_SHIFT                     (16U)
N#define SCT_INPUT_SIN0(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN0_SHIFT)) & SCT_INPUT_SIN0_MASK)
N#define SCT_INPUT_SIN1_MASK                      (0x20000U)
N#define SCT_INPUT_SIN1_SHIFT                     (17U)
N#define SCT_INPUT_SIN1(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN1_SHIFT)) & SCT_INPUT_SIN1_MASK)
N#define SCT_INPUT_SIN2_MASK                      (0x40000U)
N#define SCT_INPUT_SIN2_SHIFT                     (18U)
N#define SCT_INPUT_SIN2(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN2_SHIFT)) & SCT_INPUT_SIN2_MASK)
N#define SCT_INPUT_SIN3_MASK                      (0x80000U)
N#define SCT_INPUT_SIN3_SHIFT                     (19U)
N#define SCT_INPUT_SIN3(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN3_SHIFT)) & SCT_INPUT_SIN3_MASK)
N#define SCT_INPUT_SIN4_MASK                      (0x100000U)
N#define SCT_INPUT_SIN4_SHIFT                     (20U)
N#define SCT_INPUT_SIN4(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN4_SHIFT)) & SCT_INPUT_SIN4_MASK)
N#define SCT_INPUT_SIN5_MASK                      (0x200000U)
N#define SCT_INPUT_SIN5_SHIFT                     (21U)
N#define SCT_INPUT_SIN5(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN5_SHIFT)) & SCT_INPUT_SIN5_MASK)
N#define SCT_INPUT_SIN6_MASK                      (0x400000U)
N#define SCT_INPUT_SIN6_SHIFT                     (22U)
N#define SCT_INPUT_SIN6(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN6_SHIFT)) & SCT_INPUT_SIN6_MASK)
N#define SCT_INPUT_SIN7_MASK                      (0x800000U)
N#define SCT_INPUT_SIN7_SHIFT                     (23U)
N#define SCT_INPUT_SIN7(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN7_SHIFT)) & SCT_INPUT_SIN7_MASK)
N#define SCT_INPUT_SIN8_MASK                      (0x1000000U)
N#define SCT_INPUT_SIN8_SHIFT                     (24U)
N#define SCT_INPUT_SIN8(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN8_SHIFT)) & SCT_INPUT_SIN8_MASK)
N#define SCT_INPUT_SIN9_MASK                      (0x2000000U)
N#define SCT_INPUT_SIN9_SHIFT                     (25U)
N#define SCT_INPUT_SIN9(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN9_SHIFT)) & SCT_INPUT_SIN9_MASK)
N#define SCT_INPUT_SIN10_MASK                     (0x4000000U)
N#define SCT_INPUT_SIN10_SHIFT                    (26U)
N#define SCT_INPUT_SIN10(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN10_SHIFT)) & SCT_INPUT_SIN10_MASK)
N#define SCT_INPUT_SIN11_MASK                     (0x8000000U)
N#define SCT_INPUT_SIN11_SHIFT                    (27U)
N#define SCT_INPUT_SIN11(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN11_SHIFT)) & SCT_INPUT_SIN11_MASK)
N#define SCT_INPUT_SIN12_MASK                     (0x10000000U)
N#define SCT_INPUT_SIN12_SHIFT                    (28U)
N#define SCT_INPUT_SIN12(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN12_SHIFT)) & SCT_INPUT_SIN12_MASK)
N#define SCT_INPUT_SIN13_MASK                     (0x20000000U)
N#define SCT_INPUT_SIN13_SHIFT                    (29U)
N#define SCT_INPUT_SIN13(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN13_SHIFT)) & SCT_INPUT_SIN13_MASK)
N#define SCT_INPUT_SIN14_MASK                     (0x40000000U)
N#define SCT_INPUT_SIN14_SHIFT                    (30U)
N#define SCT_INPUT_SIN14(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN14_SHIFT)) & SCT_INPUT_SIN14_MASK)
N#define SCT_INPUT_SIN15_MASK                     (0x80000000U)
N#define SCT_INPUT_SIN15_SHIFT                    (31U)
N#define SCT_INPUT_SIN15(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_INPUT_SIN15_SHIFT)) & SCT_INPUT_SIN15_MASK)
N
N/*! @name REGMODE - SCT match/capture mode register */
N#define SCT_REGMODE_REGMOD_L_MASK                (0xFFFFU)
N#define SCT_REGMODE_REGMOD_L_SHIFT               (0U)
N#define SCT_REGMODE_REGMOD_L(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_REGMODE_REGMOD_L_SHIFT)) & SCT_REGMODE_REGMOD_L_MASK)
N#define SCT_REGMODE_REGMOD_H_MASK                (0xFFFF0000U)
N#define SCT_REGMODE_REGMOD_H_SHIFT               (16U)
N#define SCT_REGMODE_REGMOD_H(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_REGMODE_REGMOD_H_SHIFT)) & SCT_REGMODE_REGMOD_H_MASK)
N
N/*! @name OUTPUT - SCT output register */
N#define SCT_OUTPUT_OUT_MASK                      (0xFFFFU)
N#define SCT_OUTPUT_OUT_SHIFT                     (0U)
N#define SCT_OUTPUT_OUT(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUT_OUT_SHIFT)) & SCT_OUTPUT_OUT_MASK)
N
N/*! @name OUTPUTDIRCTRL - SCT output counter direction control register */
N#define SCT_OUTPUTDIRCTRL_SETCLR0_MASK           (0x3U)
N#define SCT_OUTPUTDIRCTRL_SETCLR0_SHIFT          (0U)
N#define SCT_OUTPUTDIRCTRL_SETCLR0(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR0_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR0_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR1_MASK           (0xCU)
N#define SCT_OUTPUTDIRCTRL_SETCLR1_SHIFT          (2U)
N#define SCT_OUTPUTDIRCTRL_SETCLR1(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR1_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR1_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR2_MASK           (0x30U)
N#define SCT_OUTPUTDIRCTRL_SETCLR2_SHIFT          (4U)
N#define SCT_OUTPUTDIRCTRL_SETCLR2(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR2_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR2_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR3_MASK           (0xC0U)
N#define SCT_OUTPUTDIRCTRL_SETCLR3_SHIFT          (6U)
N#define SCT_OUTPUTDIRCTRL_SETCLR3(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR3_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR3_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR4_MASK           (0x300U)
N#define SCT_OUTPUTDIRCTRL_SETCLR4_SHIFT          (8U)
N#define SCT_OUTPUTDIRCTRL_SETCLR4(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR4_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR4_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR5_MASK           (0xC00U)
N#define SCT_OUTPUTDIRCTRL_SETCLR5_SHIFT          (10U)
N#define SCT_OUTPUTDIRCTRL_SETCLR5(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR5_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR5_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR6_MASK           (0x3000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR6_SHIFT          (12U)
N#define SCT_OUTPUTDIRCTRL_SETCLR6(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR6_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR6_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR7_MASK           (0xC000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR7_SHIFT          (14U)
N#define SCT_OUTPUTDIRCTRL_SETCLR7(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR7_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR7_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR8_MASK           (0x30000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR8_SHIFT          (16U)
N#define SCT_OUTPUTDIRCTRL_SETCLR8(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR8_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR8_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR9_MASK           (0xC0000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR9_SHIFT          (18U)
N#define SCT_OUTPUTDIRCTRL_SETCLR9(x)             (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR9_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR9_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR10_MASK          (0x300000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR10_SHIFT         (20U)
N#define SCT_OUTPUTDIRCTRL_SETCLR10(x)            (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR10_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR10_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR11_MASK          (0xC00000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR11_SHIFT         (22U)
N#define SCT_OUTPUTDIRCTRL_SETCLR11(x)            (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR11_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR11_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR12_MASK          (0x3000000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR12_SHIFT         (24U)
N#define SCT_OUTPUTDIRCTRL_SETCLR12(x)            (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR12_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR12_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR13_MASK          (0xC000000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR13_SHIFT         (26U)
N#define SCT_OUTPUTDIRCTRL_SETCLR13(x)            (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR13_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR13_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR14_MASK          (0x30000000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR14_SHIFT         (28U)
N#define SCT_OUTPUTDIRCTRL_SETCLR14(x)            (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR14_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR14_MASK)
N#define SCT_OUTPUTDIRCTRL_SETCLR15_MASK          (0xC0000000U)
N#define SCT_OUTPUTDIRCTRL_SETCLR15_SHIFT         (30U)
N#define SCT_OUTPUTDIRCTRL_SETCLR15(x)            (((uint32_t)(((uint32_t)(x)) << SCT_OUTPUTDIRCTRL_SETCLR15_SHIFT)) & SCT_OUTPUTDIRCTRL_SETCLR15_MASK)
N
N/*! @name RES - SCT conflict resolution register */
N#define SCT_RES_O0RES_MASK                       (0x3U)
N#define SCT_RES_O0RES_SHIFT                      (0U)
N#define SCT_RES_O0RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O0RES_SHIFT)) & SCT_RES_O0RES_MASK)
N#define SCT_RES_O1RES_MASK                       (0xCU)
N#define SCT_RES_O1RES_SHIFT                      (2U)
N#define SCT_RES_O1RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O1RES_SHIFT)) & SCT_RES_O1RES_MASK)
N#define SCT_RES_O2RES_MASK                       (0x30U)
N#define SCT_RES_O2RES_SHIFT                      (4U)
N#define SCT_RES_O2RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O2RES_SHIFT)) & SCT_RES_O2RES_MASK)
N#define SCT_RES_O3RES_MASK                       (0xC0U)
N#define SCT_RES_O3RES_SHIFT                      (6U)
N#define SCT_RES_O3RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O3RES_SHIFT)) & SCT_RES_O3RES_MASK)
N#define SCT_RES_O4RES_MASK                       (0x300U)
N#define SCT_RES_O4RES_SHIFT                      (8U)
N#define SCT_RES_O4RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O4RES_SHIFT)) & SCT_RES_O4RES_MASK)
N#define SCT_RES_O5RES_MASK                       (0xC00U)
N#define SCT_RES_O5RES_SHIFT                      (10U)
N#define SCT_RES_O5RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O5RES_SHIFT)) & SCT_RES_O5RES_MASK)
N#define SCT_RES_O6RES_MASK                       (0x3000U)
N#define SCT_RES_O6RES_SHIFT                      (12U)
N#define SCT_RES_O6RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O6RES_SHIFT)) & SCT_RES_O6RES_MASK)
N#define SCT_RES_O7RES_MASK                       (0xC000U)
N#define SCT_RES_O7RES_SHIFT                      (14U)
N#define SCT_RES_O7RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O7RES_SHIFT)) & SCT_RES_O7RES_MASK)
N#define SCT_RES_O8RES_MASK                       (0x30000U)
N#define SCT_RES_O8RES_SHIFT                      (16U)
N#define SCT_RES_O8RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O8RES_SHIFT)) & SCT_RES_O8RES_MASK)
N#define SCT_RES_O9RES_MASK                       (0xC0000U)
N#define SCT_RES_O9RES_SHIFT                      (18U)
N#define SCT_RES_O9RES(x)                         (((uint32_t)(((uint32_t)(x)) << SCT_RES_O9RES_SHIFT)) & SCT_RES_O9RES_MASK)
N#define SCT_RES_O10RES_MASK                      (0x300000U)
N#define SCT_RES_O10RES_SHIFT                     (20U)
N#define SCT_RES_O10RES(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_RES_O10RES_SHIFT)) & SCT_RES_O10RES_MASK)
N#define SCT_RES_O11RES_MASK                      (0xC00000U)
N#define SCT_RES_O11RES_SHIFT                     (22U)
N#define SCT_RES_O11RES(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_RES_O11RES_SHIFT)) & SCT_RES_O11RES_MASK)
N#define SCT_RES_O12RES_MASK                      (0x3000000U)
N#define SCT_RES_O12RES_SHIFT                     (24U)
N#define SCT_RES_O12RES(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_RES_O12RES_SHIFT)) & SCT_RES_O12RES_MASK)
N#define SCT_RES_O13RES_MASK                      (0xC000000U)
N#define SCT_RES_O13RES_SHIFT                     (26U)
N#define SCT_RES_O13RES(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_RES_O13RES_SHIFT)) & SCT_RES_O13RES_MASK)
N#define SCT_RES_O14RES_MASK                      (0x30000000U)
N#define SCT_RES_O14RES_SHIFT                     (28U)
N#define SCT_RES_O14RES(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_RES_O14RES_SHIFT)) & SCT_RES_O14RES_MASK)
N#define SCT_RES_O15RES_MASK                      (0xC0000000U)
N#define SCT_RES_O15RES_SHIFT                     (30U)
N#define SCT_RES_O15RES(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_RES_O15RES_SHIFT)) & SCT_RES_O15RES_MASK)
N
N/*! @name DMA0REQUEST - SCT DMA request 0 register */
N#define SCT_DMA0REQUEST_DEV_0_MASK               (0xFFFFU)
N#define SCT_DMA0REQUEST_DEV_0_SHIFT              (0U)
N#define SCT_DMA0REQUEST_DEV_0(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_DMA0REQUEST_DEV_0_SHIFT)) & SCT_DMA0REQUEST_DEV_0_MASK)
N#define SCT_DMA0REQUEST_DRL0_MASK                (0x40000000U)
N#define SCT_DMA0REQUEST_DRL0_SHIFT               (30U)
N#define SCT_DMA0REQUEST_DRL0(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_DMA0REQUEST_DRL0_SHIFT)) & SCT_DMA0REQUEST_DRL0_MASK)
N#define SCT_DMA0REQUEST_DRQ0_MASK                (0x80000000U)
N#define SCT_DMA0REQUEST_DRQ0_SHIFT               (31U)
N#define SCT_DMA0REQUEST_DRQ0(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_DMA0REQUEST_DRQ0_SHIFT)) & SCT_DMA0REQUEST_DRQ0_MASK)
N
N/*! @name DMA1REQUEST - SCT DMA request 1 register */
N#define SCT_DMA1REQUEST_DEV_1_MASK               (0xFFFFU)
N#define SCT_DMA1REQUEST_DEV_1_SHIFT              (0U)
N#define SCT_DMA1REQUEST_DEV_1(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_DMA1REQUEST_DEV_1_SHIFT)) & SCT_DMA1REQUEST_DEV_1_MASK)
N#define SCT_DMA1REQUEST_DRL1_MASK                (0x40000000U)
N#define SCT_DMA1REQUEST_DRL1_SHIFT               (30U)
N#define SCT_DMA1REQUEST_DRL1(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_DMA1REQUEST_DRL1_SHIFT)) & SCT_DMA1REQUEST_DRL1_MASK)
N#define SCT_DMA1REQUEST_DRQ1_MASK                (0x80000000U)
N#define SCT_DMA1REQUEST_DRQ1_SHIFT               (31U)
N#define SCT_DMA1REQUEST_DRQ1(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_DMA1REQUEST_DRQ1_SHIFT)) & SCT_DMA1REQUEST_DRQ1_MASK)
N
N/*! @name EVEN - SCT event interrupt enable register */
N#define SCT_EVEN_IEN_MASK                        (0xFFFFU)
N#define SCT_EVEN_IEN_SHIFT                       (0U)
N#define SCT_EVEN_IEN(x)                          (((uint32_t)(((uint32_t)(x)) << SCT_EVEN_IEN_SHIFT)) & SCT_EVEN_IEN_MASK)
N
N/*! @name EVFLAG - SCT event flag register */
N#define SCT_EVFLAG_FLAG_MASK                     (0xFFFFU)
N#define SCT_EVFLAG_FLAG_SHIFT                    (0U)
N#define SCT_EVFLAG_FLAG(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_EVFLAG_FLAG_SHIFT)) & SCT_EVFLAG_FLAG_MASK)
N
N/*! @name CONEN - SCT conflict interrupt enable register */
N#define SCT_CONEN_NCEN_MASK                      (0xFFFFU)
N#define SCT_CONEN_NCEN_SHIFT                     (0U)
N#define SCT_CONEN_NCEN(x)                        (((uint32_t)(((uint32_t)(x)) << SCT_CONEN_NCEN_SHIFT)) & SCT_CONEN_NCEN_MASK)
N
N/*! @name CONFLAG - SCT conflict flag register */
N#define SCT_CONFLAG_NCFLAG_MASK                  (0xFFFFU)
N#define SCT_CONFLAG_NCFLAG_SHIFT                 (0U)
N#define SCT_CONFLAG_NCFLAG(x)                    (((uint32_t)(((uint32_t)(x)) << SCT_CONFLAG_NCFLAG_SHIFT)) & SCT_CONFLAG_NCFLAG_MASK)
N#define SCT_CONFLAG_BUSERRL_MASK                 (0x40000000U)
N#define SCT_CONFLAG_BUSERRL_SHIFT                (30U)
N#define SCT_CONFLAG_BUSERRL(x)                   (((uint32_t)(((uint32_t)(x)) << SCT_CONFLAG_BUSERRL_SHIFT)) & SCT_CONFLAG_BUSERRL_MASK)
N#define SCT_CONFLAG_BUSERRH_MASK                 (0x80000000U)
N#define SCT_CONFLAG_BUSERRH_SHIFT                (31U)
N#define SCT_CONFLAG_BUSERRH(x)                   (((uint32_t)(((uint32_t)(x)) << SCT_CONFLAG_BUSERRH_SHIFT)) & SCT_CONFLAG_BUSERRH_MASK)
N
N/*! @name SCTCAP - SCT capture register of capture channel */
N#define SCT_SCTCAP_CAPn_L_MASK                   (0xFFFFU)
N#define SCT_SCTCAP_CAPn_L_SHIFT                  (0U)
N#define SCT_SCTCAP_CAPn_L(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_SCTCAP_CAPn_L_SHIFT)) & SCT_SCTCAP_CAPn_L_MASK)
N#define SCT_SCTCAP_CAPn_H_MASK                   (0xFFFF0000U)
N#define SCT_SCTCAP_CAPn_H_SHIFT                  (16U)
N#define SCT_SCTCAP_CAPn_H(x)                     (((uint32_t)(((uint32_t)(x)) << SCT_SCTCAP_CAPn_H_SHIFT)) & SCT_SCTCAP_CAPn_H_MASK)
N
N/* The count of SCT_SCTCAP */
N#define SCT_SCTCAP_COUNT                         (10U)
N
N/*! @name SCTMATCH - SCT match value register of match channels */
N#define SCT_SCTMATCH_MATCHn_L_MASK               (0xFFFFU)
N#define SCT_SCTMATCH_MATCHn_L_SHIFT              (0U)
N#define SCT_SCTMATCH_MATCHn_L(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_SCTMATCH_MATCHn_L_SHIFT)) & SCT_SCTMATCH_MATCHn_L_MASK)
N#define SCT_SCTMATCH_MATCHn_H_MASK               (0xFFFF0000U)
N#define SCT_SCTMATCH_MATCHn_H_SHIFT              (16U)
N#define SCT_SCTMATCH_MATCHn_H(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_SCTMATCH_MATCHn_H_SHIFT)) & SCT_SCTMATCH_MATCHn_H_MASK)
N
N/* The count of SCT_SCTMATCH */
N#define SCT_SCTMATCH_COUNT                       (10U)
N
N/*! @name SCTCAPCTRL - SCT capture control register */
N#define SCT_SCTCAPCTRL_CAPCONn_L_MASK            (0xFFFFU)
N#define SCT_SCTCAPCTRL_CAPCONn_L_SHIFT           (0U)
N#define SCT_SCTCAPCTRL_CAPCONn_L(x)              (((uint32_t)(((uint32_t)(x)) << SCT_SCTCAPCTRL_CAPCONn_L_SHIFT)) & SCT_SCTCAPCTRL_CAPCONn_L_MASK)
N#define SCT_SCTCAPCTRL_CAPCONn_H_MASK            (0xFFFF0000U)
N#define SCT_SCTCAPCTRL_CAPCONn_H_SHIFT           (16U)
N#define SCT_SCTCAPCTRL_CAPCONn_H(x)              (((uint32_t)(((uint32_t)(x)) << SCT_SCTCAPCTRL_CAPCONn_H_SHIFT)) & SCT_SCTCAPCTRL_CAPCONn_H_MASK)
N
N/* The count of SCT_SCTCAPCTRL */
N#define SCT_SCTCAPCTRL_COUNT                     (10U)
N
N/*! @name SCTMATCHREL - SCT match reload value register */
N#define SCT_SCTMATCHREL_RELOADn_L_MASK           (0xFFFFU)
N#define SCT_SCTMATCHREL_RELOADn_L_SHIFT          (0U)
N#define SCT_SCTMATCHREL_RELOADn_L(x)             (((uint32_t)(((uint32_t)(x)) << SCT_SCTMATCHREL_RELOADn_L_SHIFT)) & SCT_SCTMATCHREL_RELOADn_L_MASK)
N#define SCT_SCTMATCHREL_RELOADn_H_MASK           (0xFFFF0000U)
N#define SCT_SCTMATCHREL_RELOADn_H_SHIFT          (16U)
N#define SCT_SCTMATCHREL_RELOADn_H(x)             (((uint32_t)(((uint32_t)(x)) << SCT_SCTMATCHREL_RELOADn_H_SHIFT)) & SCT_SCTMATCHREL_RELOADn_H_MASK)
N
N/* The count of SCT_SCTMATCHREL */
N#define SCT_SCTMATCHREL_COUNT                    (10U)
N
N/*! @name EVENT_STATE - SCT event state register 0 */
N#define SCT_EVENT_STATE_STATEMSKn_MASK           (0xFFFFU)
N#define SCT_EVENT_STATE_STATEMSKn_SHIFT          (0U)
N#define SCT_EVENT_STATE_STATEMSKn(x)             (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_STATE_STATEMSKn_SHIFT)) & SCT_EVENT_STATE_STATEMSKn_MASK)
N
N/* The count of SCT_EVENT_STATE */
N#define SCT_EVENT_STATE_COUNT                    (10U)
N
N/*! @name EVENT_CTRL - SCT event control register 0 */
N#define SCT_EVENT_CTRL_MATCHSEL_MASK             (0xFU)
N#define SCT_EVENT_CTRL_MATCHSEL_SHIFT            (0U)
N#define SCT_EVENT_CTRL_MATCHSEL(x)               (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_MATCHSEL_SHIFT)) & SCT_EVENT_CTRL_MATCHSEL_MASK)
N#define SCT_EVENT_CTRL_HEVENT_MASK               (0x10U)
N#define SCT_EVENT_CTRL_HEVENT_SHIFT              (4U)
N#define SCT_EVENT_CTRL_HEVENT(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_HEVENT_SHIFT)) & SCT_EVENT_CTRL_HEVENT_MASK)
N#define SCT_EVENT_CTRL_OUTSEL_MASK               (0x20U)
N#define SCT_EVENT_CTRL_OUTSEL_SHIFT              (5U)
N#define SCT_EVENT_CTRL_OUTSEL(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_OUTSEL_SHIFT)) & SCT_EVENT_CTRL_OUTSEL_MASK)
N#define SCT_EVENT_CTRL_IOSEL_MASK                (0x3C0U)
N#define SCT_EVENT_CTRL_IOSEL_SHIFT               (6U)
N#define SCT_EVENT_CTRL_IOSEL(x)                  (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_IOSEL_SHIFT)) & SCT_EVENT_CTRL_IOSEL_MASK)
N#define SCT_EVENT_CTRL_IOCOND_MASK               (0xC00U)
N#define SCT_EVENT_CTRL_IOCOND_SHIFT              (10U)
N#define SCT_EVENT_CTRL_IOCOND(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_IOCOND_SHIFT)) & SCT_EVENT_CTRL_IOCOND_MASK)
N#define SCT_EVENT_CTRL_COMBMODE_MASK             (0x3000U)
N#define SCT_EVENT_CTRL_COMBMODE_SHIFT            (12U)
N#define SCT_EVENT_CTRL_COMBMODE(x)               (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_COMBMODE_SHIFT)) & SCT_EVENT_CTRL_COMBMODE_MASK)
N#define SCT_EVENT_CTRL_STATELD_MASK              (0x4000U)
N#define SCT_EVENT_CTRL_STATELD_SHIFT             (14U)
N#define SCT_EVENT_CTRL_STATELD(x)                (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_STATELD_SHIFT)) & SCT_EVENT_CTRL_STATELD_MASK)
N#define SCT_EVENT_CTRL_STATEV_MASK               (0xF8000U)
N#define SCT_EVENT_CTRL_STATEV_SHIFT              (15U)
N#define SCT_EVENT_CTRL_STATEV(x)                 (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_STATEV_SHIFT)) & SCT_EVENT_CTRL_STATEV_MASK)
N#define SCT_EVENT_CTRL_MATCHMEM_MASK             (0x100000U)
N#define SCT_EVENT_CTRL_MATCHMEM_SHIFT            (20U)
N#define SCT_EVENT_CTRL_MATCHMEM(x)               (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_MATCHMEM_SHIFT)) & SCT_EVENT_CTRL_MATCHMEM_MASK)
N#define SCT_EVENT_CTRL_DIRECTION_MASK            (0x600000U)
N#define SCT_EVENT_CTRL_DIRECTION_SHIFT           (21U)
N#define SCT_EVENT_CTRL_DIRECTION(x)              (((uint32_t)(((uint32_t)(x)) << SCT_EVENT_CTRL_DIRECTION_SHIFT)) & SCT_EVENT_CTRL_DIRECTION_MASK)
N
N/* The count of SCT_EVENT_CTRL */
N#define SCT_EVENT_CTRL_COUNT                     (10U)
N
N/*! @name OUT_SET - SCT output 0 set register */
N#define SCT_OUT_SET_SET_MASK                     (0xFFFFU)
N#define SCT_OUT_SET_SET_SHIFT                    (0U)
N#define SCT_OUT_SET_SET(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_OUT_SET_SET_SHIFT)) & SCT_OUT_SET_SET_MASK)
N
N/* The count of SCT_OUT_SET */
N#define SCT_OUT_SET_COUNT                        (10U)
N
N/*! @name OUT_CLR - SCT output 0 clear register */
N#define SCT_OUT_CLR_CLR_MASK                     (0xFFFFU)
N#define SCT_OUT_CLR_CLR_SHIFT                    (0U)
N#define SCT_OUT_CLR_CLR(x)                       (((uint32_t)(((uint32_t)(x)) << SCT_OUT_CLR_CLR_SHIFT)) & SCT_OUT_CLR_CLR_MASK)
N
N/* The count of SCT_OUT_CLR */
N#define SCT_OUT_CLR_COUNT                        (10U)
N
N
N/*!
N * @}
N */ /* end of group SCT_Register_Masks */
N
N
N/* SCT - Peripheral instance base addresses */
N/** Peripheral SCT0 base address */
N#define SCT0_BASE                                (0x40085000u)
N/** Peripheral SCT0 base pointer */
N#define SCT0                                     ((SCT_Type *)SCT0_BASE)
N/** Array initializer of SCT peripheral base addresses */
N#define SCT_BASE_ADDRS                           { SCT0_BASE }
N/** Array initializer of SCT peripheral base pointers */
N#define SCT_BASE_PTRS                            { SCT0 }
N/** Interrupt vectors for the SCT peripheral type */
N#define SCT_IRQS                                 { SCT0_IRQn }
N
N/*!
N * @}
N */ /* end of group SCT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SDIF Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SDIF_Peripheral_Access_Layer SDIF Peripheral Access Layer
N * @{
N */
N
N/** SDIF - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CTRL;                              /**< Control register, offset: 0x0 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t PWREN;                             /**< Power Enable register, offset: 0x4 */
X  volatile uint32_t PWREN;                              
N  __IO uint32_t CLKDIV;                            /**< Clock Divider register, offset: 0x8 */
X  volatile uint32_t CLKDIV;                             
N       uint8_t RESERVED_0[4];
N  __IO uint32_t CLKENA;                            /**< Clock Enable register, offset: 0x10 */
X  volatile uint32_t CLKENA;                             
N  __IO uint32_t TMOUT;                             /**< Time-out register, offset: 0x14 */
X  volatile uint32_t TMOUT;                              
N  __IO uint32_t CTYPE;                             /**< Card Type register, offset: 0x18 */
X  volatile uint32_t CTYPE;                              
N  __IO uint32_t BLKSIZ;                            /**< Block Size register, offset: 0x1C */
X  volatile uint32_t BLKSIZ;                             
N  __IO uint32_t BYTCNT;                            /**< Byte Count register, offset: 0x20 */
X  volatile uint32_t BYTCNT;                             
N  __IO uint32_t INTMASK;                           /**< Interrupt Mask register, offset: 0x24 */
X  volatile uint32_t INTMASK;                            
N  __IO uint32_t CMDARG;                            /**< Command Argument register, offset: 0x28 */
X  volatile uint32_t CMDARG;                             
N  __IO uint32_t CMD;                               /**< Command register, offset: 0x2C */
X  volatile uint32_t CMD;                                
N  __IO uint32_t RESP[4];                           /**< Response register, array offset: 0x30, array step: 0x4 */
X  volatile uint32_t RESP[4];                            
N  __IO uint32_t MINTSTS;                           /**< Masked Interrupt Status register, offset: 0x40 */
X  volatile uint32_t MINTSTS;                            
N  __IO uint32_t RINTSTS;                           /**< Raw Interrupt Status register, offset: 0x44 */
X  volatile uint32_t RINTSTS;                            
N  __IO uint32_t STATUS;                            /**< Status register, offset: 0x48 */
X  volatile uint32_t STATUS;                             
N  __IO uint32_t FIFOTH;                            /**< FIFO Threshold Watermark register, offset: 0x4C */
X  volatile uint32_t FIFOTH;                             
N  __IO uint32_t CDETECT;                           /**< Card Detect register, offset: 0x50 */
X  volatile uint32_t CDETECT;                            
N  __IO uint32_t WRTPRT;                            /**< Write Protect register, offset: 0x54 */
X  volatile uint32_t WRTPRT;                             
N       uint8_t RESERVED_1[4];
N  __IO uint32_t TCBCNT;                            /**< Transferred CIU Card Byte Count register, offset: 0x5C */
X  volatile uint32_t TCBCNT;                             
N  __IO uint32_t TBBCNT;                            /**< Transferred Host to BIU-FIFO Byte Count register, offset: 0x60 */
X  volatile uint32_t TBBCNT;                             
N  __IO uint32_t DEBNCE;                            /**< Debounce Count register, offset: 0x64 */
X  volatile uint32_t DEBNCE;                             
N       uint8_t RESERVED_2[16];
N  __IO uint32_t RST_N;                             /**< Hardware Reset, offset: 0x78 */
X  volatile uint32_t RST_N;                              
N       uint8_t RESERVED_3[4];
N  __IO uint32_t BMOD;                              /**< Bus Mode register, offset: 0x80 */
X  volatile uint32_t BMOD;                               
N  __IO uint32_t PLDMND;                            /**< Poll Demand register, offset: 0x84 */
X  volatile uint32_t PLDMND;                             
N  __IO uint32_t DBADDR;                            /**< Descriptor List Base Address register, offset: 0x88 */
X  volatile uint32_t DBADDR;                             
N  __IO uint32_t IDSTS;                             /**< Internal DMAC Status register, offset: 0x8C */
X  volatile uint32_t IDSTS;                              
N  __IO uint32_t IDINTEN;                           /**< Internal DMAC Interrupt Enable register, offset: 0x90 */
X  volatile uint32_t IDINTEN;                            
N  __IO uint32_t DSCADDR;                           /**< Current Host Descriptor Address register, offset: 0x94 */
X  volatile uint32_t DSCADDR;                            
N  __IO uint32_t BUFADDR;                           /**< Current Buffer Descriptor Address register, offset: 0x98 */
X  volatile uint32_t BUFADDR;                            
N       uint8_t RESERVED_4[100];
N  __IO uint32_t CARDTHRCTL;                        /**< Card Threshold Control, offset: 0x100 */
X  volatile uint32_t CARDTHRCTL;                         
N  __IO uint32_t BACKENDPWR;                        /**< Power control, offset: 0x104 */
X  volatile uint32_t BACKENDPWR;                         
N       uint8_t RESERVED_5[248];
N  __IO uint32_t FIFO[64];                          /**< SDIF FIFO, array offset: 0x200, array step: 0x4 */
X  volatile uint32_t FIFO[64];                           
N} SDIF_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SDIF Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SDIF_Register_Masks SDIF Register Masks
N * @{
N */
N
N/*! @name CTRL - Control register */
N#define SDIF_CTRL_CONTROLLER_RESET_MASK          (0x1U)
N#define SDIF_CTRL_CONTROLLER_RESET_SHIFT         (0U)
N#define SDIF_CTRL_CONTROLLER_RESET(x)            (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_CONTROLLER_RESET_SHIFT)) & SDIF_CTRL_CONTROLLER_RESET_MASK)
N#define SDIF_CTRL_FIFO_RESET_MASK                (0x2U)
N#define SDIF_CTRL_FIFO_RESET_SHIFT               (1U)
N#define SDIF_CTRL_FIFO_RESET(x)                  (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_FIFO_RESET_SHIFT)) & SDIF_CTRL_FIFO_RESET_MASK)
N#define SDIF_CTRL_DMA_RESET_MASK                 (0x4U)
N#define SDIF_CTRL_DMA_RESET_SHIFT                (2U)
N#define SDIF_CTRL_DMA_RESET(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_DMA_RESET_SHIFT)) & SDIF_CTRL_DMA_RESET_MASK)
N#define SDIF_CTRL_INT_ENABLE_MASK                (0x10U)
N#define SDIF_CTRL_INT_ENABLE_SHIFT               (4U)
N#define SDIF_CTRL_INT_ENABLE(x)                  (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_INT_ENABLE_SHIFT)) & SDIF_CTRL_INT_ENABLE_MASK)
N#define SDIF_CTRL_READ_WAIT_MASK                 (0x40U)
N#define SDIF_CTRL_READ_WAIT_SHIFT                (6U)
N#define SDIF_CTRL_READ_WAIT(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_READ_WAIT_SHIFT)) & SDIF_CTRL_READ_WAIT_MASK)
N#define SDIF_CTRL_SEND_IRQ_RESPONSE_MASK         (0x80U)
N#define SDIF_CTRL_SEND_IRQ_RESPONSE_SHIFT        (7U)
N#define SDIF_CTRL_SEND_IRQ_RESPONSE(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_SEND_IRQ_RESPONSE_SHIFT)) & SDIF_CTRL_SEND_IRQ_RESPONSE_MASK)
N#define SDIF_CTRL_ABORT_READ_DATA_MASK           (0x100U)
N#define SDIF_CTRL_ABORT_READ_DATA_SHIFT          (8U)
N#define SDIF_CTRL_ABORT_READ_DATA(x)             (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_ABORT_READ_DATA_SHIFT)) & SDIF_CTRL_ABORT_READ_DATA_MASK)
N#define SDIF_CTRL_SEND_CCSD_MASK                 (0x200U)
N#define SDIF_CTRL_SEND_CCSD_SHIFT                (9U)
N#define SDIF_CTRL_SEND_CCSD(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_SEND_CCSD_SHIFT)) & SDIF_CTRL_SEND_CCSD_MASK)
N#define SDIF_CTRL_SEND_AUTO_STOP_CCSD_MASK       (0x400U)
N#define SDIF_CTRL_SEND_AUTO_STOP_CCSD_SHIFT      (10U)
N#define SDIF_CTRL_SEND_AUTO_STOP_CCSD(x)         (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_SEND_AUTO_STOP_CCSD_SHIFT)) & SDIF_CTRL_SEND_AUTO_STOP_CCSD_MASK)
N#define SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_MASK (0x800U)
N#define SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_SHIFT (11U)
N#define SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS(x) (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_SHIFT)) & SDIF_CTRL_CEATA_DEVICE_INTERRUPT_STATUS_MASK)
N#define SDIF_CTRL_CARD_VOLTAGE_A0_MASK           (0x10000U)
N#define SDIF_CTRL_CARD_VOLTAGE_A0_SHIFT          (16U)
N#define SDIF_CTRL_CARD_VOLTAGE_A0(x)             (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_CARD_VOLTAGE_A0_SHIFT)) & SDIF_CTRL_CARD_VOLTAGE_A0_MASK)
N#define SDIF_CTRL_CARD_VOLTAGE_A1_MASK           (0x20000U)
N#define SDIF_CTRL_CARD_VOLTAGE_A1_SHIFT          (17U)
N#define SDIF_CTRL_CARD_VOLTAGE_A1(x)             (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_CARD_VOLTAGE_A1_SHIFT)) & SDIF_CTRL_CARD_VOLTAGE_A1_MASK)
N#define SDIF_CTRL_CARD_VOLTAGE_A2_MASK           (0x40000U)
N#define SDIF_CTRL_CARD_VOLTAGE_A2_SHIFT          (18U)
N#define SDIF_CTRL_CARD_VOLTAGE_A2(x)             (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_CARD_VOLTAGE_A2_SHIFT)) & SDIF_CTRL_CARD_VOLTAGE_A2_MASK)
N#define SDIF_CTRL_USE_INTERNAL_DMAC_MASK         (0x2000000U)
N#define SDIF_CTRL_USE_INTERNAL_DMAC_SHIFT        (25U)
N#define SDIF_CTRL_USE_INTERNAL_DMAC(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_CTRL_USE_INTERNAL_DMAC_SHIFT)) & SDIF_CTRL_USE_INTERNAL_DMAC_MASK)
N
N/*! @name PWREN - Power Enable register */
N#define SDIF_PWREN_POWER_ENABLE_MASK             (0x1U)
N#define SDIF_PWREN_POWER_ENABLE_SHIFT            (0U)
N#define SDIF_PWREN_POWER_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << SDIF_PWREN_POWER_ENABLE_SHIFT)) & SDIF_PWREN_POWER_ENABLE_MASK)
N
N/*! @name CLKDIV - Clock Divider register */
N#define SDIF_CLKDIV_CLK_DIVIDER0_MASK            (0xFFU)
N#define SDIF_CLKDIV_CLK_DIVIDER0_SHIFT           (0U)
N#define SDIF_CLKDIV_CLK_DIVIDER0(x)              (((uint32_t)(((uint32_t)(x)) << SDIF_CLKDIV_CLK_DIVIDER0_SHIFT)) & SDIF_CLKDIV_CLK_DIVIDER0_MASK)
N
N/*! @name CLKENA - Clock Enable register */
N#define SDIF_CLKENA_CCLK_ENABLE_MASK             (0x1U)
N#define SDIF_CLKENA_CCLK_ENABLE_SHIFT            (0U)
N#define SDIF_CLKENA_CCLK_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << SDIF_CLKENA_CCLK_ENABLE_SHIFT)) & SDIF_CLKENA_CCLK_ENABLE_MASK)
N#define SDIF_CLKENA_CCLK_LOW_POWER_MASK          (0x10000U)
N#define SDIF_CLKENA_CCLK_LOW_POWER_SHIFT         (16U)
N#define SDIF_CLKENA_CCLK_LOW_POWER(x)            (((uint32_t)(((uint32_t)(x)) << SDIF_CLKENA_CCLK_LOW_POWER_SHIFT)) & SDIF_CLKENA_CCLK_LOW_POWER_MASK)
N
N/*! @name TMOUT - Time-out register */
N#define SDIF_TMOUT_RESPONSE_TIMEOUT_MASK         (0xFFU)
N#define SDIF_TMOUT_RESPONSE_TIMEOUT_SHIFT        (0U)
N#define SDIF_TMOUT_RESPONSE_TIMEOUT(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_TMOUT_RESPONSE_TIMEOUT_SHIFT)) & SDIF_TMOUT_RESPONSE_TIMEOUT_MASK)
N#define SDIF_TMOUT_DATA_TIMEOUT_MASK             (0xFFFFFF00U)
N#define SDIF_TMOUT_DATA_TIMEOUT_SHIFT            (8U)
N#define SDIF_TMOUT_DATA_TIMEOUT(x)               (((uint32_t)(((uint32_t)(x)) << SDIF_TMOUT_DATA_TIMEOUT_SHIFT)) & SDIF_TMOUT_DATA_TIMEOUT_MASK)
N
N/*! @name CTYPE - Card Type register */
N#define SDIF_CTYPE_CARD_WIDTH0_MASK              (0x1U)
N#define SDIF_CTYPE_CARD_WIDTH0_SHIFT             (0U)
N#define SDIF_CTYPE_CARD_WIDTH0(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_CTYPE_CARD_WIDTH0_SHIFT)) & SDIF_CTYPE_CARD_WIDTH0_MASK)
N#define SDIF_CTYPE_CARD_WIDTH1_MASK              (0x10000U)
N#define SDIF_CTYPE_CARD_WIDTH1_SHIFT             (16U)
N#define SDIF_CTYPE_CARD_WIDTH1(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_CTYPE_CARD_WIDTH1_SHIFT)) & SDIF_CTYPE_CARD_WIDTH1_MASK)
N
N/*! @name BLKSIZ - Block Size register */
N#define SDIF_BLKSIZ_BLOCK_SIZE_MASK              (0xFFFFU)
N#define SDIF_BLKSIZ_BLOCK_SIZE_SHIFT             (0U)
N#define SDIF_BLKSIZ_BLOCK_SIZE(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_BLKSIZ_BLOCK_SIZE_SHIFT)) & SDIF_BLKSIZ_BLOCK_SIZE_MASK)
N
N/*! @name BYTCNT - Byte Count register */
N#define SDIF_BYTCNT_BYTE_COUNT_MASK              (0xFFFFFFFFU)
N#define SDIF_BYTCNT_BYTE_COUNT_SHIFT             (0U)
N#define SDIF_BYTCNT_BYTE_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_BYTCNT_BYTE_COUNT_SHIFT)) & SDIF_BYTCNT_BYTE_COUNT_MASK)
N
N/*! @name INTMASK - Interrupt Mask register */
N#define SDIF_INTMASK_CDET_MASK                   (0x1U)
N#define SDIF_INTMASK_CDET_SHIFT                  (0U)
N#define SDIF_INTMASK_CDET(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_CDET_SHIFT)) & SDIF_INTMASK_CDET_MASK)
N#define SDIF_INTMASK_RE_MASK                     (0x2U)
N#define SDIF_INTMASK_RE_SHIFT                    (1U)
N#define SDIF_INTMASK_RE(x)                       (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_RE_SHIFT)) & SDIF_INTMASK_RE_MASK)
N#define SDIF_INTMASK_CDONE_MASK                  (0x4U)
N#define SDIF_INTMASK_CDONE_SHIFT                 (2U)
N#define SDIF_INTMASK_CDONE(x)                    (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_CDONE_SHIFT)) & SDIF_INTMASK_CDONE_MASK)
N#define SDIF_INTMASK_DTO_MASK                    (0x8U)
N#define SDIF_INTMASK_DTO_SHIFT                   (3U)
N#define SDIF_INTMASK_DTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_DTO_SHIFT)) & SDIF_INTMASK_DTO_MASK)
N#define SDIF_INTMASK_TXDR_MASK                   (0x10U)
N#define SDIF_INTMASK_TXDR_SHIFT                  (4U)
N#define SDIF_INTMASK_TXDR(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_TXDR_SHIFT)) & SDIF_INTMASK_TXDR_MASK)
N#define SDIF_INTMASK_RXDR_MASK                   (0x20U)
N#define SDIF_INTMASK_RXDR_SHIFT                  (5U)
N#define SDIF_INTMASK_RXDR(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_RXDR_SHIFT)) & SDIF_INTMASK_RXDR_MASK)
N#define SDIF_INTMASK_RCRC_MASK                   (0x40U)
N#define SDIF_INTMASK_RCRC_SHIFT                  (6U)
N#define SDIF_INTMASK_RCRC(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_RCRC_SHIFT)) & SDIF_INTMASK_RCRC_MASK)
N#define SDIF_INTMASK_DCRC_MASK                   (0x80U)
N#define SDIF_INTMASK_DCRC_SHIFT                  (7U)
N#define SDIF_INTMASK_DCRC(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_DCRC_SHIFT)) & SDIF_INTMASK_DCRC_MASK)
N#define SDIF_INTMASK_RTO_MASK                    (0x100U)
N#define SDIF_INTMASK_RTO_SHIFT                   (8U)
N#define SDIF_INTMASK_RTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_RTO_SHIFT)) & SDIF_INTMASK_RTO_MASK)
N#define SDIF_INTMASK_DRTO_MASK                   (0x200U)
N#define SDIF_INTMASK_DRTO_SHIFT                  (9U)
N#define SDIF_INTMASK_DRTO(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_DRTO_SHIFT)) & SDIF_INTMASK_DRTO_MASK)
N#define SDIF_INTMASK_HTO_MASK                    (0x400U)
N#define SDIF_INTMASK_HTO_SHIFT                   (10U)
N#define SDIF_INTMASK_HTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_HTO_SHIFT)) & SDIF_INTMASK_HTO_MASK)
N#define SDIF_INTMASK_FRUN_MASK                   (0x800U)
N#define SDIF_INTMASK_FRUN_SHIFT                  (11U)
N#define SDIF_INTMASK_FRUN(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_FRUN_SHIFT)) & SDIF_INTMASK_FRUN_MASK)
N#define SDIF_INTMASK_HLE_MASK                    (0x1000U)
N#define SDIF_INTMASK_HLE_SHIFT                   (12U)
N#define SDIF_INTMASK_HLE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_HLE_SHIFT)) & SDIF_INTMASK_HLE_MASK)
N#define SDIF_INTMASK_SBE_MASK                    (0x2000U)
N#define SDIF_INTMASK_SBE_SHIFT                   (13U)
N#define SDIF_INTMASK_SBE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_SBE_SHIFT)) & SDIF_INTMASK_SBE_MASK)
N#define SDIF_INTMASK_ACD_MASK                    (0x4000U)
N#define SDIF_INTMASK_ACD_SHIFT                   (14U)
N#define SDIF_INTMASK_ACD(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_ACD_SHIFT)) & SDIF_INTMASK_ACD_MASK)
N#define SDIF_INTMASK_EBE_MASK                    (0x8000U)
N#define SDIF_INTMASK_EBE_SHIFT                   (15U)
N#define SDIF_INTMASK_EBE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_EBE_SHIFT)) & SDIF_INTMASK_EBE_MASK)
N#define SDIF_INTMASK_SDIO_INT_MASK_MASK          (0x10000U)
N#define SDIF_INTMASK_SDIO_INT_MASK_SHIFT         (16U)
N#define SDIF_INTMASK_SDIO_INT_MASK(x)            (((uint32_t)(((uint32_t)(x)) << SDIF_INTMASK_SDIO_INT_MASK_SHIFT)) & SDIF_INTMASK_SDIO_INT_MASK_MASK)
N
N/*! @name CMDARG - Command Argument register */
N#define SDIF_CMDARG_CMD_ARG_MASK                 (0xFFFFFFFFU)
N#define SDIF_CMDARG_CMD_ARG_SHIFT                (0U)
N#define SDIF_CMDARG_CMD_ARG(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_CMDARG_CMD_ARG_SHIFT)) & SDIF_CMDARG_CMD_ARG_MASK)
N
N/*! @name CMD - Command register */
N#define SDIF_CMD_CMD_INDEX_MASK                  (0x3FU)
N#define SDIF_CMD_CMD_INDEX_SHIFT                 (0U)
N#define SDIF_CMD_CMD_INDEX(x)                    (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_CMD_INDEX_SHIFT)) & SDIF_CMD_CMD_INDEX_MASK)
N#define SDIF_CMD_RESPONSE_EXPECT_MASK            (0x40U)
N#define SDIF_CMD_RESPONSE_EXPECT_SHIFT           (6U)
N#define SDIF_CMD_RESPONSE_EXPECT(x)              (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_RESPONSE_EXPECT_SHIFT)) & SDIF_CMD_RESPONSE_EXPECT_MASK)
N#define SDIF_CMD_RESPONSE_LENGTH_MASK            (0x80U)
N#define SDIF_CMD_RESPONSE_LENGTH_SHIFT           (7U)
N#define SDIF_CMD_RESPONSE_LENGTH(x)              (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_RESPONSE_LENGTH_SHIFT)) & SDIF_CMD_RESPONSE_LENGTH_MASK)
N#define SDIF_CMD_CHECK_RESPONSE_CRC_MASK         (0x100U)
N#define SDIF_CMD_CHECK_RESPONSE_CRC_SHIFT        (8U)
N#define SDIF_CMD_CHECK_RESPONSE_CRC(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_CHECK_RESPONSE_CRC_SHIFT)) & SDIF_CMD_CHECK_RESPONSE_CRC_MASK)
N#define SDIF_CMD_DATA_EXPECTED_MASK              (0x200U)
N#define SDIF_CMD_DATA_EXPECTED_SHIFT             (9U)
N#define SDIF_CMD_DATA_EXPECTED(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_DATA_EXPECTED_SHIFT)) & SDIF_CMD_DATA_EXPECTED_MASK)
N#define SDIF_CMD_READ_WRITE_MASK                 (0x400U)
N#define SDIF_CMD_READ_WRITE_SHIFT                (10U)
N#define SDIF_CMD_READ_WRITE(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_READ_WRITE_SHIFT)) & SDIF_CMD_READ_WRITE_MASK)
N#define SDIF_CMD_TRANSFER_MODE_MASK              (0x800U)
N#define SDIF_CMD_TRANSFER_MODE_SHIFT             (11U)
N#define SDIF_CMD_TRANSFER_MODE(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_TRANSFER_MODE_SHIFT)) & SDIF_CMD_TRANSFER_MODE_MASK)
N#define SDIF_CMD_SEND_AUTO_STOP_MASK             (0x1000U)
N#define SDIF_CMD_SEND_AUTO_STOP_SHIFT            (12U)
N#define SDIF_CMD_SEND_AUTO_STOP(x)               (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_SEND_AUTO_STOP_SHIFT)) & SDIF_CMD_SEND_AUTO_STOP_MASK)
N#define SDIF_CMD_WAIT_PRVDATA_COMPLETE_MASK      (0x2000U)
N#define SDIF_CMD_WAIT_PRVDATA_COMPLETE_SHIFT     (13U)
N#define SDIF_CMD_WAIT_PRVDATA_COMPLETE(x)        (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_WAIT_PRVDATA_COMPLETE_SHIFT)) & SDIF_CMD_WAIT_PRVDATA_COMPLETE_MASK)
N#define SDIF_CMD_STOP_ABORT_CMD_MASK             (0x4000U)
N#define SDIF_CMD_STOP_ABORT_CMD_SHIFT            (14U)
N#define SDIF_CMD_STOP_ABORT_CMD(x)               (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_STOP_ABORT_CMD_SHIFT)) & SDIF_CMD_STOP_ABORT_CMD_MASK)
N#define SDIF_CMD_SEND_INITIALIZATION_MASK        (0x8000U)
N#define SDIF_CMD_SEND_INITIALIZATION_SHIFT       (15U)
N#define SDIF_CMD_SEND_INITIALIZATION(x)          (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_SEND_INITIALIZATION_SHIFT)) & SDIF_CMD_SEND_INITIALIZATION_MASK)
N#define SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_MASK (0x200000U)
N#define SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_SHIFT (21U)
N#define SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY(x)  (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_SHIFT)) & SDIF_CMD_UPDATE_CLOCK_REGISTERS_ONLY_MASK)
N#define SDIF_CMD_READ_CEATA_DEVICE_MASK          (0x400000U)
N#define SDIF_CMD_READ_CEATA_DEVICE_SHIFT         (22U)
N#define SDIF_CMD_READ_CEATA_DEVICE(x)            (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_READ_CEATA_DEVICE_SHIFT)) & SDIF_CMD_READ_CEATA_DEVICE_MASK)
N#define SDIF_CMD_CCS_EXPECTED_MASK               (0x800000U)
N#define SDIF_CMD_CCS_EXPECTED_SHIFT              (23U)
N#define SDIF_CMD_CCS_EXPECTED(x)                 (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_CCS_EXPECTED_SHIFT)) & SDIF_CMD_CCS_EXPECTED_MASK)
N#define SDIF_CMD_ENABLE_BOOT_MASK                (0x1000000U)
N#define SDIF_CMD_ENABLE_BOOT_SHIFT               (24U)
N#define SDIF_CMD_ENABLE_BOOT(x)                  (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_ENABLE_BOOT_SHIFT)) & SDIF_CMD_ENABLE_BOOT_MASK)
N#define SDIF_CMD_EXPECT_BOOT_ACK_MASK            (0x2000000U)
N#define SDIF_CMD_EXPECT_BOOT_ACK_SHIFT           (25U)
N#define SDIF_CMD_EXPECT_BOOT_ACK(x)              (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_EXPECT_BOOT_ACK_SHIFT)) & SDIF_CMD_EXPECT_BOOT_ACK_MASK)
N#define SDIF_CMD_DISABLE_BOOT_MASK               (0x4000000U)
N#define SDIF_CMD_DISABLE_BOOT_SHIFT              (26U)
N#define SDIF_CMD_DISABLE_BOOT(x)                 (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_DISABLE_BOOT_SHIFT)) & SDIF_CMD_DISABLE_BOOT_MASK)
N#define SDIF_CMD_BOOT_MODE_MASK                  (0x8000000U)
N#define SDIF_CMD_BOOT_MODE_SHIFT                 (27U)
N#define SDIF_CMD_BOOT_MODE(x)                    (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_BOOT_MODE_SHIFT)) & SDIF_CMD_BOOT_MODE_MASK)
N#define SDIF_CMD_VOLT_SWITCH_MASK                (0x10000000U)
N#define SDIF_CMD_VOLT_SWITCH_SHIFT               (28U)
N#define SDIF_CMD_VOLT_SWITCH(x)                  (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_VOLT_SWITCH_SHIFT)) & SDIF_CMD_VOLT_SWITCH_MASK)
N#define SDIF_CMD_USE_HOLD_REG_MASK               (0x20000000U)
N#define SDIF_CMD_USE_HOLD_REG_SHIFT              (29U)
N#define SDIF_CMD_USE_HOLD_REG(x)                 (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_USE_HOLD_REG_SHIFT)) & SDIF_CMD_USE_HOLD_REG_MASK)
N#define SDIF_CMD_START_CMD_MASK                  (0x80000000U)
N#define SDIF_CMD_START_CMD_SHIFT                 (31U)
N#define SDIF_CMD_START_CMD(x)                    (((uint32_t)(((uint32_t)(x)) << SDIF_CMD_START_CMD_SHIFT)) & SDIF_CMD_START_CMD_MASK)
N
N/*! @name RESP - Response register */
N#define SDIF_RESP_RESPONSE_MASK                  (0xFFFFFFFFU)
N#define SDIF_RESP_RESPONSE_SHIFT                 (0U)
N#define SDIF_RESP_RESPONSE(x)                    (((uint32_t)(((uint32_t)(x)) << SDIF_RESP_RESPONSE_SHIFT)) & SDIF_RESP_RESPONSE_MASK)
N
N/* The count of SDIF_RESP */
N#define SDIF_RESP_COUNT                          (4U)
N
N/*! @name MINTSTS - Masked Interrupt Status register */
N#define SDIF_MINTSTS_CDET_MASK                   (0x1U)
N#define SDIF_MINTSTS_CDET_SHIFT                  (0U)
N#define SDIF_MINTSTS_CDET(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_CDET_SHIFT)) & SDIF_MINTSTS_CDET_MASK)
N#define SDIF_MINTSTS_RE_MASK                     (0x2U)
N#define SDIF_MINTSTS_RE_SHIFT                    (1U)
N#define SDIF_MINTSTS_RE(x)                       (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_RE_SHIFT)) & SDIF_MINTSTS_RE_MASK)
N#define SDIF_MINTSTS_CDONE_MASK                  (0x4U)
N#define SDIF_MINTSTS_CDONE_SHIFT                 (2U)
N#define SDIF_MINTSTS_CDONE(x)                    (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_CDONE_SHIFT)) & SDIF_MINTSTS_CDONE_MASK)
N#define SDIF_MINTSTS_DTO_MASK                    (0x8U)
N#define SDIF_MINTSTS_DTO_SHIFT                   (3U)
N#define SDIF_MINTSTS_DTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_DTO_SHIFT)) & SDIF_MINTSTS_DTO_MASK)
N#define SDIF_MINTSTS_TXDR_MASK                   (0x10U)
N#define SDIF_MINTSTS_TXDR_SHIFT                  (4U)
N#define SDIF_MINTSTS_TXDR(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_TXDR_SHIFT)) & SDIF_MINTSTS_TXDR_MASK)
N#define SDIF_MINTSTS_RXDR_MASK                   (0x20U)
N#define SDIF_MINTSTS_RXDR_SHIFT                  (5U)
N#define SDIF_MINTSTS_RXDR(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_RXDR_SHIFT)) & SDIF_MINTSTS_RXDR_MASK)
N#define SDIF_MINTSTS_RCRC_MASK                   (0x40U)
N#define SDIF_MINTSTS_RCRC_SHIFT                  (6U)
N#define SDIF_MINTSTS_RCRC(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_RCRC_SHIFT)) & SDIF_MINTSTS_RCRC_MASK)
N#define SDIF_MINTSTS_DCRC_MASK                   (0x80U)
N#define SDIF_MINTSTS_DCRC_SHIFT                  (7U)
N#define SDIF_MINTSTS_DCRC(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_DCRC_SHIFT)) & SDIF_MINTSTS_DCRC_MASK)
N#define SDIF_MINTSTS_RTO_MASK                    (0x100U)
N#define SDIF_MINTSTS_RTO_SHIFT                   (8U)
N#define SDIF_MINTSTS_RTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_RTO_SHIFT)) & SDIF_MINTSTS_RTO_MASK)
N#define SDIF_MINTSTS_DRTO_MASK                   (0x200U)
N#define SDIF_MINTSTS_DRTO_SHIFT                  (9U)
N#define SDIF_MINTSTS_DRTO(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_DRTO_SHIFT)) & SDIF_MINTSTS_DRTO_MASK)
N#define SDIF_MINTSTS_HTO_MASK                    (0x400U)
N#define SDIF_MINTSTS_HTO_SHIFT                   (10U)
N#define SDIF_MINTSTS_HTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_HTO_SHIFT)) & SDIF_MINTSTS_HTO_MASK)
N#define SDIF_MINTSTS_FRUN_MASK                   (0x800U)
N#define SDIF_MINTSTS_FRUN_SHIFT                  (11U)
N#define SDIF_MINTSTS_FRUN(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_FRUN_SHIFT)) & SDIF_MINTSTS_FRUN_MASK)
N#define SDIF_MINTSTS_HLE_MASK                    (0x1000U)
N#define SDIF_MINTSTS_HLE_SHIFT                   (12U)
N#define SDIF_MINTSTS_HLE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_HLE_SHIFT)) & SDIF_MINTSTS_HLE_MASK)
N#define SDIF_MINTSTS_SBE_MASK                    (0x2000U)
N#define SDIF_MINTSTS_SBE_SHIFT                   (13U)
N#define SDIF_MINTSTS_SBE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_SBE_SHIFT)) & SDIF_MINTSTS_SBE_MASK)
N#define SDIF_MINTSTS_ACD_MASK                    (0x4000U)
N#define SDIF_MINTSTS_ACD_SHIFT                   (14U)
N#define SDIF_MINTSTS_ACD(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_ACD_SHIFT)) & SDIF_MINTSTS_ACD_MASK)
N#define SDIF_MINTSTS_EBE_MASK                    (0x8000U)
N#define SDIF_MINTSTS_EBE_SHIFT                   (15U)
N#define SDIF_MINTSTS_EBE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_EBE_SHIFT)) & SDIF_MINTSTS_EBE_MASK)
N#define SDIF_MINTSTS_SDIO_INTERRUPT_MASK         (0x10000U)
N#define SDIF_MINTSTS_SDIO_INTERRUPT_SHIFT        (16U)
N#define SDIF_MINTSTS_SDIO_INTERRUPT(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_MINTSTS_SDIO_INTERRUPT_SHIFT)) & SDIF_MINTSTS_SDIO_INTERRUPT_MASK)
N
N/*! @name RINTSTS - Raw Interrupt Status register */
N#define SDIF_RINTSTS_CDET_MASK                   (0x1U)
N#define SDIF_RINTSTS_CDET_SHIFT                  (0U)
N#define SDIF_RINTSTS_CDET(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_CDET_SHIFT)) & SDIF_RINTSTS_CDET_MASK)
N#define SDIF_RINTSTS_RE_MASK                     (0x2U)
N#define SDIF_RINTSTS_RE_SHIFT                    (1U)
N#define SDIF_RINTSTS_RE(x)                       (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_RE_SHIFT)) & SDIF_RINTSTS_RE_MASK)
N#define SDIF_RINTSTS_CDONE_MASK                  (0x4U)
N#define SDIF_RINTSTS_CDONE_SHIFT                 (2U)
N#define SDIF_RINTSTS_CDONE(x)                    (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_CDONE_SHIFT)) & SDIF_RINTSTS_CDONE_MASK)
N#define SDIF_RINTSTS_DTO_MASK                    (0x8U)
N#define SDIF_RINTSTS_DTO_SHIFT                   (3U)
N#define SDIF_RINTSTS_DTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_DTO_SHIFT)) & SDIF_RINTSTS_DTO_MASK)
N#define SDIF_RINTSTS_TXDR_MASK                   (0x10U)
N#define SDIF_RINTSTS_TXDR_SHIFT                  (4U)
N#define SDIF_RINTSTS_TXDR(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_TXDR_SHIFT)) & SDIF_RINTSTS_TXDR_MASK)
N#define SDIF_RINTSTS_RXDR_MASK                   (0x20U)
N#define SDIF_RINTSTS_RXDR_SHIFT                  (5U)
N#define SDIF_RINTSTS_RXDR(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_RXDR_SHIFT)) & SDIF_RINTSTS_RXDR_MASK)
N#define SDIF_RINTSTS_RCRC_MASK                   (0x40U)
N#define SDIF_RINTSTS_RCRC_SHIFT                  (6U)
N#define SDIF_RINTSTS_RCRC(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_RCRC_SHIFT)) & SDIF_RINTSTS_RCRC_MASK)
N#define SDIF_RINTSTS_DCRC_MASK                   (0x80U)
N#define SDIF_RINTSTS_DCRC_SHIFT                  (7U)
N#define SDIF_RINTSTS_DCRC(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_DCRC_SHIFT)) & SDIF_RINTSTS_DCRC_MASK)
N#define SDIF_RINTSTS_RTO_BAR_MASK                (0x100U)
N#define SDIF_RINTSTS_RTO_BAR_SHIFT               (8U)
N#define SDIF_RINTSTS_RTO_BAR(x)                  (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_RTO_BAR_SHIFT)) & SDIF_RINTSTS_RTO_BAR_MASK)
N#define SDIF_RINTSTS_DRTO_BDS_MASK               (0x200U)
N#define SDIF_RINTSTS_DRTO_BDS_SHIFT              (9U)
N#define SDIF_RINTSTS_DRTO_BDS(x)                 (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_DRTO_BDS_SHIFT)) & SDIF_RINTSTS_DRTO_BDS_MASK)
N#define SDIF_RINTSTS_HTO_MASK                    (0x400U)
N#define SDIF_RINTSTS_HTO_SHIFT                   (10U)
N#define SDIF_RINTSTS_HTO(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_HTO_SHIFT)) & SDIF_RINTSTS_HTO_MASK)
N#define SDIF_RINTSTS_FRUN_MASK                   (0x800U)
N#define SDIF_RINTSTS_FRUN_SHIFT                  (11U)
N#define SDIF_RINTSTS_FRUN(x)                     (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_FRUN_SHIFT)) & SDIF_RINTSTS_FRUN_MASK)
N#define SDIF_RINTSTS_HLE_MASK                    (0x1000U)
N#define SDIF_RINTSTS_HLE_SHIFT                   (12U)
N#define SDIF_RINTSTS_HLE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_HLE_SHIFT)) & SDIF_RINTSTS_HLE_MASK)
N#define SDIF_RINTSTS_SBE_MASK                    (0x2000U)
N#define SDIF_RINTSTS_SBE_SHIFT                   (13U)
N#define SDIF_RINTSTS_SBE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_SBE_SHIFT)) & SDIF_RINTSTS_SBE_MASK)
N#define SDIF_RINTSTS_ACD_MASK                    (0x4000U)
N#define SDIF_RINTSTS_ACD_SHIFT                   (14U)
N#define SDIF_RINTSTS_ACD(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_ACD_SHIFT)) & SDIF_RINTSTS_ACD_MASK)
N#define SDIF_RINTSTS_EBE_MASK                    (0x8000U)
N#define SDIF_RINTSTS_EBE_SHIFT                   (15U)
N#define SDIF_RINTSTS_EBE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_EBE_SHIFT)) & SDIF_RINTSTS_EBE_MASK)
N#define SDIF_RINTSTS_SDIO_INTERRUPT_MASK         (0x10000U)
N#define SDIF_RINTSTS_SDIO_INTERRUPT_SHIFT        (16U)
N#define SDIF_RINTSTS_SDIO_INTERRUPT(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_RINTSTS_SDIO_INTERRUPT_SHIFT)) & SDIF_RINTSTS_SDIO_INTERRUPT_MASK)
N
N/*! @name STATUS - Status register */
N#define SDIF_STATUS_FIFO_RX_WATERMARK_MASK       (0x1U)
N#define SDIF_STATUS_FIFO_RX_WATERMARK_SHIFT      (0U)
N#define SDIF_STATUS_FIFO_RX_WATERMARK(x)         (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_FIFO_RX_WATERMARK_SHIFT)) & SDIF_STATUS_FIFO_RX_WATERMARK_MASK)
N#define SDIF_STATUS_FIFO_TX_WATERMARK_MASK       (0x2U)
N#define SDIF_STATUS_FIFO_TX_WATERMARK_SHIFT      (1U)
N#define SDIF_STATUS_FIFO_TX_WATERMARK(x)         (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_FIFO_TX_WATERMARK_SHIFT)) & SDIF_STATUS_FIFO_TX_WATERMARK_MASK)
N#define SDIF_STATUS_FIFO_EMPTY_MASK              (0x4U)
N#define SDIF_STATUS_FIFO_EMPTY_SHIFT             (2U)
N#define SDIF_STATUS_FIFO_EMPTY(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_FIFO_EMPTY_SHIFT)) & SDIF_STATUS_FIFO_EMPTY_MASK)
N#define SDIF_STATUS_FIFO_FULL_MASK               (0x8U)
N#define SDIF_STATUS_FIFO_FULL_SHIFT              (3U)
N#define SDIF_STATUS_FIFO_FULL(x)                 (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_FIFO_FULL_SHIFT)) & SDIF_STATUS_FIFO_FULL_MASK)
N#define SDIF_STATUS_CMDFSMSTATES_MASK            (0xF0U)
N#define SDIF_STATUS_CMDFSMSTATES_SHIFT           (4U)
N#define SDIF_STATUS_CMDFSMSTATES(x)              (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_CMDFSMSTATES_SHIFT)) & SDIF_STATUS_CMDFSMSTATES_MASK)
N#define SDIF_STATUS_DATA_3_STATUS_MASK           (0x100U)
N#define SDIF_STATUS_DATA_3_STATUS_SHIFT          (8U)
N#define SDIF_STATUS_DATA_3_STATUS(x)             (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_DATA_3_STATUS_SHIFT)) & SDIF_STATUS_DATA_3_STATUS_MASK)
N#define SDIF_STATUS_DATA_BUSY_MASK               (0x200U)
N#define SDIF_STATUS_DATA_BUSY_SHIFT              (9U)
N#define SDIF_STATUS_DATA_BUSY(x)                 (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_DATA_BUSY_SHIFT)) & SDIF_STATUS_DATA_BUSY_MASK)
N#define SDIF_STATUS_DATA_STATE_MC_BUSY_MASK      (0x400U)
N#define SDIF_STATUS_DATA_STATE_MC_BUSY_SHIFT     (10U)
N#define SDIF_STATUS_DATA_STATE_MC_BUSY(x)        (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_DATA_STATE_MC_BUSY_SHIFT)) & SDIF_STATUS_DATA_STATE_MC_BUSY_MASK)
N#define SDIF_STATUS_RESPONSE_INDEX_MASK          (0x1F800U)
N#define SDIF_STATUS_RESPONSE_INDEX_SHIFT         (11U)
N#define SDIF_STATUS_RESPONSE_INDEX(x)            (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_RESPONSE_INDEX_SHIFT)) & SDIF_STATUS_RESPONSE_INDEX_MASK)
N#define SDIF_STATUS_FIFO_COUNT_MASK              (0x3FFE0000U)
N#define SDIF_STATUS_FIFO_COUNT_SHIFT             (17U)
N#define SDIF_STATUS_FIFO_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_FIFO_COUNT_SHIFT)) & SDIF_STATUS_FIFO_COUNT_MASK)
N#define SDIF_STATUS_DMA_ACK_MASK                 (0x40000000U)
N#define SDIF_STATUS_DMA_ACK_SHIFT                (30U)
N#define SDIF_STATUS_DMA_ACK(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_DMA_ACK_SHIFT)) & SDIF_STATUS_DMA_ACK_MASK)
N#define SDIF_STATUS_DMA_REQ_MASK                 (0x80000000U)
N#define SDIF_STATUS_DMA_REQ_SHIFT                (31U)
N#define SDIF_STATUS_DMA_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_STATUS_DMA_REQ_SHIFT)) & SDIF_STATUS_DMA_REQ_MASK)
N
N/*! @name FIFOTH - FIFO Threshold Watermark register */
N#define SDIF_FIFOTH_TX_WMARK_MASK                (0xFFFU)
N#define SDIF_FIFOTH_TX_WMARK_SHIFT               (0U)
N#define SDIF_FIFOTH_TX_WMARK(x)                  (((uint32_t)(((uint32_t)(x)) << SDIF_FIFOTH_TX_WMARK_SHIFT)) & SDIF_FIFOTH_TX_WMARK_MASK)
N#define SDIF_FIFOTH_RX_WMARK_MASK                (0xFFF0000U)
N#define SDIF_FIFOTH_RX_WMARK_SHIFT               (16U)
N#define SDIF_FIFOTH_RX_WMARK(x)                  (((uint32_t)(((uint32_t)(x)) << SDIF_FIFOTH_RX_WMARK_SHIFT)) & SDIF_FIFOTH_RX_WMARK_MASK)
N#define SDIF_FIFOTH_DMA_MTS_MASK                 (0x70000000U)
N#define SDIF_FIFOTH_DMA_MTS_SHIFT                (28U)
N#define SDIF_FIFOTH_DMA_MTS(x)                   (((uint32_t)(((uint32_t)(x)) << SDIF_FIFOTH_DMA_MTS_SHIFT)) & SDIF_FIFOTH_DMA_MTS_MASK)
N
N/*! @name CDETECT - Card Detect register */
N#define SDIF_CDETECT_CARD_DETECT_MASK            (0x1U)
N#define SDIF_CDETECT_CARD_DETECT_SHIFT           (0U)
N#define SDIF_CDETECT_CARD_DETECT(x)              (((uint32_t)(((uint32_t)(x)) << SDIF_CDETECT_CARD_DETECT_SHIFT)) & SDIF_CDETECT_CARD_DETECT_MASK)
N
N/*! @name WRTPRT - Write Protect register */
N#define SDIF_WRTPRT_WRITE_PROTECT_MASK           (0x1U)
N#define SDIF_WRTPRT_WRITE_PROTECT_SHIFT          (0U)
N#define SDIF_WRTPRT_WRITE_PROTECT(x)             (((uint32_t)(((uint32_t)(x)) << SDIF_WRTPRT_WRITE_PROTECT_SHIFT)) & SDIF_WRTPRT_WRITE_PROTECT_MASK)
N
N/*! @name TCBCNT - Transferred CIU Card Byte Count register */
N#define SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_MASK   (0xFFFFFFFFU)
N#define SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_SHIFT  (0U)
N#define SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT(x)     (((uint32_t)(((uint32_t)(x)) << SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_SHIFT)) & SDIF_TCBCNT_TRANS_CARD_BYTE_COUNT_MASK)
N
N/*! @name TBBCNT - Transferred Host to BIU-FIFO Byte Count register */
N#define SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_MASK   (0xFFFFFFFFU)
N#define SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_SHIFT  (0U)
N#define SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT(x)     (((uint32_t)(((uint32_t)(x)) << SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_SHIFT)) & SDIF_TBBCNT_TRANS_FIFO_BYTE_COUNT_MASK)
N
N/*! @name DEBNCE - Debounce Count register */
N#define SDIF_DEBNCE_DEBOUNCE_COUNT_MASK          (0xFFFFFFU)
N#define SDIF_DEBNCE_DEBOUNCE_COUNT_SHIFT         (0U)
N#define SDIF_DEBNCE_DEBOUNCE_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << SDIF_DEBNCE_DEBOUNCE_COUNT_SHIFT)) & SDIF_DEBNCE_DEBOUNCE_COUNT_MASK)
N
N/*! @name RST_N - Hardware Reset */
N#define SDIF_RST_N_CARD_RESET_MASK               (0x1U)
N#define SDIF_RST_N_CARD_RESET_SHIFT              (0U)
N#define SDIF_RST_N_CARD_RESET(x)                 (((uint32_t)(((uint32_t)(x)) << SDIF_RST_N_CARD_RESET_SHIFT)) & SDIF_RST_N_CARD_RESET_MASK)
N
N/*! @name BMOD - Bus Mode register */
N#define SDIF_BMOD_SWR_MASK                       (0x1U)
N#define SDIF_BMOD_SWR_SHIFT                      (0U)
N#define SDIF_BMOD_SWR(x)                         (((uint32_t)(((uint32_t)(x)) << SDIF_BMOD_SWR_SHIFT)) & SDIF_BMOD_SWR_MASK)
N#define SDIF_BMOD_FB_MASK                        (0x2U)
N#define SDIF_BMOD_FB_SHIFT                       (1U)
N#define SDIF_BMOD_FB(x)                          (((uint32_t)(((uint32_t)(x)) << SDIF_BMOD_FB_SHIFT)) & SDIF_BMOD_FB_MASK)
N#define SDIF_BMOD_DSL_MASK                       (0x7CU)
N#define SDIF_BMOD_DSL_SHIFT                      (2U)
N#define SDIF_BMOD_DSL(x)                         (((uint32_t)(((uint32_t)(x)) << SDIF_BMOD_DSL_SHIFT)) & SDIF_BMOD_DSL_MASK)
N#define SDIF_BMOD_DE_MASK                        (0x80U)
N#define SDIF_BMOD_DE_SHIFT                       (7U)
N#define SDIF_BMOD_DE(x)                          (((uint32_t)(((uint32_t)(x)) << SDIF_BMOD_DE_SHIFT)) & SDIF_BMOD_DE_MASK)
N#define SDIF_BMOD_PBL_MASK                       (0x700U)
N#define SDIF_BMOD_PBL_SHIFT                      (8U)
N#define SDIF_BMOD_PBL(x)                         (((uint32_t)(((uint32_t)(x)) << SDIF_BMOD_PBL_SHIFT)) & SDIF_BMOD_PBL_MASK)
N
N/*! @name PLDMND - Poll Demand register */
N#define SDIF_PLDMND_PD_MASK                      (0xFFFFFFFFU)
N#define SDIF_PLDMND_PD_SHIFT                     (0U)
N#define SDIF_PLDMND_PD(x)                        (((uint32_t)(((uint32_t)(x)) << SDIF_PLDMND_PD_SHIFT)) & SDIF_PLDMND_PD_MASK)
N
N/*! @name DBADDR - Descriptor List Base Address register */
N#define SDIF_DBADDR_SDL_MASK                     (0xFFFFFFFFU)
N#define SDIF_DBADDR_SDL_SHIFT                    (0U)
N#define SDIF_DBADDR_SDL(x)                       (((uint32_t)(((uint32_t)(x)) << SDIF_DBADDR_SDL_SHIFT)) & SDIF_DBADDR_SDL_MASK)
N
N/*! @name IDSTS - Internal DMAC Status register */
N#define SDIF_IDSTS_TI_MASK                       (0x1U)
N#define SDIF_IDSTS_TI_SHIFT                      (0U)
N#define SDIF_IDSTS_TI(x)                         (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_TI_SHIFT)) & SDIF_IDSTS_TI_MASK)
N#define SDIF_IDSTS_RI_MASK                       (0x2U)
N#define SDIF_IDSTS_RI_SHIFT                      (1U)
N#define SDIF_IDSTS_RI(x)                         (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_RI_SHIFT)) & SDIF_IDSTS_RI_MASK)
N#define SDIF_IDSTS_FBE_MASK                      (0x4U)
N#define SDIF_IDSTS_FBE_SHIFT                     (2U)
N#define SDIF_IDSTS_FBE(x)                        (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_FBE_SHIFT)) & SDIF_IDSTS_FBE_MASK)
N#define SDIF_IDSTS_DU_MASK                       (0x10U)
N#define SDIF_IDSTS_DU_SHIFT                      (4U)
N#define SDIF_IDSTS_DU(x)                         (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_DU_SHIFT)) & SDIF_IDSTS_DU_MASK)
N#define SDIF_IDSTS_CES_MASK                      (0x20U)
N#define SDIF_IDSTS_CES_SHIFT                     (5U)
N#define SDIF_IDSTS_CES(x)                        (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_CES_SHIFT)) & SDIF_IDSTS_CES_MASK)
N#define SDIF_IDSTS_NIS_MASK                      (0x100U)
N#define SDIF_IDSTS_NIS_SHIFT                     (8U)
N#define SDIF_IDSTS_NIS(x)                        (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_NIS_SHIFT)) & SDIF_IDSTS_NIS_MASK)
N#define SDIF_IDSTS_AIS_MASK                      (0x200U)
N#define SDIF_IDSTS_AIS_SHIFT                     (9U)
N#define SDIF_IDSTS_AIS(x)                        (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_AIS_SHIFT)) & SDIF_IDSTS_AIS_MASK)
N#define SDIF_IDSTS_EB_MASK                       (0x1C00U)
N#define SDIF_IDSTS_EB_SHIFT                      (10U)
N#define SDIF_IDSTS_EB(x)                         (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_EB_SHIFT)) & SDIF_IDSTS_EB_MASK)
N#define SDIF_IDSTS_FSM_MASK                      (0x1E000U)
N#define SDIF_IDSTS_FSM_SHIFT                     (13U)
N#define SDIF_IDSTS_FSM(x)                        (((uint32_t)(((uint32_t)(x)) << SDIF_IDSTS_FSM_SHIFT)) & SDIF_IDSTS_FSM_MASK)
N
N/*! @name IDINTEN - Internal DMAC Interrupt Enable register */
N#define SDIF_IDINTEN_TI_MASK                     (0x1U)
N#define SDIF_IDINTEN_TI_SHIFT                    (0U)
N#define SDIF_IDINTEN_TI(x)                       (((uint32_t)(((uint32_t)(x)) << SDIF_IDINTEN_TI_SHIFT)) & SDIF_IDINTEN_TI_MASK)
N#define SDIF_IDINTEN_RI_MASK                     (0x2U)
N#define SDIF_IDINTEN_RI_SHIFT                    (1U)
N#define SDIF_IDINTEN_RI(x)                       (((uint32_t)(((uint32_t)(x)) << SDIF_IDINTEN_RI_SHIFT)) & SDIF_IDINTEN_RI_MASK)
N#define SDIF_IDINTEN_FBE_MASK                    (0x4U)
N#define SDIF_IDINTEN_FBE_SHIFT                   (2U)
N#define SDIF_IDINTEN_FBE(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_IDINTEN_FBE_SHIFT)) & SDIF_IDINTEN_FBE_MASK)
N#define SDIF_IDINTEN_DU_MASK                     (0x10U)
N#define SDIF_IDINTEN_DU_SHIFT                    (4U)
N#define SDIF_IDINTEN_DU(x)                       (((uint32_t)(((uint32_t)(x)) << SDIF_IDINTEN_DU_SHIFT)) & SDIF_IDINTEN_DU_MASK)
N#define SDIF_IDINTEN_CES_MASK                    (0x20U)
N#define SDIF_IDINTEN_CES_SHIFT                   (5U)
N#define SDIF_IDINTEN_CES(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_IDINTEN_CES_SHIFT)) & SDIF_IDINTEN_CES_MASK)
N#define SDIF_IDINTEN_NIS_MASK                    (0x100U)
N#define SDIF_IDINTEN_NIS_SHIFT                   (8U)
N#define SDIF_IDINTEN_NIS(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_IDINTEN_NIS_SHIFT)) & SDIF_IDINTEN_NIS_MASK)
N#define SDIF_IDINTEN_AIS_MASK                    (0x200U)
N#define SDIF_IDINTEN_AIS_SHIFT                   (9U)
N#define SDIF_IDINTEN_AIS(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_IDINTEN_AIS_SHIFT)) & SDIF_IDINTEN_AIS_MASK)
N
N/*! @name DSCADDR - Current Host Descriptor Address register */
N#define SDIF_DSCADDR_HDA_MASK                    (0xFFFFFFFFU)
N#define SDIF_DSCADDR_HDA_SHIFT                   (0U)
N#define SDIF_DSCADDR_HDA(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_DSCADDR_HDA_SHIFT)) & SDIF_DSCADDR_HDA_MASK)
N
N/*! @name BUFADDR - Current Buffer Descriptor Address register */
N#define SDIF_BUFADDR_HBA_MASK                    (0xFFFFFFFFU)
N#define SDIF_BUFADDR_HBA_SHIFT                   (0U)
N#define SDIF_BUFADDR_HBA(x)                      (((uint32_t)(((uint32_t)(x)) << SDIF_BUFADDR_HBA_SHIFT)) & SDIF_BUFADDR_HBA_MASK)
N
N/*! @name CARDTHRCTL - Card Threshold Control */
N#define SDIF_CARDTHRCTL_CARDRDTHREN_MASK         (0x1U)
N#define SDIF_CARDTHRCTL_CARDRDTHREN_SHIFT        (0U)
N#define SDIF_CARDTHRCTL_CARDRDTHREN(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_CARDTHRCTL_CARDRDTHREN_SHIFT)) & SDIF_CARDTHRCTL_CARDRDTHREN_MASK)
N#define SDIF_CARDTHRCTL_BSYCLRINTEN_MASK         (0x2U)
N#define SDIF_CARDTHRCTL_BSYCLRINTEN_SHIFT        (1U)
N#define SDIF_CARDTHRCTL_BSYCLRINTEN(x)           (((uint32_t)(((uint32_t)(x)) << SDIF_CARDTHRCTL_BSYCLRINTEN_SHIFT)) & SDIF_CARDTHRCTL_BSYCLRINTEN_MASK)
N#define SDIF_CARDTHRCTL_CARDTHRESHOLD_MASK       (0xFF0000U)
N#define SDIF_CARDTHRCTL_CARDTHRESHOLD_SHIFT      (16U)
N#define SDIF_CARDTHRCTL_CARDTHRESHOLD(x)         (((uint32_t)(((uint32_t)(x)) << SDIF_CARDTHRCTL_CARDTHRESHOLD_SHIFT)) & SDIF_CARDTHRCTL_CARDTHRESHOLD_MASK)
N
N/*! @name BACKENDPWR - Power control */
N#define SDIF_BACKENDPWR_BACKENDPWR_MASK          (0x1U)
N#define SDIF_BACKENDPWR_BACKENDPWR_SHIFT         (0U)
N#define SDIF_BACKENDPWR_BACKENDPWR(x)            (((uint32_t)(((uint32_t)(x)) << SDIF_BACKENDPWR_BACKENDPWR_SHIFT)) & SDIF_BACKENDPWR_BACKENDPWR_MASK)
N
N/*! @name FIFO - SDIF FIFO */
N#define SDIF_FIFO_DATA_MASK                      (0xFFFFFFFFU)
N#define SDIF_FIFO_DATA_SHIFT                     (0U)
N#define SDIF_FIFO_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << SDIF_FIFO_DATA_SHIFT)) & SDIF_FIFO_DATA_MASK)
N
N/* The count of SDIF_FIFO */
N#define SDIF_FIFO_COUNT                          (64U)
N
N
N/*!
N * @}
N */ /* end of group SDIF_Register_Masks */
N
N
N/* SDIF - Peripheral instance base addresses */
N/** Peripheral SDIF base address */
N#define SDIF_BASE                                (0x4009B000u)
N/** Peripheral SDIF base pointer */
N#define SDIF                                     ((SDIF_Type *)SDIF_BASE)
N/** Array initializer of SDIF peripheral base addresses */
N#define SDIF_BASE_ADDRS                          { SDIF_BASE }
N/** Array initializer of SDIF peripheral base pointers */
N#define SDIF_BASE_PTRS                           { SDIF }
N/** Interrupt vectors for the SDIF peripheral type */
N#define SDIF_IRQS                                { SDIO_IRQn }
N
N/*!
N * @}
N */ /* end of group SDIF_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SMARTCARD Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMARTCARD_Peripheral_Access_Layer SMARTCARD Peripheral Access Layer
N * @{
N */
N
N/** SMARTCARD - Register Layout Typedef */
Ntypedef struct {
N  union {                                          /* offset: 0x0 */
N    __IO uint32_t DLL;                               /**< Divisor Latch LSB, offset: 0x0 */
X    volatile uint32_t DLL;                                
N    __I  uint32_t RBR;                               /**< Receiver Buffer Register, offset: 0x0 */
X    volatile const  uint32_t RBR;                                
N    __O  uint32_t THR;                               /**< Transmit Holding Register, offset: 0x0 */
X    volatile  uint32_t THR;                                
N  };
N  union {                                          /* offset: 0x4 */
N    __IO uint32_t DLM;                               /**< Divisor Latch MSB, offset: 0x4 */
X    volatile uint32_t DLM;                                
N    __IO uint32_t IER;                               /**< Interrupt Enable Register, offset: 0x4 */
X    volatile uint32_t IER;                                
N  };
N  union {                                          /* offset: 0x8 */
N    __O  uint32_t FCR;                               /**< FIFO Control Register, offset: 0x8 */
X    volatile  uint32_t FCR;                                
N    __I  uint32_t IIR;                               /**< Interrupt ID Register, offset: 0x8 */
X    volatile const  uint32_t IIR;                                
N  };
N  __IO uint32_t LCR;                               /**< Line Control Register, offset: 0xC */
X  volatile uint32_t LCR;                                
N       uint8_t RESERVED_0[4];
N  __I  uint32_t LSR;                               /**< Line Status Register, offset: 0x14 */
X  volatile const  uint32_t LSR;                                
N       uint8_t RESERVED_1[4];
N  __IO uint32_t SCR;                               /**< Scratch Pad Register, offset: 0x1C */
X  volatile uint32_t SCR;                                
N       uint8_t RESERVED_2[12];
N  __IO uint32_t OSR;                               /**< Oversampling register, offset: 0x2C */
X  volatile uint32_t OSR;                                
N       uint8_t RESERVED_3[24];
N  __IO uint32_t SCICTRL;                           /**< Smart Card Interface control register, offset: 0x48 */
X  volatile uint32_t SCICTRL;                            
N} SMARTCARD_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SMARTCARD Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMARTCARD_Register_Masks SMARTCARD Register Masks
N * @{
N */
N
N/*! @name DLL - Divisor Latch LSB */
N#define SMARTCARD_DLL_DLLSB_MASK                 (0xFFU)
N#define SMARTCARD_DLL_DLLSB_SHIFT                (0U)
N#define SMARTCARD_DLL_DLLSB(x)                   (((uint32_t)(((uint32_t)(x)) << SMARTCARD_DLL_DLLSB_SHIFT)) & SMARTCARD_DLL_DLLSB_MASK)
N
N/*! @name RBR - Receiver Buffer Register */
N#define SMARTCARD_RBR_RBR_MASK                   (0xFFU)
N#define SMARTCARD_RBR_RBR_SHIFT                  (0U)
N#define SMARTCARD_RBR_RBR(x)                     (((uint32_t)(((uint32_t)(x)) << SMARTCARD_RBR_RBR_SHIFT)) & SMARTCARD_RBR_RBR_MASK)
N
N/*! @name THR - Transmit Holding Register */
N#define SMARTCARD_THR_THR_MASK                   (0xFFU)
N#define SMARTCARD_THR_THR_SHIFT                  (0U)
N#define SMARTCARD_THR_THR(x)                     (((uint32_t)(((uint32_t)(x)) << SMARTCARD_THR_THR_SHIFT)) & SMARTCARD_THR_THR_MASK)
N
N/*! @name DLM - Divisor Latch MSB */
N#define SMARTCARD_DLM_DLMSB_MASK                 (0xFFU)
N#define SMARTCARD_DLM_DLMSB_SHIFT                (0U)
N#define SMARTCARD_DLM_DLMSB(x)                   (((uint32_t)(((uint32_t)(x)) << SMARTCARD_DLM_DLMSB_SHIFT)) & SMARTCARD_DLM_DLMSB_MASK)
N
N/*! @name IER - Interrupt Enable Register */
N#define SMARTCARD_IER_RBRIE_MASK                 (0x1U)
N#define SMARTCARD_IER_RBRIE_SHIFT                (0U)
N#define SMARTCARD_IER_RBRIE(x)                   (((uint32_t)(((uint32_t)(x)) << SMARTCARD_IER_RBRIE_SHIFT)) & SMARTCARD_IER_RBRIE_MASK)
N#define SMARTCARD_IER_THREIE_MASK                (0x2U)
N#define SMARTCARD_IER_THREIE_SHIFT               (1U)
N#define SMARTCARD_IER_THREIE(x)                  (((uint32_t)(((uint32_t)(x)) << SMARTCARD_IER_THREIE_SHIFT)) & SMARTCARD_IER_THREIE_MASK)
N#define SMARTCARD_IER_RXIE_MASK                  (0x4U)
N#define SMARTCARD_IER_RXIE_SHIFT                 (2U)
N#define SMARTCARD_IER_RXIE(x)                    (((uint32_t)(((uint32_t)(x)) << SMARTCARD_IER_RXIE_SHIFT)) & SMARTCARD_IER_RXIE_MASK)
N
N/*! @name FCR - FIFO Control Register */
N#define SMARTCARD_FCR_FIFOEN_MASK                (0x1U)
N#define SMARTCARD_FCR_FIFOEN_SHIFT               (0U)
N#define SMARTCARD_FCR_FIFOEN(x)                  (((uint32_t)(((uint32_t)(x)) << SMARTCARD_FCR_FIFOEN_SHIFT)) & SMARTCARD_FCR_FIFOEN_MASK)
N#define SMARTCARD_FCR_RXFIFORES_MASK             (0x2U)
N#define SMARTCARD_FCR_RXFIFORES_SHIFT            (1U)
N#define SMARTCARD_FCR_RXFIFORES(x)               (((uint32_t)(((uint32_t)(x)) << SMARTCARD_FCR_RXFIFORES_SHIFT)) & SMARTCARD_FCR_RXFIFORES_MASK)
N#define SMARTCARD_FCR_TXFIFORES_MASK             (0x4U)
N#define SMARTCARD_FCR_TXFIFORES_SHIFT            (2U)
N#define SMARTCARD_FCR_TXFIFORES(x)               (((uint32_t)(((uint32_t)(x)) << SMARTCARD_FCR_TXFIFORES_SHIFT)) & SMARTCARD_FCR_TXFIFORES_MASK)
N#define SMARTCARD_FCR_DMAMODE_MASK               (0x8U)
N#define SMARTCARD_FCR_DMAMODE_SHIFT              (3U)
N#define SMARTCARD_FCR_DMAMODE(x)                 (((uint32_t)(((uint32_t)(x)) << SMARTCARD_FCR_DMAMODE_SHIFT)) & SMARTCARD_FCR_DMAMODE_MASK)
N#define SMARTCARD_FCR_RXTRIGLVL_MASK             (0xC0U)
N#define SMARTCARD_FCR_RXTRIGLVL_SHIFT            (6U)
N#define SMARTCARD_FCR_RXTRIGLVL(x)               (((uint32_t)(((uint32_t)(x)) << SMARTCARD_FCR_RXTRIGLVL_SHIFT)) & SMARTCARD_FCR_RXTRIGLVL_MASK)
N
N/*! @name IIR - Interrupt ID Register */
N#define SMARTCARD_IIR_INTSTATUS_MASK             (0x1U)
N#define SMARTCARD_IIR_INTSTATUS_SHIFT            (0U)
N#define SMARTCARD_IIR_INTSTATUS(x)               (((uint32_t)(((uint32_t)(x)) << SMARTCARD_IIR_INTSTATUS_SHIFT)) & SMARTCARD_IIR_INTSTATUS_MASK)
N#define SMARTCARD_IIR_INTID_MASK                 (0xEU)
N#define SMARTCARD_IIR_INTID_SHIFT                (1U)
N#define SMARTCARD_IIR_INTID(x)                   (((uint32_t)(((uint32_t)(x)) << SMARTCARD_IIR_INTID_SHIFT)) & SMARTCARD_IIR_INTID_MASK)
N#define SMARTCARD_IIR_FIFOENABLE_MASK            (0xC0U)
N#define SMARTCARD_IIR_FIFOENABLE_SHIFT           (6U)
N#define SMARTCARD_IIR_FIFOENABLE(x)              (((uint32_t)(((uint32_t)(x)) << SMARTCARD_IIR_FIFOENABLE_SHIFT)) & SMARTCARD_IIR_FIFOENABLE_MASK)
N
N/*! @name LCR - Line Control Register */
N#define SMARTCARD_LCR_WLS_MASK                   (0x3U)
N#define SMARTCARD_LCR_WLS_SHIFT                  (0U)
N#define SMARTCARD_LCR_WLS(x)                     (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LCR_WLS_SHIFT)) & SMARTCARD_LCR_WLS_MASK)
N#define SMARTCARD_LCR_SBS_MASK                   (0x4U)
N#define SMARTCARD_LCR_SBS_SHIFT                  (2U)
N#define SMARTCARD_LCR_SBS(x)                     (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LCR_SBS_SHIFT)) & SMARTCARD_LCR_SBS_MASK)
N#define SMARTCARD_LCR_PE_MASK                    (0x8U)
N#define SMARTCARD_LCR_PE_SHIFT                   (3U)
N#define SMARTCARD_LCR_PE(x)                      (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LCR_PE_SHIFT)) & SMARTCARD_LCR_PE_MASK)
N#define SMARTCARD_LCR_PS_MASK                    (0x30U)
N#define SMARTCARD_LCR_PS_SHIFT                   (4U)
N#define SMARTCARD_LCR_PS(x)                      (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LCR_PS_SHIFT)) & SMARTCARD_LCR_PS_MASK)
N#define SMARTCARD_LCR_DLAB_MASK                  (0x80U)
N#define SMARTCARD_LCR_DLAB_SHIFT                 (7U)
N#define SMARTCARD_LCR_DLAB(x)                    (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LCR_DLAB_SHIFT)) & SMARTCARD_LCR_DLAB_MASK)
N
N/*! @name LSR - Line Status Register */
N#define SMARTCARD_LSR_RDR_MASK                   (0x1U)
N#define SMARTCARD_LSR_RDR_SHIFT                  (0U)
N#define SMARTCARD_LSR_RDR(x)                     (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LSR_RDR_SHIFT)) & SMARTCARD_LSR_RDR_MASK)
N#define SMARTCARD_LSR_OE_MASK                    (0x2U)
N#define SMARTCARD_LSR_OE_SHIFT                   (1U)
N#define SMARTCARD_LSR_OE(x)                      (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LSR_OE_SHIFT)) & SMARTCARD_LSR_OE_MASK)
N#define SMARTCARD_LSR_PE_MASK                    (0x4U)
N#define SMARTCARD_LSR_PE_SHIFT                   (2U)
N#define SMARTCARD_LSR_PE(x)                      (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LSR_PE_SHIFT)) & SMARTCARD_LSR_PE_MASK)
N#define SMARTCARD_LSR_FE_MASK                    (0x8U)
N#define SMARTCARD_LSR_FE_SHIFT                   (3U)
N#define SMARTCARD_LSR_FE(x)                      (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LSR_FE_SHIFT)) & SMARTCARD_LSR_FE_MASK)
N#define SMARTCARD_LSR_THRE_MASK                  (0x20U)
N#define SMARTCARD_LSR_THRE_SHIFT                 (5U)
N#define SMARTCARD_LSR_THRE(x)                    (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LSR_THRE_SHIFT)) & SMARTCARD_LSR_THRE_MASK)
N#define SMARTCARD_LSR_TEMT_MASK                  (0x40U)
N#define SMARTCARD_LSR_TEMT_SHIFT                 (6U)
N#define SMARTCARD_LSR_TEMT(x)                    (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LSR_TEMT_SHIFT)) & SMARTCARD_LSR_TEMT_MASK)
N#define SMARTCARD_LSR_RXFE_MASK                  (0x80U)
N#define SMARTCARD_LSR_RXFE_SHIFT                 (7U)
N#define SMARTCARD_LSR_RXFE(x)                    (((uint32_t)(((uint32_t)(x)) << SMARTCARD_LSR_RXFE_SHIFT)) & SMARTCARD_LSR_RXFE_MASK)
N
N/*! @name SCR - Scratch Pad Register */
N#define SMARTCARD_SCR_PAD_MASK                   (0xFFU)
N#define SMARTCARD_SCR_PAD_SHIFT                  (0U)
N#define SMARTCARD_SCR_PAD(x)                     (((uint32_t)(((uint32_t)(x)) << SMARTCARD_SCR_PAD_SHIFT)) & SMARTCARD_SCR_PAD_MASK)
N
N/*! @name OSR - Oversampling register */
N#define SMARTCARD_OSR_OSFRAC_MASK                (0xEU)
N#define SMARTCARD_OSR_OSFRAC_SHIFT               (1U)
N#define SMARTCARD_OSR_OSFRAC(x)                  (((uint32_t)(((uint32_t)(x)) << SMARTCARD_OSR_OSFRAC_SHIFT)) & SMARTCARD_OSR_OSFRAC_MASK)
N#define SMARTCARD_OSR_OSINT_MASK                 (0xF0U)
N#define SMARTCARD_OSR_OSINT_SHIFT                (4U)
N#define SMARTCARD_OSR_OSINT(x)                   (((uint32_t)(((uint32_t)(x)) << SMARTCARD_OSR_OSINT_SHIFT)) & SMARTCARD_OSR_OSINT_MASK)
N#define SMARTCARD_OSR_FDINT_MASK                 (0x7F00U)
N#define SMARTCARD_OSR_FDINT_SHIFT                (8U)
N#define SMARTCARD_OSR_FDINT(x)                   (((uint32_t)(((uint32_t)(x)) << SMARTCARD_OSR_FDINT_SHIFT)) & SMARTCARD_OSR_FDINT_MASK)
N
N/*! @name SCICTRL - Smart Card Interface control register */
N#define SMARTCARD_SCICTRL_SCIEN_MASK             (0x1U)
N#define SMARTCARD_SCICTRL_SCIEN_SHIFT            (0U)
N#define SMARTCARD_SCICTRL_SCIEN(x)               (((uint32_t)(((uint32_t)(x)) << SMARTCARD_SCICTRL_SCIEN_SHIFT)) & SMARTCARD_SCICTRL_SCIEN_MASK)
N#define SMARTCARD_SCICTRL_NACKDIS_MASK           (0x2U)
N#define SMARTCARD_SCICTRL_NACKDIS_SHIFT          (1U)
N#define SMARTCARD_SCICTRL_NACKDIS(x)             (((uint32_t)(((uint32_t)(x)) << SMARTCARD_SCICTRL_NACKDIS_SHIFT)) & SMARTCARD_SCICTRL_NACKDIS_MASK)
N#define SMARTCARD_SCICTRL_PROTSEL_MASK           (0x4U)
N#define SMARTCARD_SCICTRL_PROTSEL_SHIFT          (2U)
N#define SMARTCARD_SCICTRL_PROTSEL(x)             (((uint32_t)(((uint32_t)(x)) << SMARTCARD_SCICTRL_PROTSEL_SHIFT)) & SMARTCARD_SCICTRL_PROTSEL_MASK)
N#define SMARTCARD_SCICTRL_TXRETRY_MASK           (0xE0U)
N#define SMARTCARD_SCICTRL_TXRETRY_SHIFT          (5U)
N#define SMARTCARD_SCICTRL_TXRETRY(x)             (((uint32_t)(((uint32_t)(x)) << SMARTCARD_SCICTRL_TXRETRY_SHIFT)) & SMARTCARD_SCICTRL_TXRETRY_MASK)
N#define SMARTCARD_SCICTRL_GUARDTIME_MASK         (0xFF00U)
N#define SMARTCARD_SCICTRL_GUARDTIME_SHIFT        (8U)
N#define SMARTCARD_SCICTRL_GUARDTIME(x)           (((uint32_t)(((uint32_t)(x)) << SMARTCARD_SCICTRL_GUARDTIME_SHIFT)) & SMARTCARD_SCICTRL_GUARDTIME_MASK)
N
N
N/*!
N * @}
N */ /* end of group SMARTCARD_Register_Masks */
N
N
N/* SMARTCARD - Peripheral instance base addresses */
N/** Peripheral SMARTCARD0 base address */
N#define SMARTCARD0_BASE                          (0x40036000u)
N/** Peripheral SMARTCARD0 base pointer */
N#define SMARTCARD0                               ((SMARTCARD_Type *)SMARTCARD0_BASE)
N/** Peripheral SMARTCARD1 base address */
N#define SMARTCARD1_BASE                          (0x40037000u)
N/** Peripheral SMARTCARD1 base pointer */
N#define SMARTCARD1                               ((SMARTCARD_Type *)SMARTCARD1_BASE)
N/** Array initializer of SMARTCARD peripheral base addresses */
N#define SMARTCARD_BASE_ADDRS                     { SMARTCARD0_BASE, SMARTCARD1_BASE }
N/** Array initializer of SMARTCARD peripheral base pointers */
N#define SMARTCARD_BASE_PTRS                      { SMARTCARD0, SMARTCARD1 }
N/** Interrupt vectors for the SMARTCARD peripheral type */
N#define SMARTCARD_IRQS                           { SMARTCARD0_IRQn, SMARTCARD1_IRQn }
N
N/*!
N * @}
N */ /* end of group SMARTCARD_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SPI Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Peripheral_Access_Layer SPI Peripheral Access Layer
N * @{
N */
N
N/** SPI - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[1024];
N  __IO uint32_t CFG;                               /**< SPI Configuration register, offset: 0x400 */
X  volatile uint32_t CFG;                                
N  __IO uint32_t DLY;                               /**< SPI Delay register, offset: 0x404 */
X  volatile uint32_t DLY;                                
N  __IO uint32_t STAT;                              /**< SPI Status. Some status flags can be cleared by writing a 1 to that bit position., offset: 0x408 */
X  volatile uint32_t STAT;                               
N  __IO uint32_t INTENSET;                          /**< SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set., offset: 0x40C */
X  volatile uint32_t INTENSET;                           
N  __O  uint32_t INTENCLR;                          /**< SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared., offset: 0x410 */
X  volatile  uint32_t INTENCLR;                           
N       uint8_t RESERVED_1[16];
N  __IO uint32_t DIV;                               /**< SPI clock Divider, offset: 0x424 */
X  volatile uint32_t DIV;                                
N  __I  uint32_t INTSTAT;                           /**< SPI Interrupt Status, offset: 0x428 */
X  volatile const  uint32_t INTSTAT;                            
N       uint8_t RESERVED_2[2516];
N  __IO uint32_t FIFOCFG;                           /**< FIFO configuration and enable register., offset: 0xE00 */
X  volatile uint32_t FIFOCFG;                            
N  __IO uint32_t FIFOSTAT;                          /**< FIFO status register., offset: 0xE04 */
X  volatile uint32_t FIFOSTAT;                           
N  __IO uint32_t FIFOTRIG;                          /**< FIFO trigger settings for interrupt and DMA request., offset: 0xE08 */
X  volatile uint32_t FIFOTRIG;                           
N       uint8_t RESERVED_3[4];
N  __IO uint32_t FIFOINTENSET;                      /**< FIFO interrupt enable set (enable) and read register., offset: 0xE10 */
X  volatile uint32_t FIFOINTENSET;                       
N  __IO uint32_t FIFOINTENCLR;                      /**< FIFO interrupt enable clear (disable) and read register., offset: 0xE14 */
X  volatile uint32_t FIFOINTENCLR;                       
N  __I  uint32_t FIFOINTSTAT;                       /**< FIFO interrupt status register., offset: 0xE18 */
X  volatile const  uint32_t FIFOINTSTAT;                        
N       uint8_t RESERVED_4[4];
N  __IO uint32_t FIFOWR;                            /**< FIFO write data., offset: 0xE20 */
X  volatile uint32_t FIFOWR;                             
N       uint8_t RESERVED_5[12];
N  __I  uint32_t FIFORD;                            /**< FIFO read data., offset: 0xE30 */
X  volatile const  uint32_t FIFORD;                             
N       uint8_t RESERVED_6[12];
N  __I  uint32_t FIFORDNOPOP;                       /**< FIFO data read with no FIFO pop., offset: 0xE40 */
X  volatile const  uint32_t FIFORDNOPOP;                        
N       uint8_t RESERVED_7[440];
N  __I  uint32_t ID;                                /**< Peripheral identification register., offset: 0xFFC */
X  volatile const  uint32_t ID;                                 
N} SPI_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SPI Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Register_Masks SPI Register Masks
N * @{
N */
N
N/*! @name CFG - SPI Configuration register */
N#define SPI_CFG_ENABLE_MASK                      (0x1U)
N#define SPI_CFG_ENABLE_SHIFT                     (0U)
N#define SPI_CFG_ENABLE(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_CFG_ENABLE_SHIFT)) & SPI_CFG_ENABLE_MASK)
N#define SPI_CFG_MASTER_MASK                      (0x4U)
N#define SPI_CFG_MASTER_SHIFT                     (2U)
N#define SPI_CFG_MASTER(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_CFG_MASTER_SHIFT)) & SPI_CFG_MASTER_MASK)
N#define SPI_CFG_LSBF_MASK                        (0x8U)
N#define SPI_CFG_LSBF_SHIFT                       (3U)
N#define SPI_CFG_LSBF(x)                          (((uint32_t)(((uint32_t)(x)) << SPI_CFG_LSBF_SHIFT)) & SPI_CFG_LSBF_MASK)
N#define SPI_CFG_CPHA_MASK                        (0x10U)
N#define SPI_CFG_CPHA_SHIFT                       (4U)
N#define SPI_CFG_CPHA(x)                          (((uint32_t)(((uint32_t)(x)) << SPI_CFG_CPHA_SHIFT)) & SPI_CFG_CPHA_MASK)
N#define SPI_CFG_CPOL_MASK                        (0x20U)
N#define SPI_CFG_CPOL_SHIFT                       (5U)
N#define SPI_CFG_CPOL(x)                          (((uint32_t)(((uint32_t)(x)) << SPI_CFG_CPOL_SHIFT)) & SPI_CFG_CPOL_MASK)
N#define SPI_CFG_LOOP_MASK                        (0x80U)
N#define SPI_CFG_LOOP_SHIFT                       (7U)
N#define SPI_CFG_LOOP(x)                          (((uint32_t)(((uint32_t)(x)) << SPI_CFG_LOOP_SHIFT)) & SPI_CFG_LOOP_MASK)
N#define SPI_CFG_SPOL0_MASK                       (0x100U)
N#define SPI_CFG_SPOL0_SHIFT                      (8U)
N#define SPI_CFG_SPOL0(x)                         (((uint32_t)(((uint32_t)(x)) << SPI_CFG_SPOL0_SHIFT)) & SPI_CFG_SPOL0_MASK)
N#define SPI_CFG_SPOL1_MASK                       (0x200U)
N#define SPI_CFG_SPOL1_SHIFT                      (9U)
N#define SPI_CFG_SPOL1(x)                         (((uint32_t)(((uint32_t)(x)) << SPI_CFG_SPOL1_SHIFT)) & SPI_CFG_SPOL1_MASK)
N#define SPI_CFG_SPOL2_MASK                       (0x400U)
N#define SPI_CFG_SPOL2_SHIFT                      (10U)
N#define SPI_CFG_SPOL2(x)                         (((uint32_t)(((uint32_t)(x)) << SPI_CFG_SPOL2_SHIFT)) & SPI_CFG_SPOL2_MASK)
N#define SPI_CFG_SPOL3_MASK                       (0x800U)
N#define SPI_CFG_SPOL3_SHIFT                      (11U)
N#define SPI_CFG_SPOL3(x)                         (((uint32_t)(((uint32_t)(x)) << SPI_CFG_SPOL3_SHIFT)) & SPI_CFG_SPOL3_MASK)
N
N/*! @name DLY - SPI Delay register */
N#define SPI_DLY_PRE_DELAY_MASK                   (0xFU)
N#define SPI_DLY_PRE_DELAY_SHIFT                  (0U)
N#define SPI_DLY_PRE_DELAY(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_DLY_PRE_DELAY_SHIFT)) & SPI_DLY_PRE_DELAY_MASK)
N#define SPI_DLY_POST_DELAY_MASK                  (0xF0U)
N#define SPI_DLY_POST_DELAY_SHIFT                 (4U)
N#define SPI_DLY_POST_DELAY(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_DLY_POST_DELAY_SHIFT)) & SPI_DLY_POST_DELAY_MASK)
N#define SPI_DLY_FRAME_DELAY_MASK                 (0xF00U)
N#define SPI_DLY_FRAME_DELAY_SHIFT                (8U)
N#define SPI_DLY_FRAME_DELAY(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_DLY_FRAME_DELAY_SHIFT)) & SPI_DLY_FRAME_DELAY_MASK)
N#define SPI_DLY_TRANSFER_DELAY_MASK              (0xF000U)
N#define SPI_DLY_TRANSFER_DELAY_SHIFT             (12U)
N#define SPI_DLY_TRANSFER_DELAY(x)                (((uint32_t)(((uint32_t)(x)) << SPI_DLY_TRANSFER_DELAY_SHIFT)) & SPI_DLY_TRANSFER_DELAY_MASK)
N
N/*! @name STAT - SPI Status. Some status flags can be cleared by writing a 1 to that bit position. */
N#define SPI_STAT_SSA_MASK                        (0x10U)
N#define SPI_STAT_SSA_SHIFT                       (4U)
N#define SPI_STAT_SSA(x)                          (((uint32_t)(((uint32_t)(x)) << SPI_STAT_SSA_SHIFT)) & SPI_STAT_SSA_MASK)
N#define SPI_STAT_SSD_MASK                        (0x20U)
N#define SPI_STAT_SSD_SHIFT                       (5U)
N#define SPI_STAT_SSD(x)                          (((uint32_t)(((uint32_t)(x)) << SPI_STAT_SSD_SHIFT)) & SPI_STAT_SSD_MASK)
N#define SPI_STAT_STALLED_MASK                    (0x40U)
N#define SPI_STAT_STALLED_SHIFT                   (6U)
N#define SPI_STAT_STALLED(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_STAT_STALLED_SHIFT)) & SPI_STAT_STALLED_MASK)
N#define SPI_STAT_ENDTRANSFER_MASK                (0x80U)
N#define SPI_STAT_ENDTRANSFER_SHIFT               (7U)
N#define SPI_STAT_ENDTRANSFER(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_STAT_ENDTRANSFER_SHIFT)) & SPI_STAT_ENDTRANSFER_MASK)
N#define SPI_STAT_MSTIDLE_MASK                    (0x100U)
N#define SPI_STAT_MSTIDLE_SHIFT                   (8U)
N#define SPI_STAT_MSTIDLE(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_STAT_MSTIDLE_SHIFT)) & SPI_STAT_MSTIDLE_MASK)
N
N/*! @name INTENSET - SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set. */
N#define SPI_INTENSET_SSAEN_MASK                  (0x10U)
N#define SPI_INTENSET_SSAEN_SHIFT                 (4U)
N#define SPI_INTENSET_SSAEN(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_INTENSET_SSAEN_SHIFT)) & SPI_INTENSET_SSAEN_MASK)
N#define SPI_INTENSET_SSDEN_MASK                  (0x20U)
N#define SPI_INTENSET_SSDEN_SHIFT                 (5U)
N#define SPI_INTENSET_SSDEN(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_INTENSET_SSDEN_SHIFT)) & SPI_INTENSET_SSDEN_MASK)
N#define SPI_INTENSET_MSTIDLEEN_MASK              (0x100U)
N#define SPI_INTENSET_MSTIDLEEN_SHIFT             (8U)
N#define SPI_INTENSET_MSTIDLEEN(x)                (((uint32_t)(((uint32_t)(x)) << SPI_INTENSET_MSTIDLEEN_SHIFT)) & SPI_INTENSET_MSTIDLEEN_MASK)
N
N/*! @name INTENCLR - SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared. */
N#define SPI_INTENCLR_SSAEN_MASK                  (0x10U)
N#define SPI_INTENCLR_SSAEN_SHIFT                 (4U)
N#define SPI_INTENCLR_SSAEN(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_INTENCLR_SSAEN_SHIFT)) & SPI_INTENCLR_SSAEN_MASK)
N#define SPI_INTENCLR_SSDEN_MASK                  (0x20U)
N#define SPI_INTENCLR_SSDEN_SHIFT                 (5U)
N#define SPI_INTENCLR_SSDEN(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_INTENCLR_SSDEN_SHIFT)) & SPI_INTENCLR_SSDEN_MASK)
N#define SPI_INTENCLR_MSTIDLE_MASK                (0x100U)
N#define SPI_INTENCLR_MSTIDLE_SHIFT               (8U)
N#define SPI_INTENCLR_MSTIDLE(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_INTENCLR_MSTIDLE_SHIFT)) & SPI_INTENCLR_MSTIDLE_MASK)
N
N/*! @name DIV - SPI clock Divider */
N#define SPI_DIV_DIVVAL_MASK                      (0xFFFFU)
N#define SPI_DIV_DIVVAL_SHIFT                     (0U)
N#define SPI_DIV_DIVVAL(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_DIV_DIVVAL_SHIFT)) & SPI_DIV_DIVVAL_MASK)
N
N/*! @name INTSTAT - SPI Interrupt Status */
N#define SPI_INTSTAT_SSA_MASK                     (0x10U)
N#define SPI_INTSTAT_SSA_SHIFT                    (4U)
N#define SPI_INTSTAT_SSA(x)                       (((uint32_t)(((uint32_t)(x)) << SPI_INTSTAT_SSA_SHIFT)) & SPI_INTSTAT_SSA_MASK)
N#define SPI_INTSTAT_SSD_MASK                     (0x20U)
N#define SPI_INTSTAT_SSD_SHIFT                    (5U)
N#define SPI_INTSTAT_SSD(x)                       (((uint32_t)(((uint32_t)(x)) << SPI_INTSTAT_SSD_SHIFT)) & SPI_INTSTAT_SSD_MASK)
N#define SPI_INTSTAT_MSTIDLE_MASK                 (0x100U)
N#define SPI_INTSTAT_MSTIDLE_SHIFT                (8U)
N#define SPI_INTSTAT_MSTIDLE(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_INTSTAT_MSTIDLE_SHIFT)) & SPI_INTSTAT_MSTIDLE_MASK)
N
N/*! @name FIFOCFG - FIFO configuration and enable register. */
N#define SPI_FIFOCFG_ENABLETX_MASK                (0x1U)
N#define SPI_FIFOCFG_ENABLETX_SHIFT               (0U)
N#define SPI_FIFOCFG_ENABLETX(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_ENABLETX_SHIFT)) & SPI_FIFOCFG_ENABLETX_MASK)
N#define SPI_FIFOCFG_ENABLERX_MASK                (0x2U)
N#define SPI_FIFOCFG_ENABLERX_SHIFT               (1U)
N#define SPI_FIFOCFG_ENABLERX(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_ENABLERX_SHIFT)) & SPI_FIFOCFG_ENABLERX_MASK)
N#define SPI_FIFOCFG_SIZE_MASK                    (0x30U)
N#define SPI_FIFOCFG_SIZE_SHIFT                   (4U)
N#define SPI_FIFOCFG_SIZE(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_SIZE_SHIFT)) & SPI_FIFOCFG_SIZE_MASK)
N#define SPI_FIFOCFG_DMATX_MASK                   (0x1000U)
N#define SPI_FIFOCFG_DMATX_SHIFT                  (12U)
N#define SPI_FIFOCFG_DMATX(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_DMATX_SHIFT)) & SPI_FIFOCFG_DMATX_MASK)
N#define SPI_FIFOCFG_DMARX_MASK                   (0x2000U)
N#define SPI_FIFOCFG_DMARX_SHIFT                  (13U)
N#define SPI_FIFOCFG_DMARX(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_DMARX_SHIFT)) & SPI_FIFOCFG_DMARX_MASK)
N#define SPI_FIFOCFG_WAKETX_MASK                  (0x4000U)
N#define SPI_FIFOCFG_WAKETX_SHIFT                 (14U)
N#define SPI_FIFOCFG_WAKETX(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_WAKETX_SHIFT)) & SPI_FIFOCFG_WAKETX_MASK)
N#define SPI_FIFOCFG_WAKERX_MASK                  (0x8000U)
N#define SPI_FIFOCFG_WAKERX_SHIFT                 (15U)
N#define SPI_FIFOCFG_WAKERX(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_WAKERX_SHIFT)) & SPI_FIFOCFG_WAKERX_MASK)
N#define SPI_FIFOCFG_EMPTYTX_MASK                 (0x10000U)
N#define SPI_FIFOCFG_EMPTYTX_SHIFT                (16U)
N#define SPI_FIFOCFG_EMPTYTX(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_EMPTYTX_SHIFT)) & SPI_FIFOCFG_EMPTYTX_MASK)
N#define SPI_FIFOCFG_EMPTYRX_MASK                 (0x20000U)
N#define SPI_FIFOCFG_EMPTYRX_SHIFT                (17U)
N#define SPI_FIFOCFG_EMPTYRX(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_EMPTYRX_SHIFT)) & SPI_FIFOCFG_EMPTYRX_MASK)
N#define SPI_FIFOCFG_POPDBG_MASK                  (0x40000U)
N#define SPI_FIFOCFG_POPDBG_SHIFT                 (18U)
N#define SPI_FIFOCFG_POPDBG(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOCFG_POPDBG_SHIFT)) & SPI_FIFOCFG_POPDBG_MASK)
N
N/*! @name FIFOSTAT - FIFO status register. */
N#define SPI_FIFOSTAT_TXERR_MASK                  (0x1U)
N#define SPI_FIFOSTAT_TXERR_SHIFT                 (0U)
N#define SPI_FIFOSTAT_TXERR(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_TXERR_SHIFT)) & SPI_FIFOSTAT_TXERR_MASK)
N#define SPI_FIFOSTAT_RXERR_MASK                  (0x2U)
N#define SPI_FIFOSTAT_RXERR_SHIFT                 (1U)
N#define SPI_FIFOSTAT_RXERR(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_RXERR_SHIFT)) & SPI_FIFOSTAT_RXERR_MASK)
N#define SPI_FIFOSTAT_PERINT_MASK                 (0x8U)
N#define SPI_FIFOSTAT_PERINT_SHIFT                (3U)
N#define SPI_FIFOSTAT_PERINT(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_PERINT_SHIFT)) & SPI_FIFOSTAT_PERINT_MASK)
N#define SPI_FIFOSTAT_TXEMPTY_MASK                (0x10U)
N#define SPI_FIFOSTAT_TXEMPTY_SHIFT               (4U)
N#define SPI_FIFOSTAT_TXEMPTY(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_TXEMPTY_SHIFT)) & SPI_FIFOSTAT_TXEMPTY_MASK)
N#define SPI_FIFOSTAT_TXNOTFULL_MASK              (0x20U)
N#define SPI_FIFOSTAT_TXNOTFULL_SHIFT             (5U)
N#define SPI_FIFOSTAT_TXNOTFULL(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_TXNOTFULL_SHIFT)) & SPI_FIFOSTAT_TXNOTFULL_MASK)
N#define SPI_FIFOSTAT_RXNOTEMPTY_MASK             (0x40U)
N#define SPI_FIFOSTAT_RXNOTEMPTY_SHIFT            (6U)
N#define SPI_FIFOSTAT_RXNOTEMPTY(x)               (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_RXNOTEMPTY_SHIFT)) & SPI_FIFOSTAT_RXNOTEMPTY_MASK)
N#define SPI_FIFOSTAT_RXFULL_MASK                 (0x80U)
N#define SPI_FIFOSTAT_RXFULL_SHIFT                (7U)
N#define SPI_FIFOSTAT_RXFULL(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_RXFULL_SHIFT)) & SPI_FIFOSTAT_RXFULL_MASK)
N#define SPI_FIFOSTAT_TXLVL_MASK                  (0x1F00U)
N#define SPI_FIFOSTAT_TXLVL_SHIFT                 (8U)
N#define SPI_FIFOSTAT_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_TXLVL_SHIFT)) & SPI_FIFOSTAT_TXLVL_MASK)
N#define SPI_FIFOSTAT_RXLVL_MASK                  (0x1F0000U)
N#define SPI_FIFOSTAT_RXLVL_SHIFT                 (16U)
N#define SPI_FIFOSTAT_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOSTAT_RXLVL_SHIFT)) & SPI_FIFOSTAT_RXLVL_MASK)
N
N/*! @name FIFOTRIG - FIFO trigger settings for interrupt and DMA request. */
N#define SPI_FIFOTRIG_TXLVLENA_MASK               (0x1U)
N#define SPI_FIFOTRIG_TXLVLENA_SHIFT              (0U)
N#define SPI_FIFOTRIG_TXLVLENA(x)                 (((uint32_t)(((uint32_t)(x)) << SPI_FIFOTRIG_TXLVLENA_SHIFT)) & SPI_FIFOTRIG_TXLVLENA_MASK)
N#define SPI_FIFOTRIG_RXLVLENA_MASK               (0x2U)
N#define SPI_FIFOTRIG_RXLVLENA_SHIFT              (1U)
N#define SPI_FIFOTRIG_RXLVLENA(x)                 (((uint32_t)(((uint32_t)(x)) << SPI_FIFOTRIG_RXLVLENA_SHIFT)) & SPI_FIFOTRIG_RXLVLENA_MASK)
N#define SPI_FIFOTRIG_TXLVL_MASK                  (0xF00U)
N#define SPI_FIFOTRIG_TXLVL_SHIFT                 (8U)
N#define SPI_FIFOTRIG_TXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOTRIG_TXLVL_SHIFT)) & SPI_FIFOTRIG_TXLVL_MASK)
N#define SPI_FIFOTRIG_RXLVL_MASK                  (0xF0000U)
N#define SPI_FIFOTRIG_RXLVL_SHIFT                 (16U)
N#define SPI_FIFOTRIG_RXLVL(x)                    (((uint32_t)(((uint32_t)(x)) << SPI_FIFOTRIG_RXLVL_SHIFT)) & SPI_FIFOTRIG_RXLVL_MASK)
N
N/*! @name FIFOINTENSET - FIFO interrupt enable set (enable) and read register. */
N#define SPI_FIFOINTENSET_TXERR_MASK              (0x1U)
N#define SPI_FIFOINTENSET_TXERR_SHIFT             (0U)
N#define SPI_FIFOINTENSET_TXERR(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENSET_TXERR_SHIFT)) & SPI_FIFOINTENSET_TXERR_MASK)
N#define SPI_FIFOINTENSET_RXERR_MASK              (0x2U)
N#define SPI_FIFOINTENSET_RXERR_SHIFT             (1U)
N#define SPI_FIFOINTENSET_RXERR(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENSET_RXERR_SHIFT)) & SPI_FIFOINTENSET_RXERR_MASK)
N#define SPI_FIFOINTENSET_TXLVL_MASK              (0x4U)
N#define SPI_FIFOINTENSET_TXLVL_SHIFT             (2U)
N#define SPI_FIFOINTENSET_TXLVL(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENSET_TXLVL_SHIFT)) & SPI_FIFOINTENSET_TXLVL_MASK)
N#define SPI_FIFOINTENSET_RXLVL_MASK              (0x8U)
N#define SPI_FIFOINTENSET_RXLVL_SHIFT             (3U)
N#define SPI_FIFOINTENSET_RXLVL(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENSET_RXLVL_SHIFT)) & SPI_FIFOINTENSET_RXLVL_MASK)
N
N/*! @name FIFOINTENCLR - FIFO interrupt enable clear (disable) and read register. */
N#define SPI_FIFOINTENCLR_TXERR_MASK              (0x1U)
N#define SPI_FIFOINTENCLR_TXERR_SHIFT             (0U)
N#define SPI_FIFOINTENCLR_TXERR(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENCLR_TXERR_SHIFT)) & SPI_FIFOINTENCLR_TXERR_MASK)
N#define SPI_FIFOINTENCLR_RXERR_MASK              (0x2U)
N#define SPI_FIFOINTENCLR_RXERR_SHIFT             (1U)
N#define SPI_FIFOINTENCLR_RXERR(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENCLR_RXERR_SHIFT)) & SPI_FIFOINTENCLR_RXERR_MASK)
N#define SPI_FIFOINTENCLR_TXLVL_MASK              (0x4U)
N#define SPI_FIFOINTENCLR_TXLVL_SHIFT             (2U)
N#define SPI_FIFOINTENCLR_TXLVL(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENCLR_TXLVL_SHIFT)) & SPI_FIFOINTENCLR_TXLVL_MASK)
N#define SPI_FIFOINTENCLR_RXLVL_MASK              (0x8U)
N#define SPI_FIFOINTENCLR_RXLVL_SHIFT             (3U)
N#define SPI_FIFOINTENCLR_RXLVL(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTENCLR_RXLVL_SHIFT)) & SPI_FIFOINTENCLR_RXLVL_MASK)
N
N/*! @name FIFOINTSTAT - FIFO interrupt status register. */
N#define SPI_FIFOINTSTAT_TXERR_MASK               (0x1U)
N#define SPI_FIFOINTSTAT_TXERR_SHIFT              (0U)
N#define SPI_FIFOINTSTAT_TXERR(x)                 (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTSTAT_TXERR_SHIFT)) & SPI_FIFOINTSTAT_TXERR_MASK)
N#define SPI_FIFOINTSTAT_RXERR_MASK               (0x2U)
N#define SPI_FIFOINTSTAT_RXERR_SHIFT              (1U)
N#define SPI_FIFOINTSTAT_RXERR(x)                 (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTSTAT_RXERR_SHIFT)) & SPI_FIFOINTSTAT_RXERR_MASK)
N#define SPI_FIFOINTSTAT_TXLVL_MASK               (0x4U)
N#define SPI_FIFOINTSTAT_TXLVL_SHIFT              (2U)
N#define SPI_FIFOINTSTAT_TXLVL(x)                 (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTSTAT_TXLVL_SHIFT)) & SPI_FIFOINTSTAT_TXLVL_MASK)
N#define SPI_FIFOINTSTAT_RXLVL_MASK               (0x8U)
N#define SPI_FIFOINTSTAT_RXLVL_SHIFT              (3U)
N#define SPI_FIFOINTSTAT_RXLVL(x)                 (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTSTAT_RXLVL_SHIFT)) & SPI_FIFOINTSTAT_RXLVL_MASK)
N#define SPI_FIFOINTSTAT_PERINT_MASK              (0x10U)
N#define SPI_FIFOINTSTAT_PERINT_SHIFT             (4U)
N#define SPI_FIFOINTSTAT_PERINT(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFOINTSTAT_PERINT_SHIFT)) & SPI_FIFOINTSTAT_PERINT_MASK)
N
N/*! @name FIFOWR - FIFO write data. */
N#define SPI_FIFOWR_TXDATA_MASK                   (0xFFFFU)
N#define SPI_FIFOWR_TXDATA_SHIFT                  (0U)
N#define SPI_FIFOWR_TXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_TXDATA_SHIFT)) & SPI_FIFOWR_TXDATA_MASK)
N#define SPI_FIFOWR_TXSSEL0_N_MASK                (0x10000U)
N#define SPI_FIFOWR_TXSSEL0_N_SHIFT               (16U)
N#define SPI_FIFOWR_TXSSEL0_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_TXSSEL0_N_SHIFT)) & SPI_FIFOWR_TXSSEL0_N_MASK)
N#define SPI_FIFOWR_TXSSEL1_N_MASK                (0x20000U)
N#define SPI_FIFOWR_TXSSEL1_N_SHIFT               (17U)
N#define SPI_FIFOWR_TXSSEL1_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_TXSSEL1_N_SHIFT)) & SPI_FIFOWR_TXSSEL1_N_MASK)
N#define SPI_FIFOWR_TXSSEL2_N_MASK                (0x40000U)
N#define SPI_FIFOWR_TXSSEL2_N_SHIFT               (18U)
N#define SPI_FIFOWR_TXSSEL2_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_TXSSEL2_N_SHIFT)) & SPI_FIFOWR_TXSSEL2_N_MASK)
N#define SPI_FIFOWR_TXSSEL3_N_MASK                (0x80000U)
N#define SPI_FIFOWR_TXSSEL3_N_SHIFT               (19U)
N#define SPI_FIFOWR_TXSSEL3_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_TXSSEL3_N_SHIFT)) & SPI_FIFOWR_TXSSEL3_N_MASK)
N#define SPI_FIFOWR_EOT_MASK                      (0x100000U)
N#define SPI_FIFOWR_EOT_SHIFT                     (20U)
N#define SPI_FIFOWR_EOT(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_EOT_SHIFT)) & SPI_FIFOWR_EOT_MASK)
N#define SPI_FIFOWR_EOF_MASK                      (0x200000U)
N#define SPI_FIFOWR_EOF_SHIFT                     (21U)
N#define SPI_FIFOWR_EOF(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_EOF_SHIFT)) & SPI_FIFOWR_EOF_MASK)
N#define SPI_FIFOWR_RXIGNORE_MASK                 (0x400000U)
N#define SPI_FIFOWR_RXIGNORE_SHIFT                (22U)
N#define SPI_FIFOWR_RXIGNORE(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_RXIGNORE_SHIFT)) & SPI_FIFOWR_RXIGNORE_MASK)
N#define SPI_FIFOWR_LEN_MASK                      (0xF000000U)
N#define SPI_FIFOWR_LEN_SHIFT                     (24U)
N#define SPI_FIFOWR_LEN(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_FIFOWR_LEN_SHIFT)) & SPI_FIFOWR_LEN_MASK)
N
N/*! @name FIFORD - FIFO read data. */
N#define SPI_FIFORD_RXDATA_MASK                   (0xFFFFU)
N#define SPI_FIFORD_RXDATA_SHIFT                  (0U)
N#define SPI_FIFORD_RXDATA(x)                     (((uint32_t)(((uint32_t)(x)) << SPI_FIFORD_RXDATA_SHIFT)) & SPI_FIFORD_RXDATA_MASK)
N#define SPI_FIFORD_RXSSEL0_N_MASK                (0x10000U)
N#define SPI_FIFORD_RXSSEL0_N_SHIFT               (16U)
N#define SPI_FIFORD_RXSSEL0_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFORD_RXSSEL0_N_SHIFT)) & SPI_FIFORD_RXSSEL0_N_MASK)
N#define SPI_FIFORD_RXSSEL1_N_MASK                (0x20000U)
N#define SPI_FIFORD_RXSSEL1_N_SHIFT               (17U)
N#define SPI_FIFORD_RXSSEL1_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFORD_RXSSEL1_N_SHIFT)) & SPI_FIFORD_RXSSEL1_N_MASK)
N#define SPI_FIFORD_RXSSEL2_N_MASK                (0x40000U)
N#define SPI_FIFORD_RXSSEL2_N_SHIFT               (18U)
N#define SPI_FIFORD_RXSSEL2_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFORD_RXSSEL2_N_SHIFT)) & SPI_FIFORD_RXSSEL2_N_MASK)
N#define SPI_FIFORD_RXSSEL3_N_MASK                (0x80000U)
N#define SPI_FIFORD_RXSSEL3_N_SHIFT               (19U)
N#define SPI_FIFORD_RXSSEL3_N(x)                  (((uint32_t)(((uint32_t)(x)) << SPI_FIFORD_RXSSEL3_N_SHIFT)) & SPI_FIFORD_RXSSEL3_N_MASK)
N#define SPI_FIFORD_SOT_MASK                      (0x100000U)
N#define SPI_FIFORD_SOT_SHIFT                     (20U)
N#define SPI_FIFORD_SOT(x)                        (((uint32_t)(((uint32_t)(x)) << SPI_FIFORD_SOT_SHIFT)) & SPI_FIFORD_SOT_MASK)
N
N/*! @name FIFORDNOPOP - FIFO data read with no FIFO pop. */
N#define SPI_FIFORDNOPOP_RXDATA_MASK              (0xFFFFU)
N#define SPI_FIFORDNOPOP_RXDATA_SHIFT             (0U)
N#define SPI_FIFORDNOPOP_RXDATA(x)                (((uint32_t)(((uint32_t)(x)) << SPI_FIFORDNOPOP_RXDATA_SHIFT)) & SPI_FIFORDNOPOP_RXDATA_MASK)
N#define SPI_FIFORDNOPOP_RXSSEL0_N_MASK           (0x10000U)
N#define SPI_FIFORDNOPOP_RXSSEL0_N_SHIFT          (16U)
N#define SPI_FIFORDNOPOP_RXSSEL0_N(x)             (((uint32_t)(((uint32_t)(x)) << SPI_FIFORDNOPOP_RXSSEL0_N_SHIFT)) & SPI_FIFORDNOPOP_RXSSEL0_N_MASK)
N#define SPI_FIFORDNOPOP_RXSSEL1_N_MASK           (0x20000U)
N#define SPI_FIFORDNOPOP_RXSSEL1_N_SHIFT          (17U)
N#define SPI_FIFORDNOPOP_RXSSEL1_N(x)             (((uint32_t)(((uint32_t)(x)) << SPI_FIFORDNOPOP_RXSSEL1_N_SHIFT)) & SPI_FIFORDNOPOP_RXSSEL1_N_MASK)
N#define SPI_FIFORDNOPOP_RXSSEL2_N_MASK           (0x40000U)
N#define SPI_FIFORDNOPOP_RXSSEL2_N_SHIFT          (18U)
N#define SPI_FIFORDNOPOP_RXSSEL2_N(x)             (((uint32_t)(((uint32_t)(x)) << SPI_FIFORDNOPOP_RXSSEL2_N_SHIFT)) & SPI_FIFORDNOPOP_RXSSEL2_N_MASK)
N#define SPI_FIFORDNOPOP_RXSSEL3_N_MASK           (0x80000U)
N#define SPI_FIFORDNOPOP_RXSSEL3_N_SHIFT          (19U)
N#define SPI_FIFORDNOPOP_RXSSEL3_N(x)             (((uint32_t)(((uint32_t)(x)) << SPI_FIFORDNOPOP_RXSSEL3_N_SHIFT)) & SPI_FIFORDNOPOP_RXSSEL3_N_MASK)
N#define SPI_FIFORDNOPOP_SOT_MASK                 (0x100000U)
N#define SPI_FIFORDNOPOP_SOT_SHIFT                (20U)
N#define SPI_FIFORDNOPOP_SOT(x)                   (((uint32_t)(((uint32_t)(x)) << SPI_FIFORDNOPOP_SOT_SHIFT)) & SPI_FIFORDNOPOP_SOT_MASK)
N
N/*! @name ID - Peripheral identification register. */
N#define SPI_ID_APERTURE_MASK                     (0xFFU)
N#define SPI_ID_APERTURE_SHIFT                    (0U)
N#define SPI_ID_APERTURE(x)                       (((uint32_t)(((uint32_t)(x)) << SPI_ID_APERTURE_SHIFT)) & SPI_ID_APERTURE_MASK)
N#define SPI_ID_MINOR_REV_MASK                    (0xF00U)
N#define SPI_ID_MINOR_REV_SHIFT                   (8U)
N#define SPI_ID_MINOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_ID_MINOR_REV_SHIFT)) & SPI_ID_MINOR_REV_MASK)
N#define SPI_ID_MAJOR_REV_MASK                    (0xF000U)
N#define SPI_ID_MAJOR_REV_SHIFT                   (12U)
N#define SPI_ID_MAJOR_REV(x)                      (((uint32_t)(((uint32_t)(x)) << SPI_ID_MAJOR_REV_SHIFT)) & SPI_ID_MAJOR_REV_MASK)
N#define SPI_ID_ID_MASK                           (0xFFFF0000U)
N#define SPI_ID_ID_SHIFT                          (16U)
N#define SPI_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << SPI_ID_ID_SHIFT)) & SPI_ID_ID_MASK)
N
N
N/*!
N * @}
N */ /* end of group SPI_Register_Masks */
N
N
N/* SPI - Peripheral instance base addresses */
N/** Peripheral SPI0 base address */
N#define SPI0_BASE                                (0x40086000u)
N/** Peripheral SPI0 base pointer */
N#define SPI0                                     ((SPI_Type *)SPI0_BASE)
N/** Peripheral SPI1 base address */
N#define SPI1_BASE                                (0x40087000u)
N/** Peripheral SPI1 base pointer */
N#define SPI1                                     ((SPI_Type *)SPI1_BASE)
N/** Peripheral SPI2 base address */
N#define SPI2_BASE                                (0x40088000u)
N/** Peripheral SPI2 base pointer */
N#define SPI2                                     ((SPI_Type *)SPI2_BASE)
N/** Peripheral SPI3 base address */
N#define SPI3_BASE                                (0x40089000u)
N/** Peripheral SPI3 base pointer */
N#define SPI3                                     ((SPI_Type *)SPI3_BASE)
N/** Peripheral SPI4 base address */
N#define SPI4_BASE                                (0x4008A000u)
N/** Peripheral SPI4 base pointer */
N#define SPI4                                     ((SPI_Type *)SPI4_BASE)
N/** Peripheral SPI5 base address */
N#define SPI5_BASE                                (0x40096000u)
N/** Peripheral SPI5 base pointer */
N#define SPI5                                     ((SPI_Type *)SPI5_BASE)
N/** Peripheral SPI6 base address */
N#define SPI6_BASE                                (0x40097000u)
N/** Peripheral SPI6 base pointer */
N#define SPI6                                     ((SPI_Type *)SPI6_BASE)
N/** Peripheral SPI7 base address */
N#define SPI7_BASE                                (0x40098000u)
N/** Peripheral SPI7 base pointer */
N#define SPI7                                     ((SPI_Type *)SPI7_BASE)
N/** Peripheral SPI8 base address */
N#define SPI8_BASE                                (0x40099000u)
N/** Peripheral SPI8 base pointer */
N#define SPI8                                     ((SPI_Type *)SPI8_BASE)
N/** Peripheral SPI9 base address */
N#define SPI9_BASE                                (0x4009A000u)
N/** Peripheral SPI9 base pointer */
N#define SPI9                                     ((SPI_Type *)SPI9_BASE)
N/** Array initializer of SPI peripheral base addresses */
N#define SPI_BASE_ADDRS                           { SPI0_BASE, SPI1_BASE, SPI2_BASE, SPI3_BASE, SPI4_BASE, SPI5_BASE, SPI6_BASE, SPI7_BASE, SPI8_BASE, SPI9_BASE }
N/** Array initializer of SPI peripheral base pointers */
N#define SPI_BASE_PTRS                            { SPI0, SPI1, SPI2, SPI3, SPI4, SPI5, SPI6, SPI7, SPI8, SPI9 }
N/** Interrupt vectors for the SPI peripheral type */
N#define SPI_IRQS                                 { FLEXCOMM0_IRQn, FLEXCOMM1_IRQn, FLEXCOMM2_IRQn, FLEXCOMM3_IRQn, FLEXCOMM4_IRQn, FLEXCOMM5_IRQn, FLEXCOMM6_IRQn, FLEXCOMM7_IRQn, FLEXCOMM8_IRQn, FLEXCOMM9_IRQn }
N
N/*!
N * @}
N */ /* end of group SPI_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SPIFI Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPIFI_Peripheral_Access_Layer SPIFI Peripheral Access Layer
N * @{
N */
N
N/** SPIFI - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CTRL;                              /**< SPIFI control register, offset: 0x0 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t CMD;                               /**< SPIFI command register, offset: 0x4 */
X  volatile uint32_t CMD;                                
N  __IO uint32_t ADDR;                              /**< SPIFI address register, offset: 0x8 */
X  volatile uint32_t ADDR;                               
N  __IO uint32_t IDATA;                             /**< SPIFI intermediate data register, offset: 0xC */
X  volatile uint32_t IDATA;                              
N  __IO uint32_t CLIMIT;                            /**< SPIFI limit register, offset: 0x10 */
X  volatile uint32_t CLIMIT;                             
N  __IO uint32_t DATA;                              /**< SPIFI data register, offset: 0x14 */
X  volatile uint32_t DATA;                               
N  __IO uint32_t MCMD;                              /**< SPIFI memory command register, offset: 0x18 */
X  volatile uint32_t MCMD;                               
N  __IO uint32_t STAT;                              /**< SPIFI status register, offset: 0x1C */
X  volatile uint32_t STAT;                               
N} SPIFI_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SPIFI Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPIFI_Register_Masks SPIFI Register Masks
N * @{
N */
N
N/*! @name CTRL - SPIFI control register */
N#define SPIFI_CTRL_TIMEOUT_MASK                  (0xFFFFU)
N#define SPIFI_CTRL_TIMEOUT_SHIFT                 (0U)
N#define SPIFI_CTRL_TIMEOUT(x)                    (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_TIMEOUT_SHIFT)) & SPIFI_CTRL_TIMEOUT_MASK)
N#define SPIFI_CTRL_CSHIGH_MASK                   (0xF0000U)
N#define SPIFI_CTRL_CSHIGH_SHIFT                  (16U)
N#define SPIFI_CTRL_CSHIGH(x)                     (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_CSHIGH_SHIFT)) & SPIFI_CTRL_CSHIGH_MASK)
N#define SPIFI_CTRL_D_PRFTCH_DIS_MASK             (0x200000U)
N#define SPIFI_CTRL_D_PRFTCH_DIS_SHIFT            (21U)
N#define SPIFI_CTRL_D_PRFTCH_DIS(x)               (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_D_PRFTCH_DIS_SHIFT)) & SPIFI_CTRL_D_PRFTCH_DIS_MASK)
N#define SPIFI_CTRL_INTEN_MASK                    (0x400000U)
N#define SPIFI_CTRL_INTEN_SHIFT                   (22U)
N#define SPIFI_CTRL_INTEN(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_INTEN_SHIFT)) & SPIFI_CTRL_INTEN_MASK)
N#define SPIFI_CTRL_MODE3_MASK                    (0x800000U)
N#define SPIFI_CTRL_MODE3_SHIFT                   (23U)
N#define SPIFI_CTRL_MODE3(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_MODE3_SHIFT)) & SPIFI_CTRL_MODE3_MASK)
N#define SPIFI_CTRL_PRFTCH_DIS_MASK               (0x8000000U)
N#define SPIFI_CTRL_PRFTCH_DIS_SHIFT              (27U)
N#define SPIFI_CTRL_PRFTCH_DIS(x)                 (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_PRFTCH_DIS_SHIFT)) & SPIFI_CTRL_PRFTCH_DIS_MASK)
N#define SPIFI_CTRL_DUAL_MASK                     (0x10000000U)
N#define SPIFI_CTRL_DUAL_SHIFT                    (28U)
N#define SPIFI_CTRL_DUAL(x)                       (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_DUAL_SHIFT)) & SPIFI_CTRL_DUAL_MASK)
N#define SPIFI_CTRL_RFCLK_MASK                    (0x20000000U)
N#define SPIFI_CTRL_RFCLK_SHIFT                   (29U)
N#define SPIFI_CTRL_RFCLK(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_RFCLK_SHIFT)) & SPIFI_CTRL_RFCLK_MASK)
N#define SPIFI_CTRL_FBCLK_MASK                    (0x40000000U)
N#define SPIFI_CTRL_FBCLK_SHIFT                   (30U)
N#define SPIFI_CTRL_FBCLK(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_FBCLK_SHIFT)) & SPIFI_CTRL_FBCLK_MASK)
N#define SPIFI_CTRL_DMAEN_MASK                    (0x80000000U)
N#define SPIFI_CTRL_DMAEN_SHIFT                   (31U)
N#define SPIFI_CTRL_DMAEN(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_CTRL_DMAEN_SHIFT)) & SPIFI_CTRL_DMAEN_MASK)
N
N/*! @name CMD - SPIFI command register */
N#define SPIFI_CMD_DATALEN_MASK                   (0x3FFFU)
N#define SPIFI_CMD_DATALEN_SHIFT                  (0U)
N#define SPIFI_CMD_DATALEN(x)                     (((uint32_t)(((uint32_t)(x)) << SPIFI_CMD_DATALEN_SHIFT)) & SPIFI_CMD_DATALEN_MASK)
N#define SPIFI_CMD_POLL_MASK                      (0x4000U)
N#define SPIFI_CMD_POLL_SHIFT                     (14U)
N#define SPIFI_CMD_POLL(x)                        (((uint32_t)(((uint32_t)(x)) << SPIFI_CMD_POLL_SHIFT)) & SPIFI_CMD_POLL_MASK)
N#define SPIFI_CMD_DOUT_MASK                      (0x8000U)
N#define SPIFI_CMD_DOUT_SHIFT                     (15U)
N#define SPIFI_CMD_DOUT(x)                        (((uint32_t)(((uint32_t)(x)) << SPIFI_CMD_DOUT_SHIFT)) & SPIFI_CMD_DOUT_MASK)
N#define SPIFI_CMD_INTLEN_MASK                    (0x70000U)
N#define SPIFI_CMD_INTLEN_SHIFT                   (16U)
N#define SPIFI_CMD_INTLEN(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_CMD_INTLEN_SHIFT)) & SPIFI_CMD_INTLEN_MASK)
N#define SPIFI_CMD_FIELDFORM_MASK                 (0x180000U)
N#define SPIFI_CMD_FIELDFORM_SHIFT                (19U)
N#define SPIFI_CMD_FIELDFORM(x)                   (((uint32_t)(((uint32_t)(x)) << SPIFI_CMD_FIELDFORM_SHIFT)) & SPIFI_CMD_FIELDFORM_MASK)
N#define SPIFI_CMD_FRAMEFORM_MASK                 (0xE00000U)
N#define SPIFI_CMD_FRAMEFORM_SHIFT                (21U)
N#define SPIFI_CMD_FRAMEFORM(x)                   (((uint32_t)(((uint32_t)(x)) << SPIFI_CMD_FRAMEFORM_SHIFT)) & SPIFI_CMD_FRAMEFORM_MASK)
N#define SPIFI_CMD_OPCODE_MASK                    (0xFF000000U)
N#define SPIFI_CMD_OPCODE_SHIFT                   (24U)
N#define SPIFI_CMD_OPCODE(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_CMD_OPCODE_SHIFT)) & SPIFI_CMD_OPCODE_MASK)
N
N/*! @name ADDR - SPIFI address register */
N#define SPIFI_ADDR_ADDRESS_MASK                  (0xFFFFFFFFU)
N#define SPIFI_ADDR_ADDRESS_SHIFT                 (0U)
N#define SPIFI_ADDR_ADDRESS(x)                    (((uint32_t)(((uint32_t)(x)) << SPIFI_ADDR_ADDRESS_SHIFT)) & SPIFI_ADDR_ADDRESS_MASK)
N
N/*! @name IDATA - SPIFI intermediate data register */
N#define SPIFI_IDATA_IDATA_MASK                   (0xFFFFFFFFU)
N#define SPIFI_IDATA_IDATA_SHIFT                  (0U)
N#define SPIFI_IDATA_IDATA(x)                     (((uint32_t)(((uint32_t)(x)) << SPIFI_IDATA_IDATA_SHIFT)) & SPIFI_IDATA_IDATA_MASK)
N
N/*! @name CLIMIT - SPIFI limit register */
N#define SPIFI_CLIMIT_CLIMIT_MASK                 (0xFFFFFFFFU)
N#define SPIFI_CLIMIT_CLIMIT_SHIFT                (0U)
N#define SPIFI_CLIMIT_CLIMIT(x)                   (((uint32_t)(((uint32_t)(x)) << SPIFI_CLIMIT_CLIMIT_SHIFT)) & SPIFI_CLIMIT_CLIMIT_MASK)
N
N/*! @name DATA - SPIFI data register */
N#define SPIFI_DATA_DATA_MASK                     (0xFFFFFFFFU)
N#define SPIFI_DATA_DATA_SHIFT                    (0U)
N#define SPIFI_DATA_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << SPIFI_DATA_DATA_SHIFT)) & SPIFI_DATA_DATA_MASK)
N
N/*! @name MCMD - SPIFI memory command register */
N#define SPIFI_MCMD_POLL_MASK                     (0x4000U)
N#define SPIFI_MCMD_POLL_SHIFT                    (14U)
N#define SPIFI_MCMD_POLL(x)                       (((uint32_t)(((uint32_t)(x)) << SPIFI_MCMD_POLL_SHIFT)) & SPIFI_MCMD_POLL_MASK)
N#define SPIFI_MCMD_DOUT_MASK                     (0x8000U)
N#define SPIFI_MCMD_DOUT_SHIFT                    (15U)
N#define SPIFI_MCMD_DOUT(x)                       (((uint32_t)(((uint32_t)(x)) << SPIFI_MCMD_DOUT_SHIFT)) & SPIFI_MCMD_DOUT_MASK)
N#define SPIFI_MCMD_INTLEN_MASK                   (0x70000U)
N#define SPIFI_MCMD_INTLEN_SHIFT                  (16U)
N#define SPIFI_MCMD_INTLEN(x)                     (((uint32_t)(((uint32_t)(x)) << SPIFI_MCMD_INTLEN_SHIFT)) & SPIFI_MCMD_INTLEN_MASK)
N#define SPIFI_MCMD_FIELDFORM_MASK                (0x180000U)
N#define SPIFI_MCMD_FIELDFORM_SHIFT               (19U)
N#define SPIFI_MCMD_FIELDFORM(x)                  (((uint32_t)(((uint32_t)(x)) << SPIFI_MCMD_FIELDFORM_SHIFT)) & SPIFI_MCMD_FIELDFORM_MASK)
N#define SPIFI_MCMD_FRAMEFORM_MASK                (0xE00000U)
N#define SPIFI_MCMD_FRAMEFORM_SHIFT               (21U)
N#define SPIFI_MCMD_FRAMEFORM(x)                  (((uint32_t)(((uint32_t)(x)) << SPIFI_MCMD_FRAMEFORM_SHIFT)) & SPIFI_MCMD_FRAMEFORM_MASK)
N#define SPIFI_MCMD_OPCODE_MASK                   (0xFF000000U)
N#define SPIFI_MCMD_OPCODE_SHIFT                  (24U)
N#define SPIFI_MCMD_OPCODE(x)                     (((uint32_t)(((uint32_t)(x)) << SPIFI_MCMD_OPCODE_SHIFT)) & SPIFI_MCMD_OPCODE_MASK)
N
N/*! @name STAT - SPIFI status register */
N#define SPIFI_STAT_MCINIT_MASK                   (0x1U)
N#define SPIFI_STAT_MCINIT_SHIFT                  (0U)
N#define SPIFI_STAT_MCINIT(x)                     (((uint32_t)(((uint32_t)(x)) << SPIFI_STAT_MCINIT_SHIFT)) & SPIFI_STAT_MCINIT_MASK)
N#define SPIFI_STAT_CMD_MASK                      (0x2U)
N#define SPIFI_STAT_CMD_SHIFT                     (1U)
N#define SPIFI_STAT_CMD(x)                        (((uint32_t)(((uint32_t)(x)) << SPIFI_STAT_CMD_SHIFT)) & SPIFI_STAT_CMD_MASK)
N#define SPIFI_STAT_RESET_MASK                    (0x10U)
N#define SPIFI_STAT_RESET_SHIFT                   (4U)
N#define SPIFI_STAT_RESET(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_STAT_RESET_SHIFT)) & SPIFI_STAT_RESET_MASK)
N#define SPIFI_STAT_INTRQ_MASK                    (0x20U)
N#define SPIFI_STAT_INTRQ_SHIFT                   (5U)
N#define SPIFI_STAT_INTRQ(x)                      (((uint32_t)(((uint32_t)(x)) << SPIFI_STAT_INTRQ_SHIFT)) & SPIFI_STAT_INTRQ_MASK)
N
N
N/*!
N * @}
N */ /* end of group SPIFI_Register_Masks */
N
N
N/* SPIFI - Peripheral instance base addresses */
N/** Peripheral SPIFI0 base address */
N#define SPIFI0_BASE                              (0x40080000u)
N/** Peripheral SPIFI0 base pointer */
N#define SPIFI0                                   ((SPIFI_Type *)SPIFI0_BASE)
N/** Array initializer of SPIFI peripheral base addresses */
N#define SPIFI_BASE_ADDRS                         { SPIFI0_BASE }
N/** Array initializer of SPIFI peripheral base pointers */
N#define SPIFI_BASE_PTRS                          { SPIFI0 }
N/** Interrupt vectors for the SPIFI peripheral type */
N#define SPIFI_IRQS                               { SPIFI0_IRQn }
N
N/*!
N * @}
N */ /* end of group SPIFI_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SYSCON Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SYSCON_Peripheral_Access_Layer SYSCON Peripheral Access Layer
N * @{
N */
N
N/** SYSCON - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[16];
N  __IO uint32_t AHBMATPRIO;                        /**< AHB multilayer matrix priority control, offset: 0x10 */
X  volatile uint32_t AHBMATPRIO;                         
N       uint8_t RESERVED_1[44];
N  __IO uint32_t SYSTCKCAL;                         /**< System tick counter calibration, offset: 0x40 */
X  volatile uint32_t SYSTCKCAL;                          
N       uint8_t RESERVED_2[4];
N  __IO uint32_t NMISRC;                            /**< NMI Source Select, offset: 0x48 */
X  volatile uint32_t NMISRC;                             
N  __IO uint32_t ASYNCAPBCTRL;                      /**< Asynchronous APB Control, offset: 0x4C */
X  volatile uint32_t ASYNCAPBCTRL;                       
N       uint8_t RESERVED_3[112];
N  __I  uint32_t PIOPORCAP[2];                      /**< POR captured value of port n, array offset: 0xC0, array step: 0x4 */
X  volatile const  uint32_t PIOPORCAP[2];                       
N       uint8_t RESERVED_4[8];
N  __I  uint32_t PIORESCAP[2];                      /**< Reset captured value of port n, array offset: 0xD0, array step: 0x4 */
X  volatile const  uint32_t PIORESCAP[2];                       
N       uint8_t RESERVED_5[40];
N  __IO uint32_t PRESETCTRL[3];                     /**< Peripheral reset control n, array offset: 0x100, array step: 0x4 */
X  volatile uint32_t PRESETCTRL[3];                      
N       uint8_t RESERVED_6[20];
N  __O  uint32_t PRESETCTRLSET[3];                  /**< Set bits in PRESETCTRLn, array offset: 0x120, array step: 0x4 */
X  volatile  uint32_t PRESETCTRLSET[3];                   
N       uint8_t RESERVED_7[20];
N  __O  uint32_t PRESETCTRLCLR[3];                  /**< Clear bits in PRESETCTRLn, array offset: 0x140, array step: 0x4 */
X  volatile  uint32_t PRESETCTRLCLR[3];                   
N       uint8_t RESERVED_8[164];
N  __IO uint32_t SYSRSTSTAT;                        /**< System reset status register, offset: 0x1F0 */
X  volatile uint32_t SYSRSTSTAT;                         
N       uint8_t RESERVED_9[12];
N  __IO uint32_t AHBCLKCTRL[3];                     /**< AHB Clock control n, array offset: 0x200, array step: 0x4 */
X  volatile uint32_t AHBCLKCTRL[3];                      
N       uint8_t RESERVED_10[20];
N  __O  uint32_t AHBCLKCTRLSET[3];                  /**< Set bits in AHBCLKCTRLn, array offset: 0x220, array step: 0x4 */
X  volatile  uint32_t AHBCLKCTRLSET[3];                   
N       uint8_t RESERVED_11[20];
N  __O  uint32_t AHBCLKCTRLCLR[3];                  /**< Clear bits in AHBCLKCTRLn, array offset: 0x240, array step: 0x4 */
X  volatile  uint32_t AHBCLKCTRLCLR[3];                   
N       uint8_t RESERVED_12[52];
N  __IO uint32_t MAINCLKSELA;                       /**< Main clock source select A, offset: 0x280 */
X  volatile uint32_t MAINCLKSELA;                        
N  __IO uint32_t MAINCLKSELB;                       /**< Main clock source select B, offset: 0x284 */
X  volatile uint32_t MAINCLKSELB;                        
N  __IO uint32_t CLKOUTSELA;                        /**< CLKOUT clock source select A, offset: 0x288 */
X  volatile uint32_t CLKOUTSELA;                         
N       uint8_t RESERVED_13[4];
N  __IO uint32_t SYSPLLCLKSEL;                      /**< PLL clock source select, offset: 0x290 */
X  volatile uint32_t SYSPLLCLKSEL;                       
N       uint8_t RESERVED_14[4];
N  __IO uint32_t AUDPLLCLKSEL;                      /**< Audio PLL clock source select, offset: 0x298 */
X  volatile uint32_t AUDPLLCLKSEL;                       
N       uint8_t RESERVED_15[4];
N  __IO uint32_t SPIFICLKSEL;                       /**< SPIFI clock source select, offset: 0x2A0 */
X  volatile uint32_t SPIFICLKSEL;                        
N  __IO uint32_t ADCCLKSEL;                         /**< ADC clock source select, offset: 0x2A4 */
X  volatile uint32_t ADCCLKSEL;                          
N  __IO uint32_t USB0CLKSEL;                        /**< USB0 clock source select, offset: 0x2A8 */
X  volatile uint32_t USB0CLKSEL;                         
N  __IO uint32_t USB1CLKSEL;                        /**< USB1 clock source select, offset: 0x2AC */
X  volatile uint32_t USB1CLKSEL;                         
N  __IO uint32_t FCLKSEL[10];                       /**< Flexcomm 0 clock source select, array offset: 0x2B0, array step: 0x4 */
X  volatile uint32_t FCLKSEL[10];                        
N       uint8_t RESERVED_16[8];
N  __IO uint32_t MCLKCLKSEL;                        /**< MCLK clock source select, offset: 0x2E0 */
X  volatile uint32_t MCLKCLKSEL;                         
N       uint8_t RESERVED_17[4];
N  __IO uint32_t FRGCLKSEL;                         /**< Fractional Rate Generator clock source select, offset: 0x2E8 */
X  volatile uint32_t FRGCLKSEL;                          
N  __IO uint32_t DMICCLKSEL;                        /**< Digital microphone (DMIC) subsystem clock select, offset: 0x2EC */
X  volatile uint32_t DMICCLKSEL;                         
N  __IO uint32_t SCTCLKSEL;                         /**< SCTimer/PWM clock source select, offset: 0x2F0 */
X  volatile uint32_t SCTCLKSEL;                          
N  __IO uint32_t LCDCLKSEL;                         /**< LCD clock source select, offset: 0x2F4 */
X  volatile uint32_t LCDCLKSEL;                          
N  __IO uint32_t SDIOCLKSEL;                        /**< SDIO clock source select, offset: 0x2F8 */
X  volatile uint32_t SDIOCLKSEL;                         
N       uint8_t RESERVED_18[4];
N  __IO uint32_t SYSTICKCLKDIV;                     /**< SYSTICK clock divider, offset: 0x300 */
X  volatile uint32_t SYSTICKCLKDIV;                      
N  __IO uint32_t ARMTRCLKDIV;                       /**< ARM Trace clock divider, offset: 0x304 */
X  volatile uint32_t ARMTRCLKDIV;                        
N  __IO uint32_t CAN0CLKDIV;                        /**< MCAN0 clock divider, offset: 0x308 */
X  volatile uint32_t CAN0CLKDIV;                         
N  __IO uint32_t CAN1CLKDIV;                        /**< MCAN1 clock divider, offset: 0x30C */
X  volatile uint32_t CAN1CLKDIV;                         
N  __IO uint32_t SC0CLKDIV;                         /**< Smartcard0 clock divider, offset: 0x310 */
X  volatile uint32_t SC0CLKDIV;                          
N  __IO uint32_t SC1CLKDIV;                         /**< Smartcard1 clock divider, offset: 0x314 */
X  volatile uint32_t SC1CLKDIV;                          
N       uint8_t RESERVED_19[104];
N  __IO uint32_t AHBCLKDIV;                         /**< AHB clock divider, offset: 0x380 */
X  volatile uint32_t AHBCLKDIV;                          
N  __IO uint32_t CLKOUTDIV;                         /**< CLKOUT clock divider, offset: 0x384 */
X  volatile uint32_t CLKOUTDIV;                          
N  __IO uint32_t FROHFCLKDIV;                       /**< FROHF clock divider, offset: 0x388 */
X  volatile uint32_t FROHFCLKDIV;                        
N       uint8_t RESERVED_20[4];
N  __IO uint32_t SPIFICLKDIV;                       /**< SPIFI clock divider, offset: 0x390 */
X  volatile uint32_t SPIFICLKDIV;                        
N  __IO uint32_t ADCCLKDIV;                         /**< ADC clock divider, offset: 0x394 */
X  volatile uint32_t ADCCLKDIV;                          
N  __IO uint32_t USB0CLKDIV;                        /**< USB0 clock divider, offset: 0x398 */
X  volatile uint32_t USB0CLKDIV;                         
N  __IO uint32_t USB1CLKDIV;                        /**< USB1 clock divider, offset: 0x39C */
X  volatile uint32_t USB1CLKDIV;                         
N  __IO uint32_t FRGCTRL;                           /**< Fractional rate divider, offset: 0x3A0 */
X  volatile uint32_t FRGCTRL;                            
N       uint8_t RESERVED_21[4];
N  __IO uint32_t DMICCLKDIV;                        /**< DMIC clock divider, offset: 0x3A8 */
X  volatile uint32_t DMICCLKDIV;                         
N  __IO uint32_t MCLKDIV;                           /**< I2S MCLK clock divider, offset: 0x3AC */
X  volatile uint32_t MCLKDIV;                            
N  __IO uint32_t LCDCLKDIV;                         /**< LCD clock divider, offset: 0x3B0 */
X  volatile uint32_t LCDCLKDIV;                          
N  __IO uint32_t SCTCLKDIV;                         /**< SCT/PWM clock divider, offset: 0x3B4 */
X  volatile uint32_t SCTCLKDIV;                          
N  __IO uint32_t EMCCLKDIV;                         /**< EMC clock divider, offset: 0x3B8 */
X  volatile uint32_t EMCCLKDIV;                          
N  __IO uint32_t SDIOCLKDIV;                        /**< SDIO clock divider, offset: 0x3BC */
X  volatile uint32_t SDIOCLKDIV;                         
N       uint8_t RESERVED_22[64];
N  __IO uint32_t FLASHCFG;                          /**< Flash wait states configuration, offset: 0x400 */
X  volatile uint32_t FLASHCFG;                           
N       uint8_t RESERVED_23[8];
N  __IO uint32_t USB0CLKCTRL;                       /**< USB0 clock control, offset: 0x40C */
X  volatile uint32_t USB0CLKCTRL;                        
N  __IO uint32_t USB0CLKSTAT;                       /**< USB0 clock status, offset: 0x410 */
X  volatile uint32_t USB0CLKSTAT;                        
N       uint8_t RESERVED_24[4];
N  __IO uint32_t FREQMECTRL;                        /**< Frequency measure register, offset: 0x418 */
X  volatile uint32_t FREQMECTRL;                         
N       uint8_t RESERVED_25[4];
N  __IO uint32_t MCLKIO;                            /**< MCLK input/output control, offset: 0x420 */
X  volatile uint32_t MCLKIO;                             
N  __IO uint32_t USB1CLKCTRL;                       /**< USB1 clock control, offset: 0x424 */
X  volatile uint32_t USB1CLKCTRL;                        
N  __IO uint32_t USB1CLKSTAT;                       /**< USB1 clock status, offset: 0x428 */
X  volatile uint32_t USB1CLKSTAT;                        
N       uint8_t RESERVED_26[24];
N  __IO uint32_t EMCSYSCTRL;                        /**< EMC system control, offset: 0x444 */
X  volatile uint32_t EMCSYSCTRL;                         
N  __IO uint32_t EMCDLYCTRL;                        /**< EMC clock delay control, offset: 0x448 */
X  volatile uint32_t EMCDLYCTRL;                         
N  __IO uint32_t EMCDLYCAL;                         /**< EMC delay chain calibration control, offset: 0x44C */
X  volatile uint32_t EMCDLYCAL;                          
N  __IO uint32_t ETHPHYSEL;                         /**< Ethernet PHY Selection, offset: 0x450 */
X  volatile uint32_t ETHPHYSEL;                          
N  __IO uint32_t ETHSBDCTRL;                        /**< Ethernet SBD flow control, offset: 0x454 */
X  volatile uint32_t ETHSBDCTRL;                         
N       uint8_t RESERVED_27[8];
N  __IO uint32_t SDIOCLKCTRL;                       /**< SDIO CCLKIN phase and delay control, offset: 0x460 */
X  volatile uint32_t SDIOCLKCTRL;                        
N       uint8_t RESERVED_28[156];
N  __IO uint32_t FROCTRL;                           /**< FRO oscillator control, offset: 0x500 */
X  volatile uint32_t FROCTRL;                            
N  __IO uint32_t SYSOSCCTRL;                        /**< System oscillator control, offset: 0x504 */
X  volatile uint32_t SYSOSCCTRL;                         
N  __IO uint32_t WDTOSCCTRL;                        /**< Watchdog oscillator control, offset: 0x508 */
X  volatile uint32_t WDTOSCCTRL;                         
N  __IO uint32_t RTCOSCCTRL;                        /**< RTC oscillator 32 kHz output control, offset: 0x50C */
X  volatile uint32_t RTCOSCCTRL;                         
N       uint8_t RESERVED_29[12];
N  __IO uint32_t USBPLLCTRL;                        /**< USB PLL control, offset: 0x51C */
X  volatile uint32_t USBPLLCTRL;                         
N  __IO uint32_t USBPLLSTAT;                        /**< USB PLL status, offset: 0x520 */
X  volatile uint32_t USBPLLSTAT;                         
N       uint8_t RESERVED_30[92];
N  __IO uint32_t SYSPLLCTRL;                        /**< System PLL control, offset: 0x580 */
X  volatile uint32_t SYSPLLCTRL;                         
N  __IO uint32_t SYSPLLSTAT;                        /**< PLL status, offset: 0x584 */
X  volatile uint32_t SYSPLLSTAT;                         
N  __IO uint32_t SYSPLLNDEC;                        /**< PLL N divider, offset: 0x588 */
X  volatile uint32_t SYSPLLNDEC;                         
N  __IO uint32_t SYSPLLPDEC;                        /**< PLL P divider, offset: 0x58C */
X  volatile uint32_t SYSPLLPDEC;                         
N  __IO uint32_t SYSPLLMDEC;                        /**< System PLL M divider, offset: 0x590 */
X  volatile uint32_t SYSPLLMDEC;                         
N       uint8_t RESERVED_31[12];
N  __IO uint32_t AUDPLLCTRL;                        /**< Audio PLL control, offset: 0x5A0 */
X  volatile uint32_t AUDPLLCTRL;                         
N  __IO uint32_t AUDPLLSTAT;                        /**< Audio PLL status, offset: 0x5A4 */
X  volatile uint32_t AUDPLLSTAT;                         
N  __IO uint32_t AUDPLLNDEC;                        /**< Audio PLL N divider, offset: 0x5A8 */
X  volatile uint32_t AUDPLLNDEC;                         
N  __IO uint32_t AUDPLLPDEC;                        /**< Audio PLL P divider, offset: 0x5AC */
X  volatile uint32_t AUDPLLPDEC;                         
N  __IO uint32_t AUDPLLMDEC;                        /**< Audio PLL M divider, offset: 0x5B0 */
X  volatile uint32_t AUDPLLMDEC;                         
N  __IO uint32_t AUDPLLFRAC;                        /**< Audio PLL fractional divider control, offset: 0x5B4 */
X  volatile uint32_t AUDPLLFRAC;                         
N       uint8_t RESERVED_32[72];
N  __IO uint32_t PDSLEEPCFG[2];                     /**< Power configuration register 0, array offset: 0x600, array step: 0x4 */
X  volatile uint32_t PDSLEEPCFG[2];                      
N       uint8_t RESERVED_33[8];
N  __IO uint32_t PDRUNCFG[2];                       /**< Power configuration register 0, array offset: 0x610, array step: 0x4 */
X  volatile uint32_t PDRUNCFG[2];                        
N       uint8_t RESERVED_34[8];
N  __IO uint32_t PDRUNCFGSET[2];                    /**< Set bits in PDRUNCFG0, array offset: 0x620, array step: 0x4 */
X  volatile uint32_t PDRUNCFGSET[2];                     
N       uint8_t RESERVED_35[8];
N  __IO uint32_t PDRUNCFGCLR[2];                    /**< Clear bits in PDRUNCFG0, array offset: 0x630, array step: 0x4 */
X  volatile uint32_t PDRUNCFGCLR[2];                     
N       uint8_t RESERVED_36[72];
N  __IO uint32_t STARTER[2];                        /**< Start logic 0 wake-up enable register, array offset: 0x680, array step: 0x4 */
X  volatile uint32_t STARTER[2];                         
N       uint8_t RESERVED_37[24];
N  __O  uint32_t STARTERSET[2];                     /**< Set bits in STARTER, array offset: 0x6A0, array step: 0x4 */
X  volatile  uint32_t STARTERSET[2];                      
N       uint8_t RESERVED_38[24];
N  __O  uint32_t STARTERCLR[2];                     /**< Clear bits in STARTER0, array offset: 0x6C0, array step: 0x4 */
X  volatile  uint32_t STARTERCLR[2];                      
N       uint8_t RESERVED_39[184];
N  __IO uint32_t HWWAKE;                            /**< Configures special cases of hardware wake-up, offset: 0x780 */
X  volatile uint32_t HWWAKE;                             
N       uint8_t RESERVED_40[1664];
N  __IO uint32_t AUTOCGOR;                          /**< Auto Clock-Gate Override Register, offset: 0xE04 */
X  volatile uint32_t AUTOCGOR;                           
N       uint8_t RESERVED_41[492];
N  __I  uint32_t JTAGIDCODE;                        /**< JTAG ID code register, offset: 0xFF4 */
X  volatile const  uint32_t JTAGIDCODE;                         
N  __I  uint32_t DEVICE_ID0;                        /**< Part ID register, offset: 0xFF8 */
X  volatile const  uint32_t DEVICE_ID0;                         
N  __I  uint32_t DEVICE_ID1;                        /**< Boot ROM and die revision register, offset: 0xFFC */
X  volatile const  uint32_t DEVICE_ID1;                         
N       uint8_t RESERVED_42[127044];
N  __IO uint32_t BODCTRL;                           /**< Brown-Out Detect control, offset: 0x20044 */
X  volatile uint32_t BODCTRL;                            
N} SYSCON_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SYSCON Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SYSCON_Register_Masks SYSCON Register Masks
N * @{
N */
N
N/*! @name AHBMATPRIO - AHB multilayer matrix priority control */
N#define SYSCON_AHBMATPRIO_PRI_ICODE_MASK         (0x3U)
N#define SYSCON_AHBMATPRIO_PRI_ICODE_SHIFT        (0U)
N#define SYSCON_AHBMATPRIO_PRI_ICODE(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_ICODE_SHIFT)) & SYSCON_AHBMATPRIO_PRI_ICODE_MASK)
N#define SYSCON_AHBMATPRIO_PRI_DCODE_MASK         (0xCU)
N#define SYSCON_AHBMATPRIO_PRI_DCODE_SHIFT        (2U)
N#define SYSCON_AHBMATPRIO_PRI_DCODE(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_DCODE_SHIFT)) & SYSCON_AHBMATPRIO_PRI_DCODE_MASK)
N#define SYSCON_AHBMATPRIO_PRI_SYS_MASK           (0x30U)
N#define SYSCON_AHBMATPRIO_PRI_SYS_SHIFT          (4U)
N#define SYSCON_AHBMATPRIO_PRI_SYS(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_SYS_SHIFT)) & SYSCON_AHBMATPRIO_PRI_SYS_MASK)
N#define SYSCON_AHBMATPRIO_PRI_DMA_MASK           (0x3C0U)
N#define SYSCON_AHBMATPRIO_PRI_DMA_SHIFT          (6U)
N#define SYSCON_AHBMATPRIO_PRI_DMA(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_DMA_SHIFT)) & SYSCON_AHBMATPRIO_PRI_DMA_MASK)
N#define SYSCON_AHBMATPRIO_PRI_ETH_MASK           (0xC00U)
N#define SYSCON_AHBMATPRIO_PRI_ETH_SHIFT          (10U)
N#define SYSCON_AHBMATPRIO_PRI_ETH(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_ETH_SHIFT)) & SYSCON_AHBMATPRIO_PRI_ETH_MASK)
N#define SYSCON_AHBMATPRIO_PRI_LCD_MASK           (0x3000U)
N#define SYSCON_AHBMATPRIO_PRI_LCD_SHIFT          (12U)
N#define SYSCON_AHBMATPRIO_PRI_LCD(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_LCD_SHIFT)) & SYSCON_AHBMATPRIO_PRI_LCD_MASK)
N#define SYSCON_AHBMATPRIO_PRI_USB0_MASK          (0xC000U)
N#define SYSCON_AHBMATPRIO_PRI_USB0_SHIFT         (14U)
N#define SYSCON_AHBMATPRIO_PRI_USB0(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_USB0_SHIFT)) & SYSCON_AHBMATPRIO_PRI_USB0_MASK)
N#define SYSCON_AHBMATPRIO_PRI_USB1_MASK          (0x30000U)
N#define SYSCON_AHBMATPRIO_PRI_USB1_SHIFT         (16U)
N#define SYSCON_AHBMATPRIO_PRI_USB1(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_USB1_SHIFT)) & SYSCON_AHBMATPRIO_PRI_USB1_MASK)
N#define SYSCON_AHBMATPRIO_PRI_SDIO_MASK          (0xC0000U)
N#define SYSCON_AHBMATPRIO_PRI_SDIO_SHIFT         (18U)
N#define SYSCON_AHBMATPRIO_PRI_SDIO(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_SDIO_SHIFT)) & SYSCON_AHBMATPRIO_PRI_SDIO_MASK)
N#define SYSCON_AHBMATPRIO_PRI_MCAN1_MASK         (0x300000U)
N#define SYSCON_AHBMATPRIO_PRI_MCAN1_SHIFT        (20U)
N#define SYSCON_AHBMATPRIO_PRI_MCAN1(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_MCAN1_SHIFT)) & SYSCON_AHBMATPRIO_PRI_MCAN1_MASK)
N#define SYSCON_AHBMATPRIO_PRI_MCAN2_MASK         (0xC00000U)
N#define SYSCON_AHBMATPRIO_PRI_MCAN2_SHIFT        (22U)
N#define SYSCON_AHBMATPRIO_PRI_MCAN2(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_MCAN2_SHIFT)) & SYSCON_AHBMATPRIO_PRI_MCAN2_MASK)
N#define SYSCON_AHBMATPRIO_PRI_SHA_MASK           (0x3000000U)
N#define SYSCON_AHBMATPRIO_PRI_SHA_SHIFT          (24U)
N#define SYSCON_AHBMATPRIO_PRI_SHA(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBMATPRIO_PRI_SHA_SHIFT)) & SYSCON_AHBMATPRIO_PRI_SHA_MASK)
N
N/*! @name SYSTCKCAL - System tick counter calibration */
N#define SYSCON_SYSTCKCAL_CAL_MASK                (0xFFFFFFU)
N#define SYSCON_SYSTCKCAL_CAL_SHIFT               (0U)
N#define SYSCON_SYSTCKCAL_CAL(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSTCKCAL_CAL_SHIFT)) & SYSCON_SYSTCKCAL_CAL_MASK)
N#define SYSCON_SYSTCKCAL_SKEW_MASK               (0x1000000U)
N#define SYSCON_SYSTCKCAL_SKEW_SHIFT              (24U)
N#define SYSCON_SYSTCKCAL_SKEW(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSTCKCAL_SKEW_SHIFT)) & SYSCON_SYSTCKCAL_SKEW_MASK)
N#define SYSCON_SYSTCKCAL_NOREF_MASK              (0x2000000U)
N#define SYSCON_SYSTCKCAL_NOREF_SHIFT             (25U)
N#define SYSCON_SYSTCKCAL_NOREF(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSTCKCAL_NOREF_SHIFT)) & SYSCON_SYSTCKCAL_NOREF_MASK)
N
N/*! @name NMISRC - NMI Source Select */
N#define SYSCON_NMISRC_IRQM4_MASK                 (0x3FU)
N#define SYSCON_NMISRC_IRQM4_SHIFT                (0U)
N#define SYSCON_NMISRC_IRQM4(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_NMISRC_IRQM4_SHIFT)) & SYSCON_NMISRC_IRQM4_MASK)
N#define SYSCON_NMISRC_NMIENM4_MASK               (0x80000000U)
N#define SYSCON_NMISRC_NMIENM4_SHIFT              (31U)
N#define SYSCON_NMISRC_NMIENM4(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_NMISRC_NMIENM4_SHIFT)) & SYSCON_NMISRC_NMIENM4_MASK)
N
N/*! @name ASYNCAPBCTRL - Asynchronous APB Control */
N#define SYSCON_ASYNCAPBCTRL_ENABLE_MASK          (0x1U)
N#define SYSCON_ASYNCAPBCTRL_ENABLE_SHIFT         (0U)
N#define SYSCON_ASYNCAPBCTRL_ENABLE(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_ASYNCAPBCTRL_ENABLE_SHIFT)) & SYSCON_ASYNCAPBCTRL_ENABLE_MASK)
N
N/*! @name PIOPORCAP - POR captured value of port n */
N#define SYSCON_PIOPORCAP_PIOPORCAP_MASK          (0xFFFFFFFFU)
N#define SYSCON_PIOPORCAP_PIOPORCAP_SHIFT         (0U)
N#define SYSCON_PIOPORCAP_PIOPORCAP(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PIOPORCAP_PIOPORCAP_SHIFT)) & SYSCON_PIOPORCAP_PIOPORCAP_MASK)
N
N/* The count of SYSCON_PIOPORCAP */
N#define SYSCON_PIOPORCAP_COUNT                   (2U)
N
N/*! @name PIORESCAP - Reset captured value of port n */
N#define SYSCON_PIORESCAP_PIORESCAP_MASK          (0xFFFFFFFFU)
N#define SYSCON_PIORESCAP_PIORESCAP_SHIFT         (0U)
N#define SYSCON_PIORESCAP_PIORESCAP(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PIORESCAP_PIORESCAP_SHIFT)) & SYSCON_PIORESCAP_PIORESCAP_MASK)
N
N/* The count of SYSCON_PIORESCAP */
N#define SYSCON_PIORESCAP_COUNT                   (2U)
N
N/*! @name PRESETCTRL - Peripheral reset control n */
N#define SYSCON_PRESETCTRL_MRT_RST_MASK           (0x1U)
N#define SYSCON_PRESETCTRL_MRT_RST_SHIFT          (0U)
N#define SYSCON_PRESETCTRL_MRT_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_MRT_RST_SHIFT)) & SYSCON_PRESETCTRL_MRT_RST_MASK)
N#define SYSCON_PRESETCTRL_SCT0_RST_MASK          (0x4U)
N#define SYSCON_PRESETCTRL_SCT0_RST_SHIFT         (2U)
N#define SYSCON_PRESETCTRL_SCT0_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_SCT0_RST_SHIFT)) & SYSCON_PRESETCTRL_SCT0_RST_MASK)
N#define SYSCON_PRESETCTRL_LCD_RST_MASK           (0x4U)
N#define SYSCON_PRESETCTRL_LCD_RST_SHIFT          (2U)
N#define SYSCON_PRESETCTRL_LCD_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_LCD_RST_SHIFT)) & SYSCON_PRESETCTRL_LCD_RST_MASK)
N#define SYSCON_PRESETCTRL_SDIO_RST_MASK          (0x8U)
N#define SYSCON_PRESETCTRL_SDIO_RST_SHIFT         (3U)
N#define SYSCON_PRESETCTRL_SDIO_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_SDIO_RST_SHIFT)) & SYSCON_PRESETCTRL_SDIO_RST_MASK)
N#define SYSCON_PRESETCTRL_USB1H_RST_MASK         (0x10U)
N#define SYSCON_PRESETCTRL_USB1H_RST_SHIFT        (4U)
N#define SYSCON_PRESETCTRL_USB1H_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_USB1H_RST_SHIFT)) & SYSCON_PRESETCTRL_USB1H_RST_MASK)
N#define SYSCON_PRESETCTRL_USB1D_RST_MASK         (0x20U)
N#define SYSCON_PRESETCTRL_USB1D_RST_SHIFT        (5U)
N#define SYSCON_PRESETCTRL_USB1D_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_USB1D_RST_SHIFT)) & SYSCON_PRESETCTRL_USB1D_RST_MASK)
N#define SYSCON_PRESETCTRL_USB1RAM_RST_MASK       (0x40U)
N#define SYSCON_PRESETCTRL_USB1RAM_RST_SHIFT      (6U)
N#define SYSCON_PRESETCTRL_USB1RAM_RST(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_USB1RAM_RST_SHIFT)) & SYSCON_PRESETCTRL_USB1RAM_RST_MASK)
N#define SYSCON_PRESETCTRL_EMC_RESET_MASK         (0x80U)
N#define SYSCON_PRESETCTRL_EMC_RESET_SHIFT        (7U)
N#define SYSCON_PRESETCTRL_EMC_RESET(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_EMC_RESET_SHIFT)) & SYSCON_PRESETCTRL_EMC_RESET_MASK)
N#define SYSCON_PRESETCTRL_FLASH_RST_MASK         (0x80U)
N#define SYSCON_PRESETCTRL_FLASH_RST_SHIFT        (7U)
N#define SYSCON_PRESETCTRL_FLASH_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FLASH_RST_SHIFT)) & SYSCON_PRESETCTRL_FLASH_RST_MASK)
N#define SYSCON_PRESETCTRL_MCAN0_RST_MASK         (0x80U)
N#define SYSCON_PRESETCTRL_MCAN0_RST_SHIFT        (7U)
N#define SYSCON_PRESETCTRL_MCAN0_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_MCAN0_RST_SHIFT)) & SYSCON_PRESETCTRL_MCAN0_RST_MASK)
N#define SYSCON_PRESETCTRL_FMC_RST_MASK           (0x100U)
N#define SYSCON_PRESETCTRL_FMC_RST_SHIFT          (8U)
N#define SYSCON_PRESETCTRL_FMC_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FMC_RST_SHIFT)) & SYSCON_PRESETCTRL_FMC_RST_MASK)
N#define SYSCON_PRESETCTRL_ETH_RST_MASK           (0x100U)
N#define SYSCON_PRESETCTRL_ETH_RST_SHIFT          (8U)
N#define SYSCON_PRESETCTRL_ETH_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_ETH_RST_SHIFT)) & SYSCON_PRESETCTRL_ETH_RST_MASK)
N#define SYSCON_PRESETCTRL_MCAN1_RST_MASK         (0x100U)
N#define SYSCON_PRESETCTRL_MCAN1_RST_SHIFT        (8U)
N#define SYSCON_PRESETCTRL_MCAN1_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_MCAN1_RST_SHIFT)) & SYSCON_PRESETCTRL_MCAN1_RST_MASK)
N#define SYSCON_PRESETCTRL_GPIO4_RST_MASK         (0x200U)
N#define SYSCON_PRESETCTRL_GPIO4_RST_SHIFT        (9U)
N#define SYSCON_PRESETCTRL_GPIO4_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_GPIO4_RST_SHIFT)) & SYSCON_PRESETCTRL_GPIO4_RST_MASK)
N#define SYSCON_PRESETCTRL_EEPROM_RST_MASK        (0x200U)
N#define SYSCON_PRESETCTRL_EEPROM_RST_SHIFT       (9U)
N#define SYSCON_PRESETCTRL_EEPROM_RST(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_EEPROM_RST_SHIFT)) & SYSCON_PRESETCTRL_EEPROM_RST_MASK)
N#define SYSCON_PRESETCTRL_GPIO5_RST_MASK         (0x400U)
N#define SYSCON_PRESETCTRL_GPIO5_RST_SHIFT        (10U)
N#define SYSCON_PRESETCTRL_GPIO5_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_GPIO5_RST_SHIFT)) & SYSCON_PRESETCTRL_GPIO5_RST_MASK)
N#define SYSCON_PRESETCTRL_UTICK_RST_MASK         (0x400U)
N#define SYSCON_PRESETCTRL_UTICK_RST_SHIFT        (10U)
N#define SYSCON_PRESETCTRL_UTICK_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_UTICK_RST_SHIFT)) & SYSCON_PRESETCTRL_UTICK_RST_MASK)
N#define SYSCON_PRESETCTRL_SPIFI_RST_MASK         (0x400U)
N#define SYSCON_PRESETCTRL_SPIFI_RST_SHIFT        (10U)
N#define SYSCON_PRESETCTRL_SPIFI_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_SPIFI_RST_SHIFT)) & SYSCON_PRESETCTRL_SPIFI_RST_MASK)
N#define SYSCON_PRESETCTRL_AES_RST_MASK           (0x800U)
N#define SYSCON_PRESETCTRL_AES_RST_SHIFT          (11U)
N#define SYSCON_PRESETCTRL_AES_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_AES_RST_SHIFT)) & SYSCON_PRESETCTRL_AES_RST_MASK)
N#define SYSCON_PRESETCTRL_MUX_RST_MASK           (0x800U)
N#define SYSCON_PRESETCTRL_MUX_RST_SHIFT          (11U)
N#define SYSCON_PRESETCTRL_MUX_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_MUX_RST_SHIFT)) & SYSCON_PRESETCTRL_MUX_RST_MASK)
N#define SYSCON_PRESETCTRL_FC0_RST_MASK           (0x800U)
N#define SYSCON_PRESETCTRL_FC0_RST_SHIFT          (11U)
N#define SYSCON_PRESETCTRL_FC0_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC0_RST_SHIFT)) & SYSCON_PRESETCTRL_FC0_RST_MASK)
N#define SYSCON_PRESETCTRL_OTP_RST_MASK           (0x1000U)
N#define SYSCON_PRESETCTRL_OTP_RST_SHIFT          (12U)
N#define SYSCON_PRESETCTRL_OTP_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_OTP_RST_SHIFT)) & SYSCON_PRESETCTRL_OTP_RST_MASK)
N#define SYSCON_PRESETCTRL_FC1_RST_MASK           (0x1000U)
N#define SYSCON_PRESETCTRL_FC1_RST_SHIFT          (12U)
N#define SYSCON_PRESETCTRL_FC1_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC1_RST_SHIFT)) & SYSCON_PRESETCTRL_FC1_RST_MASK)
N#define SYSCON_PRESETCTRL_IOCON_RST_MASK         (0x2000U)
N#define SYSCON_PRESETCTRL_IOCON_RST_SHIFT        (13U)
N#define SYSCON_PRESETCTRL_IOCON_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_IOCON_RST_SHIFT)) & SYSCON_PRESETCTRL_IOCON_RST_MASK)
N#define SYSCON_PRESETCTRL_RNG_RST_MASK           (0x2000U)
N#define SYSCON_PRESETCTRL_RNG_RST_SHIFT          (13U)
N#define SYSCON_PRESETCTRL_RNG_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_RNG_RST_SHIFT)) & SYSCON_PRESETCTRL_RNG_RST_MASK)
N#define SYSCON_PRESETCTRL_FC2_RST_MASK           (0x2000U)
N#define SYSCON_PRESETCTRL_FC2_RST_SHIFT          (13U)
N#define SYSCON_PRESETCTRL_FC2_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC2_RST_SHIFT)) & SYSCON_PRESETCTRL_FC2_RST_MASK)
N#define SYSCON_PRESETCTRL_FC8_RST_MASK           (0x4000U)
N#define SYSCON_PRESETCTRL_FC8_RST_SHIFT          (14U)
N#define SYSCON_PRESETCTRL_FC8_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC8_RST_SHIFT)) & SYSCON_PRESETCTRL_FC8_RST_MASK)
N#define SYSCON_PRESETCTRL_FC3_RST_MASK           (0x4000U)
N#define SYSCON_PRESETCTRL_FC3_RST_SHIFT          (14U)
N#define SYSCON_PRESETCTRL_FC3_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC3_RST_SHIFT)) & SYSCON_PRESETCTRL_FC3_RST_MASK)
N#define SYSCON_PRESETCTRL_GPIO0_RST_MASK         (0x4000U)
N#define SYSCON_PRESETCTRL_GPIO0_RST_SHIFT        (14U)
N#define SYSCON_PRESETCTRL_GPIO0_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_GPIO0_RST_SHIFT)) & SYSCON_PRESETCTRL_GPIO0_RST_MASK)
N#define SYSCON_PRESETCTRL_GPIO1_RST_MASK         (0x8000U)
N#define SYSCON_PRESETCTRL_GPIO1_RST_SHIFT        (15U)
N#define SYSCON_PRESETCTRL_GPIO1_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_GPIO1_RST_SHIFT)) & SYSCON_PRESETCTRL_GPIO1_RST_MASK)
N#define SYSCON_PRESETCTRL_FC9_RST_MASK           (0x8000U)
N#define SYSCON_PRESETCTRL_FC9_RST_SHIFT          (15U)
N#define SYSCON_PRESETCTRL_FC9_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC9_RST_SHIFT)) & SYSCON_PRESETCTRL_FC9_RST_MASK)
N#define SYSCON_PRESETCTRL_FC4_RST_MASK           (0x8000U)
N#define SYSCON_PRESETCTRL_FC4_RST_SHIFT          (15U)
N#define SYSCON_PRESETCTRL_FC4_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC4_RST_SHIFT)) & SYSCON_PRESETCTRL_FC4_RST_MASK)
N#define SYSCON_PRESETCTRL_USB0HMR_RST_MASK       (0x10000U)
N#define SYSCON_PRESETCTRL_USB0HMR_RST_SHIFT      (16U)
N#define SYSCON_PRESETCTRL_USB0HMR_RST(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_USB0HMR_RST_SHIFT)) & SYSCON_PRESETCTRL_USB0HMR_RST_MASK)
N#define SYSCON_PRESETCTRL_GPIO2_RST_MASK         (0x10000U)
N#define SYSCON_PRESETCTRL_GPIO2_RST_SHIFT        (16U)
N#define SYSCON_PRESETCTRL_GPIO2_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_GPIO2_RST_SHIFT)) & SYSCON_PRESETCTRL_GPIO2_RST_MASK)
N#define SYSCON_PRESETCTRL_FC5_RST_MASK           (0x10000U)
N#define SYSCON_PRESETCTRL_FC5_RST_SHIFT          (16U)
N#define SYSCON_PRESETCTRL_FC5_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC5_RST_SHIFT)) & SYSCON_PRESETCTRL_FC5_RST_MASK)
N#define SYSCON_PRESETCTRL_GPIO3_RST_MASK         (0x20000U)
N#define SYSCON_PRESETCTRL_GPIO3_RST_SHIFT        (17U)
N#define SYSCON_PRESETCTRL_GPIO3_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_GPIO3_RST_SHIFT)) & SYSCON_PRESETCTRL_GPIO3_RST_MASK)
N#define SYSCON_PRESETCTRL_FC6_RST_MASK           (0x20000U)
N#define SYSCON_PRESETCTRL_FC6_RST_SHIFT          (17U)
N#define SYSCON_PRESETCTRL_FC6_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC6_RST_SHIFT)) & SYSCON_PRESETCTRL_FC6_RST_MASK)
N#define SYSCON_PRESETCTRL_USB0HSL_RST_MASK       (0x20000U)
N#define SYSCON_PRESETCTRL_USB0HSL_RST_SHIFT      (17U)
N#define SYSCON_PRESETCTRL_USB0HSL_RST(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_USB0HSL_RST_SHIFT)) & SYSCON_PRESETCTRL_USB0HSL_RST_MASK)
N#define SYSCON_PRESETCTRL_FC7_RST_MASK           (0x40000U)
N#define SYSCON_PRESETCTRL_FC7_RST_SHIFT          (18U)
N#define SYSCON_PRESETCTRL_FC7_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_FC7_RST_SHIFT)) & SYSCON_PRESETCTRL_FC7_RST_MASK)
N#define SYSCON_PRESETCTRL_SHA_RST_MASK           (0x40000U)
N#define SYSCON_PRESETCTRL_SHA_RST_SHIFT          (18U)
N#define SYSCON_PRESETCTRL_SHA_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_SHA_RST_SHIFT)) & SYSCON_PRESETCTRL_SHA_RST_MASK)
N#define SYSCON_PRESETCTRL_PINT_RST_MASK          (0x40000U)
N#define SYSCON_PRESETCTRL_PINT_RST_SHIFT         (18U)
N#define SYSCON_PRESETCTRL_PINT_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_PINT_RST_SHIFT)) & SYSCON_PRESETCTRL_PINT_RST_MASK)
N#define SYSCON_PRESETCTRL_DMIC_RST_MASK          (0x80000U)
N#define SYSCON_PRESETCTRL_DMIC_RST_SHIFT         (19U)
N#define SYSCON_PRESETCTRL_DMIC_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_DMIC_RST_SHIFT)) & SYSCON_PRESETCTRL_DMIC_RST_MASK)
N#define SYSCON_PRESETCTRL_SC0_RST_MASK           (0x80000U)
N#define SYSCON_PRESETCTRL_SC0_RST_SHIFT          (19U)
N#define SYSCON_PRESETCTRL_SC0_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_SC0_RST_SHIFT)) & SYSCON_PRESETCTRL_SC0_RST_MASK)
N#define SYSCON_PRESETCTRL_GINT_RST_MASK          (0x80000U)
N#define SYSCON_PRESETCTRL_GINT_RST_SHIFT         (19U)
N#define SYSCON_PRESETCTRL_GINT_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_GINT_RST_SHIFT)) & SYSCON_PRESETCTRL_GINT_RST_MASK)
N#define SYSCON_PRESETCTRL_SC1_RST_MASK           (0x100000U)
N#define SYSCON_PRESETCTRL_SC1_RST_SHIFT          (20U)
N#define SYSCON_PRESETCTRL_SC1_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_SC1_RST_SHIFT)) & SYSCON_PRESETCTRL_SC1_RST_MASK)
N#define SYSCON_PRESETCTRL_DMA0_RST_MASK          (0x100000U)
N#define SYSCON_PRESETCTRL_DMA0_RST_SHIFT         (20U)
N#define SYSCON_PRESETCTRL_DMA0_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_DMA0_RST_SHIFT)) & SYSCON_PRESETCTRL_DMA0_RST_MASK)
N#define SYSCON_PRESETCTRL_CRC_RST_MASK           (0x200000U)
N#define SYSCON_PRESETCTRL_CRC_RST_SHIFT          (21U)
N#define SYSCON_PRESETCTRL_CRC_RST(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_CRC_RST_SHIFT)) & SYSCON_PRESETCTRL_CRC_RST_MASK)
N#define SYSCON_PRESETCTRL_CTIMER2_RST_MASK       (0x400000U)
N#define SYSCON_PRESETCTRL_CTIMER2_RST_SHIFT      (22U)
N#define SYSCON_PRESETCTRL_CTIMER2_RST(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_CTIMER2_RST_SHIFT)) & SYSCON_PRESETCTRL_CTIMER2_RST_MASK)
N#define SYSCON_PRESETCTRL_WWDT_RST_MASK          (0x400000U)
N#define SYSCON_PRESETCTRL_WWDT_RST_SHIFT         (22U)
N#define SYSCON_PRESETCTRL_WWDT_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_WWDT_RST_SHIFT)) & SYSCON_PRESETCTRL_WWDT_RST_MASK)
N#define SYSCON_PRESETCTRL_USB0D_RST_MASK         (0x2000000U)
N#define SYSCON_PRESETCTRL_USB0D_RST_SHIFT        (25U)
N#define SYSCON_PRESETCTRL_USB0D_RST(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_USB0D_RST_SHIFT)) & SYSCON_PRESETCTRL_USB0D_RST_MASK)
N#define SYSCON_PRESETCTRL_CTIMER0_RST_MASK       (0x4000000U)
N#define SYSCON_PRESETCTRL_CTIMER0_RST_SHIFT      (26U)
N#define SYSCON_PRESETCTRL_CTIMER0_RST(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_CTIMER0_RST_SHIFT)) & SYSCON_PRESETCTRL_CTIMER0_RST_MASK)
N#define SYSCON_PRESETCTRL_ADC0_RST_MASK          (0x8000000U)
N#define SYSCON_PRESETCTRL_ADC0_RST_SHIFT         (27U)
N#define SYSCON_PRESETCTRL_ADC0_RST(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_ADC0_RST_SHIFT)) & SYSCON_PRESETCTRL_ADC0_RST_MASK)
N#define SYSCON_PRESETCTRL_CTIMER1_RST_MASK       (0x8000000U)
N#define SYSCON_PRESETCTRL_CTIMER1_RST_SHIFT      (27U)
N#define SYSCON_PRESETCTRL_CTIMER1_RST(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRL_CTIMER1_RST_SHIFT)) & SYSCON_PRESETCTRL_CTIMER1_RST_MASK)
N
N/* The count of SYSCON_PRESETCTRL */
N#define SYSCON_PRESETCTRL_COUNT                  (3U)
N
N/*! @name PRESETCTRLSET - Set bits in PRESETCTRLn */
N#define SYSCON_PRESETCTRLSET_RST_SET_MASK        (0xFFFFFFFFU)
N#define SYSCON_PRESETCTRLSET_RST_SET_SHIFT       (0U)
N#define SYSCON_PRESETCTRLSET_RST_SET(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRLSET_RST_SET_SHIFT)) & SYSCON_PRESETCTRLSET_RST_SET_MASK)
N
N/* The count of SYSCON_PRESETCTRLSET */
N#define SYSCON_PRESETCTRLSET_COUNT               (3U)
N
N/*! @name PRESETCTRLCLR - Clear bits in PRESETCTRLn */
N#define SYSCON_PRESETCTRLCLR_RST_CLR_MASK        (0xFFFFFFFFU)
N#define SYSCON_PRESETCTRLCLR_RST_CLR_SHIFT       (0U)
N#define SYSCON_PRESETCTRLCLR_RST_CLR(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PRESETCTRLCLR_RST_CLR_SHIFT)) & SYSCON_PRESETCTRLCLR_RST_CLR_MASK)
N
N/* The count of SYSCON_PRESETCTRLCLR */
N#define SYSCON_PRESETCTRLCLR_COUNT               (3U)
N
N/*! @name SYSRSTSTAT - System reset status register */
N#define SYSCON_SYSRSTSTAT_POR_MASK               (0x1U)
N#define SYSCON_SYSRSTSTAT_POR_SHIFT              (0U)
N#define SYSCON_SYSRSTSTAT_POR(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSRSTSTAT_POR_SHIFT)) & SYSCON_SYSRSTSTAT_POR_MASK)
N#define SYSCON_SYSRSTSTAT_EXTRST_MASK            (0x2U)
N#define SYSCON_SYSRSTSTAT_EXTRST_SHIFT           (1U)
N#define SYSCON_SYSRSTSTAT_EXTRST(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSRSTSTAT_EXTRST_SHIFT)) & SYSCON_SYSRSTSTAT_EXTRST_MASK)
N#define SYSCON_SYSRSTSTAT_WDT_MASK               (0x4U)
N#define SYSCON_SYSRSTSTAT_WDT_SHIFT              (2U)
N#define SYSCON_SYSRSTSTAT_WDT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSRSTSTAT_WDT_SHIFT)) & SYSCON_SYSRSTSTAT_WDT_MASK)
N#define SYSCON_SYSRSTSTAT_BOD_MASK               (0x8U)
N#define SYSCON_SYSRSTSTAT_BOD_SHIFT              (3U)
N#define SYSCON_SYSRSTSTAT_BOD(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSRSTSTAT_BOD_SHIFT)) & SYSCON_SYSRSTSTAT_BOD_MASK)
N#define SYSCON_SYSRSTSTAT_SYSRST_MASK            (0x10U)
N#define SYSCON_SYSRSTSTAT_SYSRST_SHIFT           (4U)
N#define SYSCON_SYSRSTSTAT_SYSRST(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSRSTSTAT_SYSRST_SHIFT)) & SYSCON_SYSRSTSTAT_SYSRST_MASK)
N
N/*! @name AHBCLKCTRL - AHB Clock control n */
N#define SYSCON_AHBCLKCTRL_MRT_MASK               (0x1U)
N#define SYSCON_AHBCLKCTRL_MRT_SHIFT              (0U)
N#define SYSCON_AHBCLKCTRL_MRT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_MRT_SHIFT)) & SYSCON_AHBCLKCTRL_MRT_MASK)
N#define SYSCON_AHBCLKCTRL_RIT_MASK               (0x2U)
N#define SYSCON_AHBCLKCTRL_RIT_SHIFT              (1U)
N#define SYSCON_AHBCLKCTRL_RIT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_RIT_SHIFT)) & SYSCON_AHBCLKCTRL_RIT_MASK)
N#define SYSCON_AHBCLKCTRL_ROM_MASK               (0x2U)
N#define SYSCON_AHBCLKCTRL_ROM_SHIFT              (1U)
N#define SYSCON_AHBCLKCTRL_ROM(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_ROM_SHIFT)) & SYSCON_AHBCLKCTRL_ROM_MASK)
N#define SYSCON_AHBCLKCTRL_SCT0_MASK              (0x4U)
N#define SYSCON_AHBCLKCTRL_SCT0_SHIFT             (2U)
N#define SYSCON_AHBCLKCTRL_SCT0(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SCT0_SHIFT)) & SYSCON_AHBCLKCTRL_SCT0_MASK)
N#define SYSCON_AHBCLKCTRL_LCD_MASK               (0x4U)
N#define SYSCON_AHBCLKCTRL_LCD_SHIFT              (2U)
N#define SYSCON_AHBCLKCTRL_LCD(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_LCD_SHIFT)) & SYSCON_AHBCLKCTRL_LCD_MASK)
N#define SYSCON_AHBCLKCTRL_SRAM1_MASK             (0x8U)
N#define SYSCON_AHBCLKCTRL_SRAM1_SHIFT            (3U)
N#define SYSCON_AHBCLKCTRL_SRAM1(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SRAM1_SHIFT)) & SYSCON_AHBCLKCTRL_SRAM1_MASK)
N#define SYSCON_AHBCLKCTRL_SDIO_MASK              (0x8U)
N#define SYSCON_AHBCLKCTRL_SDIO_SHIFT             (3U)
N#define SYSCON_AHBCLKCTRL_SDIO(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SDIO_SHIFT)) & SYSCON_AHBCLKCTRL_SDIO_MASK)
N#define SYSCON_AHBCLKCTRL_SRAM2_MASK             (0x10U)
N#define SYSCON_AHBCLKCTRL_SRAM2_SHIFT            (4U)
N#define SYSCON_AHBCLKCTRL_SRAM2(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SRAM2_SHIFT)) & SYSCON_AHBCLKCTRL_SRAM2_MASK)
N#define SYSCON_AHBCLKCTRL_USB1H_MASK             (0x10U)
N#define SYSCON_AHBCLKCTRL_USB1H_SHIFT            (4U)
N#define SYSCON_AHBCLKCTRL_USB1H(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_USB1H_SHIFT)) & SYSCON_AHBCLKCTRL_USB1H_MASK)
N#define SYSCON_AHBCLKCTRL_SRAM3_MASK             (0x20U)
N#define SYSCON_AHBCLKCTRL_SRAM3_SHIFT            (5U)
N#define SYSCON_AHBCLKCTRL_SRAM3(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SRAM3_SHIFT)) & SYSCON_AHBCLKCTRL_SRAM3_MASK)
N#define SYSCON_AHBCLKCTRL_USB1D_MASK             (0x20U)
N#define SYSCON_AHBCLKCTRL_USB1D_SHIFT            (5U)
N#define SYSCON_AHBCLKCTRL_USB1D(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_USB1D_SHIFT)) & SYSCON_AHBCLKCTRL_USB1D_MASK)
N#define SYSCON_AHBCLKCTRL_USB1RAM_MASK           (0x40U)
N#define SYSCON_AHBCLKCTRL_USB1RAM_SHIFT          (6U)
N#define SYSCON_AHBCLKCTRL_USB1RAM(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_USB1RAM_SHIFT)) & SYSCON_AHBCLKCTRL_USB1RAM_MASK)
N#define SYSCON_AHBCLKCTRL_FLASH_MASK             (0x80U)
N#define SYSCON_AHBCLKCTRL_FLASH_SHIFT            (7U)
N#define SYSCON_AHBCLKCTRL_FLASH(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLASH_SHIFT)) & SYSCON_AHBCLKCTRL_FLASH_MASK)
N#define SYSCON_AHBCLKCTRL_EMC_MASK               (0x80U)
N#define SYSCON_AHBCLKCTRL_EMC_SHIFT              (7U)
N#define SYSCON_AHBCLKCTRL_EMC(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_EMC_SHIFT)) & SYSCON_AHBCLKCTRL_EMC_MASK)
N#define SYSCON_AHBCLKCTRL_MCAN0_MASK             (0x80U)
N#define SYSCON_AHBCLKCTRL_MCAN0_SHIFT            (7U)
N#define SYSCON_AHBCLKCTRL_MCAN0(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_MCAN0_SHIFT)) & SYSCON_AHBCLKCTRL_MCAN0_MASK)
N#define SYSCON_AHBCLKCTRL_FMC_MASK               (0x100U)
N#define SYSCON_AHBCLKCTRL_FMC_SHIFT              (8U)
N#define SYSCON_AHBCLKCTRL_FMC(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FMC_SHIFT)) & SYSCON_AHBCLKCTRL_FMC_MASK)
N#define SYSCON_AHBCLKCTRL_ETH_MASK               (0x100U)
N#define SYSCON_AHBCLKCTRL_ETH_SHIFT              (8U)
N#define SYSCON_AHBCLKCTRL_ETH(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_ETH_SHIFT)) & SYSCON_AHBCLKCTRL_ETH_MASK)
N#define SYSCON_AHBCLKCTRL_MCAN1_MASK             (0x100U)
N#define SYSCON_AHBCLKCTRL_MCAN1_SHIFT            (8U)
N#define SYSCON_AHBCLKCTRL_MCAN1(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_MCAN1_SHIFT)) & SYSCON_AHBCLKCTRL_MCAN1_MASK)
N#define SYSCON_AHBCLKCTRL_EEPROM_MASK            (0x200U)
N#define SYSCON_AHBCLKCTRL_EEPROM_SHIFT           (9U)
N#define SYSCON_AHBCLKCTRL_EEPROM(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_EEPROM_SHIFT)) & SYSCON_AHBCLKCTRL_EEPROM_MASK)
N#define SYSCON_AHBCLKCTRL_GPIO4_MASK             (0x200U)
N#define SYSCON_AHBCLKCTRL_GPIO4_SHIFT            (9U)
N#define SYSCON_AHBCLKCTRL_GPIO4(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_GPIO4_SHIFT)) & SYSCON_AHBCLKCTRL_GPIO4_MASK)
N#define SYSCON_AHBCLKCTRL_GPIO5_MASK             (0x400U)
N#define SYSCON_AHBCLKCTRL_GPIO5_SHIFT            (10U)
N#define SYSCON_AHBCLKCTRL_GPIO5(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_GPIO5_SHIFT)) & SYSCON_AHBCLKCTRL_GPIO5_MASK)
N#define SYSCON_AHBCLKCTRL_UTICK_MASK             (0x400U)
N#define SYSCON_AHBCLKCTRL_UTICK_SHIFT            (10U)
N#define SYSCON_AHBCLKCTRL_UTICK(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_UTICK_SHIFT)) & SYSCON_AHBCLKCTRL_UTICK_MASK)
N#define SYSCON_AHBCLKCTRL_SPIFI_MASK             (0x400U)
N#define SYSCON_AHBCLKCTRL_SPIFI_SHIFT            (10U)
N#define SYSCON_AHBCLKCTRL_SPIFI(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SPIFI_SHIFT)) & SYSCON_AHBCLKCTRL_SPIFI_MASK)
N#define SYSCON_AHBCLKCTRL_INPUTMUX_MASK          (0x800U)
N#define SYSCON_AHBCLKCTRL_INPUTMUX_SHIFT         (11U)
N#define SYSCON_AHBCLKCTRL_INPUTMUX(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_INPUTMUX_SHIFT)) & SYSCON_AHBCLKCTRL_INPUTMUX_MASK)
N#define SYSCON_AHBCLKCTRL_AES_MASK               (0x800U)
N#define SYSCON_AHBCLKCTRL_AES_SHIFT              (11U)
N#define SYSCON_AHBCLKCTRL_AES(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_AES_SHIFT)) & SYSCON_AHBCLKCTRL_AES_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM0_MASK         (0x800U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM0_SHIFT        (11U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM0(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM0_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM0_MASK)
N#define SYSCON_AHBCLKCTRL_OTP_MASK               (0x1000U)
N#define SYSCON_AHBCLKCTRL_OTP_SHIFT              (12U)
N#define SYSCON_AHBCLKCTRL_OTP(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_OTP_SHIFT)) & SYSCON_AHBCLKCTRL_OTP_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM1_MASK         (0x1000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM1_SHIFT        (12U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM1(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM1_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM1_MASK)
N#define SYSCON_AHBCLKCTRL_RNG_MASK               (0x2000U)
N#define SYSCON_AHBCLKCTRL_RNG_SHIFT              (13U)
N#define SYSCON_AHBCLKCTRL_RNG(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_RNG_SHIFT)) & SYSCON_AHBCLKCTRL_RNG_MASK)
N#define SYSCON_AHBCLKCTRL_IOCON_MASK             (0x2000U)
N#define SYSCON_AHBCLKCTRL_IOCON_SHIFT            (13U)
N#define SYSCON_AHBCLKCTRL_IOCON(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_IOCON_SHIFT)) & SYSCON_AHBCLKCTRL_IOCON_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM2_MASK         (0x2000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM2_SHIFT        (13U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM2(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM2_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM2_MASK)
N#define SYSCON_AHBCLKCTRL_GPIO0_MASK             (0x4000U)
N#define SYSCON_AHBCLKCTRL_GPIO0_SHIFT            (14U)
N#define SYSCON_AHBCLKCTRL_GPIO0(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_GPIO0_SHIFT)) & SYSCON_AHBCLKCTRL_GPIO0_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM3_MASK         (0x4000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM3_SHIFT        (14U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM3(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM3_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM3_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM8_MASK         (0x4000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM8_SHIFT        (14U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM8(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM8_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM8_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM9_MASK         (0x8000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM9_SHIFT        (15U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM9(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM9_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM9_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM4_MASK         (0x8000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM4_SHIFT        (15U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM4(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM4_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM4_MASK)
N#define SYSCON_AHBCLKCTRL_GPIO1_MASK             (0x8000U)
N#define SYSCON_AHBCLKCTRL_GPIO1_SHIFT            (15U)
N#define SYSCON_AHBCLKCTRL_GPIO1(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_GPIO1_SHIFT)) & SYSCON_AHBCLKCTRL_GPIO1_MASK)
N#define SYSCON_AHBCLKCTRL_GPIO2_MASK             (0x10000U)
N#define SYSCON_AHBCLKCTRL_GPIO2_SHIFT            (16U)
N#define SYSCON_AHBCLKCTRL_GPIO2(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_GPIO2_SHIFT)) & SYSCON_AHBCLKCTRL_GPIO2_MASK)
N#define SYSCON_AHBCLKCTRL_USB0HMR_MASK           (0x10000U)
N#define SYSCON_AHBCLKCTRL_USB0HMR_SHIFT          (16U)
N#define SYSCON_AHBCLKCTRL_USB0HMR(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_USB0HMR_SHIFT)) & SYSCON_AHBCLKCTRL_USB0HMR_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM5_MASK         (0x10000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM5_SHIFT        (16U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM5(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM5_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM5_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM6_MASK         (0x20000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM6_SHIFT        (17U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM6(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM6_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM6_MASK)
N#define SYSCON_AHBCLKCTRL_GPIO3_MASK             (0x20000U)
N#define SYSCON_AHBCLKCTRL_GPIO3_SHIFT            (17U)
N#define SYSCON_AHBCLKCTRL_GPIO3(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_GPIO3_SHIFT)) & SYSCON_AHBCLKCTRL_GPIO3_MASK)
N#define SYSCON_AHBCLKCTRL_USB0HSL_MASK           (0x20000U)
N#define SYSCON_AHBCLKCTRL_USB0HSL_SHIFT          (17U)
N#define SYSCON_AHBCLKCTRL_USB0HSL(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_USB0HSL_SHIFT)) & SYSCON_AHBCLKCTRL_USB0HSL_MASK)
N#define SYSCON_AHBCLKCTRL_PINT_MASK              (0x40000U)
N#define SYSCON_AHBCLKCTRL_PINT_SHIFT             (18U)
N#define SYSCON_AHBCLKCTRL_PINT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_PINT_SHIFT)) & SYSCON_AHBCLKCTRL_PINT_MASK)
N#define SYSCON_AHBCLKCTRL_SHA0_MASK              (0x40000U)
N#define SYSCON_AHBCLKCTRL_SHA0_SHIFT             (18U)
N#define SYSCON_AHBCLKCTRL_SHA0(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SHA0_SHIFT)) & SYSCON_AHBCLKCTRL_SHA0_MASK)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM7_MASK         (0x40000U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM7_SHIFT        (18U)
N#define SYSCON_AHBCLKCTRL_FLEXCOMM7(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_FLEXCOMM7_SHIFT)) & SYSCON_AHBCLKCTRL_FLEXCOMM7_MASK)
N#define SYSCON_AHBCLKCTRL_DMIC_MASK              (0x80000U)
N#define SYSCON_AHBCLKCTRL_DMIC_SHIFT             (19U)
N#define SYSCON_AHBCLKCTRL_DMIC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_DMIC_SHIFT)) & SYSCON_AHBCLKCTRL_DMIC_MASK)
N#define SYSCON_AHBCLKCTRL_GINT_MASK              (0x80000U)
N#define SYSCON_AHBCLKCTRL_GINT_SHIFT             (19U)
N#define SYSCON_AHBCLKCTRL_GINT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_GINT_SHIFT)) & SYSCON_AHBCLKCTRL_GINT_MASK)
N#define SYSCON_AHBCLKCTRL_SC0_MASK               (0x80000U)
N#define SYSCON_AHBCLKCTRL_SC0_SHIFT              (19U)
N#define SYSCON_AHBCLKCTRL_SC0(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SC0_SHIFT)) & SYSCON_AHBCLKCTRL_SC0_MASK)
N#define SYSCON_AHBCLKCTRL_SC1_MASK               (0x100000U)
N#define SYSCON_AHBCLKCTRL_SC1_SHIFT              (20U)
N#define SYSCON_AHBCLKCTRL_SC1(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_SC1_SHIFT)) & SYSCON_AHBCLKCTRL_SC1_MASK)
N#define SYSCON_AHBCLKCTRL_DMA_MASK               (0x100000U)
N#define SYSCON_AHBCLKCTRL_DMA_SHIFT              (20U)
N#define SYSCON_AHBCLKCTRL_DMA(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_DMA_SHIFT)) & SYSCON_AHBCLKCTRL_DMA_MASK)
N#define SYSCON_AHBCLKCTRL_CRC_MASK               (0x200000U)
N#define SYSCON_AHBCLKCTRL_CRC_SHIFT              (21U)
N#define SYSCON_AHBCLKCTRL_CRC(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_CRC_SHIFT)) & SYSCON_AHBCLKCTRL_CRC_MASK)
N#define SYSCON_AHBCLKCTRL_WWDT_MASK              (0x400000U)
N#define SYSCON_AHBCLKCTRL_WWDT_SHIFT             (22U)
N#define SYSCON_AHBCLKCTRL_WWDT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_WWDT_SHIFT)) & SYSCON_AHBCLKCTRL_WWDT_MASK)
N#define SYSCON_AHBCLKCTRL_CTIMER2_MASK           (0x400000U)
N#define SYSCON_AHBCLKCTRL_CTIMER2_SHIFT          (22U)
N#define SYSCON_AHBCLKCTRL_CTIMER2(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_CTIMER2_SHIFT)) & SYSCON_AHBCLKCTRL_CTIMER2_MASK)
N#define SYSCON_AHBCLKCTRL_RTC_MASK               (0x800000U)
N#define SYSCON_AHBCLKCTRL_RTC_SHIFT              (23U)
N#define SYSCON_AHBCLKCTRL_RTC(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_RTC_SHIFT)) & SYSCON_AHBCLKCTRL_RTC_MASK)
N#define SYSCON_AHBCLKCTRL_USB0D_MASK             (0x2000000U)
N#define SYSCON_AHBCLKCTRL_USB0D_SHIFT            (25U)
N#define SYSCON_AHBCLKCTRL_USB0D(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_USB0D_SHIFT)) & SYSCON_AHBCLKCTRL_USB0D_MASK)
N#define SYSCON_AHBCLKCTRL_CTIMER0_MASK           (0x4000000U)
N#define SYSCON_AHBCLKCTRL_CTIMER0_SHIFT          (26U)
N#define SYSCON_AHBCLKCTRL_CTIMER0(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_CTIMER0_SHIFT)) & SYSCON_AHBCLKCTRL_CTIMER0_MASK)
N#define SYSCON_AHBCLKCTRL_CTIMER1_MASK           (0x8000000U)
N#define SYSCON_AHBCLKCTRL_CTIMER1_SHIFT          (27U)
N#define SYSCON_AHBCLKCTRL_CTIMER1(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_CTIMER1_SHIFT)) & SYSCON_AHBCLKCTRL_CTIMER1_MASK)
N#define SYSCON_AHBCLKCTRL_ADC0_MASK              (0x8000000U)
N#define SYSCON_AHBCLKCTRL_ADC0_SHIFT             (27U)
N#define SYSCON_AHBCLKCTRL_ADC0(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRL_ADC0_SHIFT)) & SYSCON_AHBCLKCTRL_ADC0_MASK)
N
N/* The count of SYSCON_AHBCLKCTRL */
N#define SYSCON_AHBCLKCTRL_COUNT                  (3U)
N
N/*! @name AHBCLKCTRLSET - Set bits in AHBCLKCTRLn */
N#define SYSCON_AHBCLKCTRLSET_CLK_SET_MASK        (0xFFFFFFFFU)
N#define SYSCON_AHBCLKCTRLSET_CLK_SET_SHIFT       (0U)
N#define SYSCON_AHBCLKCTRLSET_CLK_SET(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRLSET_CLK_SET_SHIFT)) & SYSCON_AHBCLKCTRLSET_CLK_SET_MASK)
N
N/* The count of SYSCON_AHBCLKCTRLSET */
N#define SYSCON_AHBCLKCTRLSET_COUNT               (3U)
N
N/*! @name AHBCLKCTRLCLR - Clear bits in AHBCLKCTRLn */
N#define SYSCON_AHBCLKCTRLCLR_CLK_CLR_MASK        (0xFFFFFFFFU)
N#define SYSCON_AHBCLKCTRLCLR_CLK_CLR_SHIFT       (0U)
N#define SYSCON_AHBCLKCTRLCLR_CLK_CLR(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKCTRLCLR_CLK_CLR_SHIFT)) & SYSCON_AHBCLKCTRLCLR_CLK_CLR_MASK)
N
N/* The count of SYSCON_AHBCLKCTRLCLR */
N#define SYSCON_AHBCLKCTRLCLR_COUNT               (3U)
N
N/*! @name MAINCLKSELA - Main clock source select A */
N#define SYSCON_MAINCLKSELA_SEL_MASK              (0x3U)
N#define SYSCON_MAINCLKSELA_SEL_SHIFT             (0U)
N#define SYSCON_MAINCLKSELA_SEL(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_MAINCLKSELA_SEL_SHIFT)) & SYSCON_MAINCLKSELA_SEL_MASK)
N
N/*! @name MAINCLKSELB - Main clock source select B */
N#define SYSCON_MAINCLKSELB_SEL_MASK              (0x3U)
N#define SYSCON_MAINCLKSELB_SEL_SHIFT             (0U)
N#define SYSCON_MAINCLKSELB_SEL(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_MAINCLKSELB_SEL_SHIFT)) & SYSCON_MAINCLKSELB_SEL_MASK)
N
N/*! @name CLKOUTSELA - CLKOUT clock source select A */
N#define SYSCON_CLKOUTSELA_SEL_MASK               (0x7U)
N#define SYSCON_CLKOUTSELA_SEL_SHIFT              (0U)
N#define SYSCON_CLKOUTSELA_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_CLKOUTSELA_SEL_SHIFT)) & SYSCON_CLKOUTSELA_SEL_MASK)
N
N/*! @name SYSPLLCLKSEL - PLL clock source select */
N#define SYSCON_SYSPLLCLKSEL_SEL_MASK             (0x7U)
N#define SYSCON_SYSPLLCLKSEL_SEL_SHIFT            (0U)
N#define SYSCON_SYSPLLCLKSEL_SEL(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCLKSEL_SEL_SHIFT)) & SYSCON_SYSPLLCLKSEL_SEL_MASK)
N
N/*! @name AUDPLLCLKSEL - Audio PLL clock source select */
N#define SYSCON_AUDPLLCLKSEL_SEL_MASK             (0x7U)
N#define SYSCON_AUDPLLCLKSEL_SEL_SHIFT            (0U)
N#define SYSCON_AUDPLLCLKSEL_SEL(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCLKSEL_SEL_SHIFT)) & SYSCON_AUDPLLCLKSEL_SEL_MASK)
N
N/*! @name SPIFICLKSEL - SPIFI clock source select */
N#define SYSCON_SPIFICLKSEL_SEL_MASK              (0x7U)
N#define SYSCON_SPIFICLKSEL_SEL_SHIFT             (0U)
N#define SYSCON_SPIFICLKSEL_SEL(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SPIFICLKSEL_SEL_SHIFT)) & SYSCON_SPIFICLKSEL_SEL_MASK)
N
N/*! @name ADCCLKSEL - ADC clock source select */
N#define SYSCON_ADCCLKSEL_SEL_MASK                (0x7U)
N#define SYSCON_ADCCLKSEL_SEL_SHIFT               (0U)
N#define SYSCON_ADCCLKSEL_SEL(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_ADCCLKSEL_SEL_SHIFT)) & SYSCON_ADCCLKSEL_SEL_MASK)
N
N/*! @name USB0CLKSEL - USB0 clock source select */
N#define SYSCON_USB0CLKSEL_SEL_MASK               (0x7U)
N#define SYSCON_USB0CLKSEL_SEL_SHIFT              (0U)
N#define SYSCON_USB0CLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKSEL_SEL_SHIFT)) & SYSCON_USB0CLKSEL_SEL_MASK)
N
N/*! @name USB1CLKSEL - USB1 clock source select */
N#define SYSCON_USB1CLKSEL_SEL_MASK               (0x7U)
N#define SYSCON_USB1CLKSEL_SEL_SHIFT              (0U)
N#define SYSCON_USB1CLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKSEL_SEL_SHIFT)) & SYSCON_USB1CLKSEL_SEL_MASK)
N
N/*! @name FCLKSEL - Flexcomm 0 clock source select */
N#define SYSCON_FCLKSEL_SEL_MASK                  (0x7U)
N#define SYSCON_FCLKSEL_SEL_SHIFT                 (0U)
N#define SYSCON_FCLKSEL_SEL(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCON_FCLKSEL_SEL_SHIFT)) & SYSCON_FCLKSEL_SEL_MASK)
N
N/* The count of SYSCON_FCLKSEL */
N#define SYSCON_FCLKSEL_COUNT                     (10U)
N
N/*! @name MCLKCLKSEL - MCLK clock source select */
N#define SYSCON_MCLKCLKSEL_SEL_MASK               (0x7U)
N#define SYSCON_MCLKCLKSEL_SEL_SHIFT              (0U)
N#define SYSCON_MCLKCLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_MCLKCLKSEL_SEL_SHIFT)) & SYSCON_MCLKCLKSEL_SEL_MASK)
N
N/*! @name FRGCLKSEL - Fractional Rate Generator clock source select */
N#define SYSCON_FRGCLKSEL_SEL_MASK                (0x7U)
N#define SYSCON_FRGCLKSEL_SEL_SHIFT               (0U)
N#define SYSCON_FRGCLKSEL_SEL(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_FRGCLKSEL_SEL_SHIFT)) & SYSCON_FRGCLKSEL_SEL_MASK)
N
N/*! @name DMICCLKSEL - Digital microphone (DMIC) subsystem clock select */
N#define SYSCON_DMICCLKSEL_SEL_MASK               (0x7U)
N#define SYSCON_DMICCLKSEL_SEL_SHIFT              (0U)
N#define SYSCON_DMICCLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_DMICCLKSEL_SEL_SHIFT)) & SYSCON_DMICCLKSEL_SEL_MASK)
N
N/*! @name SCTCLKSEL - SCTimer/PWM clock source select */
N#define SYSCON_SCTCLKSEL_SEL_MASK                (0x7U)
N#define SYSCON_SCTCLKSEL_SEL_SHIFT               (0U)
N#define SYSCON_SCTCLKSEL_SEL(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_SCTCLKSEL_SEL_SHIFT)) & SYSCON_SCTCLKSEL_SEL_MASK)
N
N/*! @name LCDCLKSEL - LCD clock source select */
N#define SYSCON_LCDCLKSEL_SEL_MASK                (0x3U)
N#define SYSCON_LCDCLKSEL_SEL_SHIFT               (0U)
N#define SYSCON_LCDCLKSEL_SEL(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_LCDCLKSEL_SEL_SHIFT)) & SYSCON_LCDCLKSEL_SEL_MASK)
N
N/*! @name SDIOCLKSEL - SDIO clock source select */
N#define SYSCON_SDIOCLKSEL_SEL_MASK               (0x7U)
N#define SYSCON_SDIOCLKSEL_SEL_SHIFT              (0U)
N#define SYSCON_SDIOCLKSEL_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKSEL_SEL_SHIFT)) & SYSCON_SDIOCLKSEL_SEL_MASK)
N
N/*! @name SYSTICKCLKDIV - SYSTICK clock divider */
N#define SYSCON_SYSTICKCLKDIV_DIV_MASK            (0xFFU)
N#define SYSCON_SYSTICKCLKDIV_DIV_SHIFT           (0U)
N#define SYSCON_SYSTICKCLKDIV_DIV(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSTICKCLKDIV_DIV_SHIFT)) & SYSCON_SYSTICKCLKDIV_DIV_MASK)
N#define SYSCON_SYSTICKCLKDIV_RESET_MASK          (0x20000000U)
N#define SYSCON_SYSTICKCLKDIV_RESET_SHIFT         (29U)
N#define SYSCON_SYSTICKCLKDIV_RESET(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSTICKCLKDIV_RESET_SHIFT)) & SYSCON_SYSTICKCLKDIV_RESET_MASK)
N#define SYSCON_SYSTICKCLKDIV_HALT_MASK           (0x40000000U)
N#define SYSCON_SYSTICKCLKDIV_HALT_SHIFT          (30U)
N#define SYSCON_SYSTICKCLKDIV_HALT(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSTICKCLKDIV_HALT_SHIFT)) & SYSCON_SYSTICKCLKDIV_HALT_MASK)
N#define SYSCON_SYSTICKCLKDIV_REQFLAG_MASK        (0x80000000U)
N#define SYSCON_SYSTICKCLKDIV_REQFLAG_SHIFT       (31U)
N#define SYSCON_SYSTICKCLKDIV_REQFLAG(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSTICKCLKDIV_REQFLAG_SHIFT)) & SYSCON_SYSTICKCLKDIV_REQFLAG_MASK)
N
N/*! @name ARMTRCLKDIV - ARM Trace clock divider */
N#define SYSCON_ARMTRCLKDIV_DIV_MASK              (0xFFU)
N#define SYSCON_ARMTRCLKDIV_DIV_SHIFT             (0U)
N#define SYSCON_ARMTRCLKDIV_DIV(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_ARMTRCLKDIV_DIV_SHIFT)) & SYSCON_ARMTRCLKDIV_DIV_MASK)
N#define SYSCON_ARMTRCLKDIV_RESET_MASK            (0x20000000U)
N#define SYSCON_ARMTRCLKDIV_RESET_SHIFT           (29U)
N#define SYSCON_ARMTRCLKDIV_RESET(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_ARMTRCLKDIV_RESET_SHIFT)) & SYSCON_ARMTRCLKDIV_RESET_MASK)
N#define SYSCON_ARMTRCLKDIV_HALT_MASK             (0x40000000U)
N#define SYSCON_ARMTRCLKDIV_HALT_SHIFT            (30U)
N#define SYSCON_ARMTRCLKDIV_HALT(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_ARMTRCLKDIV_HALT_SHIFT)) & SYSCON_ARMTRCLKDIV_HALT_MASK)
N#define SYSCON_ARMTRCLKDIV_REQFLAG_MASK          (0x80000000U)
N#define SYSCON_ARMTRCLKDIV_REQFLAG_SHIFT         (31U)
N#define SYSCON_ARMTRCLKDIV_REQFLAG(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_ARMTRCLKDIV_REQFLAG_SHIFT)) & SYSCON_ARMTRCLKDIV_REQFLAG_MASK)
N
N/*! @name CAN0CLKDIV - MCAN0 clock divider */
N#define SYSCON_CAN0CLKDIV_DIV_MASK               (0xFFU)
N#define SYSCON_CAN0CLKDIV_DIV_SHIFT              (0U)
N#define SYSCON_CAN0CLKDIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN0CLKDIV_DIV_SHIFT)) & SYSCON_CAN0CLKDIV_DIV_MASK)
N#define SYSCON_CAN0CLKDIV_RESET_MASK             (0x20000000U)
N#define SYSCON_CAN0CLKDIV_RESET_SHIFT            (29U)
N#define SYSCON_CAN0CLKDIV_RESET(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN0CLKDIV_RESET_SHIFT)) & SYSCON_CAN0CLKDIV_RESET_MASK)
N#define SYSCON_CAN0CLKDIV_HALT_MASK              (0x40000000U)
N#define SYSCON_CAN0CLKDIV_HALT_SHIFT             (30U)
N#define SYSCON_CAN0CLKDIV_HALT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN0CLKDIV_HALT_SHIFT)) & SYSCON_CAN0CLKDIV_HALT_MASK)
N#define SYSCON_CAN0CLKDIV_REQFLAG_MASK           (0x80000000U)
N#define SYSCON_CAN0CLKDIV_REQFLAG_SHIFT          (31U)
N#define SYSCON_CAN0CLKDIV_REQFLAG(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN0CLKDIV_REQFLAG_SHIFT)) & SYSCON_CAN0CLKDIV_REQFLAG_MASK)
N
N/*! @name CAN1CLKDIV - MCAN1 clock divider */
N#define SYSCON_CAN1CLKDIV_DIV_MASK               (0xFFU)
N#define SYSCON_CAN1CLKDIV_DIV_SHIFT              (0U)
N#define SYSCON_CAN1CLKDIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN1CLKDIV_DIV_SHIFT)) & SYSCON_CAN1CLKDIV_DIV_MASK)
N#define SYSCON_CAN1CLKDIV_RESET_MASK             (0x20000000U)
N#define SYSCON_CAN1CLKDIV_RESET_SHIFT            (29U)
N#define SYSCON_CAN1CLKDIV_RESET(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN1CLKDIV_RESET_SHIFT)) & SYSCON_CAN1CLKDIV_RESET_MASK)
N#define SYSCON_CAN1CLKDIV_HALT_MASK              (0x40000000U)
N#define SYSCON_CAN1CLKDIV_HALT_SHIFT             (30U)
N#define SYSCON_CAN1CLKDIV_HALT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN1CLKDIV_HALT_SHIFT)) & SYSCON_CAN1CLKDIV_HALT_MASK)
N#define SYSCON_CAN1CLKDIV_REQFLAG_MASK           (0x80000000U)
N#define SYSCON_CAN1CLKDIV_REQFLAG_SHIFT          (31U)
N#define SYSCON_CAN1CLKDIV_REQFLAG(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_CAN1CLKDIV_REQFLAG_SHIFT)) & SYSCON_CAN1CLKDIV_REQFLAG_MASK)
N
N/*! @name SC0CLKDIV - Smartcard0 clock divider */
N#define SYSCON_SC0CLKDIV_DIV_MASK                (0xFFU)
N#define SYSCON_SC0CLKDIV_DIV_SHIFT               (0U)
N#define SYSCON_SC0CLKDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_SC0CLKDIV_DIV_SHIFT)) & SYSCON_SC0CLKDIV_DIV_MASK)
N#define SYSCON_SC0CLKDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_SC0CLKDIV_RESET_SHIFT             (29U)
N#define SYSCON_SC0CLKDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SC0CLKDIV_RESET_SHIFT)) & SYSCON_SC0CLKDIV_RESET_MASK)
N#define SYSCON_SC0CLKDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_SC0CLKDIV_HALT_SHIFT              (30U)
N#define SYSCON_SC0CLKDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SC0CLKDIV_HALT_SHIFT)) & SYSCON_SC0CLKDIV_HALT_MASK)
N#define SYSCON_SC0CLKDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_SC0CLKDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_SC0CLKDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SC0CLKDIV_REQFLAG_SHIFT)) & SYSCON_SC0CLKDIV_REQFLAG_MASK)
N
N/*! @name SC1CLKDIV - Smartcard1 clock divider */
N#define SYSCON_SC1CLKDIV_DIV_MASK                (0xFFU)
N#define SYSCON_SC1CLKDIV_DIV_SHIFT               (0U)
N#define SYSCON_SC1CLKDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_SC1CLKDIV_DIV_SHIFT)) & SYSCON_SC1CLKDIV_DIV_MASK)
N#define SYSCON_SC1CLKDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_SC1CLKDIV_RESET_SHIFT             (29U)
N#define SYSCON_SC1CLKDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SC1CLKDIV_RESET_SHIFT)) & SYSCON_SC1CLKDIV_RESET_MASK)
N#define SYSCON_SC1CLKDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_SC1CLKDIV_HALT_SHIFT              (30U)
N#define SYSCON_SC1CLKDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SC1CLKDIV_HALT_SHIFT)) & SYSCON_SC1CLKDIV_HALT_MASK)
N#define SYSCON_SC1CLKDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_SC1CLKDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_SC1CLKDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SC1CLKDIV_REQFLAG_SHIFT)) & SYSCON_SC1CLKDIV_REQFLAG_MASK)
N
N/*! @name AHBCLKDIV - AHB clock divider */
N#define SYSCON_AHBCLKDIV_DIV_MASK                (0xFFU)
N#define SYSCON_AHBCLKDIV_DIV_SHIFT               (0U)
N#define SYSCON_AHBCLKDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKDIV_DIV_SHIFT)) & SYSCON_AHBCLKDIV_DIV_MASK)
N#define SYSCON_AHBCLKDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_AHBCLKDIV_RESET_SHIFT             (29U)
N#define SYSCON_AHBCLKDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKDIV_RESET_SHIFT)) & SYSCON_AHBCLKDIV_RESET_MASK)
N#define SYSCON_AHBCLKDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_AHBCLKDIV_HALT_SHIFT              (30U)
N#define SYSCON_AHBCLKDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKDIV_HALT_SHIFT)) & SYSCON_AHBCLKDIV_HALT_MASK)
N#define SYSCON_AHBCLKDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_AHBCLKDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_AHBCLKDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_AHBCLKDIV_REQFLAG_SHIFT)) & SYSCON_AHBCLKDIV_REQFLAG_MASK)
N
N/*! @name CLKOUTDIV - CLKOUT clock divider */
N#define SYSCON_CLKOUTDIV_DIV_MASK                (0xFFU)
N#define SYSCON_CLKOUTDIV_DIV_SHIFT               (0U)
N#define SYSCON_CLKOUTDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_CLKOUTDIV_DIV_SHIFT)) & SYSCON_CLKOUTDIV_DIV_MASK)
N#define SYSCON_CLKOUTDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_CLKOUTDIV_RESET_SHIFT             (29U)
N#define SYSCON_CLKOUTDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_CLKOUTDIV_RESET_SHIFT)) & SYSCON_CLKOUTDIV_RESET_MASK)
N#define SYSCON_CLKOUTDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_CLKOUTDIV_HALT_SHIFT              (30U)
N#define SYSCON_CLKOUTDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_CLKOUTDIV_HALT_SHIFT)) & SYSCON_CLKOUTDIV_HALT_MASK)
N#define SYSCON_CLKOUTDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_CLKOUTDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_CLKOUTDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_CLKOUTDIV_REQFLAG_SHIFT)) & SYSCON_CLKOUTDIV_REQFLAG_MASK)
N
N/*! @name FROHFCLKDIV - FROHF clock divider */
N#define SYSCON_FROHFCLKDIV_DIV_MASK              (0xFFU)
N#define SYSCON_FROHFCLKDIV_DIV_SHIFT             (0U)
N#define SYSCON_FROHFCLKDIV_DIV(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_FROHFCLKDIV_DIV_SHIFT)) & SYSCON_FROHFCLKDIV_DIV_MASK)
N#define SYSCON_FROHFCLKDIV_RESET_MASK            (0x20000000U)
N#define SYSCON_FROHFCLKDIV_RESET_SHIFT           (29U)
N#define SYSCON_FROHFCLKDIV_RESET(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_FROHFCLKDIV_RESET_SHIFT)) & SYSCON_FROHFCLKDIV_RESET_MASK)
N#define SYSCON_FROHFCLKDIV_HALT_MASK             (0x40000000U)
N#define SYSCON_FROHFCLKDIV_HALT_SHIFT            (30U)
N#define SYSCON_FROHFCLKDIV_HALT(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_FROHFCLKDIV_HALT_SHIFT)) & SYSCON_FROHFCLKDIV_HALT_MASK)
N#define SYSCON_FROHFCLKDIV_REQFLAG_MASK          (0x80000000U)
N#define SYSCON_FROHFCLKDIV_REQFLAG_SHIFT         (31U)
N#define SYSCON_FROHFCLKDIV_REQFLAG(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_FROHFCLKDIV_REQFLAG_SHIFT)) & SYSCON_FROHFCLKDIV_REQFLAG_MASK)
N
N/*! @name SPIFICLKDIV - SPIFI clock divider */
N#define SYSCON_SPIFICLKDIV_DIV_MASK              (0xFFU)
N#define SYSCON_SPIFICLKDIV_DIV_SHIFT             (0U)
N#define SYSCON_SPIFICLKDIV_DIV(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SPIFICLKDIV_DIV_SHIFT)) & SYSCON_SPIFICLKDIV_DIV_MASK)
N#define SYSCON_SPIFICLKDIV_RESET_MASK            (0x20000000U)
N#define SYSCON_SPIFICLKDIV_RESET_SHIFT           (29U)
N#define SYSCON_SPIFICLKDIV_RESET(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SPIFICLKDIV_RESET_SHIFT)) & SYSCON_SPIFICLKDIV_RESET_MASK)
N#define SYSCON_SPIFICLKDIV_HALT_MASK             (0x40000000U)
N#define SYSCON_SPIFICLKDIV_HALT_SHIFT            (30U)
N#define SYSCON_SPIFICLKDIV_HALT(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_SPIFICLKDIV_HALT_SHIFT)) & SYSCON_SPIFICLKDIV_HALT_MASK)
N#define SYSCON_SPIFICLKDIV_REQFLAG_MASK          (0x80000000U)
N#define SYSCON_SPIFICLKDIV_REQFLAG_SHIFT         (31U)
N#define SYSCON_SPIFICLKDIV_REQFLAG(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_SPIFICLKDIV_REQFLAG_SHIFT)) & SYSCON_SPIFICLKDIV_REQFLAG_MASK)
N
N/*! @name ADCCLKDIV - ADC clock divider */
N#define SYSCON_ADCCLKDIV_DIV_MASK                (0xFFU)
N#define SYSCON_ADCCLKDIV_DIV_SHIFT               (0U)
N#define SYSCON_ADCCLKDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_ADCCLKDIV_DIV_SHIFT)) & SYSCON_ADCCLKDIV_DIV_MASK)
N#define SYSCON_ADCCLKDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_ADCCLKDIV_RESET_SHIFT             (29U)
N#define SYSCON_ADCCLKDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_ADCCLKDIV_RESET_SHIFT)) & SYSCON_ADCCLKDIV_RESET_MASK)
N#define SYSCON_ADCCLKDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_ADCCLKDIV_HALT_SHIFT              (30U)
N#define SYSCON_ADCCLKDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_ADCCLKDIV_HALT_SHIFT)) & SYSCON_ADCCLKDIV_HALT_MASK)
N#define SYSCON_ADCCLKDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_ADCCLKDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_ADCCLKDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_ADCCLKDIV_REQFLAG_SHIFT)) & SYSCON_ADCCLKDIV_REQFLAG_MASK)
N
N/*! @name USB0CLKDIV - USB0 clock divider */
N#define SYSCON_USB0CLKDIV_DIV_MASK               (0xFFU)
N#define SYSCON_USB0CLKDIV_DIV_SHIFT              (0U)
N#define SYSCON_USB0CLKDIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKDIV_DIV_SHIFT)) & SYSCON_USB0CLKDIV_DIV_MASK)
N#define SYSCON_USB0CLKDIV_RESET_MASK             (0x20000000U)
N#define SYSCON_USB0CLKDIV_RESET_SHIFT            (29U)
N#define SYSCON_USB0CLKDIV_RESET(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKDIV_RESET_SHIFT)) & SYSCON_USB0CLKDIV_RESET_MASK)
N#define SYSCON_USB0CLKDIV_HALT_MASK              (0x40000000U)
N#define SYSCON_USB0CLKDIV_HALT_SHIFT             (30U)
N#define SYSCON_USB0CLKDIV_HALT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKDIV_HALT_SHIFT)) & SYSCON_USB0CLKDIV_HALT_MASK)
N#define SYSCON_USB0CLKDIV_REQFLAG_MASK           (0x80000000U)
N#define SYSCON_USB0CLKDIV_REQFLAG_SHIFT          (31U)
N#define SYSCON_USB0CLKDIV_REQFLAG(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKDIV_REQFLAG_SHIFT)) & SYSCON_USB0CLKDIV_REQFLAG_MASK)
N
N/*! @name USB1CLKDIV - USB1 clock divider */
N#define SYSCON_USB1CLKDIV_DIV_MASK               (0xFFU)
N#define SYSCON_USB1CLKDIV_DIV_SHIFT              (0U)
N#define SYSCON_USB1CLKDIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKDIV_DIV_SHIFT)) & SYSCON_USB1CLKDIV_DIV_MASK)
N#define SYSCON_USB1CLKDIV_RESET_MASK             (0x20000000U)
N#define SYSCON_USB1CLKDIV_RESET_SHIFT            (29U)
N#define SYSCON_USB1CLKDIV_RESET(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKDIV_RESET_SHIFT)) & SYSCON_USB1CLKDIV_RESET_MASK)
N#define SYSCON_USB1CLKDIV_HALT_MASK              (0x40000000U)
N#define SYSCON_USB1CLKDIV_HALT_SHIFT             (30U)
N#define SYSCON_USB1CLKDIV_HALT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKDIV_HALT_SHIFT)) & SYSCON_USB1CLKDIV_HALT_MASK)
N#define SYSCON_USB1CLKDIV_REQFLAG_MASK           (0x80000000U)
N#define SYSCON_USB1CLKDIV_REQFLAG_SHIFT          (31U)
N#define SYSCON_USB1CLKDIV_REQFLAG(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKDIV_REQFLAG_SHIFT)) & SYSCON_USB1CLKDIV_REQFLAG_MASK)
N
N/*! @name FRGCTRL - Fractional rate divider */
N#define SYSCON_FRGCTRL_DIV_MASK                  (0xFFU)
N#define SYSCON_FRGCTRL_DIV_SHIFT                 (0U)
N#define SYSCON_FRGCTRL_DIV(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCON_FRGCTRL_DIV_SHIFT)) & SYSCON_FRGCTRL_DIV_MASK)
N#define SYSCON_FRGCTRL_MULT_MASK                 (0xFF00U)
N#define SYSCON_FRGCTRL_MULT_SHIFT                (8U)
N#define SYSCON_FRGCTRL_MULT(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_FRGCTRL_MULT_SHIFT)) & SYSCON_FRGCTRL_MULT_MASK)
N
N/*! @name DMICCLKDIV - DMIC clock divider */
N#define SYSCON_DMICCLKDIV_DIV_MASK               (0xFFU)
N#define SYSCON_DMICCLKDIV_DIV_SHIFT              (0U)
N#define SYSCON_DMICCLKDIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_DMICCLKDIV_DIV_SHIFT)) & SYSCON_DMICCLKDIV_DIV_MASK)
N#define SYSCON_DMICCLKDIV_RESET_MASK             (0x20000000U)
N#define SYSCON_DMICCLKDIV_RESET_SHIFT            (29U)
N#define SYSCON_DMICCLKDIV_RESET(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_DMICCLKDIV_RESET_SHIFT)) & SYSCON_DMICCLKDIV_RESET_MASK)
N#define SYSCON_DMICCLKDIV_HALT_MASK              (0x40000000U)
N#define SYSCON_DMICCLKDIV_HALT_SHIFT             (30U)
N#define SYSCON_DMICCLKDIV_HALT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_DMICCLKDIV_HALT_SHIFT)) & SYSCON_DMICCLKDIV_HALT_MASK)
N#define SYSCON_DMICCLKDIV_REQFLAG_MASK           (0x80000000U)
N#define SYSCON_DMICCLKDIV_REQFLAG_SHIFT          (31U)
N#define SYSCON_DMICCLKDIV_REQFLAG(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_DMICCLKDIV_REQFLAG_SHIFT)) & SYSCON_DMICCLKDIV_REQFLAG_MASK)
N
N/*! @name MCLKDIV - I2S MCLK clock divider */
N#define SYSCON_MCLKDIV_DIV_MASK                  (0xFFU)
N#define SYSCON_MCLKDIV_DIV_SHIFT                 (0U)
N#define SYSCON_MCLKDIV_DIV(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCON_MCLKDIV_DIV_SHIFT)) & SYSCON_MCLKDIV_DIV_MASK)
N#define SYSCON_MCLKDIV_RESET_MASK                (0x20000000U)
N#define SYSCON_MCLKDIV_RESET_SHIFT               (29U)
N#define SYSCON_MCLKDIV_RESET(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_MCLKDIV_RESET_SHIFT)) & SYSCON_MCLKDIV_RESET_MASK)
N#define SYSCON_MCLKDIV_HALT_MASK                 (0x40000000U)
N#define SYSCON_MCLKDIV_HALT_SHIFT                (30U)
N#define SYSCON_MCLKDIV_HALT(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_MCLKDIV_HALT_SHIFT)) & SYSCON_MCLKDIV_HALT_MASK)
N#define SYSCON_MCLKDIV_REQFLAG_MASK              (0x80000000U)
N#define SYSCON_MCLKDIV_REQFLAG_SHIFT             (31U)
N#define SYSCON_MCLKDIV_REQFLAG(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_MCLKDIV_REQFLAG_SHIFT)) & SYSCON_MCLKDIV_REQFLAG_MASK)
N
N/*! @name LCDCLKDIV - LCD clock divider */
N#define SYSCON_LCDCLKDIV_DIV_MASK                (0xFFU)
N#define SYSCON_LCDCLKDIV_DIV_SHIFT               (0U)
N#define SYSCON_LCDCLKDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_LCDCLKDIV_DIV_SHIFT)) & SYSCON_LCDCLKDIV_DIV_MASK)
N#define SYSCON_LCDCLKDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_LCDCLKDIV_RESET_SHIFT             (29U)
N#define SYSCON_LCDCLKDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_LCDCLKDIV_RESET_SHIFT)) & SYSCON_LCDCLKDIV_RESET_MASK)
N#define SYSCON_LCDCLKDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_LCDCLKDIV_HALT_SHIFT              (30U)
N#define SYSCON_LCDCLKDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_LCDCLKDIV_HALT_SHIFT)) & SYSCON_LCDCLKDIV_HALT_MASK)
N#define SYSCON_LCDCLKDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_LCDCLKDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_LCDCLKDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_LCDCLKDIV_REQFLAG_SHIFT)) & SYSCON_LCDCLKDIV_REQFLAG_MASK)
N
N/*! @name SCTCLKDIV - SCT/PWM clock divider */
N#define SYSCON_SCTCLKDIV_DIV_MASK                (0xFFU)
N#define SYSCON_SCTCLKDIV_DIV_SHIFT               (0U)
N#define SYSCON_SCTCLKDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_SCTCLKDIV_DIV_SHIFT)) & SYSCON_SCTCLKDIV_DIV_MASK)
N#define SYSCON_SCTCLKDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_SCTCLKDIV_RESET_SHIFT             (29U)
N#define SYSCON_SCTCLKDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SCTCLKDIV_RESET_SHIFT)) & SYSCON_SCTCLKDIV_RESET_MASK)
N#define SYSCON_SCTCLKDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_SCTCLKDIV_HALT_SHIFT              (30U)
N#define SYSCON_SCTCLKDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SCTCLKDIV_HALT_SHIFT)) & SYSCON_SCTCLKDIV_HALT_MASK)
N#define SYSCON_SCTCLKDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_SCTCLKDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_SCTCLKDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SCTCLKDIV_REQFLAG_SHIFT)) & SYSCON_SCTCLKDIV_REQFLAG_MASK)
N
N/*! @name EMCCLKDIV - EMC clock divider */
N#define SYSCON_EMCCLKDIV_DIV_MASK                (0xFFU)
N#define SYSCON_EMCCLKDIV_DIV_SHIFT               (0U)
N#define SYSCON_EMCCLKDIV_DIV(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCCLKDIV_DIV_SHIFT)) & SYSCON_EMCCLKDIV_DIV_MASK)
N#define SYSCON_EMCCLKDIV_RESET_MASK              (0x20000000U)
N#define SYSCON_EMCCLKDIV_RESET_SHIFT             (29U)
N#define SYSCON_EMCCLKDIV_RESET(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCCLKDIV_RESET_SHIFT)) & SYSCON_EMCCLKDIV_RESET_MASK)
N#define SYSCON_EMCCLKDIV_HALT_MASK               (0x40000000U)
N#define SYSCON_EMCCLKDIV_HALT_SHIFT              (30U)
N#define SYSCON_EMCCLKDIV_HALT(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCCLKDIV_HALT_SHIFT)) & SYSCON_EMCCLKDIV_HALT_MASK)
N#define SYSCON_EMCCLKDIV_REQFLAG_MASK            (0x80000000U)
N#define SYSCON_EMCCLKDIV_REQFLAG_SHIFT           (31U)
N#define SYSCON_EMCCLKDIV_REQFLAG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCCLKDIV_REQFLAG_SHIFT)) & SYSCON_EMCCLKDIV_REQFLAG_MASK)
N
N/*! @name SDIOCLKDIV - SDIO clock divider */
N#define SYSCON_SDIOCLKDIV_DIV_MASK               (0xFFU)
N#define SYSCON_SDIOCLKDIV_DIV_SHIFT              (0U)
N#define SYSCON_SDIOCLKDIV_DIV(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKDIV_DIV_SHIFT)) & SYSCON_SDIOCLKDIV_DIV_MASK)
N#define SYSCON_SDIOCLKDIV_RESET_MASK             (0x20000000U)
N#define SYSCON_SDIOCLKDIV_RESET_SHIFT            (29U)
N#define SYSCON_SDIOCLKDIV_RESET(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKDIV_RESET_SHIFT)) & SYSCON_SDIOCLKDIV_RESET_MASK)
N#define SYSCON_SDIOCLKDIV_HALT_MASK              (0x40000000U)
N#define SYSCON_SDIOCLKDIV_HALT_SHIFT             (30U)
N#define SYSCON_SDIOCLKDIV_HALT(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKDIV_HALT_SHIFT)) & SYSCON_SDIOCLKDIV_HALT_MASK)
N#define SYSCON_SDIOCLKDIV_REQFLAG_MASK           (0x80000000U)
N#define SYSCON_SDIOCLKDIV_REQFLAG_SHIFT          (31U)
N#define SYSCON_SDIOCLKDIV_REQFLAG(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKDIV_REQFLAG_SHIFT)) & SYSCON_SDIOCLKDIV_REQFLAG_MASK)
N
N/*! @name FLASHCFG - Flash wait states configuration */
N#define SYSCON_FLASHCFG_FETCHCFG_MASK            (0x3U)
N#define SYSCON_FLASHCFG_FETCHCFG_SHIFT           (0U)
N#define SYSCON_FLASHCFG_FETCHCFG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_FLASHCFG_FETCHCFG_SHIFT)) & SYSCON_FLASHCFG_FETCHCFG_MASK)
N#define SYSCON_FLASHCFG_DATACFG_MASK             (0xCU)
N#define SYSCON_FLASHCFG_DATACFG_SHIFT            (2U)
N#define SYSCON_FLASHCFG_DATACFG(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_FLASHCFG_DATACFG_SHIFT)) & SYSCON_FLASHCFG_DATACFG_MASK)
N#define SYSCON_FLASHCFG_ACCEL_MASK               (0x10U)
N#define SYSCON_FLASHCFG_ACCEL_SHIFT              (4U)
N#define SYSCON_FLASHCFG_ACCEL(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_FLASHCFG_ACCEL_SHIFT)) & SYSCON_FLASHCFG_ACCEL_MASK)
N#define SYSCON_FLASHCFG_PREFEN_MASK              (0x20U)
N#define SYSCON_FLASHCFG_PREFEN_SHIFT             (5U)
N#define SYSCON_FLASHCFG_PREFEN(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_FLASHCFG_PREFEN_SHIFT)) & SYSCON_FLASHCFG_PREFEN_MASK)
N#define SYSCON_FLASHCFG_PREFOVR_MASK             (0x40U)
N#define SYSCON_FLASHCFG_PREFOVR_SHIFT            (6U)
N#define SYSCON_FLASHCFG_PREFOVR(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_FLASHCFG_PREFOVR_SHIFT)) & SYSCON_FLASHCFG_PREFOVR_MASK)
N#define SYSCON_FLASHCFG_FLASHTIM_MASK            (0xF000U)
N#define SYSCON_FLASHCFG_FLASHTIM_SHIFT           (12U)
N#define SYSCON_FLASHCFG_FLASHTIM(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_FLASHCFG_FLASHTIM_SHIFT)) & SYSCON_FLASHCFG_FLASHTIM_MASK)
N
N/*! @name USB0CLKCTRL - USB0 clock control */
N#define SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_MASK    (0x1U)
N#define SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_SHIFT   (0U)
N#define SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_SHIFT)) & SYSCON_USB0CLKCTRL_AP_FS_DEV_CLK_MASK)
N#define SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_MASK   (0x2U)
N#define SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_SHIFT  (1U)
N#define SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_SHIFT)) & SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_MASK)
N#define SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_MASK   (0x4U)
N#define SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_SHIFT  (2U)
N#define SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_SHIFT)) & SYSCON_USB0CLKCTRL_AP_FS_HOST_CLK_MASK)
N#define SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_MASK  (0x8U)
N#define SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_SHIFT (3U)
N#define SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK(x)    (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_SHIFT)) & SYSCON_USB0CLKCTRL_POL_FS_HOST_CLK_MASK)
N#define SYSCON_USB0CLKCTRL_PU_DISABLE_MASK       (0x10U)
N#define SYSCON_USB0CLKCTRL_PU_DISABLE_SHIFT      (4U)
N#define SYSCON_USB0CLKCTRL_PU_DISABLE(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKCTRL_PU_DISABLE_SHIFT)) & SYSCON_USB0CLKCTRL_PU_DISABLE_MASK)
N
N/*! @name USB0CLKSTAT - USB0 clock status */
N#define SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_MASK   (0x1U)
N#define SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_SHIFT  (0U)
N#define SYSCON_USB0CLKSTAT_DEV_NEED_CLKST(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_SHIFT)) & SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_MASK)
N#define SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_MASK  (0x2U)
N#define SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_SHIFT (1U)
N#define SYSCON_USB0CLKSTAT_HOST_NEED_CLKST(x)    (((uint32_t)(((uint32_t)(x)) << SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_SHIFT)) & SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_MASK)
N
N/*! @name FREQMECTRL - Frequency measure register */
N#define SYSCON_FREQMECTRL_CAPVAL_MASK            (0x3FFFU)
N#define SYSCON_FREQMECTRL_CAPVAL_SHIFT           (0U)
N#define SYSCON_FREQMECTRL_CAPVAL(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_FREQMECTRL_CAPVAL_SHIFT)) & SYSCON_FREQMECTRL_CAPVAL_MASK)
N#define SYSCON_FREQMECTRL_PROG_MASK              (0x80000000U)
N#define SYSCON_FREQMECTRL_PROG_SHIFT             (31U)
N#define SYSCON_FREQMECTRL_PROG(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_FREQMECTRL_PROG_SHIFT)) & SYSCON_FREQMECTRL_PROG_MASK)
N
N/*! @name MCLKIO - MCLK input/output control */
N#define SYSCON_MCLKIO_DIR_MASK                   (0x1U)
N#define SYSCON_MCLKIO_DIR_SHIFT                  (0U)
N#define SYSCON_MCLKIO_DIR(x)                     (((uint32_t)(((uint32_t)(x)) << SYSCON_MCLKIO_DIR_SHIFT)) & SYSCON_MCLKIO_DIR_MASK)
N
N/*! @name USB1CLKCTRL - USB1 clock control */
N#define SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_MASK    (0x1U)
N#define SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_SHIFT   (0U)
N#define SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_SHIFT)) & SYSCON_USB1CLKCTRL_AP_FS_DEV_CLK_MASK)
N#define SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_MASK   (0x2U)
N#define SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_SHIFT  (1U)
N#define SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_SHIFT)) & SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_MASK)
N#define SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_MASK   (0x4U)
N#define SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_SHIFT  (2U)
N#define SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_SHIFT)) & SYSCON_USB1CLKCTRL_AP_FS_HOST_CLK_MASK)
N#define SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_MASK  (0x8U)
N#define SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_SHIFT (3U)
N#define SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK(x)    (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_SHIFT)) & SYSCON_USB1CLKCTRL_POL_FS_HOST_CLK_MASK)
N#define SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_MASK  (0x10U)
N#define SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_SHIFT (4U)
N#define SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N(x)    (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_SHIFT)) & SYSCON_USB1CLKCTRL_HS_DEV_WAKEUP_N_MASK)
N
N/*! @name USB1CLKSTAT - USB1 clock status */
N#define SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_MASK   (0x1U)
N#define SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_SHIFT  (0U)
N#define SYSCON_USB1CLKSTAT_DEV_NEED_CLKST(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_SHIFT)) & SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_MASK)
N#define SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_MASK  (0x2U)
N#define SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_SHIFT (1U)
N#define SYSCON_USB1CLKSTAT_HOST_NEED_CLKST(x)    (((uint32_t)(((uint32_t)(x)) << SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_SHIFT)) & SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_MASK)
N
N/*! @name EMCSYSCTRL - EMC system control */
N#define SYSCON_EMCSYSCTRL_EMCSC_MASK             (0x1U)
N#define SYSCON_EMCSYSCTRL_EMCSC_SHIFT            (0U)
N#define SYSCON_EMCSYSCTRL_EMCSC(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCSYSCTRL_EMCSC_SHIFT)) & SYSCON_EMCSYSCTRL_EMCSC_MASK)
N#define SYSCON_EMCSYSCTRL_EMCRD_MASK             (0x2U)
N#define SYSCON_EMCSYSCTRL_EMCRD_SHIFT            (1U)
N#define SYSCON_EMCSYSCTRL_EMCRD(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCSYSCTRL_EMCRD_SHIFT)) & SYSCON_EMCSYSCTRL_EMCRD_MASK)
N#define SYSCON_EMCSYSCTRL_EMCBC_MASK             (0x4U)
N#define SYSCON_EMCSYSCTRL_EMCBC_SHIFT            (2U)
N#define SYSCON_EMCSYSCTRL_EMCBC(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCSYSCTRL_EMCBC_SHIFT)) & SYSCON_EMCSYSCTRL_EMCBC_MASK)
N#define SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_MASK     (0x8U)
N#define SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_SHIFT    (3U)
N#define SYSCON_EMCSYSCTRL_EMCFBCLKINSEL(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_SHIFT)) & SYSCON_EMCSYSCTRL_EMCFBCLKINSEL_MASK)
N
N/*! @name EMCDLYCTRL - EMC clock delay control */
N#define SYSCON_EMCDLYCTRL_CMD_DELAY_MASK         (0x1FU)
N#define SYSCON_EMCDLYCTRL_CMD_DELAY_SHIFT        (0U)
N#define SYSCON_EMCDLYCTRL_CMD_DELAY(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCDLYCTRL_CMD_DELAY_SHIFT)) & SYSCON_EMCDLYCTRL_CMD_DELAY_MASK)
N#define SYSCON_EMCDLYCTRL_FBCLK_DELAY_MASK       (0x1F00U)
N#define SYSCON_EMCDLYCTRL_FBCLK_DELAY_SHIFT      (8U)
N#define SYSCON_EMCDLYCTRL_FBCLK_DELAY(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCDLYCTRL_FBCLK_DELAY_SHIFT)) & SYSCON_EMCDLYCTRL_FBCLK_DELAY_MASK)
N
N/*! @name EMCDLYCAL - EMC delay chain calibration control */
N#define SYSCON_EMCDLYCAL_CALVALUE_MASK           (0xFFU)
N#define SYSCON_EMCDLYCAL_CALVALUE_SHIFT          (0U)
N#define SYSCON_EMCDLYCAL_CALVALUE(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCDLYCAL_CALVALUE_SHIFT)) & SYSCON_EMCDLYCAL_CALVALUE_MASK)
N#define SYSCON_EMCDLYCAL_START_MASK              (0x4000U)
N#define SYSCON_EMCDLYCAL_START_SHIFT             (14U)
N#define SYSCON_EMCDLYCAL_START(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCDLYCAL_START_SHIFT)) & SYSCON_EMCDLYCAL_START_MASK)
N#define SYSCON_EMCDLYCAL_DONE_MASK               (0x8000U)
N#define SYSCON_EMCDLYCAL_DONE_SHIFT              (15U)
N#define SYSCON_EMCDLYCAL_DONE(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_EMCDLYCAL_DONE_SHIFT)) & SYSCON_EMCDLYCAL_DONE_MASK)
N
N/*! @name ETHPHYSEL - Ethernet PHY Selection */
N#define SYSCON_ETHPHYSEL_PHY_SEL_MASK            (0x4U)
N#define SYSCON_ETHPHYSEL_PHY_SEL_SHIFT           (2U)
N#define SYSCON_ETHPHYSEL_PHY_SEL(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_ETHPHYSEL_PHY_SEL_SHIFT)) & SYSCON_ETHPHYSEL_PHY_SEL_MASK)
N
N/*! @name ETHSBDCTRL - Ethernet SBD flow control */
N#define SYSCON_ETHSBDCTRL_SBD_CTRL_MASK          (0x3U)
N#define SYSCON_ETHSBDCTRL_SBD_CTRL_SHIFT         (0U)
N#define SYSCON_ETHSBDCTRL_SBD_CTRL(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_ETHSBDCTRL_SBD_CTRL_SHIFT)) & SYSCON_ETHSBDCTRL_SBD_CTRL_MASK)
N
N/*! @name SDIOCLKCTRL - SDIO CCLKIN phase and delay control */
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_MASK   (0x3U)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_SHIFT  (0U)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_SHIFT)) & SYSCON_SDIOCLKCTRL_CCLK_DRV_PHASE_MASK)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_MASK (0xCU)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_SHIFT (2U)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE(x)  (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_SHIFT)) & SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_PHASE_MASK)
N#define SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_MASK     (0x80U)
N#define SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_SHIFT    (7U)
N#define SYSCON_SDIOCLKCTRL_PHASE_ACTIVE(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_SHIFT)) & SYSCON_SDIOCLKCTRL_PHASE_ACTIVE_MASK)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_MASK   (0x1F0000U)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_SHIFT  (16U)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_SHIFT)) & SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_MASK)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_MASK (0x800000U)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_SHIFT (23U)
N#define SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE(x) (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_SHIFT)) & SYSCON_SDIOCLKCTRL_CCLK_DRV_DELAY_ACTIVE_MASK)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_MASK (0x1F000000U)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_SHIFT (24U)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY(x)  (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_SHIFT)) & SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_MASK)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_MASK (0x80000000U)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_SHIFT (31U)
N#define SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE(x) (((uint32_t)(((uint32_t)(x)) << SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_SHIFT)) & SYSCON_SDIOCLKCTRL_CCLK_SAMPLE_DELAY_ACTIVE_MASK)
N
N/*! @name FROCTRL - FRO oscillator control */
N#define SYSCON_FROCTRL_TRIM_MASK                 (0x3FFFU)
N#define SYSCON_FROCTRL_TRIM_SHIFT                (0U)
N#define SYSCON_FROCTRL_TRIM(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_FROCTRL_TRIM_SHIFT)) & SYSCON_FROCTRL_TRIM_MASK)
N#define SYSCON_FROCTRL_SEL_MASK                  (0x4000U)
N#define SYSCON_FROCTRL_SEL_SHIFT                 (14U)
N#define SYSCON_FROCTRL_SEL(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCON_FROCTRL_SEL_SHIFT)) & SYSCON_FROCTRL_SEL_MASK)
N#define SYSCON_FROCTRL_FREQTRIM_MASK             (0xFF0000U)
N#define SYSCON_FROCTRL_FREQTRIM_SHIFT            (16U)
N#define SYSCON_FROCTRL_FREQTRIM(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_FROCTRL_FREQTRIM_SHIFT)) & SYSCON_FROCTRL_FREQTRIM_MASK)
N#define SYSCON_FROCTRL_USBCLKADJ_MASK            (0x1000000U)
N#define SYSCON_FROCTRL_USBCLKADJ_SHIFT           (24U)
N#define SYSCON_FROCTRL_USBCLKADJ(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_FROCTRL_USBCLKADJ_SHIFT)) & SYSCON_FROCTRL_USBCLKADJ_MASK)
N#define SYSCON_FROCTRL_USBMODCHG_MASK            (0x2000000U)
N#define SYSCON_FROCTRL_USBMODCHG_SHIFT           (25U)
N#define SYSCON_FROCTRL_USBMODCHG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_FROCTRL_USBMODCHG_SHIFT)) & SYSCON_FROCTRL_USBMODCHG_MASK)
N#define SYSCON_FROCTRL_HSPDCLK_MASK              (0x40000000U)
N#define SYSCON_FROCTRL_HSPDCLK_SHIFT             (30U)
N#define SYSCON_FROCTRL_HSPDCLK(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_FROCTRL_HSPDCLK_SHIFT)) & SYSCON_FROCTRL_HSPDCLK_MASK)
N#define SYSCON_FROCTRL_WRTRIM_MASK               (0x80000000U)
N#define SYSCON_FROCTRL_WRTRIM_SHIFT              (31U)
N#define SYSCON_FROCTRL_WRTRIM(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_FROCTRL_WRTRIM_SHIFT)) & SYSCON_FROCTRL_WRTRIM_MASK)
N
N/*! @name SYSOSCCTRL - System oscillator control */
N#define SYSCON_SYSOSCCTRL_BYPASS_MASK            (0x1U)
N#define SYSCON_SYSOSCCTRL_BYPASS_SHIFT           (0U)
N#define SYSCON_SYSOSCCTRL_BYPASS(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSOSCCTRL_BYPASS_SHIFT)) & SYSCON_SYSOSCCTRL_BYPASS_MASK)
N#define SYSCON_SYSOSCCTRL_FREQRANGE_MASK         (0x2U)
N#define SYSCON_SYSOSCCTRL_FREQRANGE_SHIFT        (1U)
N#define SYSCON_SYSOSCCTRL_FREQRANGE(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSOSCCTRL_FREQRANGE_SHIFT)) & SYSCON_SYSOSCCTRL_FREQRANGE_MASK)
N
N/*! @name WDTOSCCTRL - Watchdog oscillator control */
N#define SYSCON_WDTOSCCTRL_DIVSEL_MASK            (0x1FU)
N#define SYSCON_WDTOSCCTRL_DIVSEL_SHIFT           (0U)
N#define SYSCON_WDTOSCCTRL_DIVSEL(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_WDTOSCCTRL_DIVSEL_SHIFT)) & SYSCON_WDTOSCCTRL_DIVSEL_MASK)
N#define SYSCON_WDTOSCCTRL_FREQSEL_MASK           (0x3E0U)
N#define SYSCON_WDTOSCCTRL_FREQSEL_SHIFT          (5U)
N#define SYSCON_WDTOSCCTRL_FREQSEL(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_WDTOSCCTRL_FREQSEL_SHIFT)) & SYSCON_WDTOSCCTRL_FREQSEL_MASK)
N
N/*! @name RTCOSCCTRL - RTC oscillator 32 kHz output control */
N#define SYSCON_RTCOSCCTRL_EN_MASK                (0x1U)
N#define SYSCON_RTCOSCCTRL_EN_SHIFT               (0U)
N#define SYSCON_RTCOSCCTRL_EN(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_RTCOSCCTRL_EN_SHIFT)) & SYSCON_RTCOSCCTRL_EN_MASK)
N
N/*! @name USBPLLCTRL - USB PLL control */
N#define SYSCON_USBPLLCTRL_MSEL_MASK              (0xFFU)
N#define SYSCON_USBPLLCTRL_MSEL_SHIFT             (0U)
N#define SYSCON_USBPLLCTRL_MSEL(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_USBPLLCTRL_MSEL_SHIFT)) & SYSCON_USBPLLCTRL_MSEL_MASK)
N#define SYSCON_USBPLLCTRL_PSEL_MASK              (0x300U)
N#define SYSCON_USBPLLCTRL_PSEL_SHIFT             (8U)
N#define SYSCON_USBPLLCTRL_PSEL(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_USBPLLCTRL_PSEL_SHIFT)) & SYSCON_USBPLLCTRL_PSEL_MASK)
N#define SYSCON_USBPLLCTRL_NSEL_MASK              (0xC00U)
N#define SYSCON_USBPLLCTRL_NSEL_SHIFT             (10U)
N#define SYSCON_USBPLLCTRL_NSEL(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_USBPLLCTRL_NSEL_SHIFT)) & SYSCON_USBPLLCTRL_NSEL_MASK)
N#define SYSCON_USBPLLCTRL_DIRECT_MASK            (0x1000U)
N#define SYSCON_USBPLLCTRL_DIRECT_SHIFT           (12U)
N#define SYSCON_USBPLLCTRL_DIRECT(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_USBPLLCTRL_DIRECT_SHIFT)) & SYSCON_USBPLLCTRL_DIRECT_MASK)
N#define SYSCON_USBPLLCTRL_BYPASS_MASK            (0x2000U)
N#define SYSCON_USBPLLCTRL_BYPASS_SHIFT           (13U)
N#define SYSCON_USBPLLCTRL_BYPASS(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_USBPLLCTRL_BYPASS_SHIFT)) & SYSCON_USBPLLCTRL_BYPASS_MASK)
N#define SYSCON_USBPLLCTRL_BYPASSCCODIV2_MASK     (0x4000U)
N#define SYSCON_USBPLLCTRL_BYPASSCCODIV2_SHIFT    (14U)
N#define SYSCON_USBPLLCTRL_BYPASSCCODIV2(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_USBPLLCTRL_BYPASSCCODIV2_SHIFT)) & SYSCON_USBPLLCTRL_BYPASSCCODIV2_MASK)
N
N/*! @name USBPLLSTAT - USB PLL status */
N#define SYSCON_USBPLLSTAT_LOCK_MASK              (0x1U)
N#define SYSCON_USBPLLSTAT_LOCK_SHIFT             (0U)
N#define SYSCON_USBPLLSTAT_LOCK(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_USBPLLSTAT_LOCK_SHIFT)) & SYSCON_USBPLLSTAT_LOCK_MASK)
N
N/*! @name SYSPLLCTRL - System PLL control */
N#define SYSCON_SYSPLLCTRL_SELR_MASK              (0xFU)
N#define SYSCON_SYSPLLCTRL_SELR_SHIFT             (0U)
N#define SYSCON_SYSPLLCTRL_SELR(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCTRL_SELR_SHIFT)) & SYSCON_SYSPLLCTRL_SELR_MASK)
N#define SYSCON_SYSPLLCTRL_SELI_MASK              (0x3F0U)
N#define SYSCON_SYSPLLCTRL_SELI_SHIFT             (4U)
N#define SYSCON_SYSPLLCTRL_SELI(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCTRL_SELI_SHIFT)) & SYSCON_SYSPLLCTRL_SELI_MASK)
N#define SYSCON_SYSPLLCTRL_SELP_MASK              (0x7C00U)
N#define SYSCON_SYSPLLCTRL_SELP_SHIFT             (10U)
N#define SYSCON_SYSPLLCTRL_SELP(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCTRL_SELP_SHIFT)) & SYSCON_SYSPLLCTRL_SELP_MASK)
N#define SYSCON_SYSPLLCTRL_BYPASS_MASK            (0x8000U)
N#define SYSCON_SYSPLLCTRL_BYPASS_SHIFT           (15U)
N#define SYSCON_SYSPLLCTRL_BYPASS(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCTRL_BYPASS_SHIFT)) & SYSCON_SYSPLLCTRL_BYPASS_MASK)
N#define SYSCON_SYSPLLCTRL_UPLIMOFF_MASK          (0x20000U)
N#define SYSCON_SYSPLLCTRL_UPLIMOFF_SHIFT         (17U)
N#define SYSCON_SYSPLLCTRL_UPLIMOFF(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCTRL_UPLIMOFF_SHIFT)) & SYSCON_SYSPLLCTRL_UPLIMOFF_MASK)
N#define SYSCON_SYSPLLCTRL_DIRECTI_MASK           (0x80000U)
N#define SYSCON_SYSPLLCTRL_DIRECTI_SHIFT          (19U)
N#define SYSCON_SYSPLLCTRL_DIRECTI(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCTRL_DIRECTI_SHIFT)) & SYSCON_SYSPLLCTRL_DIRECTI_MASK)
N#define SYSCON_SYSPLLCTRL_DIRECTO_MASK           (0x100000U)
N#define SYSCON_SYSPLLCTRL_DIRECTO_SHIFT          (20U)
N#define SYSCON_SYSPLLCTRL_DIRECTO(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLCTRL_DIRECTO_SHIFT)) & SYSCON_SYSPLLCTRL_DIRECTO_MASK)
N
N/*! @name SYSPLLSTAT - PLL status */
N#define SYSCON_SYSPLLSTAT_LOCK_MASK              (0x1U)
N#define SYSCON_SYSPLLSTAT_LOCK_SHIFT             (0U)
N#define SYSCON_SYSPLLSTAT_LOCK(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLSTAT_LOCK_SHIFT)) & SYSCON_SYSPLLSTAT_LOCK_MASK)
N
N/*! @name SYSPLLNDEC - PLL N divider */
N#define SYSCON_SYSPLLNDEC_NDEC_MASK              (0x3FFU)
N#define SYSCON_SYSPLLNDEC_NDEC_SHIFT             (0U)
N#define SYSCON_SYSPLLNDEC_NDEC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLNDEC_NDEC_SHIFT)) & SYSCON_SYSPLLNDEC_NDEC_MASK)
N#define SYSCON_SYSPLLNDEC_NREQ_MASK              (0x400U)
N#define SYSCON_SYSPLLNDEC_NREQ_SHIFT             (10U)
N#define SYSCON_SYSPLLNDEC_NREQ(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLNDEC_NREQ_SHIFT)) & SYSCON_SYSPLLNDEC_NREQ_MASK)
N
N/*! @name SYSPLLPDEC - PLL P divider */
N#define SYSCON_SYSPLLPDEC_PDEC_MASK              (0x7FU)
N#define SYSCON_SYSPLLPDEC_PDEC_SHIFT             (0U)
N#define SYSCON_SYSPLLPDEC_PDEC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLPDEC_PDEC_SHIFT)) & SYSCON_SYSPLLPDEC_PDEC_MASK)
N#define SYSCON_SYSPLLPDEC_PREQ_MASK              (0x80U)
N#define SYSCON_SYSPLLPDEC_PREQ_SHIFT             (7U)
N#define SYSCON_SYSPLLPDEC_PREQ(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLPDEC_PREQ_SHIFT)) & SYSCON_SYSPLLPDEC_PREQ_MASK)
N
N/*! @name SYSPLLMDEC - System PLL M divider */
N#define SYSCON_SYSPLLMDEC_MDEC_MASK              (0x1FFFFU)
N#define SYSCON_SYSPLLMDEC_MDEC_SHIFT             (0U)
N#define SYSCON_SYSPLLMDEC_MDEC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLMDEC_MDEC_SHIFT)) & SYSCON_SYSPLLMDEC_MDEC_MASK)
N#define SYSCON_SYSPLLMDEC_MREQ_MASK              (0x20000U)
N#define SYSCON_SYSPLLMDEC_MREQ_SHIFT             (17U)
N#define SYSCON_SYSPLLMDEC_MREQ(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_SYSPLLMDEC_MREQ_SHIFT)) & SYSCON_SYSPLLMDEC_MREQ_MASK)
N
N/*! @name AUDPLLCTRL - Audio PLL control */
N#define SYSCON_AUDPLLCTRL_SELR_MASK              (0xFU)
N#define SYSCON_AUDPLLCTRL_SELR_SHIFT             (0U)
N#define SYSCON_AUDPLLCTRL_SELR(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCTRL_SELR_SHIFT)) & SYSCON_AUDPLLCTRL_SELR_MASK)
N#define SYSCON_AUDPLLCTRL_SELI_MASK              (0x3F0U)
N#define SYSCON_AUDPLLCTRL_SELI_SHIFT             (4U)
N#define SYSCON_AUDPLLCTRL_SELI(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCTRL_SELI_SHIFT)) & SYSCON_AUDPLLCTRL_SELI_MASK)
N#define SYSCON_AUDPLLCTRL_SELP_MASK              (0x7C00U)
N#define SYSCON_AUDPLLCTRL_SELP_SHIFT             (10U)
N#define SYSCON_AUDPLLCTRL_SELP(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCTRL_SELP_SHIFT)) & SYSCON_AUDPLLCTRL_SELP_MASK)
N#define SYSCON_AUDPLLCTRL_BYPASS_MASK            (0x8000U)
N#define SYSCON_AUDPLLCTRL_BYPASS_SHIFT           (15U)
N#define SYSCON_AUDPLLCTRL_BYPASS(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCTRL_BYPASS_SHIFT)) & SYSCON_AUDPLLCTRL_BYPASS_MASK)
N#define SYSCON_AUDPLLCTRL_UPLIMOFF_MASK          (0x20000U)
N#define SYSCON_AUDPLLCTRL_UPLIMOFF_SHIFT         (17U)
N#define SYSCON_AUDPLLCTRL_UPLIMOFF(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCTRL_UPLIMOFF_SHIFT)) & SYSCON_AUDPLLCTRL_UPLIMOFF_MASK)
N#define SYSCON_AUDPLLCTRL_DIRECTI_MASK           (0x80000U)
N#define SYSCON_AUDPLLCTRL_DIRECTI_SHIFT          (19U)
N#define SYSCON_AUDPLLCTRL_DIRECTI(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCTRL_DIRECTI_SHIFT)) & SYSCON_AUDPLLCTRL_DIRECTI_MASK)
N#define SYSCON_AUDPLLCTRL_DIRECTO_MASK           (0x100000U)
N#define SYSCON_AUDPLLCTRL_DIRECTO_SHIFT          (20U)
N#define SYSCON_AUDPLLCTRL_DIRECTO(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLCTRL_DIRECTO_SHIFT)) & SYSCON_AUDPLLCTRL_DIRECTO_MASK)
N
N/*! @name AUDPLLSTAT - Audio PLL status */
N#define SYSCON_AUDPLLSTAT_LOCK_MASK              (0x1U)
N#define SYSCON_AUDPLLSTAT_LOCK_SHIFT             (0U)
N#define SYSCON_AUDPLLSTAT_LOCK(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLSTAT_LOCK_SHIFT)) & SYSCON_AUDPLLSTAT_LOCK_MASK)
N
N/*! @name AUDPLLNDEC - Audio PLL N divider */
N#define SYSCON_AUDPLLNDEC_NDEC_MASK              (0x3FFU)
N#define SYSCON_AUDPLLNDEC_NDEC_SHIFT             (0U)
N#define SYSCON_AUDPLLNDEC_NDEC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLNDEC_NDEC_SHIFT)) & SYSCON_AUDPLLNDEC_NDEC_MASK)
N#define SYSCON_AUDPLLNDEC_NREQ_MASK              (0x400U)
N#define SYSCON_AUDPLLNDEC_NREQ_SHIFT             (10U)
N#define SYSCON_AUDPLLNDEC_NREQ(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLNDEC_NREQ_SHIFT)) & SYSCON_AUDPLLNDEC_NREQ_MASK)
N
N/*! @name AUDPLLPDEC - Audio PLL P divider */
N#define SYSCON_AUDPLLPDEC_PDEC_MASK              (0x7FU)
N#define SYSCON_AUDPLLPDEC_PDEC_SHIFT             (0U)
N#define SYSCON_AUDPLLPDEC_PDEC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLPDEC_PDEC_SHIFT)) & SYSCON_AUDPLLPDEC_PDEC_MASK)
N#define SYSCON_AUDPLLPDEC_PREQ_MASK              (0x80U)
N#define SYSCON_AUDPLLPDEC_PREQ_SHIFT             (7U)
N#define SYSCON_AUDPLLPDEC_PREQ(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLPDEC_PREQ_SHIFT)) & SYSCON_AUDPLLPDEC_PREQ_MASK)
N
N/*! @name AUDPLLMDEC - Audio PLL M divider */
N#define SYSCON_AUDPLLMDEC_MDEC_MASK              (0x1FFFFU)
N#define SYSCON_AUDPLLMDEC_MDEC_SHIFT             (0U)
N#define SYSCON_AUDPLLMDEC_MDEC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLMDEC_MDEC_SHIFT)) & SYSCON_AUDPLLMDEC_MDEC_MASK)
N#define SYSCON_AUDPLLMDEC_MREQ_MASK              (0x20000U)
N#define SYSCON_AUDPLLMDEC_MREQ_SHIFT             (17U)
N#define SYSCON_AUDPLLMDEC_MREQ(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLMDEC_MREQ_SHIFT)) & SYSCON_AUDPLLMDEC_MREQ_MASK)
N
N/*! @name AUDPLLFRAC - Audio PLL fractional divider control */
N#define SYSCON_AUDPLLFRAC_CTRL_MASK              (0x3FFFFFU)
N#define SYSCON_AUDPLLFRAC_CTRL_SHIFT             (0U)
N#define SYSCON_AUDPLLFRAC_CTRL(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLFRAC_CTRL_SHIFT)) & SYSCON_AUDPLLFRAC_CTRL_MASK)
N#define SYSCON_AUDPLLFRAC_REQ_MASK               (0x400000U)
N#define SYSCON_AUDPLLFRAC_REQ_SHIFT              (22U)
N#define SYSCON_AUDPLLFRAC_REQ(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLFRAC_REQ_SHIFT)) & SYSCON_AUDPLLFRAC_REQ_MASK)
N#define SYSCON_AUDPLLFRAC_SEL_EXT_MASK           (0x800000U)
N#define SYSCON_AUDPLLFRAC_SEL_EXT_SHIFT          (23U)
N#define SYSCON_AUDPLLFRAC_SEL_EXT(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_AUDPLLFRAC_SEL_EXT_SHIFT)) & SYSCON_AUDPLLFRAC_SEL_EXT_MASK)
N
N/*! @name PDSLEEPCFG - Power configuration register 0 */
N#define SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_MASK     (0x1U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_SHIFT    (0U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB1_PHY(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_USB1_PHY_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_MASK     (0x2U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_SHIFT    (1U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB1_PLL(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_USB1_PLL_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_MASK      (0x4U)
N#define SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_SHIFT     (2U)
N#define SYSCON_PDSLEEPCFG_PDEN_AUD_PLL(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_AUD_PLL_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_SYSOSC_MASK       (0x8U)
N#define SYSCON_PDSLEEPCFG_PDEN_SYSOSC_SHIFT      (3U)
N#define SYSCON_PDSLEEPCFG_PDEN_SYSOSC(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_SYSOSC_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_SYSOSC_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_FRO_MASK          (0x10U)
N#define SYSCON_PDSLEEPCFG_PDEN_FRO_SHIFT         (4U)
N#define SYSCON_PDSLEEPCFG_PDEN_FRO(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_FRO_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_FRO_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_EEPROM_MASK       (0x20U)
N#define SYSCON_PDSLEEPCFG_PDEN_EEPROM_SHIFT      (5U)
N#define SYSCON_PDSLEEPCFG_PDEN_EEPROM(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_EEPROM_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_EEPROM_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_FLASH_MASK        (0x20U)
N#define SYSCON_PDSLEEPCFG_PDEN_FLASH_SHIFT       (5U)
N#define SYSCON_PDSLEEPCFG_PDEN_FLASH(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_FLASH_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_FLASH_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_TS_MASK           (0x40U)
N#define SYSCON_PDSLEEPCFG_PDEN_TS_SHIFT          (6U)
N#define SYSCON_PDSLEEPCFG_PDEN_TS(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_TS_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_TS_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_BOD_RST_MASK      (0x80U)
N#define SYSCON_PDSLEEPCFG_PDEN_BOD_RST_SHIFT     (7U)
N#define SYSCON_PDSLEEPCFG_PDEN_BOD_RST(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_BOD_RST_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_BOD_RST_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_RNG_MASK          (0x80U)
N#define SYSCON_PDSLEEPCFG_PDEN_RNG_SHIFT         (7U)
N#define SYSCON_PDSLEEPCFG_PDEN_RNG(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_RNG_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_RNG_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_MASK     (0x100U)
N#define SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_SHIFT    (8U)
N#define SYSCON_PDSLEEPCFG_PDEN_BOD_INTR(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_BOD_INTR_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_MASK      (0x200U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_SHIFT     (9U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD2_ANA(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_VD2_ANA_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_ADC0_MASK         (0x400U)
N#define SYSCON_PDSLEEPCFG_PDEN_ADC0_SHIFT        (10U)
N#define SYSCON_PDSLEEPCFG_PDEN_ADC0(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_ADC0_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_ADC0_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAMX_MASK        (0x2000U)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAMX_SHIFT       (13U)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAMX(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_SRAMX_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_SRAMX_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAM0_MASK        (0x4000U)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAM0_SHIFT       (14U)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAM0(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_SRAM0_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_SRAM0_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_MASK    (0x8000U)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_SHIFT   (15U)
N#define SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_USB_RAM_MASK      (0x10000U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB_RAM_SHIFT     (16U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB_RAM(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_USB_RAM_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_USB_RAM_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_ROM_MASK          (0x20000U)
N#define SYSCON_PDSLEEPCFG_PDEN_ROM_SHIFT         (17U)
N#define SYSCON_PDSLEEPCFG_PDEN_ROM(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_ROM_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_ROM_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_VDDA_MASK         (0x80000U)
N#define SYSCON_PDSLEEPCFG_PDEN_VDDA_SHIFT        (19U)
N#define SYSCON_PDSLEEPCFG_PDEN_VDDA(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_VDDA_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_VDDA_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_MASK      (0x100000U)
N#define SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_SHIFT     (20U)
N#define SYSCON_PDSLEEPCFG_PDEN_WDT_OSC(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_WDT_OSC_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_MASK     (0x200000U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_SHIFT    (21U)
N#define SYSCON_PDSLEEPCFG_PDEN_USB0_PHY(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_USB0_PHY_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_MASK      (0x400000U)
N#define SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_SHIFT     (22U)
N#define SYSCON_PDSLEEPCFG_PDEN_SYS_PLL(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_SYS_PLL_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_VREFP_MASK        (0x800000U)
N#define SYSCON_PDSLEEPCFG_PDEN_VREFP_SHIFT       (23U)
N#define SYSCON_PDSLEEPCFG_PDEN_VREFP(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_VREFP_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_VREFP_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_VD3_MASK          (0x4000000U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD3_SHIFT         (26U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD3(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_VD3_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_VD3_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_VD4_MASK          (0x8000000U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD4_SHIFT         (27U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD4(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_VD4_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_VD4_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_VD5_MASK          (0x10000000U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD5_SHIFT         (28U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD5(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_VD5_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_VD5_MASK)
N#define SYSCON_PDSLEEPCFG_PDEN_VD6_MASK          (0x20000000U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD6_SHIFT         (29U)
N#define SYSCON_PDSLEEPCFG_PDEN_VD6(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDSLEEPCFG_PDEN_VD6_SHIFT)) & SYSCON_PDSLEEPCFG_PDEN_VD6_MASK)
N
N/* The count of SYSCON_PDSLEEPCFG */
N#define SYSCON_PDSLEEPCFG_COUNT                  (2U)
N
N/*! @name PDRUNCFG - Power configuration register 0 */
N#define SYSCON_PDRUNCFG_PDEN_USB1_PHY_MASK       (0x1U)
N#define SYSCON_PDRUNCFG_PDEN_USB1_PHY_SHIFT      (0U)
N#define SYSCON_PDRUNCFG_PDEN_USB1_PHY(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_USB1_PHY_SHIFT)) & SYSCON_PDRUNCFG_PDEN_USB1_PHY_MASK)
N#define SYSCON_PDRUNCFG_PDEN_USB1_PLL_MASK       (0x2U)
N#define SYSCON_PDRUNCFG_PDEN_USB1_PLL_SHIFT      (1U)
N#define SYSCON_PDRUNCFG_PDEN_USB1_PLL(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_USB1_PLL_SHIFT)) & SYSCON_PDRUNCFG_PDEN_USB1_PLL_MASK)
N#define SYSCON_PDRUNCFG_PDEN_AUD_PLL_MASK        (0x4U)
N#define SYSCON_PDRUNCFG_PDEN_AUD_PLL_SHIFT       (2U)
N#define SYSCON_PDRUNCFG_PDEN_AUD_PLL(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_AUD_PLL_SHIFT)) & SYSCON_PDRUNCFG_PDEN_AUD_PLL_MASK)
N#define SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK         (0x8U)
N#define SYSCON_PDRUNCFG_PDEN_SYSOSC_SHIFT        (3U)
N#define SYSCON_PDRUNCFG_PDEN_SYSOSC(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_SYSOSC_SHIFT)) & SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK)
N#define SYSCON_PDRUNCFG_PDEN_FRO_MASK            (0x10U)
N#define SYSCON_PDRUNCFG_PDEN_FRO_SHIFT           (4U)
N#define SYSCON_PDRUNCFG_PDEN_FRO(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_FRO_SHIFT)) & SYSCON_PDRUNCFG_PDEN_FRO_MASK)
N#define SYSCON_PDRUNCFG_PDEN_EEPROM_MASK         (0x20U)
N#define SYSCON_PDRUNCFG_PDEN_EEPROM_SHIFT        (5U)
N#define SYSCON_PDRUNCFG_PDEN_EEPROM(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_EEPROM_SHIFT)) & SYSCON_PDRUNCFG_PDEN_EEPROM_MASK)
N#define SYSCON_PDRUNCFG_PDEN_FLASH_MASK          (0x20U)
N#define SYSCON_PDRUNCFG_PDEN_FLASH_SHIFT         (5U)
N#define SYSCON_PDRUNCFG_PDEN_FLASH(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_FLASH_SHIFT)) & SYSCON_PDRUNCFG_PDEN_FLASH_MASK)
N#define SYSCON_PDRUNCFG_PDEN_TS_MASK             (0x40U)
N#define SYSCON_PDRUNCFG_PDEN_TS_SHIFT            (6U)
N#define SYSCON_PDRUNCFG_PDEN_TS(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_TS_SHIFT)) & SYSCON_PDRUNCFG_PDEN_TS_MASK)
N#define SYSCON_PDRUNCFG_PDEN_BOD_RST_MASK        (0x80U)
N#define SYSCON_PDRUNCFG_PDEN_BOD_RST_SHIFT       (7U)
N#define SYSCON_PDRUNCFG_PDEN_BOD_RST(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_BOD_RST_SHIFT)) & SYSCON_PDRUNCFG_PDEN_BOD_RST_MASK)
N#define SYSCON_PDRUNCFG_PDEN_RNG_MASK            (0x80U)
N#define SYSCON_PDRUNCFG_PDEN_RNG_SHIFT           (7U)
N#define SYSCON_PDRUNCFG_PDEN_RNG(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_RNG_SHIFT)) & SYSCON_PDRUNCFG_PDEN_RNG_MASK)
N#define SYSCON_PDRUNCFG_PDEN_BOD_INTR_MASK       (0x100U)
N#define SYSCON_PDRUNCFG_PDEN_BOD_INTR_SHIFT      (8U)
N#define SYSCON_PDRUNCFG_PDEN_BOD_INTR(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_BOD_INTR_SHIFT)) & SYSCON_PDRUNCFG_PDEN_BOD_INTR_MASK)
N#define SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK        (0x200U)
N#define SYSCON_PDRUNCFG_PDEN_VD2_ANA_SHIFT       (9U)
N#define SYSCON_PDRUNCFG_PDEN_VD2_ANA(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_VD2_ANA_SHIFT)) & SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK)
N#define SYSCON_PDRUNCFG_PDEN_ADC0_MASK           (0x400U)
N#define SYSCON_PDRUNCFG_PDEN_ADC0_SHIFT          (10U)
N#define SYSCON_PDRUNCFG_PDEN_ADC0(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_ADC0_SHIFT)) & SYSCON_PDRUNCFG_PDEN_ADC0_MASK)
N#define SYSCON_PDRUNCFG_PDEN_SRAMX_MASK          (0x2000U)
N#define SYSCON_PDRUNCFG_PDEN_SRAMX_SHIFT         (13U)
N#define SYSCON_PDRUNCFG_PDEN_SRAMX(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_SRAMX_SHIFT)) & SYSCON_PDRUNCFG_PDEN_SRAMX_MASK)
N#define SYSCON_PDRUNCFG_PDEN_SRAM0_MASK          (0x4000U)
N#define SYSCON_PDRUNCFG_PDEN_SRAM0_SHIFT         (14U)
N#define SYSCON_PDRUNCFG_PDEN_SRAM0(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_SRAM0_SHIFT)) & SYSCON_PDRUNCFG_PDEN_SRAM0_MASK)
N#define SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_MASK      (0x8000U)
N#define SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_SHIFT     (15U)
N#define SYSCON_PDRUNCFG_PDEN_SRAM1_2_3(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_SHIFT)) & SYSCON_PDRUNCFG_PDEN_SRAM1_2_3_MASK)
N#define SYSCON_PDRUNCFG_PDEN_USB_RAM_MASK        (0x10000U)
N#define SYSCON_PDRUNCFG_PDEN_USB_RAM_SHIFT       (16U)
N#define SYSCON_PDRUNCFG_PDEN_USB_RAM(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_USB_RAM_SHIFT)) & SYSCON_PDRUNCFG_PDEN_USB_RAM_MASK)
N#define SYSCON_PDRUNCFG_PDEN_ROM_MASK            (0x20000U)
N#define SYSCON_PDRUNCFG_PDEN_ROM_SHIFT           (17U)
N#define SYSCON_PDRUNCFG_PDEN_ROM(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_ROM_SHIFT)) & SYSCON_PDRUNCFG_PDEN_ROM_MASK)
N#define SYSCON_PDRUNCFG_PDEN_VDDA_MASK           (0x80000U)
N#define SYSCON_PDRUNCFG_PDEN_VDDA_SHIFT          (19U)
N#define SYSCON_PDRUNCFG_PDEN_VDDA(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_VDDA_SHIFT)) & SYSCON_PDRUNCFG_PDEN_VDDA_MASK)
N#define SYSCON_PDRUNCFG_PDEN_WDT_OSC_MASK        (0x100000U)
N#define SYSCON_PDRUNCFG_PDEN_WDT_OSC_SHIFT       (20U)
N#define SYSCON_PDRUNCFG_PDEN_WDT_OSC(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_WDT_OSC_SHIFT)) & SYSCON_PDRUNCFG_PDEN_WDT_OSC_MASK)
N#define SYSCON_PDRUNCFG_PDEN_USB0_PHY_MASK       (0x200000U)
N#define SYSCON_PDRUNCFG_PDEN_USB0_PHY_SHIFT      (21U)
N#define SYSCON_PDRUNCFG_PDEN_USB0_PHY(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_USB0_PHY_SHIFT)) & SYSCON_PDRUNCFG_PDEN_USB0_PHY_MASK)
N#define SYSCON_PDRUNCFG_PDEN_SYS_PLL_MASK        (0x400000U)
N#define SYSCON_PDRUNCFG_PDEN_SYS_PLL_SHIFT       (22U)
N#define SYSCON_PDRUNCFG_PDEN_SYS_PLL(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_SYS_PLL_SHIFT)) & SYSCON_PDRUNCFG_PDEN_SYS_PLL_MASK)
N#define SYSCON_PDRUNCFG_PDEN_VREFP_MASK          (0x800000U)
N#define SYSCON_PDRUNCFG_PDEN_VREFP_SHIFT         (23U)
N#define SYSCON_PDRUNCFG_PDEN_VREFP(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_VREFP_SHIFT)) & SYSCON_PDRUNCFG_PDEN_VREFP_MASK)
N#define SYSCON_PDRUNCFG_PDEN_VD3_MASK            (0x4000000U)
N#define SYSCON_PDRUNCFG_PDEN_VD3_SHIFT           (26U)
N#define SYSCON_PDRUNCFG_PDEN_VD3(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_VD3_SHIFT)) & SYSCON_PDRUNCFG_PDEN_VD3_MASK)
N#define SYSCON_PDRUNCFG_PDEN_VD4_MASK            (0x8000000U)
N#define SYSCON_PDRUNCFG_PDEN_VD4_SHIFT           (27U)
N#define SYSCON_PDRUNCFG_PDEN_VD4(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_VD4_SHIFT)) & SYSCON_PDRUNCFG_PDEN_VD4_MASK)
N#define SYSCON_PDRUNCFG_PDEN_VD5_MASK            (0x10000000U)
N#define SYSCON_PDRUNCFG_PDEN_VD5_SHIFT           (28U)
N#define SYSCON_PDRUNCFG_PDEN_VD5(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_VD5_SHIFT)) & SYSCON_PDRUNCFG_PDEN_VD5_MASK)
N#define SYSCON_PDRUNCFG_PDEN_VD6_MASK            (0x20000000U)
N#define SYSCON_PDRUNCFG_PDEN_VD6_SHIFT           (29U)
N#define SYSCON_PDRUNCFG_PDEN_VD6(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFG_PDEN_VD6_SHIFT)) & SYSCON_PDRUNCFG_PDEN_VD6_MASK)
N
N/* The count of SYSCON_PDRUNCFG */
N#define SYSCON_PDRUNCFG_COUNT                    (2U)
N
N/*! @name PDRUNCFGSET - Set bits in PDRUNCFG0 */
N#define SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_MASK    (0x1U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_SHIFT   (0U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB1_PHY(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_USB1_PHY_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_MASK    (0x2U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_SHIFT   (1U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB1_PLL(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_USB1_PLL_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_MASK     (0x4U)
N#define SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_SHIFT    (2U)
N#define SYSCON_PDRUNCFGSET_PDEN_AUD_PLL(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_AUD_PLL_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_SYSOSC_MASK      (0x8U)
N#define SYSCON_PDRUNCFGSET_PDEN_SYSOSC_SHIFT     (3U)
N#define SYSCON_PDRUNCFGSET_PDEN_SYSOSC(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_SYSOSC_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_SYSOSC_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_FRO_MASK         (0x10U)
N#define SYSCON_PDRUNCFGSET_PDEN_FRO_SHIFT        (4U)
N#define SYSCON_PDRUNCFGSET_PDEN_FRO(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_FRO_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_FRO_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_EEPROM_MASK      (0x20U)
N#define SYSCON_PDRUNCFGSET_PDEN_EEPROM_SHIFT     (5U)
N#define SYSCON_PDRUNCFGSET_PDEN_EEPROM(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_EEPROM_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_EEPROM_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_FLASH_MASK       (0x20U)
N#define SYSCON_PDRUNCFGSET_PDEN_FLASH_SHIFT      (5U)
N#define SYSCON_PDRUNCFGSET_PDEN_FLASH(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_FLASH_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_FLASH_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_TS_MASK          (0x40U)
N#define SYSCON_PDRUNCFGSET_PDEN_TS_SHIFT         (6U)
N#define SYSCON_PDRUNCFGSET_PDEN_TS(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_TS_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_TS_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_BOD_RST_MASK     (0x80U)
N#define SYSCON_PDRUNCFGSET_PDEN_BOD_RST_SHIFT    (7U)
N#define SYSCON_PDRUNCFGSET_PDEN_BOD_RST(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_BOD_RST_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_BOD_RST_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_RNG_MASK         (0x80U)
N#define SYSCON_PDRUNCFGSET_PDEN_RNG_SHIFT        (7U)
N#define SYSCON_PDRUNCFGSET_PDEN_RNG(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_RNG_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_RNG_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_MASK    (0x100U)
N#define SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_SHIFT   (8U)
N#define SYSCON_PDRUNCFGSET_PDEN_BOD_INTR(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_BOD_INTR_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_MASK     (0x200U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_SHIFT    (9U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD2_ANA(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_VD2_ANA_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_ADC0_MASK        (0x400U)
N#define SYSCON_PDRUNCFGSET_PDEN_ADC0_SHIFT       (10U)
N#define SYSCON_PDRUNCFGSET_PDEN_ADC0(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_ADC0_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_ADC0_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAMX_MASK       (0x2000U)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAMX_SHIFT      (13U)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAMX(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_SRAMX_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_SRAMX_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAM0_MASK       (0x4000U)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAM0_SHIFT      (14U)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAM0(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_SRAM0_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_SRAM0_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_MASK   (0x8000U)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_SHIFT  (15U)
N#define SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_SRAM1_2_3_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_USB_RAM_MASK     (0x10000U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB_RAM_SHIFT    (16U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB_RAM(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_USB_RAM_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_USB_RAM_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_ROM_MASK         (0x20000U)
N#define SYSCON_PDRUNCFGSET_PDEN_ROM_SHIFT        (17U)
N#define SYSCON_PDRUNCFGSET_PDEN_ROM(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_ROM_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_ROM_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_VDDA_MASK        (0x80000U)
N#define SYSCON_PDRUNCFGSET_PDEN_VDDA_SHIFT       (19U)
N#define SYSCON_PDRUNCFGSET_PDEN_VDDA(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_VDDA_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_VDDA_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_MASK     (0x100000U)
N#define SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_SHIFT    (20U)
N#define SYSCON_PDRUNCFGSET_PDEN_WDT_OSC(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_WDT_OSC_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_MASK    (0x200000U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_SHIFT   (21U)
N#define SYSCON_PDRUNCFGSET_PDEN_USB0_PHY(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_USB0_PHY_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_MASK     (0x400000U)
N#define SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_SHIFT    (22U)
N#define SYSCON_PDRUNCFGSET_PDEN_SYS_PLL(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_SYS_PLL_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_VREFP_MASK       (0x800000U)
N#define SYSCON_PDRUNCFGSET_PDEN_VREFP_SHIFT      (23U)
N#define SYSCON_PDRUNCFGSET_PDEN_VREFP(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_VREFP_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_VREFP_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_VD3_MASK         (0x4000000U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD3_SHIFT        (26U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD3(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_VD3_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_VD3_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_VD4_MASK         (0x8000000U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD4_SHIFT        (27U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD4(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_VD4_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_VD4_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_VD5_MASK         (0x10000000U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD5_SHIFT        (28U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD5(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_VD5_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_VD5_MASK)
N#define SYSCON_PDRUNCFGSET_PDEN_VD6_MASK         (0x20000000U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD6_SHIFT        (29U)
N#define SYSCON_PDRUNCFGSET_PDEN_VD6(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGSET_PDEN_VD6_SHIFT)) & SYSCON_PDRUNCFGSET_PDEN_VD6_MASK)
N
N/* The count of SYSCON_PDRUNCFGSET */
N#define SYSCON_PDRUNCFGSET_COUNT                 (2U)
N
N/*! @name PDRUNCFGCLR - Clear bits in PDRUNCFG0 */
N#define SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_MASK    (0x1U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_SHIFT   (0U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_USB1_PHY_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_MASK    (0x2U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_SHIFT   (1U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_USB1_PLL_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_MASK     (0x4U)
N#define SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_SHIFT    (2U)
N#define SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_AUD_PLL_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_MASK      (0x8U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_SHIFT     (3U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SYSOSC(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_SYSOSC_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_FRO_MASK         (0x10U)
N#define SYSCON_PDRUNCFGCLR_PDEN_FRO_SHIFT        (4U)
N#define SYSCON_PDRUNCFGCLR_PDEN_FRO(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_FRO_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_FRO_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_EEPROM_MASK      (0x20U)
N#define SYSCON_PDRUNCFGCLR_PDEN_EEPROM_SHIFT     (5U)
N#define SYSCON_PDRUNCFGCLR_PDEN_EEPROM(x)        (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_EEPROM_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_EEPROM_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_FLASH_MASK       (0x20U)
N#define SYSCON_PDRUNCFGCLR_PDEN_FLASH_SHIFT      (5U)
N#define SYSCON_PDRUNCFGCLR_PDEN_FLASH(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_FLASH_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_FLASH_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_TS_MASK          (0x40U)
N#define SYSCON_PDRUNCFGCLR_PDEN_TS_SHIFT         (6U)
N#define SYSCON_PDRUNCFGCLR_PDEN_TS(x)            (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_TS_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_TS_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_MASK     (0x80U)
N#define SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_SHIFT    (7U)
N#define SYSCON_PDRUNCFGCLR_PDEN_BOD_RST(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_BOD_RST_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_RNG_MASK         (0x80U)
N#define SYSCON_PDRUNCFGCLR_PDEN_RNG_SHIFT        (7U)
N#define SYSCON_PDRUNCFGCLR_PDEN_RNG(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_RNG_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_RNG_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_MASK    (0x100U)
N#define SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_SHIFT   (8U)
N#define SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_BOD_INTR_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_MASK     (0x200U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_SHIFT    (9U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_VD2_ANA_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_ADC0_MASK        (0x400U)
N#define SYSCON_PDRUNCFGCLR_PDEN_ADC0_SHIFT       (10U)
N#define SYSCON_PDRUNCFGCLR_PDEN_ADC0(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_ADC0_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_ADC0_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAMX_MASK       (0x2000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAMX_SHIFT      (13U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAMX(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_SRAMX_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_SRAMX_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAM0_MASK       (0x4000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAM0_SHIFT      (14U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAM0(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_SRAM0_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_SRAM0_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_MASK   (0x8000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_SHIFT  (15U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3(x)     (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_SRAM1_2_3_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_MASK     (0x10000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_SHIFT    (16U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB_RAM(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_USB_RAM_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_ROM_MASK         (0x20000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_ROM_SHIFT        (17U)
N#define SYSCON_PDRUNCFGCLR_PDEN_ROM(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_ROM_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_ROM_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_VDDA_MASK        (0x80000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VDDA_SHIFT       (19U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VDDA(x)          (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_VDDA_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_VDDA_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_MASK     (0x100000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_SHIFT    (20U)
N#define SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_WDT_OSC_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_MASK    (0x200000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_SHIFT   (21U)
N#define SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY(x)      (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_USB0_PHY_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_MASK     (0x400000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_SHIFT    (22U)
N#define SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL(x)       (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_SYS_PLL_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_VREFP_MASK       (0x800000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VREFP_SHIFT      (23U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VREFP(x)         (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_VREFP_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_VREFP_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD3_MASK         (0x4000000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD3_SHIFT        (26U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD3(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_VD3_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_VD3_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD4_MASK         (0x8000000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD4_SHIFT        (27U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD4(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_VD4_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_VD4_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD5_MASK         (0x10000000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD5_SHIFT        (28U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD5(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_VD5_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_VD5_MASK)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD6_MASK         (0x20000000U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD6_SHIFT        (29U)
N#define SYSCON_PDRUNCFGCLR_PDEN_VD6(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_PDRUNCFGCLR_PDEN_VD6_SHIFT)) & SYSCON_PDRUNCFGCLR_PDEN_VD6_MASK)
N
N/* The count of SYSCON_PDRUNCFGCLR */
N#define SYSCON_PDRUNCFGCLR_COUNT                 (2U)
N
N/*! @name STARTER - Start logic 0 wake-up enable register */
N#define SYSCON_STARTER_WDT_BOD_MASK              (0x1U)
N#define SYSCON_STARTER_WDT_BOD_SHIFT             (0U)
N#define SYSCON_STARTER_WDT_BOD(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_WDT_BOD_SHIFT)) & SYSCON_STARTER_WDT_BOD_MASK)
N#define SYSCON_STARTER_PINT4_MASK                (0x1U)
N#define SYSCON_STARTER_PINT4_SHIFT               (0U)
N#define SYSCON_STARTER_PINT4(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PINT4_SHIFT)) & SYSCON_STARTER_PINT4_MASK)
N#define SYSCON_STARTER_PINT5_MASK                (0x2U)
N#define SYSCON_STARTER_PINT5_SHIFT               (1U)
N#define SYSCON_STARTER_PINT5(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PINT5_SHIFT)) & SYSCON_STARTER_PINT5_MASK)
N#define SYSCON_STARTER_DMA_MASK                  (0x2U)
N#define SYSCON_STARTER_DMA_SHIFT                 (1U)
N#define SYSCON_STARTER_DMA(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_DMA_SHIFT)) & SYSCON_STARTER_DMA_MASK)
N#define SYSCON_STARTER_GINT0_MASK                (0x4U)
N#define SYSCON_STARTER_GINT0_SHIFT               (2U)
N#define SYSCON_STARTER_GINT0(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_GINT0_SHIFT)) & SYSCON_STARTER_GINT0_MASK)
N#define SYSCON_STARTER_PINT6_MASK                (0x4U)
N#define SYSCON_STARTER_PINT6_SHIFT               (2U)
N#define SYSCON_STARTER_PINT6(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PINT6_SHIFT)) & SYSCON_STARTER_PINT6_MASK)
N#define SYSCON_STARTER_GINT1_MASK                (0x8U)
N#define SYSCON_STARTER_GINT1_SHIFT               (3U)
N#define SYSCON_STARTER_GINT1(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_GINT1_SHIFT)) & SYSCON_STARTER_GINT1_MASK)
N#define SYSCON_STARTER_PINT7_MASK                (0x8U)
N#define SYSCON_STARTER_PINT7_SHIFT               (3U)
N#define SYSCON_STARTER_PINT7(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PINT7_SHIFT)) & SYSCON_STARTER_PINT7_MASK)
N#define SYSCON_STARTER_CTIMER2_MASK              (0x10U)
N#define SYSCON_STARTER_CTIMER2_SHIFT             (4U)
N#define SYSCON_STARTER_CTIMER2(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_CTIMER2_SHIFT)) & SYSCON_STARTER_CTIMER2_MASK)
N#define SYSCON_STARTER_PIN_INT0_MASK             (0x10U)
N#define SYSCON_STARTER_PIN_INT0_SHIFT            (4U)
N#define SYSCON_STARTER_PIN_INT0(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PIN_INT0_SHIFT)) & SYSCON_STARTER_PIN_INT0_MASK)
N#define SYSCON_STARTER_CTIMER4_MASK              (0x20U)
N#define SYSCON_STARTER_CTIMER4_SHIFT             (5U)
N#define SYSCON_STARTER_CTIMER4(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_CTIMER4_SHIFT)) & SYSCON_STARTER_CTIMER4_MASK)
N#define SYSCON_STARTER_PIN_INT1_MASK             (0x20U)
N#define SYSCON_STARTER_PIN_INT1_SHIFT            (5U)
N#define SYSCON_STARTER_PIN_INT1(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PIN_INT1_SHIFT)) & SYSCON_STARTER_PIN_INT1_MASK)
N#define SYSCON_STARTER_PIN_INT2_MASK             (0x40U)
N#define SYSCON_STARTER_PIN_INT2_SHIFT            (6U)
N#define SYSCON_STARTER_PIN_INT2(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PIN_INT2_SHIFT)) & SYSCON_STARTER_PIN_INT2_MASK)
N#define SYSCON_STARTER_PIN_INT3_MASK             (0x80U)
N#define SYSCON_STARTER_PIN_INT3_SHIFT            (7U)
N#define SYSCON_STARTER_PIN_INT3(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_PIN_INT3_SHIFT)) & SYSCON_STARTER_PIN_INT3_MASK)
N#define SYSCON_STARTER_SPIFI_MASK                (0x80U)
N#define SYSCON_STARTER_SPIFI_SHIFT               (7U)
N#define SYSCON_STARTER_SPIFI(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_SPIFI_SHIFT)) & SYSCON_STARTER_SPIFI_MASK)
N#define SYSCON_STARTER_FLEXCOMM8_MASK            (0x100U)
N#define SYSCON_STARTER_FLEXCOMM8_SHIFT           (8U)
N#define SYSCON_STARTER_FLEXCOMM8(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM8_SHIFT)) & SYSCON_STARTER_FLEXCOMM8_MASK)
N#define SYSCON_STARTER_UTICK_MASK                (0x100U)
N#define SYSCON_STARTER_UTICK_SHIFT               (8U)
N#define SYSCON_STARTER_UTICK(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_UTICK_SHIFT)) & SYSCON_STARTER_UTICK_MASK)
N#define SYSCON_STARTER_MRT_MASK                  (0x200U)
N#define SYSCON_STARTER_MRT_SHIFT                 (9U)
N#define SYSCON_STARTER_MRT(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_MRT_SHIFT)) & SYSCON_STARTER_MRT_MASK)
N#define SYSCON_STARTER_FLEXCOMM9_MASK            (0x200U)
N#define SYSCON_STARTER_FLEXCOMM9_SHIFT           (9U)
N#define SYSCON_STARTER_FLEXCOMM9(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM9_SHIFT)) & SYSCON_STARTER_FLEXCOMM9_MASK)
N#define SYSCON_STARTER_CTIMER0_MASK              (0x400U)
N#define SYSCON_STARTER_CTIMER0_SHIFT             (10U)
N#define SYSCON_STARTER_CTIMER0(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_CTIMER0_SHIFT)) & SYSCON_STARTER_CTIMER0_MASK)
N#define SYSCON_STARTER_CTIMER1_MASK              (0x800U)
N#define SYSCON_STARTER_CTIMER1_SHIFT             (11U)
N#define SYSCON_STARTER_CTIMER1(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_CTIMER1_SHIFT)) & SYSCON_STARTER_CTIMER1_MASK)
N#define SYSCON_STARTER_SCT0_MASK                 (0x1000U)
N#define SYSCON_STARTER_SCT0_SHIFT                (12U)
N#define SYSCON_STARTER_SCT0(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_SCT0_SHIFT)) & SYSCON_STARTER_SCT0_MASK)
N#define SYSCON_STARTER_CTIMER3_MASK              (0x2000U)
N#define SYSCON_STARTER_CTIMER3_SHIFT             (13U)
N#define SYSCON_STARTER_CTIMER3(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_CTIMER3_SHIFT)) & SYSCON_STARTER_CTIMER3_MASK)
N#define SYSCON_STARTER_FLEXCOMM0_MASK            (0x4000U)
N#define SYSCON_STARTER_FLEXCOMM0_SHIFT           (14U)
N#define SYSCON_STARTER_FLEXCOMM0(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM0_SHIFT)) & SYSCON_STARTER_FLEXCOMM0_MASK)
N#define SYSCON_STARTER_FLEXCOMM1_MASK            (0x8000U)
N#define SYSCON_STARTER_FLEXCOMM1_SHIFT           (15U)
N#define SYSCON_STARTER_FLEXCOMM1(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM1_SHIFT)) & SYSCON_STARTER_FLEXCOMM1_MASK)
N#define SYSCON_STARTER_USB1_MASK                 (0x8000U)
N#define SYSCON_STARTER_USB1_SHIFT                (15U)
N#define SYSCON_STARTER_USB1(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_USB1_SHIFT)) & SYSCON_STARTER_USB1_MASK)
N#define SYSCON_STARTER_FLEXCOMM2_MASK            (0x10000U)
N#define SYSCON_STARTER_FLEXCOMM2_SHIFT           (16U)
N#define SYSCON_STARTER_FLEXCOMM2(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM2_SHIFT)) & SYSCON_STARTER_FLEXCOMM2_MASK)
N#define SYSCON_STARTER_USB1_ACT_MASK             (0x10000U)
N#define SYSCON_STARTER_USB1_ACT_SHIFT            (16U)
N#define SYSCON_STARTER_USB1_ACT(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_USB1_ACT_SHIFT)) & SYSCON_STARTER_USB1_ACT_MASK)
N#define SYSCON_STARTER_ENET_INT1_MASK            (0x20000U)
N#define SYSCON_STARTER_ENET_INT1_SHIFT           (17U)
N#define SYSCON_STARTER_ENET_INT1(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_ENET_INT1_SHIFT)) & SYSCON_STARTER_ENET_INT1_MASK)
N#define SYSCON_STARTER_FLEXCOMM3_MASK            (0x20000U)
N#define SYSCON_STARTER_FLEXCOMM3_SHIFT           (17U)
N#define SYSCON_STARTER_FLEXCOMM3(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM3_SHIFT)) & SYSCON_STARTER_FLEXCOMM3_MASK)
N#define SYSCON_STARTER_ENET_INT2_MASK            (0x40000U)
N#define SYSCON_STARTER_ENET_INT2_SHIFT           (18U)
N#define SYSCON_STARTER_ENET_INT2(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_ENET_INT2_SHIFT)) & SYSCON_STARTER_ENET_INT2_MASK)
N#define SYSCON_STARTER_FLEXCOMM4_MASK            (0x40000U)
N#define SYSCON_STARTER_FLEXCOMM4_SHIFT           (18U)
N#define SYSCON_STARTER_FLEXCOMM4(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM4_SHIFT)) & SYSCON_STARTER_FLEXCOMM4_MASK)
N#define SYSCON_STARTER_ENET_INT0_MASK            (0x80000U)
N#define SYSCON_STARTER_ENET_INT0_SHIFT           (19U)
N#define SYSCON_STARTER_ENET_INT0(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_ENET_INT0_SHIFT)) & SYSCON_STARTER_ENET_INT0_MASK)
N#define SYSCON_STARTER_FLEXCOMM5_MASK            (0x80000U)
N#define SYSCON_STARTER_FLEXCOMM5_SHIFT           (19U)
N#define SYSCON_STARTER_FLEXCOMM5(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM5_SHIFT)) & SYSCON_STARTER_FLEXCOMM5_MASK)
N#define SYSCON_STARTER_FLEXCOMM6_MASK            (0x100000U)
N#define SYSCON_STARTER_FLEXCOMM6_SHIFT           (20U)
N#define SYSCON_STARTER_FLEXCOMM6(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM6_SHIFT)) & SYSCON_STARTER_FLEXCOMM6_MASK)
N#define SYSCON_STARTER_FLEXCOMM7_MASK            (0x200000U)
N#define SYSCON_STARTER_FLEXCOMM7_SHIFT           (21U)
N#define SYSCON_STARTER_FLEXCOMM7(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_FLEXCOMM7_SHIFT)) & SYSCON_STARTER_FLEXCOMM7_MASK)
N#define SYSCON_STARTER_ADC0_SEQA_MASK            (0x400000U)
N#define SYSCON_STARTER_ADC0_SEQA_SHIFT           (22U)
N#define SYSCON_STARTER_ADC0_SEQA(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_ADC0_SEQA_SHIFT)) & SYSCON_STARTER_ADC0_SEQA_MASK)
N#define SYSCON_STARTER_SMARTCARD0_MASK           (0x800000U)
N#define SYSCON_STARTER_SMARTCARD0_SHIFT          (23U)
N#define SYSCON_STARTER_SMARTCARD0(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_SMARTCARD0_SHIFT)) & SYSCON_STARTER_SMARTCARD0_MASK)
N#define SYSCON_STARTER_ADC0_SEQB_MASK            (0x800000U)
N#define SYSCON_STARTER_ADC0_SEQB_SHIFT           (23U)
N#define SYSCON_STARTER_ADC0_SEQB(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_ADC0_SEQB_SHIFT)) & SYSCON_STARTER_ADC0_SEQB_MASK)
N#define SYSCON_STARTER_ADC0_THCMP_MASK           (0x1000000U)
N#define SYSCON_STARTER_ADC0_THCMP_SHIFT          (24U)
N#define SYSCON_STARTER_ADC0_THCMP(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_ADC0_THCMP_SHIFT)) & SYSCON_STARTER_ADC0_THCMP_MASK)
N#define SYSCON_STARTER_SMARTCARD1_MASK           (0x1000000U)
N#define SYSCON_STARTER_SMARTCARD1_SHIFT          (24U)
N#define SYSCON_STARTER_SMARTCARD1(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_SMARTCARD1_SHIFT)) & SYSCON_STARTER_SMARTCARD1_MASK)
N#define SYSCON_STARTER_DMIC_MASK                 (0x2000000U)
N#define SYSCON_STARTER_DMIC_SHIFT                (25U)
N#define SYSCON_STARTER_DMIC(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_DMIC_SHIFT)) & SYSCON_STARTER_DMIC_MASK)
N#define SYSCON_STARTER_HWVAD_MASK                (0x4000000U)
N#define SYSCON_STARTER_HWVAD_SHIFT               (26U)
N#define SYSCON_STARTER_HWVAD(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_HWVAD_SHIFT)) & SYSCON_STARTER_HWVAD_MASK)
N#define SYSCON_STARTER_USB0_NEEDCLK_MASK         (0x8000000U)
N#define SYSCON_STARTER_USB0_NEEDCLK_SHIFT        (27U)
N#define SYSCON_STARTER_USB0_NEEDCLK(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_USB0_NEEDCLK_SHIFT)) & SYSCON_STARTER_USB0_NEEDCLK_MASK)
N#define SYSCON_STARTER_USB0_MASK                 (0x10000000U)
N#define SYSCON_STARTER_USB0_SHIFT                (28U)
N#define SYSCON_STARTER_USB0(x)                   (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_USB0_SHIFT)) & SYSCON_STARTER_USB0_MASK)
N#define SYSCON_STARTER_RTC_MASK                  (0x20000000U)
N#define SYSCON_STARTER_RTC_SHIFT                 (29U)
N#define SYSCON_STARTER_RTC(x)                    (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTER_RTC_SHIFT)) & SYSCON_STARTER_RTC_MASK)
N
N/* The count of SYSCON_STARTER */
N#define SYSCON_STARTER_COUNT                     (2U)
N
N/*! @name STARTERSET - Set bits in STARTER */
N#define SYSCON_STARTERSET_START_SET_MASK         (0xFFFFFFFFU)
N#define SYSCON_STARTERSET_START_SET_SHIFT        (0U)
N#define SYSCON_STARTERSET_START_SET(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTERSET_START_SET_SHIFT)) & SYSCON_STARTERSET_START_SET_MASK)
N
N/* The count of SYSCON_STARTERSET */
N#define SYSCON_STARTERSET_COUNT                  (2U)
N
N/*! @name STARTERCLR - Clear bits in STARTER0 */
N#define SYSCON_STARTERCLR_START_CLR_MASK         (0xFFFFFFFFU)
N#define SYSCON_STARTERCLR_START_CLR_SHIFT        (0U)
N#define SYSCON_STARTERCLR_START_CLR(x)           (((uint32_t)(((uint32_t)(x)) << SYSCON_STARTERCLR_START_CLR_SHIFT)) & SYSCON_STARTERCLR_START_CLR_MASK)
N
N/* The count of SYSCON_STARTERCLR */
N#define SYSCON_STARTERCLR_COUNT                  (2U)
N
N/*! @name HWWAKE - Configures special cases of hardware wake-up */
N#define SYSCON_HWWAKE_FORCEWAKE_MASK             (0x1U)
N#define SYSCON_HWWAKE_FORCEWAKE_SHIFT            (0U)
N#define SYSCON_HWWAKE_FORCEWAKE(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_HWWAKE_FORCEWAKE_SHIFT)) & SYSCON_HWWAKE_FORCEWAKE_MASK)
N#define SYSCON_HWWAKE_FCWAKE_MASK                (0x2U)
N#define SYSCON_HWWAKE_FCWAKE_SHIFT               (1U)
N#define SYSCON_HWWAKE_FCWAKE(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_HWWAKE_FCWAKE_SHIFT)) & SYSCON_HWWAKE_FCWAKE_MASK)
N#define SYSCON_HWWAKE_WAKEDMIC_MASK              (0x4U)
N#define SYSCON_HWWAKE_WAKEDMIC_SHIFT             (2U)
N#define SYSCON_HWWAKE_WAKEDMIC(x)                (((uint32_t)(((uint32_t)(x)) << SYSCON_HWWAKE_WAKEDMIC_SHIFT)) & SYSCON_HWWAKE_WAKEDMIC_MASK)
N#define SYSCON_HWWAKE_WAKEDMA_MASK               (0x8U)
N#define SYSCON_HWWAKE_WAKEDMA_SHIFT              (3U)
N#define SYSCON_HWWAKE_WAKEDMA(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_HWWAKE_WAKEDMA_SHIFT)) & SYSCON_HWWAKE_WAKEDMA_MASK)
N
N/*! @name AUTOCGOR - Auto Clock-Gate Override Register */
N#define SYSCON_AUTOCGOR_RAM0X_MASK               (0x2U)
N#define SYSCON_AUTOCGOR_RAM0X_SHIFT              (1U)
N#define SYSCON_AUTOCGOR_RAM0X(x)                 (((uint32_t)(((uint32_t)(x)) << SYSCON_AUTOCGOR_RAM0X_SHIFT)) & SYSCON_AUTOCGOR_RAM0X_MASK)
N#define SYSCON_AUTOCGOR_RAM1_MASK                (0x4U)
N#define SYSCON_AUTOCGOR_RAM1_SHIFT               (2U)
N#define SYSCON_AUTOCGOR_RAM1(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_AUTOCGOR_RAM1_SHIFT)) & SYSCON_AUTOCGOR_RAM1_MASK)
N#define SYSCON_AUTOCGOR_RAM2_MASK                (0x8U)
N#define SYSCON_AUTOCGOR_RAM2_SHIFT               (3U)
N#define SYSCON_AUTOCGOR_RAM2(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_AUTOCGOR_RAM2_SHIFT)) & SYSCON_AUTOCGOR_RAM2_MASK)
N#define SYSCON_AUTOCGOR_RAM3_MASK                (0x10U)
N#define SYSCON_AUTOCGOR_RAM3_SHIFT               (4U)
N#define SYSCON_AUTOCGOR_RAM3(x)                  (((uint32_t)(((uint32_t)(x)) << SYSCON_AUTOCGOR_RAM3_SHIFT)) & SYSCON_AUTOCGOR_RAM3_MASK)
N
N/*! @name JTAGIDCODE - JTAG ID code register */
N#define SYSCON_JTAGIDCODE_JTAGID_MASK            (0xFFFFFFFFU)
N#define SYSCON_JTAGIDCODE_JTAGID_SHIFT           (0U)
N#define SYSCON_JTAGIDCODE_JTAGID(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_JTAGIDCODE_JTAGID_SHIFT)) & SYSCON_JTAGIDCODE_JTAGID_MASK)
N
N/*! @name DEVICE_ID0 - Part ID register */
N#define SYSCON_DEVICE_ID0_PARTID_MASK            (0xFFFFFFFFU)
N#define SYSCON_DEVICE_ID0_PARTID_SHIFT           (0U)
N#define SYSCON_DEVICE_ID0_PARTID(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_DEVICE_ID0_PARTID_SHIFT)) & SYSCON_DEVICE_ID0_PARTID_MASK)
N
N/*! @name DEVICE_ID1 - Boot ROM and die revision register */
N#define SYSCON_DEVICE_ID1_REVID_MASK             (0xFFFFFFFFU)
N#define SYSCON_DEVICE_ID1_REVID_SHIFT            (0U)
N#define SYSCON_DEVICE_ID1_REVID(x)               (((uint32_t)(((uint32_t)(x)) << SYSCON_DEVICE_ID1_REVID_SHIFT)) & SYSCON_DEVICE_ID1_REVID_MASK)
N
N/*! @name BODCTRL - Brown-Out Detect control */
N#define SYSCON_BODCTRL_BODRSTLEV_MASK            (0x3U)
N#define SYSCON_BODCTRL_BODRSTLEV_SHIFT           (0U)
N#define SYSCON_BODCTRL_BODRSTLEV(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_BODCTRL_BODRSTLEV_SHIFT)) & SYSCON_BODCTRL_BODRSTLEV_MASK)
N#define SYSCON_BODCTRL_BODRSTENA_MASK            (0x4U)
N#define SYSCON_BODCTRL_BODRSTENA_SHIFT           (2U)
N#define SYSCON_BODCTRL_BODRSTENA(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_BODCTRL_BODRSTENA_SHIFT)) & SYSCON_BODCTRL_BODRSTENA_MASK)
N#define SYSCON_BODCTRL_BODINTLEV_MASK            (0x18U)
N#define SYSCON_BODCTRL_BODINTLEV_SHIFT           (3U)
N#define SYSCON_BODCTRL_BODINTLEV(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_BODCTRL_BODINTLEV_SHIFT)) & SYSCON_BODCTRL_BODINTLEV_MASK)
N#define SYSCON_BODCTRL_BODINTENA_MASK            (0x20U)
N#define SYSCON_BODCTRL_BODINTENA_SHIFT           (5U)
N#define SYSCON_BODCTRL_BODINTENA(x)              (((uint32_t)(((uint32_t)(x)) << SYSCON_BODCTRL_BODINTENA_SHIFT)) & SYSCON_BODCTRL_BODINTENA_MASK)
N#define SYSCON_BODCTRL_BODRSTSTAT_MASK           (0x40U)
N#define SYSCON_BODCTRL_BODRSTSTAT_SHIFT          (6U)
N#define SYSCON_BODCTRL_BODRSTSTAT(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_BODCTRL_BODRSTSTAT_SHIFT)) & SYSCON_BODCTRL_BODRSTSTAT_MASK)
N#define SYSCON_BODCTRL_BODINTSTAT_MASK           (0x80U)
N#define SYSCON_BODCTRL_BODINTSTAT_SHIFT          (7U)
N#define SYSCON_BODCTRL_BODINTSTAT(x)             (((uint32_t)(((uint32_t)(x)) << SYSCON_BODCTRL_BODINTSTAT_SHIFT)) & SYSCON_BODCTRL_BODINTSTAT_MASK)
N
N
N/*!
N * @}
N */ /* end of group SYSCON_Register_Masks */
N
N
N/* SYSCON - Peripheral instance base addresses */
N/** Peripheral SYSCON base address */
N#define SYSCON_BASE                              (0x40000000u)
N/** Peripheral SYSCON base pointer */
N#define SYSCON                                   ((SYSCON_Type *)SYSCON_BASE)
N/** Array initializer of SYSCON peripheral base addresses */
N#define SYSCON_BASE_ADDRS                        { SYSCON_BASE }
N/** Array initializer of SYSCON peripheral base pointers */
N#define SYSCON_BASE_PTRS                         { SYSCON }
N
N/*!
N * @}
N */ /* end of group SYSCON_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- USART Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USART_Peripheral_Access_Layer USART Peripheral Access Layer
N * @{
N */
N
N/** USART - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CFG;                               /**< USART Configuration register. Basic USART configuration settings that typically are not changed during operation., offset: 0x0 */
X  volatile uint32_t CFG;                                
N  __IO uint32_t CTL;                               /**< USART Control register. USART control settings that are more likely to change during operation., offset: 0x4 */
X  volatile uint32_t CTL;                                
N  __IO uint32_t STAT;                              /**< USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them., offset: 0x8 */
X  volatile uint32_t STAT;                               
N  __IO uint32_t INTENSET;                          /**< Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set., offset: 0xC */
X  volatile uint32_t INTENSET;                           
N  __O  uint32_t INTENCLR;                          /**< Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared., offset: 0x10 */
X  volatile  uint32_t INTENCLR;                           
N       uint8_t RESERVED_0[12];
N  __IO uint32_t BRG;                               /**< Baud Rate Generator register. 16-bit integer baud rate divisor value., offset: 0x20 */
X  volatile uint32_t BRG;                                
N  __I  uint32_t INTSTAT;                           /**< Interrupt status register. Reflects interrupts that are currently enabled., offset: 0x24 */
X  volatile const  uint32_t INTSTAT;                            
N  __IO uint32_t OSR;                               /**< Oversample selection register for asynchronous communication., offset: 0x28 */
X  volatile uint32_t OSR;                                
N  __IO uint32_t ADDR;                              /**< Address register for automatic address matching., offset: 0x2C */
X  volatile uint32_t ADDR;                               
N       uint8_t RESERVED_1[3536];
N  __IO uint32_t FIFOCFG;                           /**< FIFO configuration and enable register., offset: 0xE00 */
X  volatile uint32_t FIFOCFG;                            
N  __IO uint32_t FIFOSTAT;                          /**< FIFO status register., offset: 0xE04 */
X  volatile uint32_t FIFOSTAT;                           
N  __IO uint32_t FIFOTRIG;                          /**< FIFO trigger settings for interrupt and DMA request., offset: 0xE08 */
X  volatile uint32_t FIFOTRIG;                           
N       uint8_t RESERVED_2[4];
N  __IO uint32_t FIFOINTENSET;                      /**< FIFO interrupt enable set (enable) and read register., offset: 0xE10 */
X  volatile uint32_t FIFOINTENSET;                       
N  __IO uint32_t FIFOINTENCLR;                      /**< FIFO interrupt enable clear (disable) and read register., offset: 0xE14 */
X  volatile uint32_t FIFOINTENCLR;                       
N  __I  uint32_t FIFOINTSTAT;                       /**< FIFO interrupt status register., offset: 0xE18 */
X  volatile const  uint32_t FIFOINTSTAT;                        
N       uint8_t RESERVED_3[4];
N  __IO uint32_t FIFOWR;                            /**< FIFO write data., offset: 0xE20 */
X  volatile uint32_t FIFOWR;                             
N       uint8_t RESERVED_4[12];
N  __I  uint32_t FIFORD;                            /**< FIFO read data., offset: 0xE30 */
X  volatile const  uint32_t FIFORD;                             
N       uint8_t RESERVED_5[12];
N  __I  uint32_t FIFORDNOPOP;                       /**< FIFO data read with no FIFO pop., offset: 0xE40 */
X  volatile const  uint32_t FIFORDNOPOP;                        
N       uint8_t RESERVED_6[440];
N  __I  uint32_t ID;                                /**< Peripheral identification register., offset: 0xFFC */
X  volatile const  uint32_t ID;                                 
N} USART_Type;
N
N/* ----------------------------------------------------------------------------
N   -- USART Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USART_Register_Masks USART Register Masks
N * @{
N */
N
N/*! @name CFG - USART Configuration register. Basic USART configuration settings that typically are not changed during operation. */
N#define USART_CFG_ENABLE_MASK                    (0x1U)
N#define USART_CFG_ENABLE_SHIFT                   (0U)
N#define USART_CFG_ENABLE(x)                      (((uint32_t)(((uint32_t)(x)) << USART_CFG_ENABLE_SHIFT)) & USART_CFG_ENABLE_MASK)
N#define USART_CFG_DATALEN_MASK                   (0xCU)
N#define USART_CFG_DATALEN_SHIFT                  (2U)
N#define USART_CFG_DATALEN(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CFG_DATALEN_SHIFT)) & USART_CFG_DATALEN_MASK)
N#define USART_CFG_PARITYSEL_MASK                 (0x30U)
N#define USART_CFG_PARITYSEL_SHIFT                (4U)
N#define USART_CFG_PARITYSEL(x)                   (((uint32_t)(((uint32_t)(x)) << USART_CFG_PARITYSEL_SHIFT)) & USART_CFG_PARITYSEL_MASK)
N#define USART_CFG_STOPLEN_MASK                   (0x40U)
N#define USART_CFG_STOPLEN_SHIFT                  (6U)
N#define USART_CFG_STOPLEN(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CFG_STOPLEN_SHIFT)) & USART_CFG_STOPLEN_MASK)
N#define USART_CFG_MODE32K_MASK                   (0x80U)
N#define USART_CFG_MODE32K_SHIFT                  (7U)
N#define USART_CFG_MODE32K(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CFG_MODE32K_SHIFT)) & USART_CFG_MODE32K_MASK)
N#define USART_CFG_LINMODE_MASK                   (0x100U)
N#define USART_CFG_LINMODE_SHIFT                  (8U)
N#define USART_CFG_LINMODE(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CFG_LINMODE_SHIFT)) & USART_CFG_LINMODE_MASK)
N#define USART_CFG_CTSEN_MASK                     (0x200U)
N#define USART_CFG_CTSEN_SHIFT                    (9U)
N#define USART_CFG_CTSEN(x)                       (((uint32_t)(((uint32_t)(x)) << USART_CFG_CTSEN_SHIFT)) & USART_CFG_CTSEN_MASK)
N#define USART_CFG_SYNCEN_MASK                    (0x800U)
N#define USART_CFG_SYNCEN_SHIFT                   (11U)
N#define USART_CFG_SYNCEN(x)                      (((uint32_t)(((uint32_t)(x)) << USART_CFG_SYNCEN_SHIFT)) & USART_CFG_SYNCEN_MASK)
N#define USART_CFG_CLKPOL_MASK                    (0x1000U)
N#define USART_CFG_CLKPOL_SHIFT                   (12U)
N#define USART_CFG_CLKPOL(x)                      (((uint32_t)(((uint32_t)(x)) << USART_CFG_CLKPOL_SHIFT)) & USART_CFG_CLKPOL_MASK)
N#define USART_CFG_SYNCMST_MASK                   (0x4000U)
N#define USART_CFG_SYNCMST_SHIFT                  (14U)
N#define USART_CFG_SYNCMST(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CFG_SYNCMST_SHIFT)) & USART_CFG_SYNCMST_MASK)
N#define USART_CFG_LOOP_MASK                      (0x8000U)
N#define USART_CFG_LOOP_SHIFT                     (15U)
N#define USART_CFG_LOOP(x)                        (((uint32_t)(((uint32_t)(x)) << USART_CFG_LOOP_SHIFT)) & USART_CFG_LOOP_MASK)
N#define USART_CFG_OETA_MASK                      (0x40000U)
N#define USART_CFG_OETA_SHIFT                     (18U)
N#define USART_CFG_OETA(x)                        (((uint32_t)(((uint32_t)(x)) << USART_CFG_OETA_SHIFT)) & USART_CFG_OETA_MASK)
N#define USART_CFG_AUTOADDR_MASK                  (0x80000U)
N#define USART_CFG_AUTOADDR_SHIFT                 (19U)
N#define USART_CFG_AUTOADDR(x)                    (((uint32_t)(((uint32_t)(x)) << USART_CFG_AUTOADDR_SHIFT)) & USART_CFG_AUTOADDR_MASK)
N#define USART_CFG_OESEL_MASK                     (0x100000U)
N#define USART_CFG_OESEL_SHIFT                    (20U)
N#define USART_CFG_OESEL(x)                       (((uint32_t)(((uint32_t)(x)) << USART_CFG_OESEL_SHIFT)) & USART_CFG_OESEL_MASK)
N#define USART_CFG_OEPOL_MASK                     (0x200000U)
N#define USART_CFG_OEPOL_SHIFT                    (21U)
N#define USART_CFG_OEPOL(x)                       (((uint32_t)(((uint32_t)(x)) << USART_CFG_OEPOL_SHIFT)) & USART_CFG_OEPOL_MASK)
N#define USART_CFG_RXPOL_MASK                     (0x400000U)
N#define USART_CFG_RXPOL_SHIFT                    (22U)
N#define USART_CFG_RXPOL(x)                       (((uint32_t)(((uint32_t)(x)) << USART_CFG_RXPOL_SHIFT)) & USART_CFG_RXPOL_MASK)
N#define USART_CFG_TXPOL_MASK                     (0x800000U)
N#define USART_CFG_TXPOL_SHIFT                    (23U)
N#define USART_CFG_TXPOL(x)                       (((uint32_t)(((uint32_t)(x)) << USART_CFG_TXPOL_SHIFT)) & USART_CFG_TXPOL_MASK)
N
N/*! @name CTL - USART Control register. USART control settings that are more likely to change during operation. */
N#define USART_CTL_TXBRKEN_MASK                   (0x2U)
N#define USART_CTL_TXBRKEN_SHIFT                  (1U)
N#define USART_CTL_TXBRKEN(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CTL_TXBRKEN_SHIFT)) & USART_CTL_TXBRKEN_MASK)
N#define USART_CTL_ADDRDET_MASK                   (0x4U)
N#define USART_CTL_ADDRDET_SHIFT                  (2U)
N#define USART_CTL_ADDRDET(x)                     (((uint32_t)(((uint32_t)(x)) << USART_CTL_ADDRDET_SHIFT)) & USART_CTL_ADDRDET_MASK)
N#define USART_CTL_TXDIS_MASK                     (0x40U)
N#define USART_CTL_TXDIS_SHIFT                    (6U)
N#define USART_CTL_TXDIS(x)                       (((uint32_t)(((uint32_t)(x)) << USART_CTL_TXDIS_SHIFT)) & USART_CTL_TXDIS_MASK)
N#define USART_CTL_CC_MASK                        (0x100U)
N#define USART_CTL_CC_SHIFT                       (8U)
N#define USART_CTL_CC(x)                          (((uint32_t)(((uint32_t)(x)) << USART_CTL_CC_SHIFT)) & USART_CTL_CC_MASK)
N#define USART_CTL_CLRCCONRX_MASK                 (0x200U)
N#define USART_CTL_CLRCCONRX_SHIFT                (9U)
N#define USART_CTL_CLRCCONRX(x)                   (((uint32_t)(((uint32_t)(x)) << USART_CTL_CLRCCONRX_SHIFT)) & USART_CTL_CLRCCONRX_MASK)
N#define USART_CTL_AUTOBAUD_MASK                  (0x10000U)
N#define USART_CTL_AUTOBAUD_SHIFT                 (16U)
N#define USART_CTL_AUTOBAUD(x)                    (((uint32_t)(((uint32_t)(x)) << USART_CTL_AUTOBAUD_SHIFT)) & USART_CTL_AUTOBAUD_MASK)
N
N/*! @name STAT - USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them. */
N#define USART_STAT_RXIDLE_MASK                   (0x2U)
N#define USART_STAT_RXIDLE_SHIFT                  (1U)
N#define USART_STAT_RXIDLE(x)                     (((uint32_t)(((uint32_t)(x)) << USART_STAT_RXIDLE_SHIFT)) & USART_STAT_RXIDLE_MASK)
N#define USART_STAT_TXIDLE_MASK                   (0x8U)
N#define USART_STAT_TXIDLE_SHIFT                  (3U)
N#define USART_STAT_TXIDLE(x)                     (((uint32_t)(((uint32_t)(x)) << USART_STAT_TXIDLE_SHIFT)) & USART_STAT_TXIDLE_MASK)
N#define USART_STAT_CTS_MASK                      (0x10U)
N#define USART_STAT_CTS_SHIFT                     (4U)
N#define USART_STAT_CTS(x)                        (((uint32_t)(((uint32_t)(x)) << USART_STAT_CTS_SHIFT)) & USART_STAT_CTS_MASK)
N#define USART_STAT_DELTACTS_MASK                 (0x20U)
N#define USART_STAT_DELTACTS_SHIFT                (5U)
N#define USART_STAT_DELTACTS(x)                   (((uint32_t)(((uint32_t)(x)) << USART_STAT_DELTACTS_SHIFT)) & USART_STAT_DELTACTS_MASK)
N#define USART_STAT_TXDISSTAT_MASK                (0x40U)
N#define USART_STAT_TXDISSTAT_SHIFT               (6U)
N#define USART_STAT_TXDISSTAT(x)                  (((uint32_t)(((uint32_t)(x)) << USART_STAT_TXDISSTAT_SHIFT)) & USART_STAT_TXDISSTAT_MASK)
N#define USART_STAT_RXBRK_MASK                    (0x400U)
N#define USART_STAT_RXBRK_SHIFT                   (10U)
N#define USART_STAT_RXBRK(x)                      (((uint32_t)(((uint32_t)(x)) << USART_STAT_RXBRK_SHIFT)) & USART_STAT_RXBRK_MASK)
N#define USART_STAT_DELTARXBRK_MASK               (0x800U)
N#define USART_STAT_DELTARXBRK_SHIFT              (11U)
N#define USART_STAT_DELTARXBRK(x)                 (((uint32_t)(((uint32_t)(x)) << USART_STAT_DELTARXBRK_SHIFT)) & USART_STAT_DELTARXBRK_MASK)
N#define USART_STAT_START_MASK                    (0x1000U)
N#define USART_STAT_START_SHIFT                   (12U)
N#define USART_STAT_START(x)                      (((uint32_t)(((uint32_t)(x)) << USART_STAT_START_SHIFT)) & USART_STAT_START_MASK)
N#define USART_STAT_FRAMERRINT_MASK               (0x2000U)
N#define USART_STAT_FRAMERRINT_SHIFT              (13U)
N#define USART_STAT_FRAMERRINT(x)                 (((uint32_t)(((uint32_t)(x)) << USART_STAT_FRAMERRINT_SHIFT)) & USART_STAT_FRAMERRINT_MASK)
N#define USART_STAT_PARITYERRINT_MASK             (0x4000U)
N#define USART_STAT_PARITYERRINT_SHIFT            (14U)
N#define USART_STAT_PARITYERRINT(x)               (((uint32_t)(((uint32_t)(x)) << USART_STAT_PARITYERRINT_SHIFT)) & USART_STAT_PARITYERRINT_MASK)
N#define USART_STAT_RXNOISEINT_MASK               (0x8000U)
N#define USART_STAT_RXNOISEINT_SHIFT              (15U)
N#define USART_STAT_RXNOISEINT(x)                 (((uint32_t)(((uint32_t)(x)) << USART_STAT_RXNOISEINT_SHIFT)) & USART_STAT_RXNOISEINT_MASK)
N#define USART_STAT_ABERR_MASK                    (0x10000U)
N#define USART_STAT_ABERR_SHIFT                   (16U)
N#define USART_STAT_ABERR(x)                      (((uint32_t)(((uint32_t)(x)) << USART_STAT_ABERR_SHIFT)) & USART_STAT_ABERR_MASK)
N
N/*! @name INTENSET - Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set. */
N#define USART_INTENSET_TXIDLEEN_MASK             (0x8U)
N#define USART_INTENSET_TXIDLEEN_SHIFT            (3U)
N#define USART_INTENSET_TXIDLEEN(x)               (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_TXIDLEEN_SHIFT)) & USART_INTENSET_TXIDLEEN_MASK)
N#define USART_INTENSET_DELTACTSEN_MASK           (0x20U)
N#define USART_INTENSET_DELTACTSEN_SHIFT          (5U)
N#define USART_INTENSET_DELTACTSEN(x)             (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_DELTACTSEN_SHIFT)) & USART_INTENSET_DELTACTSEN_MASK)
N#define USART_INTENSET_TXDISEN_MASK              (0x40U)
N#define USART_INTENSET_TXDISEN_SHIFT             (6U)
N#define USART_INTENSET_TXDISEN(x)                (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_TXDISEN_SHIFT)) & USART_INTENSET_TXDISEN_MASK)
N#define USART_INTENSET_DELTARXBRKEN_MASK         (0x800U)
N#define USART_INTENSET_DELTARXBRKEN_SHIFT        (11U)
N#define USART_INTENSET_DELTARXBRKEN(x)           (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_DELTARXBRKEN_SHIFT)) & USART_INTENSET_DELTARXBRKEN_MASK)
N#define USART_INTENSET_STARTEN_MASK              (0x1000U)
N#define USART_INTENSET_STARTEN_SHIFT             (12U)
N#define USART_INTENSET_STARTEN(x)                (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_STARTEN_SHIFT)) & USART_INTENSET_STARTEN_MASK)
N#define USART_INTENSET_FRAMERREN_MASK            (0x2000U)
N#define USART_INTENSET_FRAMERREN_SHIFT           (13U)
N#define USART_INTENSET_FRAMERREN(x)              (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_FRAMERREN_SHIFT)) & USART_INTENSET_FRAMERREN_MASK)
N#define USART_INTENSET_PARITYERREN_MASK          (0x4000U)
N#define USART_INTENSET_PARITYERREN_SHIFT         (14U)
N#define USART_INTENSET_PARITYERREN(x)            (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_PARITYERREN_SHIFT)) & USART_INTENSET_PARITYERREN_MASK)
N#define USART_INTENSET_RXNOISEEN_MASK            (0x8000U)
N#define USART_INTENSET_RXNOISEEN_SHIFT           (15U)
N#define USART_INTENSET_RXNOISEEN(x)              (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_RXNOISEEN_SHIFT)) & USART_INTENSET_RXNOISEEN_MASK)
N#define USART_INTENSET_ABERREN_MASK              (0x10000U)
N#define USART_INTENSET_ABERREN_SHIFT             (16U)
N#define USART_INTENSET_ABERREN(x)                (((uint32_t)(((uint32_t)(x)) << USART_INTENSET_ABERREN_SHIFT)) & USART_INTENSET_ABERREN_MASK)
N
N/*! @name INTENCLR - Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared. */
N#define USART_INTENCLR_TXIDLECLR_MASK            (0x8U)
N#define USART_INTENCLR_TXIDLECLR_SHIFT           (3U)
N#define USART_INTENCLR_TXIDLECLR(x)              (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_TXIDLECLR_SHIFT)) & USART_INTENCLR_TXIDLECLR_MASK)
N#define USART_INTENCLR_DELTACTSCLR_MASK          (0x20U)
N#define USART_INTENCLR_DELTACTSCLR_SHIFT         (5U)
N#define USART_INTENCLR_DELTACTSCLR(x)            (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_DELTACTSCLR_SHIFT)) & USART_INTENCLR_DELTACTSCLR_MASK)
N#define USART_INTENCLR_TXDISCLR_MASK             (0x40U)
N#define USART_INTENCLR_TXDISCLR_SHIFT            (6U)
N#define USART_INTENCLR_TXDISCLR(x)               (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_TXDISCLR_SHIFT)) & USART_INTENCLR_TXDISCLR_MASK)
N#define USART_INTENCLR_DELTARXBRKCLR_MASK        (0x800U)
N#define USART_INTENCLR_DELTARXBRKCLR_SHIFT       (11U)
N#define USART_INTENCLR_DELTARXBRKCLR(x)          (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_DELTARXBRKCLR_SHIFT)) & USART_INTENCLR_DELTARXBRKCLR_MASK)
N#define USART_INTENCLR_STARTCLR_MASK             (0x1000U)
N#define USART_INTENCLR_STARTCLR_SHIFT            (12U)
N#define USART_INTENCLR_STARTCLR(x)               (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_STARTCLR_SHIFT)) & USART_INTENCLR_STARTCLR_MASK)
N#define USART_INTENCLR_FRAMERRCLR_MASK           (0x2000U)
N#define USART_INTENCLR_FRAMERRCLR_SHIFT          (13U)
N#define USART_INTENCLR_FRAMERRCLR(x)             (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_FRAMERRCLR_SHIFT)) & USART_INTENCLR_FRAMERRCLR_MASK)
N#define USART_INTENCLR_PARITYERRCLR_MASK         (0x4000U)
N#define USART_INTENCLR_PARITYERRCLR_SHIFT        (14U)
N#define USART_INTENCLR_PARITYERRCLR(x)           (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_PARITYERRCLR_SHIFT)) & USART_INTENCLR_PARITYERRCLR_MASK)
N#define USART_INTENCLR_RXNOISECLR_MASK           (0x8000U)
N#define USART_INTENCLR_RXNOISECLR_SHIFT          (15U)
N#define USART_INTENCLR_RXNOISECLR(x)             (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_RXNOISECLR_SHIFT)) & USART_INTENCLR_RXNOISECLR_MASK)
N#define USART_INTENCLR_ABERRCLR_MASK             (0x10000U)
N#define USART_INTENCLR_ABERRCLR_SHIFT            (16U)
N#define USART_INTENCLR_ABERRCLR(x)               (((uint32_t)(((uint32_t)(x)) << USART_INTENCLR_ABERRCLR_SHIFT)) & USART_INTENCLR_ABERRCLR_MASK)
N
N/*! @name BRG - Baud Rate Generator register. 16-bit integer baud rate divisor value. */
N#define USART_BRG_BRGVAL_MASK                    (0xFFFFU)
N#define USART_BRG_BRGVAL_SHIFT                   (0U)
N#define USART_BRG_BRGVAL(x)                      (((uint32_t)(((uint32_t)(x)) << USART_BRG_BRGVAL_SHIFT)) & USART_BRG_BRGVAL_MASK)
N
N/*! @name INTSTAT - Interrupt status register. Reflects interrupts that are currently enabled. */
N#define USART_INTSTAT_TXIDLE_MASK                (0x8U)
N#define USART_INTSTAT_TXIDLE_SHIFT               (3U)
N#define USART_INTSTAT_TXIDLE(x)                  (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_TXIDLE_SHIFT)) & USART_INTSTAT_TXIDLE_MASK)
N#define USART_INTSTAT_DELTACTS_MASK              (0x20U)
N#define USART_INTSTAT_DELTACTS_SHIFT             (5U)
N#define USART_INTSTAT_DELTACTS(x)                (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_DELTACTS_SHIFT)) & USART_INTSTAT_DELTACTS_MASK)
N#define USART_INTSTAT_TXDISINT_MASK              (0x40U)
N#define USART_INTSTAT_TXDISINT_SHIFT             (6U)
N#define USART_INTSTAT_TXDISINT(x)                (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_TXDISINT_SHIFT)) & USART_INTSTAT_TXDISINT_MASK)
N#define USART_INTSTAT_DELTARXBRK_MASK            (0x800U)
N#define USART_INTSTAT_DELTARXBRK_SHIFT           (11U)
N#define USART_INTSTAT_DELTARXBRK(x)              (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_DELTARXBRK_SHIFT)) & USART_INTSTAT_DELTARXBRK_MASK)
N#define USART_INTSTAT_START_MASK                 (0x1000U)
N#define USART_INTSTAT_START_SHIFT                (12U)
N#define USART_INTSTAT_START(x)                   (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_START_SHIFT)) & USART_INTSTAT_START_MASK)
N#define USART_INTSTAT_FRAMERRINT_MASK            (0x2000U)
N#define USART_INTSTAT_FRAMERRINT_SHIFT           (13U)
N#define USART_INTSTAT_FRAMERRINT(x)              (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_FRAMERRINT_SHIFT)) & USART_INTSTAT_FRAMERRINT_MASK)
N#define USART_INTSTAT_PARITYERRINT_MASK          (0x4000U)
N#define USART_INTSTAT_PARITYERRINT_SHIFT         (14U)
N#define USART_INTSTAT_PARITYERRINT(x)            (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_PARITYERRINT_SHIFT)) & USART_INTSTAT_PARITYERRINT_MASK)
N#define USART_INTSTAT_RXNOISEINT_MASK            (0x8000U)
N#define USART_INTSTAT_RXNOISEINT_SHIFT           (15U)
N#define USART_INTSTAT_RXNOISEINT(x)              (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_RXNOISEINT_SHIFT)) & USART_INTSTAT_RXNOISEINT_MASK)
N#define USART_INTSTAT_ABERRINT_MASK              (0x10000U)
N#define USART_INTSTAT_ABERRINT_SHIFT             (16U)
N#define USART_INTSTAT_ABERRINT(x)                (((uint32_t)(((uint32_t)(x)) << USART_INTSTAT_ABERRINT_SHIFT)) & USART_INTSTAT_ABERRINT_MASK)
N
N/*! @name OSR - Oversample selection register for asynchronous communication. */
N#define USART_OSR_OSRVAL_MASK                    (0xFU)
N#define USART_OSR_OSRVAL_SHIFT                   (0U)
N#define USART_OSR_OSRVAL(x)                      (((uint32_t)(((uint32_t)(x)) << USART_OSR_OSRVAL_SHIFT)) & USART_OSR_OSRVAL_MASK)
N
N/*! @name ADDR - Address register for automatic address matching. */
N#define USART_ADDR_ADDRESS_MASK                  (0xFFU)
N#define USART_ADDR_ADDRESS_SHIFT                 (0U)
N#define USART_ADDR_ADDRESS(x)                    (((uint32_t)(((uint32_t)(x)) << USART_ADDR_ADDRESS_SHIFT)) & USART_ADDR_ADDRESS_MASK)
N
N/*! @name FIFOCFG - FIFO configuration and enable register. */
N#define USART_FIFOCFG_ENABLETX_MASK              (0x1U)
N#define USART_FIFOCFG_ENABLETX_SHIFT             (0U)
N#define USART_FIFOCFG_ENABLETX(x)                (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_ENABLETX_SHIFT)) & USART_FIFOCFG_ENABLETX_MASK)
N#define USART_FIFOCFG_ENABLERX_MASK              (0x2U)
N#define USART_FIFOCFG_ENABLERX_SHIFT             (1U)
N#define USART_FIFOCFG_ENABLERX(x)                (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_ENABLERX_SHIFT)) & USART_FIFOCFG_ENABLERX_MASK)
N#define USART_FIFOCFG_SIZE_MASK                  (0x30U)
N#define USART_FIFOCFG_SIZE_SHIFT                 (4U)
N#define USART_FIFOCFG_SIZE(x)                    (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_SIZE_SHIFT)) & USART_FIFOCFG_SIZE_MASK)
N#define USART_FIFOCFG_DMATX_MASK                 (0x1000U)
N#define USART_FIFOCFG_DMATX_SHIFT                (12U)
N#define USART_FIFOCFG_DMATX(x)                   (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_DMATX_SHIFT)) & USART_FIFOCFG_DMATX_MASK)
N#define USART_FIFOCFG_DMARX_MASK                 (0x2000U)
N#define USART_FIFOCFG_DMARX_SHIFT                (13U)
N#define USART_FIFOCFG_DMARX(x)                   (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_DMARX_SHIFT)) & USART_FIFOCFG_DMARX_MASK)
N#define USART_FIFOCFG_WAKETX_MASK                (0x4000U)
N#define USART_FIFOCFG_WAKETX_SHIFT               (14U)
N#define USART_FIFOCFG_WAKETX(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_WAKETX_SHIFT)) & USART_FIFOCFG_WAKETX_MASK)
N#define USART_FIFOCFG_WAKERX_MASK                (0x8000U)
N#define USART_FIFOCFG_WAKERX_SHIFT               (15U)
N#define USART_FIFOCFG_WAKERX(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_WAKERX_SHIFT)) & USART_FIFOCFG_WAKERX_MASK)
N#define USART_FIFOCFG_EMPTYTX_MASK               (0x10000U)
N#define USART_FIFOCFG_EMPTYTX_SHIFT              (16U)
N#define USART_FIFOCFG_EMPTYTX(x)                 (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_EMPTYTX_SHIFT)) & USART_FIFOCFG_EMPTYTX_MASK)
N#define USART_FIFOCFG_EMPTYRX_MASK               (0x20000U)
N#define USART_FIFOCFG_EMPTYRX_SHIFT              (17U)
N#define USART_FIFOCFG_EMPTYRX(x)                 (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_EMPTYRX_SHIFT)) & USART_FIFOCFG_EMPTYRX_MASK)
N#define USART_FIFOCFG_POPDBG_MASK                (0x40000U)
N#define USART_FIFOCFG_POPDBG_SHIFT               (18U)
N#define USART_FIFOCFG_POPDBG(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOCFG_POPDBG_SHIFT)) & USART_FIFOCFG_POPDBG_MASK)
N
N/*! @name FIFOSTAT - FIFO status register. */
N#define USART_FIFOSTAT_TXERR_MASK                (0x1U)
N#define USART_FIFOSTAT_TXERR_SHIFT               (0U)
N#define USART_FIFOSTAT_TXERR(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_TXERR_SHIFT)) & USART_FIFOSTAT_TXERR_MASK)
N#define USART_FIFOSTAT_RXERR_MASK                (0x2U)
N#define USART_FIFOSTAT_RXERR_SHIFT               (1U)
N#define USART_FIFOSTAT_RXERR(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_RXERR_SHIFT)) & USART_FIFOSTAT_RXERR_MASK)
N#define USART_FIFOSTAT_PERINT_MASK               (0x8U)
N#define USART_FIFOSTAT_PERINT_SHIFT              (3U)
N#define USART_FIFOSTAT_PERINT(x)                 (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_PERINT_SHIFT)) & USART_FIFOSTAT_PERINT_MASK)
N#define USART_FIFOSTAT_TXEMPTY_MASK              (0x10U)
N#define USART_FIFOSTAT_TXEMPTY_SHIFT             (4U)
N#define USART_FIFOSTAT_TXEMPTY(x)                (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_TXEMPTY_SHIFT)) & USART_FIFOSTAT_TXEMPTY_MASK)
N#define USART_FIFOSTAT_TXNOTFULL_MASK            (0x20U)
N#define USART_FIFOSTAT_TXNOTFULL_SHIFT           (5U)
N#define USART_FIFOSTAT_TXNOTFULL(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_TXNOTFULL_SHIFT)) & USART_FIFOSTAT_TXNOTFULL_MASK)
N#define USART_FIFOSTAT_RXNOTEMPTY_MASK           (0x40U)
N#define USART_FIFOSTAT_RXNOTEMPTY_SHIFT          (6U)
N#define USART_FIFOSTAT_RXNOTEMPTY(x)             (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_RXNOTEMPTY_SHIFT)) & USART_FIFOSTAT_RXNOTEMPTY_MASK)
N#define USART_FIFOSTAT_RXFULL_MASK               (0x80U)
N#define USART_FIFOSTAT_RXFULL_SHIFT              (7U)
N#define USART_FIFOSTAT_RXFULL(x)                 (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_RXFULL_SHIFT)) & USART_FIFOSTAT_RXFULL_MASK)
N#define USART_FIFOSTAT_TXLVL_MASK                (0x1F00U)
N#define USART_FIFOSTAT_TXLVL_SHIFT               (8U)
N#define USART_FIFOSTAT_TXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_TXLVL_SHIFT)) & USART_FIFOSTAT_TXLVL_MASK)
N#define USART_FIFOSTAT_RXLVL_MASK                (0x1F0000U)
N#define USART_FIFOSTAT_RXLVL_SHIFT               (16U)
N#define USART_FIFOSTAT_RXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOSTAT_RXLVL_SHIFT)) & USART_FIFOSTAT_RXLVL_MASK)
N
N/*! @name FIFOTRIG - FIFO trigger settings for interrupt and DMA request. */
N#define USART_FIFOTRIG_TXLVLENA_MASK             (0x1U)
N#define USART_FIFOTRIG_TXLVLENA_SHIFT            (0U)
N#define USART_FIFOTRIG_TXLVLENA(x)               (((uint32_t)(((uint32_t)(x)) << USART_FIFOTRIG_TXLVLENA_SHIFT)) & USART_FIFOTRIG_TXLVLENA_MASK)
N#define USART_FIFOTRIG_RXLVLENA_MASK             (0x2U)
N#define USART_FIFOTRIG_RXLVLENA_SHIFT            (1U)
N#define USART_FIFOTRIG_RXLVLENA(x)               (((uint32_t)(((uint32_t)(x)) << USART_FIFOTRIG_RXLVLENA_SHIFT)) & USART_FIFOTRIG_RXLVLENA_MASK)
N#define USART_FIFOTRIG_TXLVL_MASK                (0xF00U)
N#define USART_FIFOTRIG_TXLVL_SHIFT               (8U)
N#define USART_FIFOTRIG_TXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOTRIG_TXLVL_SHIFT)) & USART_FIFOTRIG_TXLVL_MASK)
N#define USART_FIFOTRIG_RXLVL_MASK                (0xF0000U)
N#define USART_FIFOTRIG_RXLVL_SHIFT               (16U)
N#define USART_FIFOTRIG_RXLVL(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFOTRIG_RXLVL_SHIFT)) & USART_FIFOTRIG_RXLVL_MASK)
N
N/*! @name FIFOINTENSET - FIFO interrupt enable set (enable) and read register. */
N#define USART_FIFOINTENSET_TXERR_MASK            (0x1U)
N#define USART_FIFOINTENSET_TXERR_SHIFT           (0U)
N#define USART_FIFOINTENSET_TXERR(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENSET_TXERR_SHIFT)) & USART_FIFOINTENSET_TXERR_MASK)
N#define USART_FIFOINTENSET_RXERR_MASK            (0x2U)
N#define USART_FIFOINTENSET_RXERR_SHIFT           (1U)
N#define USART_FIFOINTENSET_RXERR(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENSET_RXERR_SHIFT)) & USART_FIFOINTENSET_RXERR_MASK)
N#define USART_FIFOINTENSET_TXLVL_MASK            (0x4U)
N#define USART_FIFOINTENSET_TXLVL_SHIFT           (2U)
N#define USART_FIFOINTENSET_TXLVL(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENSET_TXLVL_SHIFT)) & USART_FIFOINTENSET_TXLVL_MASK)
N#define USART_FIFOINTENSET_RXLVL_MASK            (0x8U)
N#define USART_FIFOINTENSET_RXLVL_SHIFT           (3U)
N#define USART_FIFOINTENSET_RXLVL(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENSET_RXLVL_SHIFT)) & USART_FIFOINTENSET_RXLVL_MASK)
N
N/*! @name FIFOINTENCLR - FIFO interrupt enable clear (disable) and read register. */
N#define USART_FIFOINTENCLR_TXERR_MASK            (0x1U)
N#define USART_FIFOINTENCLR_TXERR_SHIFT           (0U)
N#define USART_FIFOINTENCLR_TXERR(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENCLR_TXERR_SHIFT)) & USART_FIFOINTENCLR_TXERR_MASK)
N#define USART_FIFOINTENCLR_RXERR_MASK            (0x2U)
N#define USART_FIFOINTENCLR_RXERR_SHIFT           (1U)
N#define USART_FIFOINTENCLR_RXERR(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENCLR_RXERR_SHIFT)) & USART_FIFOINTENCLR_RXERR_MASK)
N#define USART_FIFOINTENCLR_TXLVL_MASK            (0x4U)
N#define USART_FIFOINTENCLR_TXLVL_SHIFT           (2U)
N#define USART_FIFOINTENCLR_TXLVL(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENCLR_TXLVL_SHIFT)) & USART_FIFOINTENCLR_TXLVL_MASK)
N#define USART_FIFOINTENCLR_RXLVL_MASK            (0x8U)
N#define USART_FIFOINTENCLR_RXLVL_SHIFT           (3U)
N#define USART_FIFOINTENCLR_RXLVL(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTENCLR_RXLVL_SHIFT)) & USART_FIFOINTENCLR_RXLVL_MASK)
N
N/*! @name FIFOINTSTAT - FIFO interrupt status register. */
N#define USART_FIFOINTSTAT_TXERR_MASK             (0x1U)
N#define USART_FIFOINTSTAT_TXERR_SHIFT            (0U)
N#define USART_FIFOINTSTAT_TXERR(x)               (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTSTAT_TXERR_SHIFT)) & USART_FIFOINTSTAT_TXERR_MASK)
N#define USART_FIFOINTSTAT_RXERR_MASK             (0x2U)
N#define USART_FIFOINTSTAT_RXERR_SHIFT            (1U)
N#define USART_FIFOINTSTAT_RXERR(x)               (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTSTAT_RXERR_SHIFT)) & USART_FIFOINTSTAT_RXERR_MASK)
N#define USART_FIFOINTSTAT_TXLVL_MASK             (0x4U)
N#define USART_FIFOINTSTAT_TXLVL_SHIFT            (2U)
N#define USART_FIFOINTSTAT_TXLVL(x)               (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTSTAT_TXLVL_SHIFT)) & USART_FIFOINTSTAT_TXLVL_MASK)
N#define USART_FIFOINTSTAT_RXLVL_MASK             (0x8U)
N#define USART_FIFOINTSTAT_RXLVL_SHIFT            (3U)
N#define USART_FIFOINTSTAT_RXLVL(x)               (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTSTAT_RXLVL_SHIFT)) & USART_FIFOINTSTAT_RXLVL_MASK)
N#define USART_FIFOINTSTAT_PERINT_MASK            (0x10U)
N#define USART_FIFOINTSTAT_PERINT_SHIFT           (4U)
N#define USART_FIFOINTSTAT_PERINT(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFOINTSTAT_PERINT_SHIFT)) & USART_FIFOINTSTAT_PERINT_MASK)
N
N/*! @name FIFOWR - FIFO write data. */
N#define USART_FIFOWR_TXDATA_MASK                 (0x1FFU)
N#define USART_FIFOWR_TXDATA_SHIFT                (0U)
N#define USART_FIFOWR_TXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << USART_FIFOWR_TXDATA_SHIFT)) & USART_FIFOWR_TXDATA_MASK)
N
N/*! @name FIFORD - FIFO read data. */
N#define USART_FIFORD_RXDATA_MASK                 (0x1FFU)
N#define USART_FIFORD_RXDATA_SHIFT                (0U)
N#define USART_FIFORD_RXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << USART_FIFORD_RXDATA_SHIFT)) & USART_FIFORD_RXDATA_MASK)
N#define USART_FIFORD_FRAMERR_MASK                (0x2000U)
N#define USART_FIFORD_FRAMERR_SHIFT               (13U)
N#define USART_FIFORD_FRAMERR(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFORD_FRAMERR_SHIFT)) & USART_FIFORD_FRAMERR_MASK)
N#define USART_FIFORD_PARITYERR_MASK              (0x4000U)
N#define USART_FIFORD_PARITYERR_SHIFT             (14U)
N#define USART_FIFORD_PARITYERR(x)                (((uint32_t)(((uint32_t)(x)) << USART_FIFORD_PARITYERR_SHIFT)) & USART_FIFORD_PARITYERR_MASK)
N#define USART_FIFORD_RXNOISE_MASK                (0x8000U)
N#define USART_FIFORD_RXNOISE_SHIFT               (15U)
N#define USART_FIFORD_RXNOISE(x)                  (((uint32_t)(((uint32_t)(x)) << USART_FIFORD_RXNOISE_SHIFT)) & USART_FIFORD_RXNOISE_MASK)
N
N/*! @name FIFORDNOPOP - FIFO data read with no FIFO pop. */
N#define USART_FIFORDNOPOP_RXDATA_MASK            (0x1FFU)
N#define USART_FIFORDNOPOP_RXDATA_SHIFT           (0U)
N#define USART_FIFORDNOPOP_RXDATA(x)              (((uint32_t)(((uint32_t)(x)) << USART_FIFORDNOPOP_RXDATA_SHIFT)) & USART_FIFORDNOPOP_RXDATA_MASK)
N#define USART_FIFORDNOPOP_FRAMERR_MASK           (0x2000U)
N#define USART_FIFORDNOPOP_FRAMERR_SHIFT          (13U)
N#define USART_FIFORDNOPOP_FRAMERR(x)             (((uint32_t)(((uint32_t)(x)) << USART_FIFORDNOPOP_FRAMERR_SHIFT)) & USART_FIFORDNOPOP_FRAMERR_MASK)
N#define USART_FIFORDNOPOP_PARITYERR_MASK         (0x4000U)
N#define USART_FIFORDNOPOP_PARITYERR_SHIFT        (14U)
N#define USART_FIFORDNOPOP_PARITYERR(x)           (((uint32_t)(((uint32_t)(x)) << USART_FIFORDNOPOP_PARITYERR_SHIFT)) & USART_FIFORDNOPOP_PARITYERR_MASK)
N#define USART_FIFORDNOPOP_RXNOISE_MASK           (0x8000U)
N#define USART_FIFORDNOPOP_RXNOISE_SHIFT          (15U)
N#define USART_FIFORDNOPOP_RXNOISE(x)             (((uint32_t)(((uint32_t)(x)) << USART_FIFORDNOPOP_RXNOISE_SHIFT)) & USART_FIFORDNOPOP_RXNOISE_MASK)
N
N/*! @name ID - Peripheral identification register. */
N#define USART_ID_APERTURE_MASK                   (0xFFU)
N#define USART_ID_APERTURE_SHIFT                  (0U)
N#define USART_ID_APERTURE(x)                     (((uint32_t)(((uint32_t)(x)) << USART_ID_APERTURE_SHIFT)) & USART_ID_APERTURE_MASK)
N#define USART_ID_MINOR_REV_MASK                  (0xF00U)
N#define USART_ID_MINOR_REV_SHIFT                 (8U)
N#define USART_ID_MINOR_REV(x)                    (((uint32_t)(((uint32_t)(x)) << USART_ID_MINOR_REV_SHIFT)) & USART_ID_MINOR_REV_MASK)
N#define USART_ID_MAJOR_REV_MASK                  (0xF000U)
N#define USART_ID_MAJOR_REV_SHIFT                 (12U)
N#define USART_ID_MAJOR_REV(x)                    (((uint32_t)(((uint32_t)(x)) << USART_ID_MAJOR_REV_SHIFT)) & USART_ID_MAJOR_REV_MASK)
N#define USART_ID_ID_MASK                         (0xFFFF0000U)
N#define USART_ID_ID_SHIFT                        (16U)
N#define USART_ID_ID(x)                           (((uint32_t)(((uint32_t)(x)) << USART_ID_ID_SHIFT)) & USART_ID_ID_MASK)
N
N
N/*!
N * @}
N */ /* end of group USART_Register_Masks */
N
N
N/* USART - Peripheral instance base addresses */
N/** Peripheral USART0 base address */
N#define USART0_BASE                              (0x40086000u)
N/** Peripheral USART0 base pointer */
N#define USART0                                   ((USART_Type *)USART0_BASE)
N/** Peripheral USART1 base address */
N#define USART1_BASE                              (0x40087000u)
N/** Peripheral USART1 base pointer */
N#define USART1                                   ((USART_Type *)USART1_BASE)
N/** Peripheral USART2 base address */
N#define USART2_BASE                              (0x40088000u)
N/** Peripheral USART2 base pointer */
N#define USART2                                   ((USART_Type *)USART2_BASE)
N/** Peripheral USART3 base address */
N#define USART3_BASE                              (0x40089000u)
N/** Peripheral USART3 base pointer */
N#define USART3                                   ((USART_Type *)USART3_BASE)
N/** Peripheral USART4 base address */
N#define USART4_BASE                              (0x4008A000u)
N/** Peripheral USART4 base pointer */
N#define USART4                                   ((USART_Type *)USART4_BASE)
N/** Peripheral USART5 base address */
N#define USART5_BASE                              (0x40096000u)
N/** Peripheral USART5 base pointer */
N#define USART5                                   ((USART_Type *)USART5_BASE)
N/** Peripheral USART6 base address */
N#define USART6_BASE                              (0x40097000u)
N/** Peripheral USART6 base pointer */
N#define USART6                                   ((USART_Type *)USART6_BASE)
N/** Peripheral USART7 base address */
N#define USART7_BASE                              (0x40098000u)
N/** Peripheral USART7 base pointer */
N#define USART7                                   ((USART_Type *)USART7_BASE)
N/** Peripheral USART8 base address */
N#define USART8_BASE                              (0x40099000u)
N/** Peripheral USART8 base pointer */
N#define USART8                                   ((USART_Type *)USART8_BASE)
N/** Peripheral USART9 base address */
N#define USART9_BASE                              (0x4009A000u)
N/** Peripheral USART9 base pointer */
N#define USART9                                   ((USART_Type *)USART9_BASE)
N/** Array initializer of USART peripheral base addresses */
N#define USART_BASE_ADDRS                         { USART0_BASE, USART1_BASE, USART2_BASE, USART3_BASE, USART4_BASE, USART5_BASE, USART6_BASE, USART7_BASE, USART8_BASE, USART9_BASE }
N/** Array initializer of USART peripheral base pointers */
N#define USART_BASE_PTRS                          { USART0, USART1, USART2, USART3, USART4, USART5, USART6, USART7, USART8, USART9 }
N/** Interrupt vectors for the USART peripheral type */
N#define USART_IRQS                               { FLEXCOMM0_IRQn, FLEXCOMM1_IRQn, FLEXCOMM2_IRQn, FLEXCOMM3_IRQn, FLEXCOMM4_IRQn, FLEXCOMM5_IRQn, FLEXCOMM6_IRQn, FLEXCOMM7_IRQn, FLEXCOMM8_IRQn, FLEXCOMM9_IRQn }
N
N/*!
N * @}
N */ /* end of group USART_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- USB Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Peripheral_Access_Layer USB Peripheral Access Layer
N * @{
N */
N
N/** USB - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t DEVCMDSTAT;                        /**< USB Device Command/Status register, offset: 0x0 */
X  volatile uint32_t DEVCMDSTAT;                         
N  __IO uint32_t INFO;                              /**< USB Info register, offset: 0x4 */
X  volatile uint32_t INFO;                               
N  __IO uint32_t EPLISTSTART;                       /**< USB EP Command/Status List start address, offset: 0x8 */
X  volatile uint32_t EPLISTSTART;                        
N  __IO uint32_t DATABUFSTART;                      /**< USB Data buffer start address, offset: 0xC */
X  volatile uint32_t DATABUFSTART;                       
N  __IO uint32_t LPM;                               /**< USB Link Power Management register, offset: 0x10 */
X  volatile uint32_t LPM;                                
N  __IO uint32_t EPSKIP;                            /**< USB Endpoint skip, offset: 0x14 */
X  volatile uint32_t EPSKIP;                             
N  __IO uint32_t EPINUSE;                           /**< USB Endpoint Buffer in use, offset: 0x18 */
X  volatile uint32_t EPINUSE;                            
N  __IO uint32_t EPBUFCFG;                          /**< USB Endpoint Buffer Configuration register, offset: 0x1C */
X  volatile uint32_t EPBUFCFG;                           
N  __IO uint32_t INTSTAT;                           /**< USB interrupt status register, offset: 0x20 */
X  volatile uint32_t INTSTAT;                            
N  __IO uint32_t INTEN;                             /**< USB interrupt enable register, offset: 0x24 */
X  volatile uint32_t INTEN;                              
N  __IO uint32_t INTSETSTAT;                        /**< USB set interrupt status register, offset: 0x28 */
X  volatile uint32_t INTSETSTAT;                         
N       uint8_t RESERVED_0[8];
N  __IO uint32_t EPTOGGLE;                          /**< USB Endpoint toggle register, offset: 0x34 */
X  volatile uint32_t EPTOGGLE;                           
N} USB_Type;
N
N/* ----------------------------------------------------------------------------
N   -- USB Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Register_Masks USB Register Masks
N * @{
N */
N
N/*! @name DEVCMDSTAT - USB Device Command/Status register */
N#define USB_DEVCMDSTAT_DEV_ADDR_MASK             (0x7FU)
N#define USB_DEVCMDSTAT_DEV_ADDR_SHIFT            (0U)
N#define USB_DEVCMDSTAT_DEV_ADDR(x)               (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_DEV_ADDR_SHIFT)) & USB_DEVCMDSTAT_DEV_ADDR_MASK)
N#define USB_DEVCMDSTAT_DEV_EN_MASK               (0x80U)
N#define USB_DEVCMDSTAT_DEV_EN_SHIFT              (7U)
N#define USB_DEVCMDSTAT_DEV_EN(x)                 (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_DEV_EN_SHIFT)) & USB_DEVCMDSTAT_DEV_EN_MASK)
N#define USB_DEVCMDSTAT_SETUP_MASK                (0x100U)
N#define USB_DEVCMDSTAT_SETUP_SHIFT               (8U)
N#define USB_DEVCMDSTAT_SETUP(x)                  (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_SETUP_SHIFT)) & USB_DEVCMDSTAT_SETUP_MASK)
N#define USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK        (0x200U)
N#define USB_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT       (9U)
N#define USB_DEVCMDSTAT_FORCE_NEEDCLK(x)          (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT)) & USB_DEVCMDSTAT_FORCE_NEEDCLK_MASK)
N#define USB_DEVCMDSTAT_LPM_SUP_MASK              (0x800U)
N#define USB_DEVCMDSTAT_LPM_SUP_SHIFT             (11U)
N#define USB_DEVCMDSTAT_LPM_SUP(x)                (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_LPM_SUP_SHIFT)) & USB_DEVCMDSTAT_LPM_SUP_MASK)
N#define USB_DEVCMDSTAT_INTONNAK_AO_MASK          (0x1000U)
N#define USB_DEVCMDSTAT_INTONNAK_AO_SHIFT         (12U)
N#define USB_DEVCMDSTAT_INTONNAK_AO(x)            (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_INTONNAK_AO_SHIFT)) & USB_DEVCMDSTAT_INTONNAK_AO_MASK)
N#define USB_DEVCMDSTAT_INTONNAK_AI_MASK          (0x2000U)
N#define USB_DEVCMDSTAT_INTONNAK_AI_SHIFT         (13U)
N#define USB_DEVCMDSTAT_INTONNAK_AI(x)            (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_INTONNAK_AI_SHIFT)) & USB_DEVCMDSTAT_INTONNAK_AI_MASK)
N#define USB_DEVCMDSTAT_INTONNAK_CO_MASK          (0x4000U)
N#define USB_DEVCMDSTAT_INTONNAK_CO_SHIFT         (14U)
N#define USB_DEVCMDSTAT_INTONNAK_CO(x)            (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_INTONNAK_CO_SHIFT)) & USB_DEVCMDSTAT_INTONNAK_CO_MASK)
N#define USB_DEVCMDSTAT_INTONNAK_CI_MASK          (0x8000U)
N#define USB_DEVCMDSTAT_INTONNAK_CI_SHIFT         (15U)
N#define USB_DEVCMDSTAT_INTONNAK_CI(x)            (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_INTONNAK_CI_SHIFT)) & USB_DEVCMDSTAT_INTONNAK_CI_MASK)
N#define USB_DEVCMDSTAT_DCON_MASK                 (0x10000U)
N#define USB_DEVCMDSTAT_DCON_SHIFT                (16U)
N#define USB_DEVCMDSTAT_DCON(x)                   (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_DCON_SHIFT)) & USB_DEVCMDSTAT_DCON_MASK)
N#define USB_DEVCMDSTAT_DSUS_MASK                 (0x20000U)
N#define USB_DEVCMDSTAT_DSUS_SHIFT                (17U)
N#define USB_DEVCMDSTAT_DSUS(x)                   (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_DSUS_SHIFT)) & USB_DEVCMDSTAT_DSUS_MASK)
N#define USB_DEVCMDSTAT_LPM_SUS_MASK              (0x80000U)
N#define USB_DEVCMDSTAT_LPM_SUS_SHIFT             (19U)
N#define USB_DEVCMDSTAT_LPM_SUS(x)                (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_LPM_SUS_SHIFT)) & USB_DEVCMDSTAT_LPM_SUS_MASK)
N#define USB_DEVCMDSTAT_LPM_REWP_MASK             (0x100000U)
N#define USB_DEVCMDSTAT_LPM_REWP_SHIFT            (20U)
N#define USB_DEVCMDSTAT_LPM_REWP(x)               (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_LPM_REWP_SHIFT)) & USB_DEVCMDSTAT_LPM_REWP_MASK)
N#define USB_DEVCMDSTAT_DCON_C_MASK               (0x1000000U)
N#define USB_DEVCMDSTAT_DCON_C_SHIFT              (24U)
N#define USB_DEVCMDSTAT_DCON_C(x)                 (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_DCON_C_SHIFT)) & USB_DEVCMDSTAT_DCON_C_MASK)
N#define USB_DEVCMDSTAT_DSUS_C_MASK               (0x2000000U)
N#define USB_DEVCMDSTAT_DSUS_C_SHIFT              (25U)
N#define USB_DEVCMDSTAT_DSUS_C(x)                 (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_DSUS_C_SHIFT)) & USB_DEVCMDSTAT_DSUS_C_MASK)
N#define USB_DEVCMDSTAT_DRES_C_MASK               (0x4000000U)
N#define USB_DEVCMDSTAT_DRES_C_SHIFT              (26U)
N#define USB_DEVCMDSTAT_DRES_C(x)                 (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_DRES_C_SHIFT)) & USB_DEVCMDSTAT_DRES_C_MASK)
N#define USB_DEVCMDSTAT_VBUSDEBOUNCED_MASK        (0x10000000U)
N#define USB_DEVCMDSTAT_VBUSDEBOUNCED_SHIFT       (28U)
N#define USB_DEVCMDSTAT_VBUSDEBOUNCED(x)          (((uint32_t)(((uint32_t)(x)) << USB_DEVCMDSTAT_VBUSDEBOUNCED_SHIFT)) & USB_DEVCMDSTAT_VBUSDEBOUNCED_MASK)
N
N/*! @name INFO - USB Info register */
N#define USB_INFO_FRAME_NR_MASK                   (0x7FFU)
N#define USB_INFO_FRAME_NR_SHIFT                  (0U)
N#define USB_INFO_FRAME_NR(x)                     (((uint32_t)(((uint32_t)(x)) << USB_INFO_FRAME_NR_SHIFT)) & USB_INFO_FRAME_NR_MASK)
N#define USB_INFO_ERR_CODE_MASK                   (0x7800U)
N#define USB_INFO_ERR_CODE_SHIFT                  (11U)
N#define USB_INFO_ERR_CODE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_INFO_ERR_CODE_SHIFT)) & USB_INFO_ERR_CODE_MASK)
N#define USB_INFO_MINREV_MASK                     (0xFF0000U)
N#define USB_INFO_MINREV_SHIFT                    (16U)
N#define USB_INFO_MINREV(x)                       (((uint32_t)(((uint32_t)(x)) << USB_INFO_MINREV_SHIFT)) & USB_INFO_MINREV_MASK)
N#define USB_INFO_MAJREV_MASK                     (0xFF000000U)
N#define USB_INFO_MAJREV_SHIFT                    (24U)
N#define USB_INFO_MAJREV(x)                       (((uint32_t)(((uint32_t)(x)) << USB_INFO_MAJREV_SHIFT)) & USB_INFO_MAJREV_MASK)
N
N/*! @name EPLISTSTART - USB EP Command/Status List start address */
N#define USB_EPLISTSTART_EP_LIST_MASK             (0xFFFFFF00U)
N#define USB_EPLISTSTART_EP_LIST_SHIFT            (8U)
N#define USB_EPLISTSTART_EP_LIST(x)               (((uint32_t)(((uint32_t)(x)) << USB_EPLISTSTART_EP_LIST_SHIFT)) & USB_EPLISTSTART_EP_LIST_MASK)
N
N/*! @name DATABUFSTART - USB Data buffer start address */
N#define USB_DATABUFSTART_DA_BUF_MASK             (0xFFC00000U)
N#define USB_DATABUFSTART_DA_BUF_SHIFT            (22U)
N#define USB_DATABUFSTART_DA_BUF(x)               (((uint32_t)(((uint32_t)(x)) << USB_DATABUFSTART_DA_BUF_SHIFT)) & USB_DATABUFSTART_DA_BUF_MASK)
N
N/*! @name LPM - USB Link Power Management register */
N#define USB_LPM_HIRD_HW_MASK                     (0xFU)
N#define USB_LPM_HIRD_HW_SHIFT                    (0U)
N#define USB_LPM_HIRD_HW(x)                       (((uint32_t)(((uint32_t)(x)) << USB_LPM_HIRD_HW_SHIFT)) & USB_LPM_HIRD_HW_MASK)
N#define USB_LPM_HIRD_SW_MASK                     (0xF0U)
N#define USB_LPM_HIRD_SW_SHIFT                    (4U)
N#define USB_LPM_HIRD_SW(x)                       (((uint32_t)(((uint32_t)(x)) << USB_LPM_HIRD_SW_SHIFT)) & USB_LPM_HIRD_SW_MASK)
N#define USB_LPM_DATA_PENDING_MASK                (0x100U)
N#define USB_LPM_DATA_PENDING_SHIFT               (8U)
N#define USB_LPM_DATA_PENDING(x)                  (((uint32_t)(((uint32_t)(x)) << USB_LPM_DATA_PENDING_SHIFT)) & USB_LPM_DATA_PENDING_MASK)
N
N/*! @name EPSKIP - USB Endpoint skip */
N#define USB_EPSKIP_SKIP_MASK                     (0x3FFU)
N#define USB_EPSKIP_SKIP_SHIFT                    (0U)
N#define USB_EPSKIP_SKIP(x)                       (((uint32_t)(((uint32_t)(x)) << USB_EPSKIP_SKIP_SHIFT)) & USB_EPSKIP_SKIP_MASK)
N
N/*! @name EPINUSE - USB Endpoint Buffer in use */
N#define USB_EPINUSE_BUF_MASK                     (0x3FCU)
N#define USB_EPINUSE_BUF_SHIFT                    (2U)
N#define USB_EPINUSE_BUF(x)                       (((uint32_t)(((uint32_t)(x)) << USB_EPINUSE_BUF_SHIFT)) & USB_EPINUSE_BUF_MASK)
N
N/*! @name EPBUFCFG - USB Endpoint Buffer Configuration register */
N#define USB_EPBUFCFG_BUF_SB_MASK                 (0x3FCU)
N#define USB_EPBUFCFG_BUF_SB_SHIFT                (2U)
N#define USB_EPBUFCFG_BUF_SB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_EPBUFCFG_BUF_SB_SHIFT)) & USB_EPBUFCFG_BUF_SB_MASK)
N
N/*! @name INTSTAT - USB interrupt status register */
N#define USB_INTSTAT_EP0OUT_MASK                  (0x1U)
N#define USB_INTSTAT_EP0OUT_SHIFT                 (0U)
N#define USB_INTSTAT_EP0OUT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP0OUT_SHIFT)) & USB_INTSTAT_EP0OUT_MASK)
N#define USB_INTSTAT_EP0IN_MASK                   (0x2U)
N#define USB_INTSTAT_EP0IN_SHIFT                  (1U)
N#define USB_INTSTAT_EP0IN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP0IN_SHIFT)) & USB_INTSTAT_EP0IN_MASK)
N#define USB_INTSTAT_EP1OUT_MASK                  (0x4U)
N#define USB_INTSTAT_EP1OUT_SHIFT                 (2U)
N#define USB_INTSTAT_EP1OUT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP1OUT_SHIFT)) & USB_INTSTAT_EP1OUT_MASK)
N#define USB_INTSTAT_EP1IN_MASK                   (0x8U)
N#define USB_INTSTAT_EP1IN_SHIFT                  (3U)
N#define USB_INTSTAT_EP1IN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP1IN_SHIFT)) & USB_INTSTAT_EP1IN_MASK)
N#define USB_INTSTAT_EP2OUT_MASK                  (0x10U)
N#define USB_INTSTAT_EP2OUT_SHIFT                 (4U)
N#define USB_INTSTAT_EP2OUT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP2OUT_SHIFT)) & USB_INTSTAT_EP2OUT_MASK)
N#define USB_INTSTAT_EP2IN_MASK                   (0x20U)
N#define USB_INTSTAT_EP2IN_SHIFT                  (5U)
N#define USB_INTSTAT_EP2IN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP2IN_SHIFT)) & USB_INTSTAT_EP2IN_MASK)
N#define USB_INTSTAT_EP3OUT_MASK                  (0x40U)
N#define USB_INTSTAT_EP3OUT_SHIFT                 (6U)
N#define USB_INTSTAT_EP3OUT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP3OUT_SHIFT)) & USB_INTSTAT_EP3OUT_MASK)
N#define USB_INTSTAT_EP3IN_MASK                   (0x80U)
N#define USB_INTSTAT_EP3IN_SHIFT                  (7U)
N#define USB_INTSTAT_EP3IN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP3IN_SHIFT)) & USB_INTSTAT_EP3IN_MASK)
N#define USB_INTSTAT_EP4OUT_MASK                  (0x100U)
N#define USB_INTSTAT_EP4OUT_SHIFT                 (8U)
N#define USB_INTSTAT_EP4OUT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP4OUT_SHIFT)) & USB_INTSTAT_EP4OUT_MASK)
N#define USB_INTSTAT_EP4IN_MASK                   (0x200U)
N#define USB_INTSTAT_EP4IN_SHIFT                  (9U)
N#define USB_INTSTAT_EP4IN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_EP4IN_SHIFT)) & USB_INTSTAT_EP4IN_MASK)
N#define USB_INTSTAT_FRAME_INT_MASK               (0x40000000U)
N#define USB_INTSTAT_FRAME_INT_SHIFT              (30U)
N#define USB_INTSTAT_FRAME_INT(x)                 (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_FRAME_INT_SHIFT)) & USB_INTSTAT_FRAME_INT_MASK)
N#define USB_INTSTAT_DEV_INT_MASK                 (0x80000000U)
N#define USB_INTSTAT_DEV_INT_SHIFT                (31U)
N#define USB_INTSTAT_DEV_INT(x)                   (((uint32_t)(((uint32_t)(x)) << USB_INTSTAT_DEV_INT_SHIFT)) & USB_INTSTAT_DEV_INT_MASK)
N
N/*! @name INTEN - USB interrupt enable register */
N#define USB_INTEN_EP_INT_EN_MASK                 (0x3FFU)
N#define USB_INTEN_EP_INT_EN_SHIFT                (0U)
N#define USB_INTEN_EP_INT_EN(x)                   (((uint32_t)(((uint32_t)(x)) << USB_INTEN_EP_INT_EN_SHIFT)) & USB_INTEN_EP_INT_EN_MASK)
N#define USB_INTEN_FRAME_INT_EN_MASK              (0x40000000U)
N#define USB_INTEN_FRAME_INT_EN_SHIFT             (30U)
N#define USB_INTEN_FRAME_INT_EN(x)                (((uint32_t)(((uint32_t)(x)) << USB_INTEN_FRAME_INT_EN_SHIFT)) & USB_INTEN_FRAME_INT_EN_MASK)
N#define USB_INTEN_DEV_INT_EN_MASK                (0x80000000U)
N#define USB_INTEN_DEV_INT_EN_SHIFT               (31U)
N#define USB_INTEN_DEV_INT_EN(x)                  (((uint32_t)(((uint32_t)(x)) << USB_INTEN_DEV_INT_EN_SHIFT)) & USB_INTEN_DEV_INT_EN_MASK)
N
N/*! @name INTSETSTAT - USB set interrupt status register */
N#define USB_INTSETSTAT_EP_SET_INT_MASK           (0x3FFU)
N#define USB_INTSETSTAT_EP_SET_INT_SHIFT          (0U)
N#define USB_INTSETSTAT_EP_SET_INT(x)             (((uint32_t)(((uint32_t)(x)) << USB_INTSETSTAT_EP_SET_INT_SHIFT)) & USB_INTSETSTAT_EP_SET_INT_MASK)
N#define USB_INTSETSTAT_FRAME_SET_INT_MASK        (0x40000000U)
N#define USB_INTSETSTAT_FRAME_SET_INT_SHIFT       (30U)
N#define USB_INTSETSTAT_FRAME_SET_INT(x)          (((uint32_t)(((uint32_t)(x)) << USB_INTSETSTAT_FRAME_SET_INT_SHIFT)) & USB_INTSETSTAT_FRAME_SET_INT_MASK)
N#define USB_INTSETSTAT_DEV_SET_INT_MASK          (0x80000000U)
N#define USB_INTSETSTAT_DEV_SET_INT_SHIFT         (31U)
N#define USB_INTSETSTAT_DEV_SET_INT(x)            (((uint32_t)(((uint32_t)(x)) << USB_INTSETSTAT_DEV_SET_INT_SHIFT)) & USB_INTSETSTAT_DEV_SET_INT_MASK)
N
N/*! @name EPTOGGLE - USB Endpoint toggle register */
N#define USB_EPTOGGLE_TOGGLE_MASK                 (0x3FFU)
N#define USB_EPTOGGLE_TOGGLE_SHIFT                (0U)
N#define USB_EPTOGGLE_TOGGLE(x)                   (((uint32_t)(((uint32_t)(x)) << USB_EPTOGGLE_TOGGLE_SHIFT)) & USB_EPTOGGLE_TOGGLE_MASK)
N
N
N/*!
N * @}
N */ /* end of group USB_Register_Masks */
N
N
N/* USB - Peripheral instance base addresses */
N/** Peripheral USB0 base address */
N#define USB0_BASE                                (0x40084000u)
N/** Peripheral USB0 base pointer */
N#define USB0                                     ((USB_Type *)USB0_BASE)
N/** Array initializer of USB peripheral base addresses */
N#define USB_BASE_ADDRS                           { USB0_BASE }
N/** Array initializer of USB peripheral base pointers */
N#define USB_BASE_PTRS                            { USB0 }
N/** Interrupt vectors for the USB peripheral type */
N#define USB_IRQS                                 { USB0_IRQn }
N#define USB_NEEDCLK_IRQS                         { USB0_NEEDCLK_IRQn }
N
N/*!
N * @}
N */ /* end of group USB_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- USBFSH Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USBFSH_Peripheral_Access_Layer USBFSH Peripheral Access Layer
N * @{
N */
N
N/** USBFSH - Register Layout Typedef */
Ntypedef struct {
N  __I  uint32_t HCREVISION;                        /**< BCD representation of the version of the HCI specification that is implemented by the Host Controller (HC), offset: 0x0 */
X  volatile const  uint32_t HCREVISION;                         
N  __IO uint32_t HCCONTROL;                         /**< Defines the operating modes of the HC, offset: 0x4 */
X  volatile uint32_t HCCONTROL;                          
N  __IO uint32_t HCCOMMANDSTATUS;                   /**< This register is used to receive the commands from the Host Controller Driver (HCD), offset: 0x8 */
X  volatile uint32_t HCCOMMANDSTATUS;                    
N  __IO uint32_t HCINTERRUPTSTATUS;                 /**< Indicates the status on various events that cause hardware interrupts by setting the appropriate bits, offset: 0xC */
X  volatile uint32_t HCINTERRUPTSTATUS;                  
N  __IO uint32_t HCINTERRUPTENABLE;                 /**< Controls the bits in the HcInterruptStatus register and indicates which events will generate a hardware interrupt, offset: 0x10 */
X  volatile uint32_t HCINTERRUPTENABLE;                  
N  __IO uint32_t HCINTERRUPTDISABLE;                /**< The bits in this register are used to disable corresponding bits in the HCInterruptStatus register and in turn disable that event leading to hardware interrupt, offset: 0x14 */
X  volatile uint32_t HCINTERRUPTDISABLE;                 
N  __IO uint32_t HCHCCA;                            /**< Contains the physical address of the host controller communication area, offset: 0x18 */
X  volatile uint32_t HCHCCA;                             
N  __IO uint32_t HCPERIODCURRENTED;                 /**< Contains the physical address of the current isochronous or interrupt endpoint descriptor, offset: 0x1C */
X  volatile uint32_t HCPERIODCURRENTED;                  
N  __IO uint32_t HCCONTROLHEADED;                   /**< Contains the physical address of the first endpoint descriptor of the control list, offset: 0x20 */
X  volatile uint32_t HCCONTROLHEADED;                    
N  __IO uint32_t HCCONTROLCURRENTED;                /**< Contains the physical address of the current endpoint descriptor of the control list, offset: 0x24 */
X  volatile uint32_t HCCONTROLCURRENTED;                 
N  __IO uint32_t HCBULKHEADED;                      /**< Contains the physical address of the first endpoint descriptor of the bulk list, offset: 0x28 */
X  volatile uint32_t HCBULKHEADED;                       
N  __IO uint32_t HCBULKCURRENTED;                   /**< Contains the physical address of the current endpoint descriptor of the bulk list, offset: 0x2C */
X  volatile uint32_t HCBULKCURRENTED;                    
N  __IO uint32_t HCDONEHEAD;                        /**< Contains the physical address of the last transfer descriptor added to the 'Done' queue, offset: 0x30 */
X  volatile uint32_t HCDONEHEAD;                         
N  __IO uint32_t HCFMINTERVAL;                      /**< Defines the bit time interval in a frame and the full speed maximum packet size which would not cause an overrun, offset: 0x34 */
X  volatile uint32_t HCFMINTERVAL;                       
N  __IO uint32_t HCFMREMAINING;                     /**< A 14-bit counter showing the bit time remaining in the current frame, offset: 0x38 */
X  volatile uint32_t HCFMREMAINING;                      
N  __IO uint32_t HCFMNUMBER;                        /**< Contains a 16-bit counter and provides the timing reference among events happening in the HC and the HCD, offset: 0x3C */
X  volatile uint32_t HCFMNUMBER;                         
N  __IO uint32_t HCPERIODICSTART;                   /**< Contains a programmable 14-bit value which determines the earliest time HC should start processing a periodic list, offset: 0x40 */
X  volatile uint32_t HCPERIODICSTART;                    
N  __IO uint32_t HCLSTHRESHOLD;                     /**< Contains 11-bit value which is used by the HC to determine whether to commit to transfer a maximum of 8-byte LS packet before EOF, offset: 0x44 */
X  volatile uint32_t HCLSTHRESHOLD;                      
N  __IO uint32_t HCRHDESCRIPTORA;                   /**< First of the two registers which describes the characteristics of the root hub, offset: 0x48 */
X  volatile uint32_t HCRHDESCRIPTORA;                    
N  __IO uint32_t HCRHDESCRIPTORB;                   /**< Second of the two registers which describes the characteristics of the Root Hub, offset: 0x4C */
X  volatile uint32_t HCRHDESCRIPTORB;                    
N  __IO uint32_t HCRHSTATUS;                        /**< This register is divided into two parts, offset: 0x50 */
X  volatile uint32_t HCRHSTATUS;                         
N  __IO uint32_t HCRHPORTSTATUS;                    /**< Controls and reports the port events on a per-port basis, offset: 0x54 */
X  volatile uint32_t HCRHPORTSTATUS;                     
N       uint8_t RESERVED_0[4];
N  __IO uint32_t PORTMODE;                          /**< Controls the port if it is attached to the host block or the device block, offset: 0x5C */
X  volatile uint32_t PORTMODE;                           
N} USBFSH_Type;
N
N/* ----------------------------------------------------------------------------
N   -- USBFSH Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USBFSH_Register_Masks USBFSH Register Masks
N * @{
N */
N
N/*! @name HCREVISION - BCD representation of the version of the HCI specification that is implemented by the Host Controller (HC) */
N#define USBFSH_HCREVISION_REV_MASK               (0xFFU)
N#define USBFSH_HCREVISION_REV_SHIFT              (0U)
N#define USBFSH_HCREVISION_REV(x)                 (((uint32_t)(((uint32_t)(x)) << USBFSH_HCREVISION_REV_SHIFT)) & USBFSH_HCREVISION_REV_MASK)
N
N/*! @name HCCONTROL - Defines the operating modes of the HC */
N#define USBFSH_HCCONTROL_CBSR_MASK               (0x3U)
N#define USBFSH_HCCONTROL_CBSR_SHIFT              (0U)
N#define USBFSH_HCCONTROL_CBSR(x)                 (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_CBSR_SHIFT)) & USBFSH_HCCONTROL_CBSR_MASK)
N#define USBFSH_HCCONTROL_PLE_MASK                (0x4U)
N#define USBFSH_HCCONTROL_PLE_SHIFT               (2U)
N#define USBFSH_HCCONTROL_PLE(x)                  (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_PLE_SHIFT)) & USBFSH_HCCONTROL_PLE_MASK)
N#define USBFSH_HCCONTROL_IE_MASK                 (0x8U)
N#define USBFSH_HCCONTROL_IE_SHIFT                (3U)
N#define USBFSH_HCCONTROL_IE(x)                   (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_IE_SHIFT)) & USBFSH_HCCONTROL_IE_MASK)
N#define USBFSH_HCCONTROL_CLE_MASK                (0x10U)
N#define USBFSH_HCCONTROL_CLE_SHIFT               (4U)
N#define USBFSH_HCCONTROL_CLE(x)                  (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_CLE_SHIFT)) & USBFSH_HCCONTROL_CLE_MASK)
N#define USBFSH_HCCONTROL_BLE_MASK                (0x20U)
N#define USBFSH_HCCONTROL_BLE_SHIFT               (5U)
N#define USBFSH_HCCONTROL_BLE(x)                  (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_BLE_SHIFT)) & USBFSH_HCCONTROL_BLE_MASK)
N#define USBFSH_HCCONTROL_HCFS_MASK               (0xC0U)
N#define USBFSH_HCCONTROL_HCFS_SHIFT              (6U)
N#define USBFSH_HCCONTROL_HCFS(x)                 (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_HCFS_SHIFT)) & USBFSH_HCCONTROL_HCFS_MASK)
N#define USBFSH_HCCONTROL_IR_MASK                 (0x100U)
N#define USBFSH_HCCONTROL_IR_SHIFT                (8U)
N#define USBFSH_HCCONTROL_IR(x)                   (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_IR_SHIFT)) & USBFSH_HCCONTROL_IR_MASK)
N#define USBFSH_HCCONTROL_RWC_MASK                (0x200U)
N#define USBFSH_HCCONTROL_RWC_SHIFT               (9U)
N#define USBFSH_HCCONTROL_RWC(x)                  (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_RWC_SHIFT)) & USBFSH_HCCONTROL_RWC_MASK)
N#define USBFSH_HCCONTROL_RWE_MASK                (0x400U)
N#define USBFSH_HCCONTROL_RWE_SHIFT               (10U)
N#define USBFSH_HCCONTROL_RWE(x)                  (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROL_RWE_SHIFT)) & USBFSH_HCCONTROL_RWE_MASK)
N
N/*! @name HCCOMMANDSTATUS - This register is used to receive the commands from the Host Controller Driver (HCD) */
N#define USBFSH_HCCOMMANDSTATUS_HCR_MASK          (0x1U)
N#define USBFSH_HCCOMMANDSTATUS_HCR_SHIFT         (0U)
N#define USBFSH_HCCOMMANDSTATUS_HCR(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCOMMANDSTATUS_HCR_SHIFT)) & USBFSH_HCCOMMANDSTATUS_HCR_MASK)
N#define USBFSH_HCCOMMANDSTATUS_CLF_MASK          (0x2U)
N#define USBFSH_HCCOMMANDSTATUS_CLF_SHIFT         (1U)
N#define USBFSH_HCCOMMANDSTATUS_CLF(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCOMMANDSTATUS_CLF_SHIFT)) & USBFSH_HCCOMMANDSTATUS_CLF_MASK)
N#define USBFSH_HCCOMMANDSTATUS_BLF_MASK          (0x4U)
N#define USBFSH_HCCOMMANDSTATUS_BLF_SHIFT         (2U)
N#define USBFSH_HCCOMMANDSTATUS_BLF(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCOMMANDSTATUS_BLF_SHIFT)) & USBFSH_HCCOMMANDSTATUS_BLF_MASK)
N#define USBFSH_HCCOMMANDSTATUS_OCR_MASK          (0x8U)
N#define USBFSH_HCCOMMANDSTATUS_OCR_SHIFT         (3U)
N#define USBFSH_HCCOMMANDSTATUS_OCR(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCOMMANDSTATUS_OCR_SHIFT)) & USBFSH_HCCOMMANDSTATUS_OCR_MASK)
N#define USBFSH_HCCOMMANDSTATUS_SOC_MASK          (0xC0U)
N#define USBFSH_HCCOMMANDSTATUS_SOC_SHIFT         (6U)
N#define USBFSH_HCCOMMANDSTATUS_SOC(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCOMMANDSTATUS_SOC_SHIFT)) & USBFSH_HCCOMMANDSTATUS_SOC_MASK)
N
N/*! @name HCINTERRUPTSTATUS - Indicates the status on various events that cause hardware interrupts by setting the appropriate bits */
N#define USBFSH_HCINTERRUPTSTATUS_SO_MASK         (0x1U)
N#define USBFSH_HCINTERRUPTSTATUS_SO_SHIFT        (0U)
N#define USBFSH_HCINTERRUPTSTATUS_SO(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_SO_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_SO_MASK)
N#define USBFSH_HCINTERRUPTSTATUS_WDH_MASK        (0x2U)
N#define USBFSH_HCINTERRUPTSTATUS_WDH_SHIFT       (1U)
N#define USBFSH_HCINTERRUPTSTATUS_WDH(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_WDH_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_WDH_MASK)
N#define USBFSH_HCINTERRUPTSTATUS_SF_MASK         (0x4U)
N#define USBFSH_HCINTERRUPTSTATUS_SF_SHIFT        (2U)
N#define USBFSH_HCINTERRUPTSTATUS_SF(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_SF_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_SF_MASK)
N#define USBFSH_HCINTERRUPTSTATUS_RD_MASK         (0x8U)
N#define USBFSH_HCINTERRUPTSTATUS_RD_SHIFT        (3U)
N#define USBFSH_HCINTERRUPTSTATUS_RD(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_RD_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_RD_MASK)
N#define USBFSH_HCINTERRUPTSTATUS_UE_MASK         (0x10U)
N#define USBFSH_HCINTERRUPTSTATUS_UE_SHIFT        (4U)
N#define USBFSH_HCINTERRUPTSTATUS_UE(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_UE_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_UE_MASK)
N#define USBFSH_HCINTERRUPTSTATUS_FNO_MASK        (0x20U)
N#define USBFSH_HCINTERRUPTSTATUS_FNO_SHIFT       (5U)
N#define USBFSH_HCINTERRUPTSTATUS_FNO(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_FNO_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_FNO_MASK)
N#define USBFSH_HCINTERRUPTSTATUS_RHSC_MASK       (0x40U)
N#define USBFSH_HCINTERRUPTSTATUS_RHSC_SHIFT      (6U)
N#define USBFSH_HCINTERRUPTSTATUS_RHSC(x)         (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_RHSC_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_RHSC_MASK)
N#define USBFSH_HCINTERRUPTSTATUS_OC_MASK         (0xFFFFFC00U)
N#define USBFSH_HCINTERRUPTSTATUS_OC_SHIFT        (10U)
N#define USBFSH_HCINTERRUPTSTATUS_OC(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTSTATUS_OC_SHIFT)) & USBFSH_HCINTERRUPTSTATUS_OC_MASK)
N
N/*! @name HCINTERRUPTENABLE - Controls the bits in the HcInterruptStatus register and indicates which events will generate a hardware interrupt */
N#define USBFSH_HCINTERRUPTENABLE_SO_MASK         (0x1U)
N#define USBFSH_HCINTERRUPTENABLE_SO_SHIFT        (0U)
N#define USBFSH_HCINTERRUPTENABLE_SO(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_SO_SHIFT)) & USBFSH_HCINTERRUPTENABLE_SO_MASK)
N#define USBFSH_HCINTERRUPTENABLE_WDH_MASK        (0x2U)
N#define USBFSH_HCINTERRUPTENABLE_WDH_SHIFT       (1U)
N#define USBFSH_HCINTERRUPTENABLE_WDH(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_WDH_SHIFT)) & USBFSH_HCINTERRUPTENABLE_WDH_MASK)
N#define USBFSH_HCINTERRUPTENABLE_SF_MASK         (0x4U)
N#define USBFSH_HCINTERRUPTENABLE_SF_SHIFT        (2U)
N#define USBFSH_HCINTERRUPTENABLE_SF(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_SF_SHIFT)) & USBFSH_HCINTERRUPTENABLE_SF_MASK)
N#define USBFSH_HCINTERRUPTENABLE_RD_MASK         (0x8U)
N#define USBFSH_HCINTERRUPTENABLE_RD_SHIFT        (3U)
N#define USBFSH_HCINTERRUPTENABLE_RD(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_RD_SHIFT)) & USBFSH_HCINTERRUPTENABLE_RD_MASK)
N#define USBFSH_HCINTERRUPTENABLE_UE_MASK         (0x10U)
N#define USBFSH_HCINTERRUPTENABLE_UE_SHIFT        (4U)
N#define USBFSH_HCINTERRUPTENABLE_UE(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_UE_SHIFT)) & USBFSH_HCINTERRUPTENABLE_UE_MASK)
N#define USBFSH_HCINTERRUPTENABLE_FNO_MASK        (0x20U)
N#define USBFSH_HCINTERRUPTENABLE_FNO_SHIFT       (5U)
N#define USBFSH_HCINTERRUPTENABLE_FNO(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_FNO_SHIFT)) & USBFSH_HCINTERRUPTENABLE_FNO_MASK)
N#define USBFSH_HCINTERRUPTENABLE_RHSC_MASK       (0x40U)
N#define USBFSH_HCINTERRUPTENABLE_RHSC_SHIFT      (6U)
N#define USBFSH_HCINTERRUPTENABLE_RHSC(x)         (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_RHSC_SHIFT)) & USBFSH_HCINTERRUPTENABLE_RHSC_MASK)
N#define USBFSH_HCINTERRUPTENABLE_OC_MASK         (0x40000000U)
N#define USBFSH_HCINTERRUPTENABLE_OC_SHIFT        (30U)
N#define USBFSH_HCINTERRUPTENABLE_OC(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_OC_SHIFT)) & USBFSH_HCINTERRUPTENABLE_OC_MASK)
N#define USBFSH_HCINTERRUPTENABLE_MIE_MASK        (0x80000000U)
N#define USBFSH_HCINTERRUPTENABLE_MIE_SHIFT       (31U)
N#define USBFSH_HCINTERRUPTENABLE_MIE(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTENABLE_MIE_SHIFT)) & USBFSH_HCINTERRUPTENABLE_MIE_MASK)
N
N/*! @name HCINTERRUPTDISABLE - The bits in this register are used to disable corresponding bits in the HCInterruptStatus register and in turn disable that event leading to hardware interrupt */
N#define USBFSH_HCINTERRUPTDISABLE_SO_MASK        (0x1U)
N#define USBFSH_HCINTERRUPTDISABLE_SO_SHIFT       (0U)
N#define USBFSH_HCINTERRUPTDISABLE_SO(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_SO_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_SO_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_WDH_MASK       (0x2U)
N#define USBFSH_HCINTERRUPTDISABLE_WDH_SHIFT      (1U)
N#define USBFSH_HCINTERRUPTDISABLE_WDH(x)         (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_WDH_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_WDH_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_SF_MASK        (0x4U)
N#define USBFSH_HCINTERRUPTDISABLE_SF_SHIFT       (2U)
N#define USBFSH_HCINTERRUPTDISABLE_SF(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_SF_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_SF_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_RD_MASK        (0x8U)
N#define USBFSH_HCINTERRUPTDISABLE_RD_SHIFT       (3U)
N#define USBFSH_HCINTERRUPTDISABLE_RD(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_RD_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_RD_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_UE_MASK        (0x10U)
N#define USBFSH_HCINTERRUPTDISABLE_UE_SHIFT       (4U)
N#define USBFSH_HCINTERRUPTDISABLE_UE(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_UE_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_UE_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_FNO_MASK       (0x20U)
N#define USBFSH_HCINTERRUPTDISABLE_FNO_SHIFT      (5U)
N#define USBFSH_HCINTERRUPTDISABLE_FNO(x)         (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_FNO_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_FNO_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_RHSC_MASK      (0x40U)
N#define USBFSH_HCINTERRUPTDISABLE_RHSC_SHIFT     (6U)
N#define USBFSH_HCINTERRUPTDISABLE_RHSC(x)        (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_RHSC_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_RHSC_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_OC_MASK        (0x40000000U)
N#define USBFSH_HCINTERRUPTDISABLE_OC_SHIFT       (30U)
N#define USBFSH_HCINTERRUPTDISABLE_OC(x)          (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_OC_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_OC_MASK)
N#define USBFSH_HCINTERRUPTDISABLE_MIE_MASK       (0x80000000U)
N#define USBFSH_HCINTERRUPTDISABLE_MIE_SHIFT      (31U)
N#define USBFSH_HCINTERRUPTDISABLE_MIE(x)         (((uint32_t)(((uint32_t)(x)) << USBFSH_HCINTERRUPTDISABLE_MIE_SHIFT)) & USBFSH_HCINTERRUPTDISABLE_MIE_MASK)
N
N/*! @name HCHCCA - Contains the physical address of the host controller communication area */
N#define USBFSH_HCHCCA_HCCA_MASK                  (0xFFFFFF00U)
N#define USBFSH_HCHCCA_HCCA_SHIFT                 (8U)
N#define USBFSH_HCHCCA_HCCA(x)                    (((uint32_t)(((uint32_t)(x)) << USBFSH_HCHCCA_HCCA_SHIFT)) & USBFSH_HCHCCA_HCCA_MASK)
N
N/*! @name HCPERIODCURRENTED - Contains the physical address of the current isochronous or interrupt endpoint descriptor */
N#define USBFSH_HCPERIODCURRENTED_PCED_MASK       (0xFFFFFFF0U)
N#define USBFSH_HCPERIODCURRENTED_PCED_SHIFT      (4U)
N#define USBFSH_HCPERIODCURRENTED_PCED(x)         (((uint32_t)(((uint32_t)(x)) << USBFSH_HCPERIODCURRENTED_PCED_SHIFT)) & USBFSH_HCPERIODCURRENTED_PCED_MASK)
N
N/*! @name HCCONTROLHEADED - Contains the physical address of the first endpoint descriptor of the control list */
N#define USBFSH_HCCONTROLHEADED_CHED_MASK         (0xFFFFFFF0U)
N#define USBFSH_HCCONTROLHEADED_CHED_SHIFT        (4U)
N#define USBFSH_HCCONTROLHEADED_CHED(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROLHEADED_CHED_SHIFT)) & USBFSH_HCCONTROLHEADED_CHED_MASK)
N
N/*! @name HCCONTROLCURRENTED - Contains the physical address of the current endpoint descriptor of the control list */
N#define USBFSH_HCCONTROLCURRENTED_CCED_MASK      (0xFFFFFFF0U)
N#define USBFSH_HCCONTROLCURRENTED_CCED_SHIFT     (4U)
N#define USBFSH_HCCONTROLCURRENTED_CCED(x)        (((uint32_t)(((uint32_t)(x)) << USBFSH_HCCONTROLCURRENTED_CCED_SHIFT)) & USBFSH_HCCONTROLCURRENTED_CCED_MASK)
N
N/*! @name HCBULKHEADED - Contains the physical address of the first endpoint descriptor of the bulk list */
N#define USBFSH_HCBULKHEADED_BHED_MASK            (0xFFFFFFF0U)
N#define USBFSH_HCBULKHEADED_BHED_SHIFT           (4U)
N#define USBFSH_HCBULKHEADED_BHED(x)              (((uint32_t)(((uint32_t)(x)) << USBFSH_HCBULKHEADED_BHED_SHIFT)) & USBFSH_HCBULKHEADED_BHED_MASK)
N
N/*! @name HCBULKCURRENTED - Contains the physical address of the current endpoint descriptor of the bulk list */
N#define USBFSH_HCBULKCURRENTED_BCED_MASK         (0xFFFFFFF0U)
N#define USBFSH_HCBULKCURRENTED_BCED_SHIFT        (4U)
N#define USBFSH_HCBULKCURRENTED_BCED(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCBULKCURRENTED_BCED_SHIFT)) & USBFSH_HCBULKCURRENTED_BCED_MASK)
N
N/*! @name HCDONEHEAD - Contains the physical address of the last transfer descriptor added to the 'Done' queue */
N#define USBFSH_HCDONEHEAD_DH_MASK                (0xFFFFFFF0U)
N#define USBFSH_HCDONEHEAD_DH_SHIFT               (4U)
N#define USBFSH_HCDONEHEAD_DH(x)                  (((uint32_t)(((uint32_t)(x)) << USBFSH_HCDONEHEAD_DH_SHIFT)) & USBFSH_HCDONEHEAD_DH_MASK)
N
N/*! @name HCFMINTERVAL - Defines the bit time interval in a frame and the full speed maximum packet size which would not cause an overrun */
N#define USBFSH_HCFMINTERVAL_FI_MASK              (0x3FFFU)
N#define USBFSH_HCFMINTERVAL_FI_SHIFT             (0U)
N#define USBFSH_HCFMINTERVAL_FI(x)                (((uint32_t)(((uint32_t)(x)) << USBFSH_HCFMINTERVAL_FI_SHIFT)) & USBFSH_HCFMINTERVAL_FI_MASK)
N#define USBFSH_HCFMINTERVAL_FSMPS_MASK           (0x7FFF0000U)
N#define USBFSH_HCFMINTERVAL_FSMPS_SHIFT          (16U)
N#define USBFSH_HCFMINTERVAL_FSMPS(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCFMINTERVAL_FSMPS_SHIFT)) & USBFSH_HCFMINTERVAL_FSMPS_MASK)
N#define USBFSH_HCFMINTERVAL_FIT_MASK             (0x80000000U)
N#define USBFSH_HCFMINTERVAL_FIT_SHIFT            (31U)
N#define USBFSH_HCFMINTERVAL_FIT(x)               (((uint32_t)(((uint32_t)(x)) << USBFSH_HCFMINTERVAL_FIT_SHIFT)) & USBFSH_HCFMINTERVAL_FIT_MASK)
N
N/*! @name HCFMREMAINING - A 14-bit counter showing the bit time remaining in the current frame */
N#define USBFSH_HCFMREMAINING_FR_MASK             (0x3FFFU)
N#define USBFSH_HCFMREMAINING_FR_SHIFT            (0U)
N#define USBFSH_HCFMREMAINING_FR(x)               (((uint32_t)(((uint32_t)(x)) << USBFSH_HCFMREMAINING_FR_SHIFT)) & USBFSH_HCFMREMAINING_FR_MASK)
N#define USBFSH_HCFMREMAINING_FRT_MASK            (0x80000000U)
N#define USBFSH_HCFMREMAINING_FRT_SHIFT           (31U)
N#define USBFSH_HCFMREMAINING_FRT(x)              (((uint32_t)(((uint32_t)(x)) << USBFSH_HCFMREMAINING_FRT_SHIFT)) & USBFSH_HCFMREMAINING_FRT_MASK)
N
N/*! @name HCFMNUMBER - Contains a 16-bit counter and provides the timing reference among events happening in the HC and the HCD */
N#define USBFSH_HCFMNUMBER_FN_MASK                (0xFFFFU)
N#define USBFSH_HCFMNUMBER_FN_SHIFT               (0U)
N#define USBFSH_HCFMNUMBER_FN(x)                  (((uint32_t)(((uint32_t)(x)) << USBFSH_HCFMNUMBER_FN_SHIFT)) & USBFSH_HCFMNUMBER_FN_MASK)
N
N/*! @name HCPERIODICSTART - Contains a programmable 14-bit value which determines the earliest time HC should start processing a periodic list */
N#define USBFSH_HCPERIODICSTART_PS_MASK           (0x3FFFU)
N#define USBFSH_HCPERIODICSTART_PS_SHIFT          (0U)
N#define USBFSH_HCPERIODICSTART_PS(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCPERIODICSTART_PS_SHIFT)) & USBFSH_HCPERIODICSTART_PS_MASK)
N
N/*! @name HCLSTHRESHOLD - Contains 11-bit value which is used by the HC to determine whether to commit to transfer a maximum of 8-byte LS packet before EOF */
N#define USBFSH_HCLSTHRESHOLD_LST_MASK            (0xFFFU)
N#define USBFSH_HCLSTHRESHOLD_LST_SHIFT           (0U)
N#define USBFSH_HCLSTHRESHOLD_LST(x)              (((uint32_t)(((uint32_t)(x)) << USBFSH_HCLSTHRESHOLD_LST_SHIFT)) & USBFSH_HCLSTHRESHOLD_LST_MASK)
N
N/*! @name HCRHDESCRIPTORA - First of the two registers which describes the characteristics of the root hub */
N#define USBFSH_HCRHDESCRIPTORA_NDP_MASK          (0xFFU)
N#define USBFSH_HCRHDESCRIPTORA_NDP_SHIFT         (0U)
N#define USBFSH_HCRHDESCRIPTORA_NDP(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORA_NDP_SHIFT)) & USBFSH_HCRHDESCRIPTORA_NDP_MASK)
N#define USBFSH_HCRHDESCRIPTORA_PSM_MASK          (0x100U)
N#define USBFSH_HCRHDESCRIPTORA_PSM_SHIFT         (8U)
N#define USBFSH_HCRHDESCRIPTORA_PSM(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORA_PSM_SHIFT)) & USBFSH_HCRHDESCRIPTORA_PSM_MASK)
N#define USBFSH_HCRHDESCRIPTORA_NPS_MASK          (0x200U)
N#define USBFSH_HCRHDESCRIPTORA_NPS_SHIFT         (9U)
N#define USBFSH_HCRHDESCRIPTORA_NPS(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORA_NPS_SHIFT)) & USBFSH_HCRHDESCRIPTORA_NPS_MASK)
N#define USBFSH_HCRHDESCRIPTORA_DT_MASK           (0x400U)
N#define USBFSH_HCRHDESCRIPTORA_DT_SHIFT          (10U)
N#define USBFSH_HCRHDESCRIPTORA_DT(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORA_DT_SHIFT)) & USBFSH_HCRHDESCRIPTORA_DT_MASK)
N#define USBFSH_HCRHDESCRIPTORA_OCPM_MASK         (0x800U)
N#define USBFSH_HCRHDESCRIPTORA_OCPM_SHIFT        (11U)
N#define USBFSH_HCRHDESCRIPTORA_OCPM(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORA_OCPM_SHIFT)) & USBFSH_HCRHDESCRIPTORA_OCPM_MASK)
N#define USBFSH_HCRHDESCRIPTORA_NOCP_MASK         (0x1000U)
N#define USBFSH_HCRHDESCRIPTORA_NOCP_SHIFT        (12U)
N#define USBFSH_HCRHDESCRIPTORA_NOCP(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORA_NOCP_SHIFT)) & USBFSH_HCRHDESCRIPTORA_NOCP_MASK)
N#define USBFSH_HCRHDESCRIPTORA_POTPGT_MASK       (0xFF000000U)
N#define USBFSH_HCRHDESCRIPTORA_POTPGT_SHIFT      (24U)
N#define USBFSH_HCRHDESCRIPTORA_POTPGT(x)         (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORA_POTPGT_SHIFT)) & USBFSH_HCRHDESCRIPTORA_POTPGT_MASK)
N
N/*! @name HCRHDESCRIPTORB - Second of the two registers which describes the characteristics of the Root Hub */
N#define USBFSH_HCRHDESCRIPTORB_DR_MASK           (0xFFFFU)
N#define USBFSH_HCRHDESCRIPTORB_DR_SHIFT          (0U)
N#define USBFSH_HCRHDESCRIPTORB_DR(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORB_DR_SHIFT)) & USBFSH_HCRHDESCRIPTORB_DR_MASK)
N#define USBFSH_HCRHDESCRIPTORB_PPCM_MASK         (0xFFFF0000U)
N#define USBFSH_HCRHDESCRIPTORB_PPCM_SHIFT        (16U)
N#define USBFSH_HCRHDESCRIPTORB_PPCM(x)           (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHDESCRIPTORB_PPCM_SHIFT)) & USBFSH_HCRHDESCRIPTORB_PPCM_MASK)
N
N/*! @name HCRHSTATUS - This register is divided into two parts */
N#define USBFSH_HCRHSTATUS_LPS_MASK               (0x1U)
N#define USBFSH_HCRHSTATUS_LPS_SHIFT              (0U)
N#define USBFSH_HCRHSTATUS_LPS(x)                 (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHSTATUS_LPS_SHIFT)) & USBFSH_HCRHSTATUS_LPS_MASK)
N#define USBFSH_HCRHSTATUS_OCI_MASK               (0x2U)
N#define USBFSH_HCRHSTATUS_OCI_SHIFT              (1U)
N#define USBFSH_HCRHSTATUS_OCI(x)                 (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHSTATUS_OCI_SHIFT)) & USBFSH_HCRHSTATUS_OCI_MASK)
N#define USBFSH_HCRHSTATUS_DRWE_MASK              (0x8000U)
N#define USBFSH_HCRHSTATUS_DRWE_SHIFT             (15U)
N#define USBFSH_HCRHSTATUS_DRWE(x)                (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHSTATUS_DRWE_SHIFT)) & USBFSH_HCRHSTATUS_DRWE_MASK)
N#define USBFSH_HCRHSTATUS_LPSC_MASK              (0x10000U)
N#define USBFSH_HCRHSTATUS_LPSC_SHIFT             (16U)
N#define USBFSH_HCRHSTATUS_LPSC(x)                (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHSTATUS_LPSC_SHIFT)) & USBFSH_HCRHSTATUS_LPSC_MASK)
N#define USBFSH_HCRHSTATUS_OCIC_MASK              (0x20000U)
N#define USBFSH_HCRHSTATUS_OCIC_SHIFT             (17U)
N#define USBFSH_HCRHSTATUS_OCIC(x)                (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHSTATUS_OCIC_SHIFT)) & USBFSH_HCRHSTATUS_OCIC_MASK)
N#define USBFSH_HCRHSTATUS_CRWE_MASK              (0x80000000U)
N#define USBFSH_HCRHSTATUS_CRWE_SHIFT             (31U)
N#define USBFSH_HCRHSTATUS_CRWE(x)                (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHSTATUS_CRWE_SHIFT)) & USBFSH_HCRHSTATUS_CRWE_MASK)
N
N/*! @name HCRHPORTSTATUS - Controls and reports the port events on a per-port basis */
N#define USBFSH_HCRHPORTSTATUS_CCS_MASK           (0x1U)
N#define USBFSH_HCRHPORTSTATUS_CCS_SHIFT          (0U)
N#define USBFSH_HCRHPORTSTATUS_CCS(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_CCS_SHIFT)) & USBFSH_HCRHPORTSTATUS_CCS_MASK)
N#define USBFSH_HCRHPORTSTATUS_PES_MASK           (0x2U)
N#define USBFSH_HCRHPORTSTATUS_PES_SHIFT          (1U)
N#define USBFSH_HCRHPORTSTATUS_PES(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_PES_SHIFT)) & USBFSH_HCRHPORTSTATUS_PES_MASK)
N#define USBFSH_HCRHPORTSTATUS_PSS_MASK           (0x4U)
N#define USBFSH_HCRHPORTSTATUS_PSS_SHIFT          (2U)
N#define USBFSH_HCRHPORTSTATUS_PSS(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_PSS_SHIFT)) & USBFSH_HCRHPORTSTATUS_PSS_MASK)
N#define USBFSH_HCRHPORTSTATUS_POCI_MASK          (0x8U)
N#define USBFSH_HCRHPORTSTATUS_POCI_SHIFT         (3U)
N#define USBFSH_HCRHPORTSTATUS_POCI(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_POCI_SHIFT)) & USBFSH_HCRHPORTSTATUS_POCI_MASK)
N#define USBFSH_HCRHPORTSTATUS_PRS_MASK           (0x10U)
N#define USBFSH_HCRHPORTSTATUS_PRS_SHIFT          (4U)
N#define USBFSH_HCRHPORTSTATUS_PRS(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_PRS_SHIFT)) & USBFSH_HCRHPORTSTATUS_PRS_MASK)
N#define USBFSH_HCRHPORTSTATUS_PPS_MASK           (0x100U)
N#define USBFSH_HCRHPORTSTATUS_PPS_SHIFT          (8U)
N#define USBFSH_HCRHPORTSTATUS_PPS(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_PPS_SHIFT)) & USBFSH_HCRHPORTSTATUS_PPS_MASK)
N#define USBFSH_HCRHPORTSTATUS_LSDA_MASK          (0x200U)
N#define USBFSH_HCRHPORTSTATUS_LSDA_SHIFT         (9U)
N#define USBFSH_HCRHPORTSTATUS_LSDA(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_LSDA_SHIFT)) & USBFSH_HCRHPORTSTATUS_LSDA_MASK)
N#define USBFSH_HCRHPORTSTATUS_CSC_MASK           (0x10000U)
N#define USBFSH_HCRHPORTSTATUS_CSC_SHIFT          (16U)
N#define USBFSH_HCRHPORTSTATUS_CSC(x)             (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_CSC_SHIFT)) & USBFSH_HCRHPORTSTATUS_CSC_MASK)
N#define USBFSH_HCRHPORTSTATUS_PESC_MASK          (0x20000U)
N#define USBFSH_HCRHPORTSTATUS_PESC_SHIFT         (17U)
N#define USBFSH_HCRHPORTSTATUS_PESC(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_PESC_SHIFT)) & USBFSH_HCRHPORTSTATUS_PESC_MASK)
N#define USBFSH_HCRHPORTSTATUS_PSSC_MASK          (0x40000U)
N#define USBFSH_HCRHPORTSTATUS_PSSC_SHIFT         (18U)
N#define USBFSH_HCRHPORTSTATUS_PSSC(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_PSSC_SHIFT)) & USBFSH_HCRHPORTSTATUS_PSSC_MASK)
N#define USBFSH_HCRHPORTSTATUS_OCIC_MASK          (0x80000U)
N#define USBFSH_HCRHPORTSTATUS_OCIC_SHIFT         (19U)
N#define USBFSH_HCRHPORTSTATUS_OCIC(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_OCIC_SHIFT)) & USBFSH_HCRHPORTSTATUS_OCIC_MASK)
N#define USBFSH_HCRHPORTSTATUS_PRSC_MASK          (0x100000U)
N#define USBFSH_HCRHPORTSTATUS_PRSC_SHIFT         (20U)
N#define USBFSH_HCRHPORTSTATUS_PRSC(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_HCRHPORTSTATUS_PRSC_SHIFT)) & USBFSH_HCRHPORTSTATUS_PRSC_MASK)
N
N/*! @name PORTMODE - Controls the port if it is attached to the host block or the device block */
N#define USBFSH_PORTMODE_ID_MASK                  (0x1U)
N#define USBFSH_PORTMODE_ID_SHIFT                 (0U)
N#define USBFSH_PORTMODE_ID(x)                    (((uint32_t)(((uint32_t)(x)) << USBFSH_PORTMODE_ID_SHIFT)) & USBFSH_PORTMODE_ID_MASK)
N#define USBFSH_PORTMODE_ID_EN_MASK               (0x100U)
N#define USBFSH_PORTMODE_ID_EN_SHIFT              (8U)
N#define USBFSH_PORTMODE_ID_EN(x)                 (((uint32_t)(((uint32_t)(x)) << USBFSH_PORTMODE_ID_EN_SHIFT)) & USBFSH_PORTMODE_ID_EN_MASK)
N#define USBFSH_PORTMODE_DEV_ENABLE_MASK          (0x10000U)
N#define USBFSH_PORTMODE_DEV_ENABLE_SHIFT         (16U)
N#define USBFSH_PORTMODE_DEV_ENABLE(x)            (((uint32_t)(((uint32_t)(x)) << USBFSH_PORTMODE_DEV_ENABLE_SHIFT)) & USBFSH_PORTMODE_DEV_ENABLE_MASK)
N
N
N/*!
N * @}
N */ /* end of group USBFSH_Register_Masks */
N
N
N/* USBFSH - Peripheral instance base addresses */
N/** Peripheral USBFSH base address */
N#define USBFSH_BASE                              (0x400A2000u)
N/** Peripheral USBFSH base pointer */
N#define USBFSH                                   ((USBFSH_Type *)USBFSH_BASE)
N/** Array initializer of USBFSH peripheral base addresses */
N#define USBFSH_BASE_ADDRS                        { USBFSH_BASE }
N/** Array initializer of USBFSH peripheral base pointers */
N#define USBFSH_BASE_PTRS                         { USBFSH }
N/** Interrupt vectors for the USBFSH peripheral type */
N#define USBFSH_IRQS                              { USB0_IRQn }
N#define USBFSH_NEEDCLK_IRQS                      { USB0_NEEDCLK_IRQn }
N
N/*!
N * @}
N */ /* end of group USBFSH_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- USBHSD Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USBHSD_Peripheral_Access_Layer USBHSD Peripheral Access Layer
N * @{
N */
N
N/** USBHSD - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t DEVCMDSTAT;                        /**< USB Device Command/Status register, offset: 0x0 */
X  volatile uint32_t DEVCMDSTAT;                         
N  __I  uint32_t INFO;                              /**< USB Info register, offset: 0x4 */
X  volatile const  uint32_t INFO;                               
N  __IO uint32_t EPLISTSTART;                       /**< USB EP Command/Status List start address, offset: 0x8 */
X  volatile uint32_t EPLISTSTART;                        
N  __I  uint32_t DATABUFSTART;                      /**< USB Data buffer start address, offset: 0xC */
X  volatile const  uint32_t DATABUFSTART;                       
N  __IO uint32_t LPM;                               /**< USB Link Power Management register, offset: 0x10 */
X  volatile uint32_t LPM;                                
N  __IO uint32_t EPSKIP;                            /**< USB Endpoint skip, offset: 0x14 */
X  volatile uint32_t EPSKIP;                             
N  __IO uint32_t EPINUSE;                           /**< USB Endpoint Buffer in use, offset: 0x18 */
X  volatile uint32_t EPINUSE;                            
N  __IO uint32_t EPBUFCFG;                          /**< USB Endpoint Buffer Configuration register, offset: 0x1C */
X  volatile uint32_t EPBUFCFG;                           
N  __IO uint32_t INTSTAT;                           /**< USB interrupt status register, offset: 0x20 */
X  volatile uint32_t INTSTAT;                            
N  __IO uint32_t INTEN;                             /**< USB interrupt enable register, offset: 0x24 */
X  volatile uint32_t INTEN;                              
N  __IO uint32_t INTSETSTAT;                        /**< USB set interrupt status register, offset: 0x28 */
X  volatile uint32_t INTSETSTAT;                         
N       uint8_t RESERVED_0[8];
N  __I  uint32_t EPTOGGLE;                          /**< USB Endpoint toggle register, offset: 0x34 */
X  volatile const  uint32_t EPTOGGLE;                           
N       uint8_t RESERVED_1[4];
N  __IO uint32_t ULPIDEBUG;                         /**< UTMI/ULPI debug register, offset: 0x3C */
X  volatile uint32_t ULPIDEBUG;                          
N} USBHSD_Type;
N
N/* ----------------------------------------------------------------------------
N   -- USBHSD Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USBHSD_Register_Masks USBHSD Register Masks
N * @{
N */
N
N/*! @name DEVCMDSTAT - USB Device Command/Status register */
N#define USBHSD_DEVCMDSTAT_DEV_ADDR_MASK          (0x7FU)
N#define USBHSD_DEVCMDSTAT_DEV_ADDR_SHIFT         (0U)
N#define USBHSD_DEVCMDSTAT_DEV_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DEV_ADDR_SHIFT)) & USBHSD_DEVCMDSTAT_DEV_ADDR_MASK)
N#define USBHSD_DEVCMDSTAT_DEV_EN_MASK            (0x80U)
N#define USBHSD_DEVCMDSTAT_DEV_EN_SHIFT           (7U)
N#define USBHSD_DEVCMDSTAT_DEV_EN(x)              (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DEV_EN_SHIFT)) & USBHSD_DEVCMDSTAT_DEV_EN_MASK)
N#define USBHSD_DEVCMDSTAT_SETUP_MASK             (0x100U)
N#define USBHSD_DEVCMDSTAT_SETUP_SHIFT            (8U)
N#define USBHSD_DEVCMDSTAT_SETUP(x)               (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_SETUP_SHIFT)) & USBHSD_DEVCMDSTAT_SETUP_MASK)
N#define USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_MASK     (0x200U)
N#define USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT    (9U)
N#define USBHSD_DEVCMDSTAT_FORCE_NEEDCLK(x)       (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_SHIFT)) & USBHSD_DEVCMDSTAT_FORCE_NEEDCLK_MASK)
N#define USBHSD_DEVCMDSTAT_FORCE_VBUS_MASK        (0x400U)
N#define USBHSD_DEVCMDSTAT_FORCE_VBUS_SHIFT       (10U)
N#define USBHSD_DEVCMDSTAT_FORCE_VBUS(x)          (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_FORCE_VBUS_SHIFT)) & USBHSD_DEVCMDSTAT_FORCE_VBUS_MASK)
N#define USBHSD_DEVCMDSTAT_LPM_SUP_MASK           (0x800U)
N#define USBHSD_DEVCMDSTAT_LPM_SUP_SHIFT          (11U)
N#define USBHSD_DEVCMDSTAT_LPM_SUP(x)             (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_LPM_SUP_SHIFT)) & USBHSD_DEVCMDSTAT_LPM_SUP_MASK)
N#define USBHSD_DEVCMDSTAT_INTONNAK_AO_MASK       (0x1000U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_AO_SHIFT      (12U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_AO(x)         (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_INTONNAK_AO_SHIFT)) & USBHSD_DEVCMDSTAT_INTONNAK_AO_MASK)
N#define USBHSD_DEVCMDSTAT_INTONNAK_AI_MASK       (0x2000U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_AI_SHIFT      (13U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_AI(x)         (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_INTONNAK_AI_SHIFT)) & USBHSD_DEVCMDSTAT_INTONNAK_AI_MASK)
N#define USBHSD_DEVCMDSTAT_INTONNAK_CO_MASK       (0x4000U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_CO_SHIFT      (14U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_CO(x)         (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_INTONNAK_CO_SHIFT)) & USBHSD_DEVCMDSTAT_INTONNAK_CO_MASK)
N#define USBHSD_DEVCMDSTAT_INTONNAK_CI_MASK       (0x8000U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_CI_SHIFT      (15U)
N#define USBHSD_DEVCMDSTAT_INTONNAK_CI(x)         (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_INTONNAK_CI_SHIFT)) & USBHSD_DEVCMDSTAT_INTONNAK_CI_MASK)
N#define USBHSD_DEVCMDSTAT_DCON_MASK              (0x10000U)
N#define USBHSD_DEVCMDSTAT_DCON_SHIFT             (16U)
N#define USBHSD_DEVCMDSTAT_DCON(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DCON_SHIFT)) & USBHSD_DEVCMDSTAT_DCON_MASK)
N#define USBHSD_DEVCMDSTAT_DSUS_MASK              (0x20000U)
N#define USBHSD_DEVCMDSTAT_DSUS_SHIFT             (17U)
N#define USBHSD_DEVCMDSTAT_DSUS(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DSUS_SHIFT)) & USBHSD_DEVCMDSTAT_DSUS_MASK)
N#define USBHSD_DEVCMDSTAT_LPM_SUS_MASK           (0x80000U)
N#define USBHSD_DEVCMDSTAT_LPM_SUS_SHIFT          (19U)
N#define USBHSD_DEVCMDSTAT_LPM_SUS(x)             (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_LPM_SUS_SHIFT)) & USBHSD_DEVCMDSTAT_LPM_SUS_MASK)
N#define USBHSD_DEVCMDSTAT_LPM_REWP_MASK          (0x100000U)
N#define USBHSD_DEVCMDSTAT_LPM_REWP_SHIFT         (20U)
N#define USBHSD_DEVCMDSTAT_LPM_REWP(x)            (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_LPM_REWP_SHIFT)) & USBHSD_DEVCMDSTAT_LPM_REWP_MASK)
N#define USBHSD_DEVCMDSTAT_Speed_MASK             (0xC00000U)
N#define USBHSD_DEVCMDSTAT_Speed_SHIFT            (22U)
N#define USBHSD_DEVCMDSTAT_Speed(x)               (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_Speed_SHIFT)) & USBHSD_DEVCMDSTAT_Speed_MASK)
N#define USBHSD_DEVCMDSTAT_DCON_C_MASK            (0x1000000U)
N#define USBHSD_DEVCMDSTAT_DCON_C_SHIFT           (24U)
N#define USBHSD_DEVCMDSTAT_DCON_C(x)              (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DCON_C_SHIFT)) & USBHSD_DEVCMDSTAT_DCON_C_MASK)
N#define USBHSD_DEVCMDSTAT_DSUS_C_MASK            (0x2000000U)
N#define USBHSD_DEVCMDSTAT_DSUS_C_SHIFT           (25U)
N#define USBHSD_DEVCMDSTAT_DSUS_C(x)              (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DSUS_C_SHIFT)) & USBHSD_DEVCMDSTAT_DSUS_C_MASK)
N#define USBHSD_DEVCMDSTAT_DRES_C_MASK            (0x4000000U)
N#define USBHSD_DEVCMDSTAT_DRES_C_SHIFT           (26U)
N#define USBHSD_DEVCMDSTAT_DRES_C(x)              (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_DRES_C_SHIFT)) & USBHSD_DEVCMDSTAT_DRES_C_MASK)
N#define USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_MASK    (0x10000000U)
N#define USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_SHIFT   (28U)
N#define USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED(x)      (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_SHIFT)) & USBHSD_DEVCMDSTAT_VBUS_DEBOUNCED_MASK)
N#define USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK     (0xE0000000U)
N#define USBHSD_DEVCMDSTAT_PHY_TEST_MODE_SHIFT    (29U)
N#define USBHSD_DEVCMDSTAT_PHY_TEST_MODE(x)       (((uint32_t)(((uint32_t)(x)) << USBHSD_DEVCMDSTAT_PHY_TEST_MODE_SHIFT)) & USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK)
N
N/*! @name INFO - USB Info register */
N#define USBHSD_INFO_FRAME_NR_MASK                (0x7FFU)
N#define USBHSD_INFO_FRAME_NR_SHIFT               (0U)
N#define USBHSD_INFO_FRAME_NR(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_FRAME_NR_SHIFT)) & USBHSD_INFO_FRAME_NR_MASK)
N#define USBHSD_INFO_ERR_CODE_MASK                (0x7800U)
N#define USBHSD_INFO_ERR_CODE_SHIFT               (11U)
N#define USBHSD_INFO_ERR_CODE(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_ERR_CODE_SHIFT)) & USBHSD_INFO_ERR_CODE_MASK)
N#define USBHSD_INFO_Minrev_MASK                  (0xFF0000U)
N#define USBHSD_INFO_Minrev_SHIFT                 (16U)
N#define USBHSD_INFO_Minrev(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_Minrev_SHIFT)) & USBHSD_INFO_Minrev_MASK)
N#define USBHSD_INFO_Majrev_MASK                  (0xFF000000U)
N#define USBHSD_INFO_Majrev_SHIFT                 (24U)
N#define USBHSD_INFO_Majrev(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_INFO_Majrev_SHIFT)) & USBHSD_INFO_Majrev_MASK)
N
N/*! @name EPLISTSTART - USB EP Command/Status List start address */
N#define USBHSD_EPLISTSTART_EP_LIST_PRG_MASK      (0xFFF00U)
N#define USBHSD_EPLISTSTART_EP_LIST_PRG_SHIFT     (8U)
N#define USBHSD_EPLISTSTART_EP_LIST_PRG(x)        (((uint32_t)(((uint32_t)(x)) << USBHSD_EPLISTSTART_EP_LIST_PRG_SHIFT)) & USBHSD_EPLISTSTART_EP_LIST_PRG_MASK)
N#define USBHSD_EPLISTSTART_EP_LIST_FIXED_MASK    (0xFFF00000U)
N#define USBHSD_EPLISTSTART_EP_LIST_FIXED_SHIFT   (20U)
N#define USBHSD_EPLISTSTART_EP_LIST_FIXED(x)      (((uint32_t)(((uint32_t)(x)) << USBHSD_EPLISTSTART_EP_LIST_FIXED_SHIFT)) & USBHSD_EPLISTSTART_EP_LIST_FIXED_MASK)
N
N/*! @name DATABUFSTART - USB Data buffer start address */
N#define USBHSD_DATABUFSTART_DA_BUF_MASK          (0xFFFFFFFFU)
N#define USBHSD_DATABUFSTART_DA_BUF_SHIFT         (0U)
N#define USBHSD_DATABUFSTART_DA_BUF(x)            (((uint32_t)(((uint32_t)(x)) << USBHSD_DATABUFSTART_DA_BUF_SHIFT)) & USBHSD_DATABUFSTART_DA_BUF_MASK)
N
N/*! @name LPM - USB Link Power Management register */
N#define USBHSD_LPM_HIRD_HW_MASK                  (0xFU)
N#define USBHSD_LPM_HIRD_HW_SHIFT                 (0U)
N#define USBHSD_LPM_HIRD_HW(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_LPM_HIRD_HW_SHIFT)) & USBHSD_LPM_HIRD_HW_MASK)
N#define USBHSD_LPM_HIRD_SW_MASK                  (0xF0U)
N#define USBHSD_LPM_HIRD_SW_SHIFT                 (4U)
N#define USBHSD_LPM_HIRD_SW(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_LPM_HIRD_SW_SHIFT)) & USBHSD_LPM_HIRD_SW_MASK)
N#define USBHSD_LPM_DATA_PENDING_MASK             (0x100U)
N#define USBHSD_LPM_DATA_PENDING_SHIFT            (8U)
N#define USBHSD_LPM_DATA_PENDING(x)               (((uint32_t)(((uint32_t)(x)) << USBHSD_LPM_DATA_PENDING_SHIFT)) & USBHSD_LPM_DATA_PENDING_MASK)
N
N/*! @name EPSKIP - USB Endpoint skip */
N#define USBHSD_EPSKIP_SKIP_MASK                  (0xFFFU)
N#define USBHSD_EPSKIP_SKIP_SHIFT                 (0U)
N#define USBHSD_EPSKIP_SKIP(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_EPSKIP_SKIP_SHIFT)) & USBHSD_EPSKIP_SKIP_MASK)
N
N/*! @name EPINUSE - USB Endpoint Buffer in use */
N#define USBHSD_EPINUSE_BUF_MASK                  (0xFFCU)
N#define USBHSD_EPINUSE_BUF_SHIFT                 (2U)
N#define USBHSD_EPINUSE_BUF(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSD_EPINUSE_BUF_SHIFT)) & USBHSD_EPINUSE_BUF_MASK)
N
N/*! @name EPBUFCFG - USB Endpoint Buffer Configuration register */
N#define USBHSD_EPBUFCFG_BUF_SB_MASK              (0xFFCU)
N#define USBHSD_EPBUFCFG_BUF_SB_SHIFT             (2U)
N#define USBHSD_EPBUFCFG_BUF_SB(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_EPBUFCFG_BUF_SB_SHIFT)) & USBHSD_EPBUFCFG_BUF_SB_MASK)
N
N/*! @name INTSTAT - USB interrupt status register */
N#define USBHSD_INTSTAT_EP0OUT_MASK               (0x1U)
N#define USBHSD_INTSTAT_EP0OUT_SHIFT              (0U)
N#define USBHSD_INTSTAT_EP0OUT(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP0OUT_SHIFT)) & USBHSD_INTSTAT_EP0OUT_MASK)
N#define USBHSD_INTSTAT_EP0IN_MASK                (0x2U)
N#define USBHSD_INTSTAT_EP0IN_SHIFT               (1U)
N#define USBHSD_INTSTAT_EP0IN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP0IN_SHIFT)) & USBHSD_INTSTAT_EP0IN_MASK)
N#define USBHSD_INTSTAT_EP1OUT_MASK               (0x4U)
N#define USBHSD_INTSTAT_EP1OUT_SHIFT              (2U)
N#define USBHSD_INTSTAT_EP1OUT(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP1OUT_SHIFT)) & USBHSD_INTSTAT_EP1OUT_MASK)
N#define USBHSD_INTSTAT_EP1IN_MASK                (0x8U)
N#define USBHSD_INTSTAT_EP1IN_SHIFT               (3U)
N#define USBHSD_INTSTAT_EP1IN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP1IN_SHIFT)) & USBHSD_INTSTAT_EP1IN_MASK)
N#define USBHSD_INTSTAT_EP2OUT_MASK               (0x10U)
N#define USBHSD_INTSTAT_EP2OUT_SHIFT              (4U)
N#define USBHSD_INTSTAT_EP2OUT(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP2OUT_SHIFT)) & USBHSD_INTSTAT_EP2OUT_MASK)
N#define USBHSD_INTSTAT_EP2IN_MASK                (0x20U)
N#define USBHSD_INTSTAT_EP2IN_SHIFT               (5U)
N#define USBHSD_INTSTAT_EP2IN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP2IN_SHIFT)) & USBHSD_INTSTAT_EP2IN_MASK)
N#define USBHSD_INTSTAT_EP3OUT_MASK               (0x40U)
N#define USBHSD_INTSTAT_EP3OUT_SHIFT              (6U)
N#define USBHSD_INTSTAT_EP3OUT(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP3OUT_SHIFT)) & USBHSD_INTSTAT_EP3OUT_MASK)
N#define USBHSD_INTSTAT_EP3IN_MASK                (0x80U)
N#define USBHSD_INTSTAT_EP3IN_SHIFT               (7U)
N#define USBHSD_INTSTAT_EP3IN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP3IN_SHIFT)) & USBHSD_INTSTAT_EP3IN_MASK)
N#define USBHSD_INTSTAT_EP4OUT_MASK               (0x100U)
N#define USBHSD_INTSTAT_EP4OUT_SHIFT              (8U)
N#define USBHSD_INTSTAT_EP4OUT(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP4OUT_SHIFT)) & USBHSD_INTSTAT_EP4OUT_MASK)
N#define USBHSD_INTSTAT_EP4IN_MASK                (0x200U)
N#define USBHSD_INTSTAT_EP4IN_SHIFT               (9U)
N#define USBHSD_INTSTAT_EP4IN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP4IN_SHIFT)) & USBHSD_INTSTAT_EP4IN_MASK)
N#define USBHSD_INTSTAT_EP5OUT_MASK               (0x400U)
N#define USBHSD_INTSTAT_EP5OUT_SHIFT              (10U)
N#define USBHSD_INTSTAT_EP5OUT(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP5OUT_SHIFT)) & USBHSD_INTSTAT_EP5OUT_MASK)
N#define USBHSD_INTSTAT_EP5IN_MASK                (0x800U)
N#define USBHSD_INTSTAT_EP5IN_SHIFT               (11U)
N#define USBHSD_INTSTAT_EP5IN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_EP5IN_SHIFT)) & USBHSD_INTSTAT_EP5IN_MASK)
N#define USBHSD_INTSTAT_FRAME_INT_MASK            (0x40000000U)
N#define USBHSD_INTSTAT_FRAME_INT_SHIFT           (30U)
N#define USBHSD_INTSTAT_FRAME_INT(x)              (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_FRAME_INT_SHIFT)) & USBHSD_INTSTAT_FRAME_INT_MASK)
N#define USBHSD_INTSTAT_DEV_INT_MASK              (0x80000000U)
N#define USBHSD_INTSTAT_DEV_INT_SHIFT             (31U)
N#define USBHSD_INTSTAT_DEV_INT(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSTAT_DEV_INT_SHIFT)) & USBHSD_INTSTAT_DEV_INT_MASK)
N
N/*! @name INTEN - USB interrupt enable register */
N#define USBHSD_INTEN_EP_INT_EN_MASK              (0xFFFU)
N#define USBHSD_INTEN_EP_INT_EN_SHIFT             (0U)
N#define USBHSD_INTEN_EP_INT_EN(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_INTEN_EP_INT_EN_SHIFT)) & USBHSD_INTEN_EP_INT_EN_MASK)
N#define USBHSD_INTEN_FRAME_INT_EN_MASK           (0x40000000U)
N#define USBHSD_INTEN_FRAME_INT_EN_SHIFT          (30U)
N#define USBHSD_INTEN_FRAME_INT_EN(x)             (((uint32_t)(((uint32_t)(x)) << USBHSD_INTEN_FRAME_INT_EN_SHIFT)) & USBHSD_INTEN_FRAME_INT_EN_MASK)
N#define USBHSD_INTEN_DEV_INT_EN_MASK             (0x80000000U)
N#define USBHSD_INTEN_DEV_INT_EN_SHIFT            (31U)
N#define USBHSD_INTEN_DEV_INT_EN(x)               (((uint32_t)(((uint32_t)(x)) << USBHSD_INTEN_DEV_INT_EN_SHIFT)) & USBHSD_INTEN_DEV_INT_EN_MASK)
N
N/*! @name INTSETSTAT - USB set interrupt status register */
N#define USBHSD_INTSETSTAT_EP_SET_INT_MASK        (0xFFFU)
N#define USBHSD_INTSETSTAT_EP_SET_INT_SHIFT       (0U)
N#define USBHSD_INTSETSTAT_EP_SET_INT(x)          (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSETSTAT_EP_SET_INT_SHIFT)) & USBHSD_INTSETSTAT_EP_SET_INT_MASK)
N#define USBHSD_INTSETSTAT_FRAME_SET_INT_MASK     (0x40000000U)
N#define USBHSD_INTSETSTAT_FRAME_SET_INT_SHIFT    (30U)
N#define USBHSD_INTSETSTAT_FRAME_SET_INT(x)       (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSETSTAT_FRAME_SET_INT_SHIFT)) & USBHSD_INTSETSTAT_FRAME_SET_INT_MASK)
N#define USBHSD_INTSETSTAT_DEV_SET_INT_MASK       (0x80000000U)
N#define USBHSD_INTSETSTAT_DEV_SET_INT_SHIFT      (31U)
N#define USBHSD_INTSETSTAT_DEV_SET_INT(x)         (((uint32_t)(((uint32_t)(x)) << USBHSD_INTSETSTAT_DEV_SET_INT_SHIFT)) & USBHSD_INTSETSTAT_DEV_SET_INT_MASK)
N
N/*! @name EPTOGGLE - USB Endpoint toggle register */
N#define USBHSD_EPTOGGLE_TOGGLE_MASK              (0x3FFFFFFFU)
N#define USBHSD_EPTOGGLE_TOGGLE_SHIFT             (0U)
N#define USBHSD_EPTOGGLE_TOGGLE(x)                (((uint32_t)(((uint32_t)(x)) << USBHSD_EPTOGGLE_TOGGLE_SHIFT)) & USBHSD_EPTOGGLE_TOGGLE_MASK)
N
N/*! @name ULPIDEBUG - UTMI/ULPI debug register */
N#define USBHSD_ULPIDEBUG_PHY_ADDR_MASK           (0xFFU)
N#define USBHSD_ULPIDEBUG_PHY_ADDR_SHIFT          (0U)
N#define USBHSD_ULPIDEBUG_PHY_ADDR(x)             (((uint32_t)(((uint32_t)(x)) << USBHSD_ULPIDEBUG_PHY_ADDR_SHIFT)) & USBHSD_ULPIDEBUG_PHY_ADDR_MASK)
N#define USBHSD_ULPIDEBUG_PHY_WDATA_MASK          (0xFF00U)
N#define USBHSD_ULPIDEBUG_PHY_WDATA_SHIFT         (8U)
N#define USBHSD_ULPIDEBUG_PHY_WDATA(x)            (((uint32_t)(((uint32_t)(x)) << USBHSD_ULPIDEBUG_PHY_WDATA_SHIFT)) & USBHSD_ULPIDEBUG_PHY_WDATA_MASK)
N#define USBHSD_ULPIDEBUG_PHY_RDATA_MASK          (0xFF0000U)
N#define USBHSD_ULPIDEBUG_PHY_RDATA_SHIFT         (16U)
N#define USBHSD_ULPIDEBUG_PHY_RDATA(x)            (((uint32_t)(((uint32_t)(x)) << USBHSD_ULPIDEBUG_PHY_RDATA_SHIFT)) & USBHSD_ULPIDEBUG_PHY_RDATA_MASK)
N#define USBHSD_ULPIDEBUG_PHY_RW_MASK             (0x1000000U)
N#define USBHSD_ULPIDEBUG_PHY_RW_SHIFT            (24U)
N#define USBHSD_ULPIDEBUG_PHY_RW(x)               (((uint32_t)(((uint32_t)(x)) << USBHSD_ULPIDEBUG_PHY_RW_SHIFT)) & USBHSD_ULPIDEBUG_PHY_RW_MASK)
N#define USBHSD_ULPIDEBUG_PHY_ACCESS_MASK         (0x2000000U)
N#define USBHSD_ULPIDEBUG_PHY_ACCESS_SHIFT        (25U)
N#define USBHSD_ULPIDEBUG_PHY_ACCESS(x)           (((uint32_t)(((uint32_t)(x)) << USBHSD_ULPIDEBUG_PHY_ACCESS_SHIFT)) & USBHSD_ULPIDEBUG_PHY_ACCESS_MASK)
N#define USBHSD_ULPIDEBUG_PHY_MODE_MASK           (0x80000000U)
N#define USBHSD_ULPIDEBUG_PHY_MODE_SHIFT          (31U)
N#define USBHSD_ULPIDEBUG_PHY_MODE(x)             (((uint32_t)(((uint32_t)(x)) << USBHSD_ULPIDEBUG_PHY_MODE_SHIFT)) & USBHSD_ULPIDEBUG_PHY_MODE_MASK)
N
N
N/*!
N * @}
N */ /* end of group USBHSD_Register_Masks */
N
N
N/* USBHSD - Peripheral instance base addresses */
N/** Peripheral USBHSD base address */
N#define USBHSD_BASE                              (0x40094000u)
N/** Peripheral USBHSD base pointer */
N#define USBHSD                                   ((USBHSD_Type *)USBHSD_BASE)
N/** Array initializer of USBHSD peripheral base addresses */
N#define USBHSD_BASE_ADDRS                        { USBHSD_BASE }
N/** Array initializer of USBHSD peripheral base pointers */
N#define USBHSD_BASE_PTRS                         { USBHSD }
N/** Interrupt vectors for the USBHSD peripheral type */
N#define USBHSD_IRQS                              { USB1_IRQn }
N#define USBHSD_NEEDCLK_IRQS                      { USB1_NEEDCLK_IRQn }
N
N/*!
N * @}
N */ /* end of group USBHSD_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- USBHSH Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USBHSH_Peripheral_Access_Layer USBHSH Peripheral Access Layer
N * @{
N */
N
N/** USBHSH - Register Layout Typedef */
Ntypedef struct {
N  __I  uint32_t CAPLENGTH_CHIPID;                  /**< This register contains the offset value towards the start of the operational register space and the version number of the IP block, offset: 0x0 */
X  volatile const  uint32_t CAPLENGTH_CHIPID;                   
N  __I  uint32_t HCSPARAMS;                         /**< Host Controller Structural Parameters, offset: 0x4 */
X  volatile const  uint32_t HCSPARAMS;                          
N  __I  uint32_t HCCPARAMS;                         /**< Host Controller Capability Parameters, offset: 0x8 */
X  volatile const  uint32_t HCCPARAMS;                          
N  __IO uint32_t FLADJ_FRINDEX;                     /**< Frame Length Adjustment, offset: 0xC */
X  volatile uint32_t FLADJ_FRINDEX;                      
N  __IO uint32_t ATL_PTD_BASE_ADDR;                 /**< Memory base address where ATL PTD0 is stored, offset: 0x10 */
X  volatile uint32_t ATL_PTD_BASE_ADDR;                  
N  __IO uint32_t ISO_PTD_BASE_ADDR;                 /**< Memory base address where ISO PTD0 is stored, offset: 0x14 */
X  volatile uint32_t ISO_PTD_BASE_ADDR;                  
N  __IO uint32_t INT_PTD_BASE_ADDR;                 /**< Memory base address where INT PTD0 is stored, offset: 0x18 */
X  volatile uint32_t INT_PTD_BASE_ADDR;                  
N  __IO uint32_t DATA_PAYLOAD_BASE_ADDR;            /**< Memory base address that indicates the start of the data payload buffers, offset: 0x1C */
X  volatile uint32_t DATA_PAYLOAD_BASE_ADDR;             
N  __IO uint32_t USBCMD;                            /**< USB Command register, offset: 0x20 */
X  volatile uint32_t USBCMD;                             
N  __IO uint32_t USBSTS;                            /**< USB Interrupt Status register, offset: 0x24 */
X  volatile uint32_t USBSTS;                             
N  __IO uint32_t USBINTR;                           /**< USB Interrupt Enable register, offset: 0x28 */
X  volatile uint32_t USBINTR;                            
N  __IO uint32_t PORTSC1;                           /**< Port Status and Control register, offset: 0x2C */
X  volatile uint32_t PORTSC1;                            
N  __IO uint32_t ATL_PTD_DONE_MAP;                  /**< Done map for each ATL PTD, offset: 0x30 */
X  volatile uint32_t ATL_PTD_DONE_MAP;                   
N  __IO uint32_t ATL_PTD_SKIP_MAP;                  /**< Skip map for each ATL PTD, offset: 0x34 */
X  volatile uint32_t ATL_PTD_SKIP_MAP;                   
N  __IO uint32_t ISO_PTD_DONE_MAP;                  /**< Done map for each ISO PTD, offset: 0x38 */
X  volatile uint32_t ISO_PTD_DONE_MAP;                   
N  __IO uint32_t ISO_PTD_SKIP_MAP;                  /**< Skip map for each ISO PTD, offset: 0x3C */
X  volatile uint32_t ISO_PTD_SKIP_MAP;                   
N  __IO uint32_t INT_PTD_DONE_MAP;                  /**< Done map for each INT PTD, offset: 0x40 */
X  volatile uint32_t INT_PTD_DONE_MAP;                   
N  __IO uint32_t INT_PTD_SKIP_MAP;                  /**< Skip map for each INT PTD, offset: 0x44 */
X  volatile uint32_t INT_PTD_SKIP_MAP;                   
N  __IO uint32_t LAST_PTD_INUSE;                    /**< Marks the last PTD in the list for ISO, INT and ATL, offset: 0x48 */
X  volatile uint32_t LAST_PTD_INUSE;                     
N  __IO uint32_t UTMIPLUS_ULPI_DEBUG;               /**< Register to read/write registers in the attached USB PHY, offset: 0x4C */
X  volatile uint32_t UTMIPLUS_ULPI_DEBUG;                
N  __IO uint32_t PORTMODE;                          /**< Controls the port if it is attached to the host block or the device block, offset: 0x50 */
X  volatile uint32_t PORTMODE;                           
N} USBHSH_Type;
N
N/* ----------------------------------------------------------------------------
N   -- USBHSH Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USBHSH_Register_Masks USBHSH Register Masks
N * @{
N */
N
N/*! @name CAPLENGTH_CHIPID - This register contains the offset value towards the start of the operational register space and the version number of the IP block */
N#define USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_MASK   (0xFFU)
N#define USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_SHIFT  (0U)
N#define USBHSH_CAPLENGTH_CHIPID_CAPLENGTH(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_SHIFT)) & USBHSH_CAPLENGTH_CHIPID_CAPLENGTH_MASK)
N#define USBHSH_CAPLENGTH_CHIPID_CHIPID_MASK      (0xFFFF0000U)
N#define USBHSH_CAPLENGTH_CHIPID_CHIPID_SHIFT     (16U)
N#define USBHSH_CAPLENGTH_CHIPID_CHIPID(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_CAPLENGTH_CHIPID_CHIPID_SHIFT)) & USBHSH_CAPLENGTH_CHIPID_CHIPID_MASK)
N
N/*! @name HCSPARAMS - Host Controller Structural Parameters */
N#define USBHSH_HCSPARAMS_N_PORTS_MASK            (0xFU)
N#define USBHSH_HCSPARAMS_N_PORTS_SHIFT           (0U)
N#define USBHSH_HCSPARAMS_N_PORTS(x)              (((uint32_t)(((uint32_t)(x)) << USBHSH_HCSPARAMS_N_PORTS_SHIFT)) & USBHSH_HCSPARAMS_N_PORTS_MASK)
N#define USBHSH_HCSPARAMS_PPC_MASK                (0x10U)
N#define USBHSH_HCSPARAMS_PPC_SHIFT               (4U)
N#define USBHSH_HCSPARAMS_PPC(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSH_HCSPARAMS_PPC_SHIFT)) & USBHSH_HCSPARAMS_PPC_MASK)
N#define USBHSH_HCSPARAMS_P_INDICATOR_MASK        (0x10000U)
N#define USBHSH_HCSPARAMS_P_INDICATOR_SHIFT       (16U)
N#define USBHSH_HCSPARAMS_P_INDICATOR(x)          (((uint32_t)(((uint32_t)(x)) << USBHSH_HCSPARAMS_P_INDICATOR_SHIFT)) & USBHSH_HCSPARAMS_P_INDICATOR_MASK)
N
N/*! @name HCCPARAMS - Host Controller Capability Parameters */
N#define USBHSH_HCCPARAMS_LPMC_MASK               (0x20000U)
N#define USBHSH_HCCPARAMS_LPMC_SHIFT              (17U)
N#define USBHSH_HCCPARAMS_LPMC(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_HCCPARAMS_LPMC_SHIFT)) & USBHSH_HCCPARAMS_LPMC_MASK)
N
N/*! @name FLADJ_FRINDEX - Frame Length Adjustment */
N#define USBHSH_FLADJ_FRINDEX_FLADJ_MASK          (0x3FU)
N#define USBHSH_FLADJ_FRINDEX_FLADJ_SHIFT         (0U)
N#define USBHSH_FLADJ_FRINDEX_FLADJ(x)            (((uint32_t)(((uint32_t)(x)) << USBHSH_FLADJ_FRINDEX_FLADJ_SHIFT)) & USBHSH_FLADJ_FRINDEX_FLADJ_MASK)
N#define USBHSH_FLADJ_FRINDEX_FRINDEX_MASK        (0x3FFF0000U)
N#define USBHSH_FLADJ_FRINDEX_FRINDEX_SHIFT       (16U)
N#define USBHSH_FLADJ_FRINDEX_FRINDEX(x)          (((uint32_t)(((uint32_t)(x)) << USBHSH_FLADJ_FRINDEX_FRINDEX_SHIFT)) & USBHSH_FLADJ_FRINDEX_FRINDEX_MASK)
N
N/*! @name ATL_PTD_BASE_ADDR - Memory base address where ATL PTD0 is stored */
N#define USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_MASK    (0x1F0U)
N#define USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_SHIFT   (4U)
N#define USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_SHIFT)) & USBHSH_ATL_PTD_BASE_ADDR_ATL_CUR_MASK)
N#define USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_MASK   (0xFFFFFE00U)
N#define USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_SHIFT  (9U)
N#define USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_SHIFT)) & USBHSH_ATL_PTD_BASE_ADDR_ATL_BASE_MASK)
N
N/*! @name ISO_PTD_BASE_ADDR - Memory base address where ISO PTD0 is stored */
N#define USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_MASK  (0x3E0U)
N#define USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_SHIFT (5U)
N#define USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST(x)    (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_SHIFT)) & USBHSH_ISO_PTD_BASE_ADDR_ISO_FIRST_MASK)
N#define USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_MASK   (0xFFFFFC00U)
N#define USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_SHIFT  (10U)
N#define USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_SHIFT)) & USBHSH_ISO_PTD_BASE_ADDR_ISO_BASE_MASK)
N
N/*! @name INT_PTD_BASE_ADDR - Memory base address where INT PTD0 is stored */
N#define USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_MASK  (0x3E0U)
N#define USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_SHIFT (5U)
N#define USBHSH_INT_PTD_BASE_ADDR_INT_FIRST(x)    (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_SHIFT)) & USBHSH_INT_PTD_BASE_ADDR_INT_FIRST_MASK)
N#define USBHSH_INT_PTD_BASE_ADDR_INT_BASE_MASK   (0xFFFFFC00U)
N#define USBHSH_INT_PTD_BASE_ADDR_INT_BASE_SHIFT  (10U)
N#define USBHSH_INT_PTD_BASE_ADDR_INT_BASE(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_BASE_ADDR_INT_BASE_SHIFT)) & USBHSH_INT_PTD_BASE_ADDR_INT_BASE_MASK)
N
N/*! @name DATA_PAYLOAD_BASE_ADDR - Memory base address that indicates the start of the data payload buffers */
N#define USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_MASK (0xFFFF0000U)
N#define USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_SHIFT (16U)
N#define USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE(x) (((uint32_t)(((uint32_t)(x)) << USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_SHIFT)) & USBHSH_DATA_PAYLOAD_BASE_ADDR_DAT_BASE_MASK)
N
N/*! @name USBCMD - USB Command register */
N#define USBHSH_USBCMD_RS_MASK                    (0x1U)
N#define USBHSH_USBCMD_RS_SHIFT                   (0U)
N#define USBHSH_USBCMD_RS(x)                      (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_RS_SHIFT)) & USBHSH_USBCMD_RS_MASK)
N#define USBHSH_USBCMD_HCRESET_MASK               (0x2U)
N#define USBHSH_USBCMD_HCRESET_SHIFT              (1U)
N#define USBHSH_USBCMD_HCRESET(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_HCRESET_SHIFT)) & USBHSH_USBCMD_HCRESET_MASK)
N#define USBHSH_USBCMD_FLS_MASK                   (0xCU)
N#define USBHSH_USBCMD_FLS_SHIFT                  (2U)
N#define USBHSH_USBCMD_FLS(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_FLS_SHIFT)) & USBHSH_USBCMD_FLS_MASK)
N#define USBHSH_USBCMD_LHCR_MASK                  (0x80U)
N#define USBHSH_USBCMD_LHCR_SHIFT                 (7U)
N#define USBHSH_USBCMD_LHCR(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_LHCR_SHIFT)) & USBHSH_USBCMD_LHCR_MASK)
N#define USBHSH_USBCMD_ATL_EN_MASK                (0x100U)
N#define USBHSH_USBCMD_ATL_EN_SHIFT               (8U)
N#define USBHSH_USBCMD_ATL_EN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_ATL_EN_SHIFT)) & USBHSH_USBCMD_ATL_EN_MASK)
N#define USBHSH_USBCMD_ISO_EN_MASK                (0x200U)
N#define USBHSH_USBCMD_ISO_EN_SHIFT               (9U)
N#define USBHSH_USBCMD_ISO_EN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_ISO_EN_SHIFT)) & USBHSH_USBCMD_ISO_EN_MASK)
N#define USBHSH_USBCMD_INT_EN_MASK                (0x400U)
N#define USBHSH_USBCMD_INT_EN_SHIFT               (10U)
N#define USBHSH_USBCMD_INT_EN(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_INT_EN_SHIFT)) & USBHSH_USBCMD_INT_EN_MASK)
N#define USBHSH_USBCMD_HIRD_MASK                  (0xF000000U)
N#define USBHSH_USBCMD_HIRD_SHIFT                 (24U)
N#define USBHSH_USBCMD_HIRD(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_HIRD_SHIFT)) & USBHSH_USBCMD_HIRD_MASK)
N#define USBHSH_USBCMD_LPM_RWU_MASK               (0x10000000U)
N#define USBHSH_USBCMD_LPM_RWU_SHIFT              (28U)
N#define USBHSH_USBCMD_LPM_RWU(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_USBCMD_LPM_RWU_SHIFT)) & USBHSH_USBCMD_LPM_RWU_MASK)
N
N/*! @name USBSTS - USB Interrupt Status register */
N#define USBHSH_USBSTS_PCD_MASK                   (0x4U)
N#define USBHSH_USBSTS_PCD_SHIFT                  (2U)
N#define USBHSH_USBSTS_PCD(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_USBSTS_PCD_SHIFT)) & USBHSH_USBSTS_PCD_MASK)
N#define USBHSH_USBSTS_FLR_MASK                   (0x8U)
N#define USBHSH_USBSTS_FLR_SHIFT                  (3U)
N#define USBHSH_USBSTS_FLR(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_USBSTS_FLR_SHIFT)) & USBHSH_USBSTS_FLR_MASK)
N#define USBHSH_USBSTS_ATL_IRQ_MASK               (0x10000U)
N#define USBHSH_USBSTS_ATL_IRQ_SHIFT              (16U)
N#define USBHSH_USBSTS_ATL_IRQ(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_USBSTS_ATL_IRQ_SHIFT)) & USBHSH_USBSTS_ATL_IRQ_MASK)
N#define USBHSH_USBSTS_ISO_IRQ_MASK               (0x20000U)
N#define USBHSH_USBSTS_ISO_IRQ_SHIFT              (17U)
N#define USBHSH_USBSTS_ISO_IRQ(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_USBSTS_ISO_IRQ_SHIFT)) & USBHSH_USBSTS_ISO_IRQ_MASK)
N#define USBHSH_USBSTS_INT_IRQ_MASK               (0x40000U)
N#define USBHSH_USBSTS_INT_IRQ_SHIFT              (18U)
N#define USBHSH_USBSTS_INT_IRQ(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_USBSTS_INT_IRQ_SHIFT)) & USBHSH_USBSTS_INT_IRQ_MASK)
N#define USBHSH_USBSTS_SOF_IRQ_MASK               (0x80000U)
N#define USBHSH_USBSTS_SOF_IRQ_SHIFT              (19U)
N#define USBHSH_USBSTS_SOF_IRQ(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_USBSTS_SOF_IRQ_SHIFT)) & USBHSH_USBSTS_SOF_IRQ_MASK)
N
N/*! @name USBINTR - USB Interrupt Enable register */
N#define USBHSH_USBINTR_PCDE_MASK                 (0x4U)
N#define USBHSH_USBINTR_PCDE_SHIFT                (2U)
N#define USBHSH_USBINTR_PCDE(x)                   (((uint32_t)(((uint32_t)(x)) << USBHSH_USBINTR_PCDE_SHIFT)) & USBHSH_USBINTR_PCDE_MASK)
N#define USBHSH_USBINTR_FLRE_MASK                 (0x8U)
N#define USBHSH_USBINTR_FLRE_SHIFT                (3U)
N#define USBHSH_USBINTR_FLRE(x)                   (((uint32_t)(((uint32_t)(x)) << USBHSH_USBINTR_FLRE_SHIFT)) & USBHSH_USBINTR_FLRE_MASK)
N#define USBHSH_USBINTR_ATL_IRQ_E_MASK            (0x10000U)
N#define USBHSH_USBINTR_ATL_IRQ_E_SHIFT           (16U)
N#define USBHSH_USBINTR_ATL_IRQ_E(x)              (((uint32_t)(((uint32_t)(x)) << USBHSH_USBINTR_ATL_IRQ_E_SHIFT)) & USBHSH_USBINTR_ATL_IRQ_E_MASK)
N#define USBHSH_USBINTR_ISO_IRQ_E_MASK            (0x20000U)
N#define USBHSH_USBINTR_ISO_IRQ_E_SHIFT           (17U)
N#define USBHSH_USBINTR_ISO_IRQ_E(x)              (((uint32_t)(((uint32_t)(x)) << USBHSH_USBINTR_ISO_IRQ_E_SHIFT)) & USBHSH_USBINTR_ISO_IRQ_E_MASK)
N#define USBHSH_USBINTR_INT_IRQ_E_MASK            (0x40000U)
N#define USBHSH_USBINTR_INT_IRQ_E_SHIFT           (18U)
N#define USBHSH_USBINTR_INT_IRQ_E(x)              (((uint32_t)(((uint32_t)(x)) << USBHSH_USBINTR_INT_IRQ_E_SHIFT)) & USBHSH_USBINTR_INT_IRQ_E_MASK)
N#define USBHSH_USBINTR_SOF_E_MASK                (0x80000U)
N#define USBHSH_USBINTR_SOF_E_SHIFT               (19U)
N#define USBHSH_USBINTR_SOF_E(x)                  (((uint32_t)(((uint32_t)(x)) << USBHSH_USBINTR_SOF_E_SHIFT)) & USBHSH_USBINTR_SOF_E_MASK)
N
N/*! @name PORTSC1 - Port Status and Control register */
N#define USBHSH_PORTSC1_CCS_MASK                  (0x1U)
N#define USBHSH_PORTSC1_CCS_SHIFT                 (0U)
N#define USBHSH_PORTSC1_CCS(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_CCS_SHIFT)) & USBHSH_PORTSC1_CCS_MASK)
N#define USBHSH_PORTSC1_CSC_MASK                  (0x2U)
N#define USBHSH_PORTSC1_CSC_SHIFT                 (1U)
N#define USBHSH_PORTSC1_CSC(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_CSC_SHIFT)) & USBHSH_PORTSC1_CSC_MASK)
N#define USBHSH_PORTSC1_PED_MASK                  (0x4U)
N#define USBHSH_PORTSC1_PED_SHIFT                 (2U)
N#define USBHSH_PORTSC1_PED(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PED_SHIFT)) & USBHSH_PORTSC1_PED_MASK)
N#define USBHSH_PORTSC1_PEDC_MASK                 (0x8U)
N#define USBHSH_PORTSC1_PEDC_SHIFT                (3U)
N#define USBHSH_PORTSC1_PEDC(x)                   (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PEDC_SHIFT)) & USBHSH_PORTSC1_PEDC_MASK)
N#define USBHSH_PORTSC1_OCA_MASK                  (0x10U)
N#define USBHSH_PORTSC1_OCA_SHIFT                 (4U)
N#define USBHSH_PORTSC1_OCA(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_OCA_SHIFT)) & USBHSH_PORTSC1_OCA_MASK)
N#define USBHSH_PORTSC1_OCC_MASK                  (0x20U)
N#define USBHSH_PORTSC1_OCC_SHIFT                 (5U)
N#define USBHSH_PORTSC1_OCC(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_OCC_SHIFT)) & USBHSH_PORTSC1_OCC_MASK)
N#define USBHSH_PORTSC1_FPR_MASK                  (0x40U)
N#define USBHSH_PORTSC1_FPR_SHIFT                 (6U)
N#define USBHSH_PORTSC1_FPR(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_FPR_SHIFT)) & USBHSH_PORTSC1_FPR_MASK)
N#define USBHSH_PORTSC1_SUSP_MASK                 (0x80U)
N#define USBHSH_PORTSC1_SUSP_SHIFT                (7U)
N#define USBHSH_PORTSC1_SUSP(x)                   (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_SUSP_SHIFT)) & USBHSH_PORTSC1_SUSP_MASK)
N#define USBHSH_PORTSC1_PR_MASK                   (0x100U)
N#define USBHSH_PORTSC1_PR_SHIFT                  (8U)
N#define USBHSH_PORTSC1_PR(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PR_SHIFT)) & USBHSH_PORTSC1_PR_MASK)
N#define USBHSH_PORTSC1_SUS_L1_MASK               (0x200U)
N#define USBHSH_PORTSC1_SUS_L1_SHIFT              (9U)
N#define USBHSH_PORTSC1_SUS_L1(x)                 (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_SUS_L1_SHIFT)) & USBHSH_PORTSC1_SUS_L1_MASK)
N#define USBHSH_PORTSC1_LS_MASK                   (0xC00U)
N#define USBHSH_PORTSC1_LS_SHIFT                  (10U)
N#define USBHSH_PORTSC1_LS(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_LS_SHIFT)) & USBHSH_PORTSC1_LS_MASK)
N#define USBHSH_PORTSC1_PP_MASK                   (0x1000U)
N#define USBHSH_PORTSC1_PP_SHIFT                  (12U)
N#define USBHSH_PORTSC1_PP(x)                     (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PP_SHIFT)) & USBHSH_PORTSC1_PP_MASK)
N#define USBHSH_PORTSC1_PIC_MASK                  (0xC000U)
N#define USBHSH_PORTSC1_PIC_SHIFT                 (14U)
N#define USBHSH_PORTSC1_PIC(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PIC_SHIFT)) & USBHSH_PORTSC1_PIC_MASK)
N#define USBHSH_PORTSC1_PTC_MASK                  (0xF0000U)
N#define USBHSH_PORTSC1_PTC_SHIFT                 (16U)
N#define USBHSH_PORTSC1_PTC(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PTC_SHIFT)) & USBHSH_PORTSC1_PTC_MASK)
N#define USBHSH_PORTSC1_PSPD_MASK                 (0x300000U)
N#define USBHSH_PORTSC1_PSPD_SHIFT                (20U)
N#define USBHSH_PORTSC1_PSPD(x)                   (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_PSPD_SHIFT)) & USBHSH_PORTSC1_PSPD_MASK)
N#define USBHSH_PORTSC1_WOO_MASK                  (0x400000U)
N#define USBHSH_PORTSC1_WOO_SHIFT                 (22U)
N#define USBHSH_PORTSC1_WOO(x)                    (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_WOO_SHIFT)) & USBHSH_PORTSC1_WOO_MASK)
N#define USBHSH_PORTSC1_SUS_STAT_MASK             (0x1800000U)
N#define USBHSH_PORTSC1_SUS_STAT_SHIFT            (23U)
N#define USBHSH_PORTSC1_SUS_STAT(x)               (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_SUS_STAT_SHIFT)) & USBHSH_PORTSC1_SUS_STAT_MASK)
N#define USBHSH_PORTSC1_DEV_ADD_MASK              (0xFE000000U)
N#define USBHSH_PORTSC1_DEV_ADD_SHIFT             (25U)
N#define USBHSH_PORTSC1_DEV_ADD(x)                (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTSC1_DEV_ADD_SHIFT)) & USBHSH_PORTSC1_DEV_ADD_MASK)
N
N/*! @name ATL_PTD_DONE_MAP - Done map for each ATL PTD */
N#define USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_MASK    (0xFFFFFFFFU)
N#define USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_SHIFT   (0U)
N#define USBHSH_ATL_PTD_DONE_MAP_ATL_DONE(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_SHIFT)) & USBHSH_ATL_PTD_DONE_MAP_ATL_DONE_MASK)
N
N/*! @name ATL_PTD_SKIP_MAP - Skip map for each ATL PTD */
N#define USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_MASK    (0xFFFFFFFFU)
N#define USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_SHIFT   (0U)
N#define USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_SHIFT)) & USBHSH_ATL_PTD_SKIP_MAP_ATL_SKIP_MASK)
N
N/*! @name ISO_PTD_DONE_MAP - Done map for each ISO PTD */
N#define USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_MASK    (0xFFFFFFFFU)
N#define USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_SHIFT   (0U)
N#define USBHSH_ISO_PTD_DONE_MAP_ISO_DONE(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_SHIFT)) & USBHSH_ISO_PTD_DONE_MAP_ISO_DONE_MASK)
N
N/*! @name ISO_PTD_SKIP_MAP - Skip map for each ISO PTD */
N#define USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_MASK    (0xFFFFFFFFU)
N#define USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_SHIFT   (0U)
N#define USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_SHIFT)) & USBHSH_ISO_PTD_SKIP_MAP_ISO_SKIP_MASK)
N
N/*! @name INT_PTD_DONE_MAP - Done map for each INT PTD */
N#define USBHSH_INT_PTD_DONE_MAP_INT_DONE_MASK    (0xFFFFFFFFU)
N#define USBHSH_INT_PTD_DONE_MAP_INT_DONE_SHIFT   (0U)
N#define USBHSH_INT_PTD_DONE_MAP_INT_DONE(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_DONE_MAP_INT_DONE_SHIFT)) & USBHSH_INT_PTD_DONE_MAP_INT_DONE_MASK)
N
N/*! @name INT_PTD_SKIP_MAP - Skip map for each INT PTD */
N#define USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_MASK    (0xFFFFFFFFU)
N#define USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_SHIFT   (0U)
N#define USBHSH_INT_PTD_SKIP_MAP_INT_SKIP(x)      (((uint32_t)(((uint32_t)(x)) << USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_SHIFT)) & USBHSH_INT_PTD_SKIP_MAP_INT_SKIP_MASK)
N
N/*! @name LAST_PTD_INUSE - Marks the last PTD in the list for ISO, INT and ATL */
N#define USBHSH_LAST_PTD_INUSE_ATL_LAST_MASK      (0x1FU)
N#define USBHSH_LAST_PTD_INUSE_ATL_LAST_SHIFT     (0U)
N#define USBHSH_LAST_PTD_INUSE_ATL_LAST(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_LAST_PTD_INUSE_ATL_LAST_SHIFT)) & USBHSH_LAST_PTD_INUSE_ATL_LAST_MASK)
N#define USBHSH_LAST_PTD_INUSE_ISO_LAST_MASK      (0x1F00U)
N#define USBHSH_LAST_PTD_INUSE_ISO_LAST_SHIFT     (8U)
N#define USBHSH_LAST_PTD_INUSE_ISO_LAST(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_LAST_PTD_INUSE_ISO_LAST_SHIFT)) & USBHSH_LAST_PTD_INUSE_ISO_LAST_MASK)
N#define USBHSH_LAST_PTD_INUSE_INT_LAST_MASK      (0x1F0000U)
N#define USBHSH_LAST_PTD_INUSE_INT_LAST_SHIFT     (16U)
N#define USBHSH_LAST_PTD_INUSE_INT_LAST(x)        (((uint32_t)(((uint32_t)(x)) << USBHSH_LAST_PTD_INUSE_INT_LAST_SHIFT)) & USBHSH_LAST_PTD_INUSE_INT_LAST_MASK)
N
N/*! @name UTMIPLUS_ULPI_DEBUG - Register to read/write registers in the attached USB PHY */
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_MASK (0xFFU)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_SHIFT (0U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR(x)   (((uint32_t)(((uint32_t)(x)) << USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_SHIFT)) & USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ADDR_MASK)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_MASK (0xFF00U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_SHIFT (8U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA(x)  (((uint32_t)(((uint32_t)(x)) << USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_SHIFT)) & USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_WDATA_MASK)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_MASK (0xFF0000U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_SHIFT (16U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA(x)  (((uint32_t)(((uint32_t)(x)) << USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_SHIFT)) & USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RDATA_MASK)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_MASK   (0x1000000U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_SHIFT  (24U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW(x)     (((uint32_t)(((uint32_t)(x)) << USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_SHIFT)) & USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_RW_MASK)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_MASK (0x2000000U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_SHIFT (25U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS(x) (((uint32_t)(((uint32_t)(x)) << USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_SHIFT)) & USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_ACCESS_MASK)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_MASK (0x80000000U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_SHIFT (31U)
N#define USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE(x)   (((uint32_t)(((uint32_t)(x)) << USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_SHIFT)) & USBHSH_UTMIPLUS_ULPI_DEBUG_PHY_MODE_MASK)
N
N/*! @name PORTMODE - Controls the port if it is attached to the host block or the device block */
N#define USBHSH_PORTMODE_ID0_MASK                 (0x1U)
N#define USBHSH_PORTMODE_ID0_SHIFT                (0U)
N#define USBHSH_PORTMODE_ID0(x)                   (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTMODE_ID0_SHIFT)) & USBHSH_PORTMODE_ID0_MASK)
N#define USBHSH_PORTMODE_ID0_EN_MASK              (0x100U)
N#define USBHSH_PORTMODE_ID0_EN_SHIFT             (8U)
N#define USBHSH_PORTMODE_ID0_EN(x)                (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTMODE_ID0_EN_SHIFT)) & USBHSH_PORTMODE_ID0_EN_MASK)
N#define USBHSH_PORTMODE_DEV_ENABLE_MASK          (0x10000U)
N#define USBHSH_PORTMODE_DEV_ENABLE_SHIFT         (16U)
N#define USBHSH_PORTMODE_DEV_ENABLE(x)            (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTMODE_DEV_ENABLE_SHIFT)) & USBHSH_PORTMODE_DEV_ENABLE_MASK)
N#define USBHSH_PORTMODE_SW_CTRL_PDCOM_MASK       (0x40000U)
N#define USBHSH_PORTMODE_SW_CTRL_PDCOM_SHIFT      (18U)
N#define USBHSH_PORTMODE_SW_CTRL_PDCOM(x)         (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTMODE_SW_CTRL_PDCOM_SHIFT)) & USBHSH_PORTMODE_SW_CTRL_PDCOM_MASK)
N#define USBHSH_PORTMODE_SW_PDCOM_MASK            (0x80000U)
N#define USBHSH_PORTMODE_SW_PDCOM_SHIFT           (19U)
N#define USBHSH_PORTMODE_SW_PDCOM(x)              (((uint32_t)(((uint32_t)(x)) << USBHSH_PORTMODE_SW_PDCOM_SHIFT)) & USBHSH_PORTMODE_SW_PDCOM_MASK)
N
N
N/*!
N * @}
N */ /* end of group USBHSH_Register_Masks */
N
N
N/* USBHSH - Peripheral instance base addresses */
N/** Peripheral USBHSH base address */
N#define USBHSH_BASE                              (0x400A3000u)
N/** Peripheral USBHSH base pointer */
N#define USBHSH                                   ((USBHSH_Type *)USBHSH_BASE)
N/** Array initializer of USBHSH peripheral base addresses */
N#define USBHSH_BASE_ADDRS                        { USBHSH_BASE }
N/** Array initializer of USBHSH peripheral base pointers */
N#define USBHSH_BASE_PTRS                         { USBHSH }
N/** Interrupt vectors for the USBHSH peripheral type */
N#define USBHSH_IRQS                              { USB1_IRQn }
N#define USBHSH_NEEDCLK_IRQS                      { USB1_NEEDCLK_IRQn }
N
N/*!
N * @}
N */ /* end of group USBHSH_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- UTICK Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UTICK_Peripheral_Access_Layer UTICK Peripheral Access Layer
N * @{
N */
N
N/** UTICK - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CTRL;                              /**< Control register., offset: 0x0 */
X  volatile uint32_t CTRL;                               
N  __IO uint32_t STAT;                              /**< Status register., offset: 0x4 */
X  volatile uint32_t STAT;                               
N  __IO uint32_t CFG;                               /**< Capture configuration register., offset: 0x8 */
X  volatile uint32_t CFG;                                
N  __O  uint32_t CAPCLR;                            /**< Capture clear register., offset: 0xC */
X  volatile  uint32_t CAPCLR;                             
N  __I  uint32_t CAP[4];                            /**< Capture register ., array offset: 0x10, array step: 0x4 */
X  volatile const  uint32_t CAP[4];                             
N} UTICK_Type;
N
N/* ----------------------------------------------------------------------------
N   -- UTICK Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UTICK_Register_Masks UTICK Register Masks
N * @{
N */
N
N/*! @name CTRL - Control register. */
N#define UTICK_CTRL_DELAYVAL_MASK                 (0x7FFFFFFFU)
N#define UTICK_CTRL_DELAYVAL_SHIFT                (0U)
N#define UTICK_CTRL_DELAYVAL(x)                   (((uint32_t)(((uint32_t)(x)) << UTICK_CTRL_DELAYVAL_SHIFT)) & UTICK_CTRL_DELAYVAL_MASK)
N#define UTICK_CTRL_REPEAT_MASK                   (0x80000000U)
N#define UTICK_CTRL_REPEAT_SHIFT                  (31U)
N#define UTICK_CTRL_REPEAT(x)                     (((uint32_t)(((uint32_t)(x)) << UTICK_CTRL_REPEAT_SHIFT)) & UTICK_CTRL_REPEAT_MASK)
N
N/*! @name STAT - Status register. */
N#define UTICK_STAT_INTR_MASK                     (0x1U)
N#define UTICK_STAT_INTR_SHIFT                    (0U)
N#define UTICK_STAT_INTR(x)                       (((uint32_t)(((uint32_t)(x)) << UTICK_STAT_INTR_SHIFT)) & UTICK_STAT_INTR_MASK)
N#define UTICK_STAT_ACTIVE_MASK                   (0x2U)
N#define UTICK_STAT_ACTIVE_SHIFT                  (1U)
N#define UTICK_STAT_ACTIVE(x)                     (((uint32_t)(((uint32_t)(x)) << UTICK_STAT_ACTIVE_SHIFT)) & UTICK_STAT_ACTIVE_MASK)
N
N/*! @name CFG - Capture configuration register. */
N#define UTICK_CFG_CAPEN0_MASK                    (0x1U)
N#define UTICK_CFG_CAPEN0_SHIFT                   (0U)
N#define UTICK_CFG_CAPEN0(x)                      (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPEN0_SHIFT)) & UTICK_CFG_CAPEN0_MASK)
N#define UTICK_CFG_CAPEN1_MASK                    (0x2U)
N#define UTICK_CFG_CAPEN1_SHIFT                   (1U)
N#define UTICK_CFG_CAPEN1(x)                      (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPEN1_SHIFT)) & UTICK_CFG_CAPEN1_MASK)
N#define UTICK_CFG_CAPEN2_MASK                    (0x4U)
N#define UTICK_CFG_CAPEN2_SHIFT                   (2U)
N#define UTICK_CFG_CAPEN2(x)                      (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPEN2_SHIFT)) & UTICK_CFG_CAPEN2_MASK)
N#define UTICK_CFG_CAPEN3_MASK                    (0x8U)
N#define UTICK_CFG_CAPEN3_SHIFT                   (3U)
N#define UTICK_CFG_CAPEN3(x)                      (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPEN3_SHIFT)) & UTICK_CFG_CAPEN3_MASK)
N#define UTICK_CFG_CAPPOL0_MASK                   (0x100U)
N#define UTICK_CFG_CAPPOL0_SHIFT                  (8U)
N#define UTICK_CFG_CAPPOL0(x)                     (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPPOL0_SHIFT)) & UTICK_CFG_CAPPOL0_MASK)
N#define UTICK_CFG_CAPPOL1_MASK                   (0x200U)
N#define UTICK_CFG_CAPPOL1_SHIFT                  (9U)
N#define UTICK_CFG_CAPPOL1(x)                     (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPPOL1_SHIFT)) & UTICK_CFG_CAPPOL1_MASK)
N#define UTICK_CFG_CAPPOL2_MASK                   (0x400U)
N#define UTICK_CFG_CAPPOL2_SHIFT                  (10U)
N#define UTICK_CFG_CAPPOL2(x)                     (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPPOL2_SHIFT)) & UTICK_CFG_CAPPOL2_MASK)
N#define UTICK_CFG_CAPPOL3_MASK                   (0x800U)
N#define UTICK_CFG_CAPPOL3_SHIFT                  (11U)
N#define UTICK_CFG_CAPPOL3(x)                     (((uint32_t)(((uint32_t)(x)) << UTICK_CFG_CAPPOL3_SHIFT)) & UTICK_CFG_CAPPOL3_MASK)
N
N/*! @name CAPCLR - Capture clear register. */
N#define UTICK_CAPCLR_CAPCLR0_MASK                (0x1U)
N#define UTICK_CAPCLR_CAPCLR0_SHIFT               (0U)
N#define UTICK_CAPCLR_CAPCLR0(x)                  (((uint32_t)(((uint32_t)(x)) << UTICK_CAPCLR_CAPCLR0_SHIFT)) & UTICK_CAPCLR_CAPCLR0_MASK)
N#define UTICK_CAPCLR_CAPCLR1_MASK                (0x2U)
N#define UTICK_CAPCLR_CAPCLR1_SHIFT               (1U)
N#define UTICK_CAPCLR_CAPCLR1(x)                  (((uint32_t)(((uint32_t)(x)) << UTICK_CAPCLR_CAPCLR1_SHIFT)) & UTICK_CAPCLR_CAPCLR1_MASK)
N#define UTICK_CAPCLR_CAPCLR2_MASK                (0x4U)
N#define UTICK_CAPCLR_CAPCLR2_SHIFT               (2U)
N#define UTICK_CAPCLR_CAPCLR2(x)                  (((uint32_t)(((uint32_t)(x)) << UTICK_CAPCLR_CAPCLR2_SHIFT)) & UTICK_CAPCLR_CAPCLR2_MASK)
N#define UTICK_CAPCLR_CAPCLR3_MASK                (0x8U)
N#define UTICK_CAPCLR_CAPCLR3_SHIFT               (3U)
N#define UTICK_CAPCLR_CAPCLR3(x)                  (((uint32_t)(((uint32_t)(x)) << UTICK_CAPCLR_CAPCLR3_SHIFT)) & UTICK_CAPCLR_CAPCLR3_MASK)
N
N/*! @name CAP - Capture register . */
N#define UTICK_CAP_CAP_VALUE_MASK                 (0x7FFFFFFFU)
N#define UTICK_CAP_CAP_VALUE_SHIFT                (0U)
N#define UTICK_CAP_CAP_VALUE(x)                   (((uint32_t)(((uint32_t)(x)) << UTICK_CAP_CAP_VALUE_SHIFT)) & UTICK_CAP_CAP_VALUE_MASK)
N#define UTICK_CAP_VALID_MASK                     (0x80000000U)
N#define UTICK_CAP_VALID_SHIFT                    (31U)
N#define UTICK_CAP_VALID(x)                       (((uint32_t)(((uint32_t)(x)) << UTICK_CAP_VALID_SHIFT)) & UTICK_CAP_VALID_MASK)
N
N/* The count of UTICK_CAP */
N#define UTICK_CAP_COUNT                          (4U)
N
N
N/*!
N * @}
N */ /* end of group UTICK_Register_Masks */
N
N
N/* UTICK - Peripheral instance base addresses */
N/** Peripheral UTICK0 base address */
N#define UTICK0_BASE                              (0x4000E000u)
N/** Peripheral UTICK0 base pointer */
N#define UTICK0                                   ((UTICK_Type *)UTICK0_BASE)
N/** Array initializer of UTICK peripheral base addresses */
N#define UTICK_BASE_ADDRS                         { UTICK0_BASE }
N/** Array initializer of UTICK peripheral base pointers */
N#define UTICK_BASE_PTRS                          { UTICK0 }
N/** Interrupt vectors for the UTICK peripheral type */
N#define UTICK_IRQS                               { UTICK0_IRQn }
N
N/*!
N * @}
N */ /* end of group UTICK_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- WWDT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup WWDT_Peripheral_Access_Layer WWDT Peripheral Access Layer
N * @{
N */
N
N/** WWDT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t MOD;                               /**< Watchdog mode register. This register contains the basic mode and status of the Watchdog Timer., offset: 0x0 */
X  volatile uint32_t MOD;                                
N  __IO uint32_t TC;                                /**< Watchdog timer constant register. This 24-bit register determines the time-out value., offset: 0x4 */
X  volatile uint32_t TC;                                 
N  __O  uint32_t FEED;                              /**< Watchdog feed sequence register. Writing 0xAA followed by 0x55 to this register reloads the Watchdog timer with the value contained in TC., offset: 0x8 */
X  volatile  uint32_t FEED;                               
N  __I  uint32_t TV;                                /**< Watchdog timer value register. This 24-bit register reads out the current value of the Watchdog timer., offset: 0xC */
X  volatile const  uint32_t TV;                                 
N       uint8_t RESERVED_0[4];
N  __IO uint32_t WARNINT;                           /**< Watchdog Warning Interrupt compare value., offset: 0x14 */
X  volatile uint32_t WARNINT;                            
N  __IO uint32_t WINDOW;                            /**< Watchdog Window compare value., offset: 0x18 */
X  volatile uint32_t WINDOW;                             
N} WWDT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- WWDT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup WWDT_Register_Masks WWDT Register Masks
N * @{
N */
N
N/*! @name MOD - Watchdog mode register. This register contains the basic mode and status of the Watchdog Timer. */
N#define WWDT_MOD_WDEN_MASK                       (0x1U)
N#define WWDT_MOD_WDEN_SHIFT                      (0U)
N#define WWDT_MOD_WDEN(x)                         (((uint32_t)(((uint32_t)(x)) << WWDT_MOD_WDEN_SHIFT)) & WWDT_MOD_WDEN_MASK)
N#define WWDT_MOD_WDRESET_MASK                    (0x2U)
N#define WWDT_MOD_WDRESET_SHIFT                   (1U)
N#define WWDT_MOD_WDRESET(x)                      (((uint32_t)(((uint32_t)(x)) << WWDT_MOD_WDRESET_SHIFT)) & WWDT_MOD_WDRESET_MASK)
N#define WWDT_MOD_WDTOF_MASK                      (0x4U)
N#define WWDT_MOD_WDTOF_SHIFT                     (2U)
N#define WWDT_MOD_WDTOF(x)                        (((uint32_t)(((uint32_t)(x)) << WWDT_MOD_WDTOF_SHIFT)) & WWDT_MOD_WDTOF_MASK)
N#define WWDT_MOD_WDINT_MASK                      (0x8U)
N#define WWDT_MOD_WDINT_SHIFT                     (3U)
N#define WWDT_MOD_WDINT(x)                        (((uint32_t)(((uint32_t)(x)) << WWDT_MOD_WDINT_SHIFT)) & WWDT_MOD_WDINT_MASK)
N#define WWDT_MOD_WDPROTECT_MASK                  (0x10U)
N#define WWDT_MOD_WDPROTECT_SHIFT                 (4U)
N#define WWDT_MOD_WDPROTECT(x)                    (((uint32_t)(((uint32_t)(x)) << WWDT_MOD_WDPROTECT_SHIFT)) & WWDT_MOD_WDPROTECT_MASK)
N#define WWDT_MOD_LOCK_MASK                       (0x20U)
N#define WWDT_MOD_LOCK_SHIFT                      (5U)
N#define WWDT_MOD_LOCK(x)                         (((uint32_t)(((uint32_t)(x)) << WWDT_MOD_LOCK_SHIFT)) & WWDT_MOD_LOCK_MASK)
N
N/*! @name TC - Watchdog timer constant register. This 24-bit register determines the time-out value. */
N#define WWDT_TC_COUNT_MASK                       (0xFFFFFFU)
N#define WWDT_TC_COUNT_SHIFT                      (0U)
N#define WWDT_TC_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << WWDT_TC_COUNT_SHIFT)) & WWDT_TC_COUNT_MASK)
N
N/*! @name FEED - Watchdog feed sequence register. Writing 0xAA followed by 0x55 to this register reloads the Watchdog timer with the value contained in TC. */
N#define WWDT_FEED_FEED_MASK                      (0xFFU)
N#define WWDT_FEED_FEED_SHIFT                     (0U)
N#define WWDT_FEED_FEED(x)                        (((uint32_t)(((uint32_t)(x)) << WWDT_FEED_FEED_SHIFT)) & WWDT_FEED_FEED_MASK)
N
N/*! @name TV - Watchdog timer value register. This 24-bit register reads out the current value of the Watchdog timer. */
N#define WWDT_TV_COUNT_MASK                       (0xFFFFFFU)
N#define WWDT_TV_COUNT_SHIFT                      (0U)
N#define WWDT_TV_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << WWDT_TV_COUNT_SHIFT)) & WWDT_TV_COUNT_MASK)
N
N/*! @name WARNINT - Watchdog Warning Interrupt compare value. */
N#define WWDT_WARNINT_WARNINT_MASK                (0x3FFU)
N#define WWDT_WARNINT_WARNINT_SHIFT               (0U)
N#define WWDT_WARNINT_WARNINT(x)                  (((uint32_t)(((uint32_t)(x)) << WWDT_WARNINT_WARNINT_SHIFT)) & WWDT_WARNINT_WARNINT_MASK)
N
N/*! @name WINDOW - Watchdog Window compare value. */
N#define WWDT_WINDOW_WINDOW_MASK                  (0xFFFFFFU)
N#define WWDT_WINDOW_WINDOW_SHIFT                 (0U)
N#define WWDT_WINDOW_WINDOW(x)                    (((uint32_t)(((uint32_t)(x)) << WWDT_WINDOW_WINDOW_SHIFT)) & WWDT_WINDOW_WINDOW_MASK)
N
N
N/*!
N * @}
N */ /* end of group WWDT_Register_Masks */
N
N
N/* WWDT - Peripheral instance base addresses */
N/** Peripheral WWDT base address */
N#define WWDT_BASE                                (0x4000C000u)
N/** Peripheral WWDT base pointer */
N#define WWDT                                     ((WWDT_Type *)WWDT_BASE)
N/** Array initializer of WWDT peripheral base addresses */
N#define WWDT_BASE_ADDRS                          { WWDT_BASE }
N/** Array initializer of WWDT peripheral base pointers */
N#define WWDT_BASE_PTRS                           { WWDT }
N/** Interrupt vectors for the WWDT peripheral type */
N#define WWDT_IRQS                                { WDT_BOD_IRQn }
N
N/*!
N * @}
N */ /* end of group WWDT_Peripheral_Access_Layer */
N
N
N/*
N** End of section using anonymous unions
N*/
N
N#if defined(__ARMCC_VERSION)
X#if 1L
N  #pragma pop
N#elif defined(__GNUC__)
S  /* leave anonymous unions enabled */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=default
S#else
S  #error Not supported compiler type
N#endif
N
N/*!
N * @}
N */ /* end of group Peripheral_access_layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- Macros for use with bit field definitions (xxx_SHIFT, xxx_MASK).
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Bit_Field_Generic_Macros Macros for use with bit field definitions (xxx_SHIFT, xxx_MASK).
N * @{
N */
N
N#if defined(__ARMCC_VERSION)
X#if 1L
N  #if (__ARMCC_VERSION >= 6010050)
X  #if (5060422 >= 6010050)
S    #pragma clang system_header
N  #endif
N#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma system_include
N#endif
N
N/**
N * @brief Mask and left-shift a bit field value for use in a register bit range.
N * @param field Name of the register bit field.
N * @param value Value of the bit field.
N * @return Masked and shifted value.
N */
N#define NXP_VAL2FLD(field, value)    (((value) << (field ## _SHIFT)) & (field ## _MASK))
N/**
N * @brief Mask and right-shift a register value to extract a bit field value.
N * @param field Name of the register bit field.
N * @param value Value of the register.
N * @return Masked and shifted bit field value.
N */
N#define NXP_FLD2VAL(field, value)    (((value) & (field ## _MASK)) >> (field ## _SHIFT))
N
N/*!
N * @}
N */ /* end of group Bit_Field_Generic_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- SDK Compatibility
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SDK_Compatibility_Symbols SDK Compatibility
N * @{
N */
N
N/** EMC CS base address */
N#define EMC_CS0_BASE                                (0x80000000u)
N#define EMC_CS1_BASE                                (0x90000000u)
N#define EMC_CS2_BASE                                (0x98000000u)
N#define EMC_CS3_BASE                                (0x9C000000u)
N#define EMC_DYCS0_BASE                              (0xA0000000u)
N#define EMC_DYCS1_BASE                              (0xB0000000u)
N#define EMC_DYCS2_BASE                              (0xC0000000u)
N#define EMC_DYCS3_BASE                              (0xD0000000u)
N#define EMC_CS_ADDRESS                              {EMC_CS0_BASE, EMC_CS1_BASE, EMC_CS2_BASE, EMC_CS3_BASE}
N#define EMC_DYCS_ADDRESS                            {EMC_DYCS0_BASE, EMC_DYCS1_BASE, EMC_DYCS2_BASE, EMC_DYCS3_BASE}
N
N/** OTP API */
Ntypedef struct {
N  uint32_t (*otpInit)(void);                                    /** Initializes OTP controller */
N  uint32_t (*otpEnableBankWriteMask)(uint32_t bankMask);        /** Unlock one or more OTP banks for write access */
N  uint32_t (*otpDisableBankWriteMask)(uint32_t bankMask);       /** Lock one or more OTP banks for write access */
N  uint32_t (*otpEnableBankWriteLock)(uint32_t bankIndex, uint32_t regEnableMask, uint32_t regDisableMask,
N                                          uint32_t lockWrite);  /** Locks or unlocks write access to a register of an OTP bank and the write lock */
N  uint32_t (*otpEnableBankReadLock)(uint32_t bankIndex, uint32_t regEnableMask, uint32_t regDisableMask,
N                                         uint32_t lockWrite);   /** Locks or unlocks read access to a register of an OTP bank and the write lock */
N  uint32_t (*otpProgramReg)(uint32_t bankIndex, uint32_t regIndex, uint32_t value);  /** Program a single register in an OTP bank */
N  uint32_t RESERVED_0[5];
N  uint32_t (*rngRead)(void);                                    /** Returns 32-bit number from hardware random number generator */
N  uint32_t (*otpGetDriverVersion)(void);                        /** Returns the version of the OTP driver in ROM */
N} OTP_API_Type;
N
N/** ROM API */
Ntypedef struct {
N  __I uint32_t usbdApiBase;                      /** USB API Base */
X  volatile const uint32_t usbdApiBase;                       
N      uint32_t RESERVED_0[13];
N  __I OTP_API_Type *otpApiBase;                  /** OTP API Base */
X  volatile const OTP_API_Type *otpApiBase;                   
N  __I uint32_t aesApiBase;                       /** AES API Base */
X  volatile const uint32_t aesApiBase;                        
N  __I uint32_t secureApiBase;                    /** Secure API Base */
X  volatile const uint32_t secureApiBase;                     
N} ROM_API_Type;
N
N/** ROM API base address */
N#define ROM_API_BASE                             (0x03000200u)
N/** ROM API base pointer */
N#define ROM_API                                  (*(ROM_API_Type**) ROM_API_BASE)
N/** OTP API base pointer */
N#define OTP_API                                  (ROM_API->otpApiBase)
N
N/*!
N * @}
N */ /* end of group SDK_Compatibility_Symbols */
N
N
N#endif  /* _LPC54608_H_ */
N
L 45 ".\SRC\System\fsl_device_registers.h" 2
N/* CPU specific feature definitions */
N#include "LPC54608_features.h"
L 1 ".\SRC\System\LPC54608_features.h" 1
N/*
N** ###################################################################
N**     Version:             rev. 1.0, 2016-08-12
N**     Build:               b161018
N**
N**     Abstract:
N**         Chip specific module features.
N**
N**     Copyright (c) 2016 Freescale Semiconductor, Inc.
N**     All rights reserved.
N**
N**     Redistribution and use in source and binary forms, with or without modification,
N**     are permitted provided that the following conditions are met:
N**
N**     o Redistributions of source code must retain the above copyright notice, this list
N**       of conditions and the following disclaimer.
N**
N**     o Redistributions in binary form must reproduce the above copyright notice, this
N**       list of conditions and the following disclaimer in the documentation and/or
N**       other materials provided with the distribution.
N**
N**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N**       contributors may be used to endorse or promote products derived from this
N**       software without specific prior written permission.
N**
N**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2016-08-12)
N**         Initial version.
N**
N** ###################################################################
N*/
N
N#ifndef _LPC54608_FEATURES_H_
N#define _LPC54608_FEATURES_H_
N
N/* SOC module features */
N
N/* @brief ADC availability on the SoC. */
N#define FSL_FEATURE_SOC_ADC_COUNT (1)
N/* @brief ASYNC_SYSCON availability on the SoC. */
N#define FSL_FEATURE_SOC_ASYNC_SYSCON_COUNT (1)
N/* @brief CRC availability on the SoC. */
N#define FSL_FEATURE_SOC_CRC_COUNT (1)
N/* @brief DMA availability on the SoC. */
N#define FSL_FEATURE_SOC_DMA_COUNT (1)
N/* @brief DMIC availability on the SoC. */
N#define FSL_FEATURE_SOC_DMIC_COUNT (1)
N/* @brief FLEXCOMM availability on the SoC. */
N#define FSL_FEATURE_SOC_FLEXCOMM_COUNT (10)
N/* @brief GINT availability on the SoC. */
N#define FSL_FEATURE_SOC_GINT_COUNT (2)
N/* @brief GPIO availability on the SoC. */
N#define FSL_FEATURE_SOC_GPIO_COUNT (1)
N/* @brief I2C availability on the SoC. */
N#define FSL_FEATURE_SOC_I2C_COUNT (10)
N/* @brief I2S availability on the SoC. */
N#define FSL_FEATURE_SOC_I2S_COUNT (2)
N/* @brief INPUTMUX availability on the SoC. */
N#define FSL_FEATURE_SOC_INPUTMUX_COUNT (1)
N/* @brief IOCON availability on the SoC. */
N#define FSL_FEATURE_SOC_IOCON_COUNT (1)
N/* @brief MRT availability on the SoC. */
N#define FSL_FEATURE_SOC_MRT_COUNT (1)
N/* @brief PINT availability on the SoC. */
N#define FSL_FEATURE_SOC_PINT_COUNT (1)
N/* @brief RTC availability on the SoC. */
N#define FSL_FEATURE_SOC_RTC_COUNT (1)
N/* @brief SCT availability on the SoC. */
N#define FSL_FEATURE_SOC_SCT_COUNT (1)
N/* @brief SPI availability on the SoC. */
N#define FSL_FEATURE_SOC_SPI_COUNT (10)
N/* @brief SPIFI availability on the SoC. */
N#define FSL_FEATURE_SOC_SPIFI_COUNT (1)
N/* @brief SYSCON availability on the SoC. */
N#define FSL_FEATURE_SOC_SYSCON_COUNT (1)
N/* @brief CTIMER availability on the SoC. */
N#define FSL_FEATURE_SOC_CTIMER_COUNT (5)
N/* @brief USART availability on the SoC. */
N#define FSL_FEATURE_SOC_USART_COUNT (10)
N/* @brief USB availability on the SoC. */
N#define FSL_FEATURE_SOC_USB_COUNT (1)
N/* @brief UTICK availability on the SoC. */
N#define FSL_FEATURE_SOC_UTICK_COUNT (1)
N/* @brief WWDT availability on the SoC. */
N#define FSL_FEATURE_SOC_WWDT_COUNT (1)
N/* @brief USBFSH availability on the SoC. */
N#define FSL_FEATURE_SOC_USBFSH_COUNT (1)
N/* @brief USBHSD availability on the SoC. */
N#define FSL_FEATURE_SOC_USBHSD_COUNT (1)
N/* @brief USBHSH availability on the SoC. */
N#define FSL_FEATURE_SOC_USBHSH_COUNT (1)
N/* @brief EEPROM availability on the SoC. */
N#define FSL_FEATURE_SOC_EEPROM_COUNT (1)
N/* @brief EMC availability on the SoC. */
N#define FSL_FEATURE_SOC_EMC_COUNT (1)
N/* @brief ENET availability on the SoC. */
N#define FSL_FEATURE_SOC_LPC_ENET_COUNT (1)
N/* @brief SDIF availability on the SoC. */
N#define FSL_FEATURE_SOC_SDIF_COUNT (1)
N/* @brief SMARTCARD availability on the SoC. */
N#define FSL_FEATURE_SOC_SMARTCARD_COUNT (2)
N/* @brief LCD availability on the SoC. */
N#define FSL_FEATURE_SOC_LCD_COUNT (1)
N/* @brief CAN availability on the SoC. */
N#define FSL_FEATURE_SOC_LPC_CAN_COUNT (2)
N/* @brief SHA availability on the SoC. */
N#define FSL_FEATURE_SOC_SHA_COUNT (0)
N/* @brief AES availability on the SoC. */
N#define FSL_FEATURE_SOC_AES_COUNT (0)
N/* @brief RIT availability on the SoC. */
N#define FSL_FEATURE_SOC_RIT_COUNT (1)
N/* @brief FMC availability on the SoC. */
N#define FSL_FEATURE_SOC_FMC_COUNT (1)
N/* @brief RNG availability on the SoC. */
N#define FSL_FEATURE_SOC_LPC_RNG_COUNT (1)
N
N/* DMA module features */
N
N/* @brief Number of channels */
N#define FSL_FEATURE_DMA_NUMBER_OF_CHANNELS (30)
N
N/* EEPROM module features */
N
N/* @brief Size of the EEPROM */
N#define FSL_FEATURE_EEPROM_SIZE (0x00004000)
N/* @brief Base address of the EEPROM */
N#define FSL_FEATURE_EEPROM_BASE_ADDRESS (0x40108000)
N/* @brief Page count of the EEPROM */
N#define FSL_FEATURE_EEPROM_PAGE_COUNT (128)
N/* @brief Command number for eeprom program */
N#define FSL_FEATURE_EEPROM_PROGRAM_CMD (6)
N/* @brief EEPROM internal clock freqency */
N#define FSL_FEATURE_EEPROM_INTERNAL_FREQ (1500000)
N
N/* IOCON module features */
N
N/* @brief Func bit field width */
N#define FSL_FEATURE_IOCON_FUNC_FIELD_WIDTH (4)
N
N/* PINT module features */
N
N/* @brief Number of connected outputs */
N#define FSL_FEATURE_PINT_NUMBER_OF_CONNECTED_OUTPUTS (8)
N
N/* SCT module features */
N
N/* @brief Number of events */
N#define FSL_FEATURE_SCT_NUMBER_OF_EVENTS (10)
N/* @brief Number of states */
N#define FSL_FEATURE_SCT_NUMBER_OF_STATES (10)
N/* @brief Number of match capture */
N#define FSL_FEATURE_SCT_NUMBER_OF_MATCH_CAPTURE (10)
N
N/* SDIF module features */
N
N/* @brief FIFO depth, every location is a WORD */
N#define FSL_FEATURE_SDIF_FIFO_DEPTH_64_32BITS  (64)
N/* @brief Max DMA buffer size */
N#define FSL_FEATURE_SDIF_INTERNAL_DMA_MAX_BUFFER_SIZE  (4096)
N
N/* SPIFI module features */
N
N/* @brief SPIFI start address */
N#define FSL_FEATURE_SPIFI_START_ADDR (0x10000000)
N/* @brief SPIFI end address */
N#define FSL_FEATURE_SPIFI_END_ADDR (0x17FFFFFF)
N
N/* SYSCON module features */
N
N/* @brief Pointer to ROM IAP entry functions */
N#define FSL_FEATURE_SYSCON_IAP_ENTRY_LOCATION (0x03000205)
N/* @brief Flash page size in bytes */
N#define FSL_FEATURE_SYSCON_FLASH_PAGE_SIZE_BYTES (256)
N/* @brief Flash sector size in bytes */
N#define FSL_FEATURE_SYSCON_FLASH_SECTOR_SIZE_BYTES (32768)
N/* @brief Flash size in bytes */
N#define FSL_FEATURE_SYSCON_FLASH_SIZE_BYTES (524288)
N
N/* USB module features */
N
N/* @brief Size of the USB dedicated RAM */
N#define FSL_FEATURE_USB_USB_RAM (0x00002000)
N/* @brief Base address of the USB dedicated RAM */
N#define FSL_FEATURE_USB_USB_RAM_BASE_ADDRESS (0x40100000)
N
N/* USBFSH module features */
N
N/* @brief Size of the USB dedicated RAM */
N#define FSL_FEATURE_USBFSH_USB_RAM (0x00002000)
N/* @brief Base address of the USB dedicated RAM */
N#define FSL_FEATURE_USBFSH_USB_RAM_BASE_ADDRESS (0x40100000)
N
N/* USBHSD module features */
N
N/* @brief Size of the USB dedicated RAM */
N#define FSL_FEATURE_USBHSD_USB_RAM (0x00002000)
N/* @brief Base address of the USB dedicated RAM */
N#define FSL_FEATURE_USBHSD_USB_RAM_BASE_ADDRESS (0x40100000)
N
N/* USBHSH module features */
N
N/* @brief Size of the USB dedicated RAM */
N#define FSL_FEATURE_USBHSH_USB_RAM (0x00002000)
N/* @brief Base address of the USB dedicated RAM */
N#define FSL_FEATURE_USBHSH_USB_RAM_BASE_ADDRESS (0x40100000)
N
N#endif /* _LPC54608_FEATURES_H_ */
N
L 47 ".\SRC\System\fsl_device_registers.h" 2
N
N#else
S    #error "No valid CPU defined!"
N#endif
N
N#endif /* __FSL_DEVICE_REGISTERS_H__ */
N
N/*******************************************************************************
N * EOF
N ******************************************************************************/
L 39 ".\SRC\Drivers\fsl_common.h" 2
N
N/*!
N * @addtogroup ksdk_common
N * @{
N */
N
N/*******************************************************************************
N * Definitions
N ******************************************************************************/
N
N/*! @brief Construct a status code value from a group and code number. */
N#define MAKE_STATUS(group, code) ((((group)*100) + (code)))
N
N/*! @brief Construct the version number for drivers. */
N#define MAKE_VERSION(major, minor, bugfix) (((major) << 16) | ((minor) << 8) | (bugfix))
N
N/* Debug console type definition. */
N#define DEBUG_CONSOLE_DEVICE_TYPE_NONE 0U     /*!< No debug console.             */
N#define DEBUG_CONSOLE_DEVICE_TYPE_UART 1U     /*!< Debug console base on UART.   */
N#define DEBUG_CONSOLE_DEVICE_TYPE_LPUART 2U   /*!< Debug console base on LPUART. */
N#define DEBUG_CONSOLE_DEVICE_TYPE_LPSCI 3U    /*!< Debug console base on LPSCI.  */
N#define DEBUG_CONSOLE_DEVICE_TYPE_USBCDC 4U   /*!< Debug console base on USBCDC. */
N#define DEBUG_CONSOLE_DEVICE_TYPE_FLEXCOMM 5U /*!< Debug console base on USBCDC. */
N
N/*! @brief Status group numbers. */
Nenum _status_groups
N{
N    kStatusGroup_Generic = 0,                 /*!< Group number for generic status codes. */
N    kStatusGroup_FLASH = 1,                   /*!< Group number for FLASH status codes. */
N    kStatusGroup_LPSPI = 4,                   /*!< Group number for LPSPI status codes. */
N    kStatusGroup_FLEXIO_SPI = 5,              /*!< Group number for FLEXIO SPI status codes. */
N    kStatusGroup_DSPI = 6,                    /*!< Group number for DSPI status codes. */
N    kStatusGroup_FLEXIO_UART = 7,             /*!< Group number for FLEXIO UART status codes. */
N    kStatusGroup_FLEXIO_I2C = 8,              /*!< Group number for FLEXIO I2C status codes. */
N    kStatusGroup_LPI2C = 9,                   /*!< Group number for LPI2C status codes. */
N    kStatusGroup_UART = 10,                   /*!< Group number for UART status codes. */
N    kStatusGroup_I2C = 11,                    /*!< Group number for UART status codes. */
N    kStatusGroup_LPSCI = 12,                  /*!< Group number for LPSCI status codes. */
N    kStatusGroup_LPUART = 13,                 /*!< Group number for LPUART status codes. */
N    kStatusGroup_SPI = 14,                    /*!< Group number for SPI status code.*/
N    kStatusGroup_XRDC = 15,                   /*!< Group number for XRDC status code.*/
N    kStatusGroup_SEMA42 = 16,                 /*!< Group number for SEMA42 status code.*/
N    kStatusGroup_SDHC = 17,                   /*!< Group number for SDHC status code */
N    kStatusGroup_SDMMC = 18,                  /*!< Group number for SDMMC status code */
N    kStatusGroup_SAI = 19,                    /*!< Group number for SAI status code */
N    kStatusGroup_MCG = 20,                    /*!< Group number for MCG status codes. */
N    kStatusGroup_SCG = 21,                    /*!< Group number for SCG status codes. */
N    kStatusGroup_SDSPI = 22,                  /*!< Group number for SDSPI status codes. */
N    kStatusGroup_FLEXIO_I2S = 23,             /*!< Group number for FLEXIO I2S status codes */
N    kStatusGroup_FLASHIAP = 25,               /*!< Group number for FLASHIAP status codes */
N    kStatusGroup_FLEXCOMM_I2C = 26,           /*!< Group number for FLEXCOMM I2C status codes */
N    kStatusGroup_I2S = 27,                    /*!< Group number for I2S status codes */
N    kStatusGroup_SDRAMC = 35,                 /*!< Group number for SDRAMC status codes. */
N    kStatusGroup_POWER = 39,                  /*!< Group number for POWER status codes. */
N    kStatusGroup_ENET = 40,                   /*!< Group number for ENET status codes. */
N    kStatusGroup_PHY = 41,                    /*!< Group number for PHY status codes. */
N    kStatusGroup_TRGMUX = 42,                 /*!< Group number for TRGMUX status codes. */
N    kStatusGroup_SMARTCARD = 43,              /*!< Group number for SMARTCARD status codes. */
N    kStatusGroup_LMEM = 44,                   /*!< Group number for LMEM status codes. */
N    kStatusGroup_QSPI = 45,                   /*!< Group number for QSPI status codes. */
N    kStatusGroup_DMA = 50,                    /*!< Group number for DMA status codes. */
N    kStatusGroup_EDMA = 51,                   /*!< Group number for EDMA status codes. */
N    kStatusGroup_DMAMGR = 52,                 /*!< Group number for DMAMGR status codes. */
N    kStatusGroup_FLEXCAN = 53,                /*!< Group number for FlexCAN status codes. */
N    kStatusGroup_LTC = 54,                    /*!< Group number for LTC status codes. */
N    kStatusGroup_FLEXIO_CAMERA = 55,          /*!< Group number for FLEXIO CAMERA status codes. */
N    kStatusGroup_LPC_SPI = 56,                /*!< Group number for LPC_SPI status codes. */
N    kStatusGroup_LPC_USART = 57,              /*!< Group number for LPC_USART status codes. */
N    kStatusGroup_DMIC = 58,                   /*!< Group number for DMIC status codes. */
N    kStatusGroup_SDIF = 59,                   /*!< Group number for SDIF status codes.*/
N    kStatusGroup_SPIFI = 60,                  /*!< Group number for SPIFI status codes. */
N    kStatusGroup_OTP = 61,                    /*!< Group number for OTP status codes. */
N    kStatusGroup_MCAN = 62,                  /*!< Group number for MCAN status codes. */
N    kStatusGroup_NOTIFIER = 98,               /*!< Group number for NOTIFIER status codes. */
N    kStatusGroup_DebugConsole = 99,           /*!< Group number for debug console status codes. */
N    kStatusGroup_ApplicationRangeStart = 100, /*!< Starting number for application groups. */
N};
N
N/*! @brief Generic status return codes. */
Nenum _generic_status
N{
N    kStatus_Success = MAKE_STATUS(kStatusGroup_Generic, 0),
X    kStatus_Success = ((((kStatusGroup_Generic)*100) + (0))),
N    kStatus_Fail = MAKE_STATUS(kStatusGroup_Generic, 1),
X    kStatus_Fail = ((((kStatusGroup_Generic)*100) + (1))),
N    kStatus_ReadOnly = MAKE_STATUS(kStatusGroup_Generic, 2),
X    kStatus_ReadOnly = ((((kStatusGroup_Generic)*100) + (2))),
N    kStatus_OutOfRange = MAKE_STATUS(kStatusGroup_Generic, 3),
X    kStatus_OutOfRange = ((((kStatusGroup_Generic)*100) + (3))),
N    kStatus_InvalidArgument = MAKE_STATUS(kStatusGroup_Generic, 4),
X    kStatus_InvalidArgument = ((((kStatusGroup_Generic)*100) + (4))),
N    kStatus_Timeout = MAKE_STATUS(kStatusGroup_Generic, 5),
X    kStatus_Timeout = ((((kStatusGroup_Generic)*100) + (5))),
N    kStatus_NoTransferInProgress = MAKE_STATUS(kStatusGroup_Generic, 6),
X    kStatus_NoTransferInProgress = ((((kStatusGroup_Generic)*100) + (6))),
N};
N
N/*! @brief Type used for all status and error return values. */
Ntypedef int32_t status_t;
N
N/*
N * The fsl_clock.h is included here because it needs MAKE_VERSION/MAKE_STATUS/status_t
N * defined in previous of this file.
N */
N#include "fsl_clock.h"
L 1 ".\SRC\Drivers\fsl_clock.h" 1
N/*
N * Copyright (c) 2016, Freescale Semiconductor, Inc.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * o Redistributions of source code must retain the above copyright notice, this list
N *   of conditions and the following disclaimer.
N *
N * o Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N *
N * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N *   contributors may be used to endorse or promote products derived from this
N *   software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifndef _FSL_CLOCK_H_
N#define _FSL_CLOCK_H_
N
N#include "fsl_device_registers.h"
N#include <stdint.h>
N#include <stdbool.h>
N#include <assert.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\assert.h" 1
N/* assert.h: ANSI 'C' (X3J11 Oct 88) library header section 4.2 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.        */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N/*
N * The assert macro puts diagnostics into programs. When it is executed,
N * if its argument expression is false, it writes information about the
N * call that failed (including the text of the argument, the name of the
N * source file, and the source line number - the latter are respectively
N * the values of the preprocessing macros __FILE__ and __LINE__) on the
N * standard error stream. It then calls the abort function.
N * If its argument expression is true, the assert macro returns no value.
N */
N
N/*
N * Note that <assert.h> may be included more that once in a program with
N * different setting of NDEBUG. Hence the slightly unusual first-time
N * only flag.
N */
N
N#ifndef __assert_h
S#   define __assert_h
S#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
S#define __ARMCLIB_VERSION 5060019
S#   ifndef __ARM_PROMISE
S#      define __ARM_PROMISE __promise
S#   endif
S#   undef __CLIBNS
S#   ifdef __cplusplus
S        namespace std {
S#           define __CLIBNS ::std::
S            extern "C" {
S#   else
S#       define __CLIBNS
S#   endif  /* __cplusplus */
S    extern _ARMABI_NORETURN void abort(void);
S    extern _ARMABI_NORETURN void __aeabi_assert(const char *, const char *, int) __attribute__((__nonnull__(1,2)));
S#   ifdef __cplusplus
S            }  /* extern "C" */
S        }  /* namespace std */
S#   endif
N#else
N#   undef assert
N#   undef __promise
N#endif
N
N#ifdef NDEBUG
S#   define assert(ignore) ((void)0)
S#   define __promise(e) ((__ARM_PROMISE)((e)?1:0))
N#else
N#   if defined __DO_NOT_LINK_PROMISE_WITH_ASSERT
X#   if 0L
S#      if defined __OPT_SMALL_ASSERT && !defined __ASSERT_MSG && !defined __STRICT_ANSI__ && !(_AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
S#          define assert(e) ((e) ? (void)0 : __CLIBNS abort())
S#      elif defined __STDC__
S#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert(#e, __FILE__, __LINE__))
S#      else
S#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert("e", __FILE__, __LINE__))
S#      endif
S#      define __promise(e) ((__ARM_PROMISE)((e)?1:0))
N#   else
N#      if defined __OPT_SMALL_ASSERT && !defined __ASSERT_MSG && !defined __STRICT_ANSI__ && !(_AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
X#      if 0L && !0L && !0L && !(_AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
S#undef __promise
S#          define assert(e) ((e) ? (void)0 : __CLIBNS abort(), (__ARM_PROMISE)((e)?1:0))
N#      else
N#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert(#e, __FILE__, __LINE__), (__ARM_PROMISE)((e)?1:0))
N#      endif
N#      define __promise(e) assert(e)
N#   endif
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N/* end of assert.h */
N
L 38 ".\SRC\Drivers\fsl_clock.h" 2
N
N/*! @addtogroup clock */
N/*! @{ */
N
N/*! @file */
N
N/*******************************************************************************
N * Definitions
N *****************************************************************************/
N
N/*! @brief Configure whether driver controls clock
N *
N * When set to 0, peripheral drivers will enable clock in initialize function
N * and disable clock in de-initialize function. When set to 1, peripheral
N * driver will not control the clock, application could contol the clock out of
N * the driver.
N *
N * @note All drivers share this feature switcher. If it is set to 1, application
N * should handle clock enable and disable for all drivers.
N */
N#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL))
X#if !(0L)
N#define FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL 0
N#endif
N/*! @brief Clock ip name array for ROM. */
N#define ADC_CLOCKS \
N    {              \
N        kCLOCK_Adc0 \
N    }
X#define ADC_CLOCKS     {                      kCLOCK_Adc0     }
N/*! @brief Clock ip name array for ROM. */
N#define ROM_CLOCKS \
N    {              \
N        kCLOCK_Rom \
N    }
X#define ROM_CLOCKS     {                      kCLOCK_Rom     }
N/*! @brief Clock ip name array for SRAM. */
N#define SRAM_CLOCKS \
N    {               \
N        kCLOCK_Sram1, kCLOCK_Sram2, kCLOCK_Sram3 \
N    }
X#define SRAM_CLOCKS     {                       kCLOCK_Sram1, kCLOCK_Sram2, kCLOCK_Sram3     }
N/*! @brief Clock ip name array for FLASH. */
N#define FLASH_CLOCKS \
N    {                \
N        kCLOCK_Flash \
N    }
X#define FLASH_CLOCKS     {                        kCLOCK_Flash     }
N/*! @brief Clock ip name array for FMC. */
N#define FMC_CLOCKS \
N    {              \
N        kCLOCK_Fmc \
N    }
X#define FMC_CLOCKS     {                      kCLOCK_Fmc     }
N/*! @brief Clock ip name array for EEPROM. */
N#define EEPROM_CLOCKS  \
N    {                  \
N        kCLOCK_Eeprom  \
N    }
X#define EEPROM_CLOCKS      {                          kCLOCK_Eeprom      }
N/*! @brief Clock ip name array for SPIFI. */
N#define SPIFI_CLOCKS  \
N    {                 \
N        kCLOCK_Spifi  \
N    }
X#define SPIFI_CLOCKS      {                         kCLOCK_Spifi      }
N/*! @brief Clock ip name array for INPUTMUX. */
N#define INPUTMUX_CLOCKS      \
N    {                        \
N        kCLOCK_InputMux      \
N    }
X#define INPUTMUX_CLOCKS          {                                kCLOCK_InputMux          }
N/*! @brief Clock ip name array for IOCON. */
N#define IOCON_CLOCKS         \
N    {                        \
N        kCLOCK_Iocon         \
N    }
X#define IOCON_CLOCKS             {                                kCLOCK_Iocon             }
N/*! @brief Clock ip name array for GPIO. */
N#define GPIO_CLOCKS          \
N    {                        \
N        kCLOCK_Gpio0,kLOCK_Gpio1, kCLOCK_Gpio2, kCLOCK_Gpio3, kCLOCK_Gpio4, kCLOCK_Gpio5     \
N    }
X#define GPIO_CLOCKS              {                                kCLOCK_Gpio0,kLOCK_Gpio1, kCLOCK_Gpio2, kCLOCK_Gpio3, kCLOCK_Gpio4, kCLOCK_Gpio5         }
N/*! @brief Clock ip name array for PINT. */
N#define PINT_CLOCKS          \
N    {                        \
N        kCLOCK_Pint          \
N    }
X#define PINT_CLOCKS              {                                kCLOCK_Pint              }
N/*! @brief Clock ip name array for GINT. */
N#define GINT_CLOCKS          \
N    {                        \
N        kCLOCK_Gint, kCLOCK_Gint          \
N    }
X#define GINT_CLOCKS              {                                kCLOCK_Gint, kCLOCK_Gint              }
N/*! @brief Clock ip name array for DMA. */
N#define DMA_CLOCKS          \
N    {                       \
N        kCLOCK_Dma          \
N    }
X#define DMA_CLOCKS              {                               kCLOCK_Dma              }
N/*! @brief Clock ip name array for CRC. */
N#define CRC_CLOCKS          \
N    {                       \
N        kCLOCK_Crc          \
N    }
X#define CRC_CLOCKS              {                               kCLOCK_Crc              }
N/*! @brief Clock ip name array for WWDT. */
N#define WWDT_CLOCKS          \
N    {                        \
N        kCLOCK_Wwdt          \
N    }
X#define WWDT_CLOCKS              {                                kCLOCK_Wwdt              }
N/*! @brief Clock ip name array for RTC. */
N#define RTC_CLOCKS          \
N    {                       \
N        kCLOCK_Rtc          \
N    }
X#define RTC_CLOCKS              {                               kCLOCK_Rtc              }
N/*! @brief Clock ip name array for ADC0. */
N#define ADC0_CLOCKS          \
N    {                        \
N        kCLOCK_Adc0          \
N    }
X#define ADC0_CLOCKS              {                                kCLOCK_Adc0              }
N/*! @brief Clock ip name array for MRT. */
N#define MRT_CLOCKS           \
N    {                        \
N        kCLOCK_Mrt           \
N    }
X#define MRT_CLOCKS               {                                kCLOCK_Mrt               }
N/*! @brief Clock ip name array for RIT. */
N#define RIT_CLOCKS           \
N    {                        \
N        kCLOCK_Rit           \
N    }
X#define RIT_CLOCKS               {                                kCLOCK_Rit               }
N/*! @brief Clock ip name array for SCT0. */
N#define SCT_CLOCKS          \
N    {                        \
N        kCLOCK_Sct0          \
N    }
X#define SCT_CLOCKS              {                                kCLOCK_Sct0              }
N/*! @brief Clock ip name array for MCAN. */
N#define MCAN_CLOCKS          \
N    {                        \
N        kCLOCK_Mcan0, kCLOCK_Mcan1          \
N    }
X#define MCAN_CLOCKS              {                                kCLOCK_Mcan0, kCLOCK_Mcan1              }
N/*! @brief Clock ip name array for UTICK. */
N#define UTICK_CLOCKS         \
N    {                        \
N        kCLOCK_Utick         \
N    }
X#define UTICK_CLOCKS             {                                kCLOCK_Utick             }
N/*! @brief Clock ip name array for FLEXCOMM. */
N#define FLEXCOMM_CLOCKS                                                        \
N    {                                                                          \
N        kCLOCK_FlexComm0, kCLOCK_FlexComm1, kCLOCK_FlexComm2, kCLOCK_FlexComm3, \
N					kCLOCK_FlexComm4, kCLOCK_FlexComm5, kCLOCK_FlexComm6, kCLOCK_FlexComm7, \
N                                        kCLOCK_FlexComm8, kCLOCK_FlexComm9 \
N    }
X#define FLEXCOMM_CLOCKS                                                            {                                                                                  kCLOCK_FlexComm0, kCLOCK_FlexComm1, kCLOCK_FlexComm2, kCLOCK_FlexComm3, 					kCLOCK_FlexComm4, kCLOCK_FlexComm5, kCLOCK_FlexComm6, kCLOCK_FlexComm7,                                         kCLOCK_FlexComm8, kCLOCK_FlexComm9     }
N/*! @brief Clock ip name array for LPUART. */
N#define LPUART_CLOCKS                                                                                         \
N    {                                                                                                         \
N        kCLOCK_MinUart0, kCLOCK_MinUart1, kCLOCK_MinUart2, kCLOCK_MinUart3, kCLOCK_MinUart4, kCLOCK_MinUart5, \
N            kCLOCK_MinUart6, kCLOCK_MinUart7, kCLOCK_MinUart8,kCLOCK_MinUart9     \
N    }
X#define LPUART_CLOCKS                                                                                             {                                                                                                                 kCLOCK_MinUart0, kCLOCK_MinUart1, kCLOCK_MinUart2, kCLOCK_MinUart3, kCLOCK_MinUart4, kCLOCK_MinUart5,             kCLOCK_MinUart6, kCLOCK_MinUart7, kCLOCK_MinUart8,kCLOCK_MinUart9         }
N
N/*! @brief Clock ip name array for BI2C. */
N#define BI2C_CLOCKS                                                                                                     \
N    {                                                                                                                   \
N        kCLOCK_BI2c0, kCLOCK_BI2c1, kCLOCK_BI2c2, kCLOCK_BI2c3, kCLOCK_BI2c4, kCLOCK_BI2c5, kCLOCK_BI2c6, kCLOCK_BI2c7, \
N        kCLOCK_BI2c8, kCLOCK_BI2c9  \
N    }
X#define BI2C_CLOCKS                                                                                                         {                                                                                                                           kCLOCK_BI2c0, kCLOCK_BI2c1, kCLOCK_BI2c2, kCLOCK_BI2c3, kCLOCK_BI2c4, kCLOCK_BI2c5, kCLOCK_BI2c6, kCLOCK_BI2c7,         kCLOCK_BI2c8, kCLOCK_BI2c9      }
N/*! @brief Clock ip name array for LSPI. */
N#define LPSI_CLOCKS                                                                                                     \
N    {                                                                                                                   \
N        kCLOCK_LSpi0, kCLOCK_LSpi1, kCLOCK_LSpi2, kCLOCK_LSpi3, kCLOCK_LSpi4, kCLOCK_LSpi5, kCLOCK_LSpi6, kCLOCK_LSpi7, \
N        kCLOCK_LSpi8, kCLOCK_LSpi9  \
N    }
X#define LPSI_CLOCKS                                                                                                         {                                                                                                                           kCLOCK_LSpi0, kCLOCK_LSpi1, kCLOCK_LSpi2, kCLOCK_LSpi3, kCLOCK_LSpi4, kCLOCK_LSpi5, kCLOCK_LSpi6, kCLOCK_LSpi7,         kCLOCK_LSpi8, kCLOCK_LSpi9      }
N/*! @brief Clock ip name array for FLEXI2S. */
N#define FLEXI2S_CLOCKS                                                                                        \
N    {                                                                                                         \
N        kCLOCK_FlexI2s0, kCLOCK_FlexI2s1, kCLOCK_FlexI2s2, kCLOCK_FlexI2s3, kCLOCK_FlexI2s4, kCLOCK_FlexI2s5, \
N            kCLOCK_FlexI2s6, kCLOCK_FlexI2s7, kCLOCK_FlexI2s8, kCLOCK_FlexI2s9                                                                  \
N    }
X#define FLEXI2S_CLOCKS                                                                                            {                                                                                                                 kCLOCK_FlexI2s0, kCLOCK_FlexI2s1, kCLOCK_FlexI2s2, kCLOCK_FlexI2s3, kCLOCK_FlexI2s4, kCLOCK_FlexI2s5,             kCLOCK_FlexI2s6, kCLOCK_FlexI2s7, kCLOCK_FlexI2s8, kCLOCK_FlexI2s9                                                                      }
N/*! @brief Clock ip name array for DMIC. */
N#define DMIC_CLOCKS \
N    {               \
N        kCLOCK_DMic \
N    }
X#define DMIC_CLOCKS     {                       kCLOCK_DMic     }
N/*! @brief Clock ip name array for CT32B. */
N#define CTIMER_CLOCKS                                                               \
N    {                                                                               \
N        kCLOCK_Ct32b0, kCLOCK_Ct32b1, kCLOCK_Ct32b2, kCLOCK_Ct32b3, kCLOCK_Ct32b4   \
N    }
X#define CTIMER_CLOCKS                                                                   {                                                                                       kCLOCK_Ct32b0, kCLOCK_Ct32b1, kCLOCK_Ct32b2, kCLOCK_Ct32b3, kCLOCK_Ct32b4       }
N/*! @brief Clock ip name array for LCD. */
N#define LCD_CLOCKS  \
N    {               \
N        kCLOCK_Lcd  \
N    }
X#define LCD_CLOCKS      {                       kCLOCK_Lcd      }
N/*! @brief Clock ip name array for SDIO. */
N#define SDIO_CLOCKS  \
N    {                \
N        kCLOCK_Sdio  \
N    }
X#define SDIO_CLOCKS      {                        kCLOCK_Sdio      }
N/*! @brief Clock ip name array for USBRAM. */
N#define USBRAM_CLOCKS    \
N    {                    \
N        kCLOCK_UsbRam1   \
N    }
X#define USBRAM_CLOCKS        {                            kCLOCK_UsbRam1       }
N/*! @brief Clock ip name array for EMC. */
N#define EMC_CLOCKS       \
N    {                    \
N        kCLOCK_Emc       \
N    }
X#define EMC_CLOCKS           {                            kCLOCK_Emc           }
N/*! @brief Clock ip name array for ETH. */
N#define ETH_CLOCKS       \
N    {                    \
N        kCLOCK_Eth       \
N    }
X#define ETH_CLOCKS           {                            kCLOCK_Eth           }
N/*! @brief Clock ip name array for AES. */
N#define AES_CLOCKS       \
N    {                    \
N        kCLOCK_Aes       \
N    }
X#define AES_CLOCKS           {                            kCLOCK_Aes           }
N/*! @brief Clock ip name array for OTP. */
N#define OTP_CLOCKS       \
N    {                    \
N        kCLOCK_Otp       \
N    }
X#define OTP_CLOCKS           {                            kCLOCK_Otp           }
N/*! @brief Clock ip name array for RNG. */
N#define RNG_CLOCKS       \
N    {                    \
N        kCLOCK_Rng       \
N    }
X#define RNG_CLOCKS           {                            kCLOCK_Rng           }
N/*! @brief Clock ip name array for USBHMR0. */
N#define USBHMR0_CLOCKS       \
N    {                        \
N        kCLOCK_Usbhmr0       \
N    }
X#define USBHMR0_CLOCKS           {                                kCLOCK_Usbhmr0           }
N/*! @brief Clock ip name array for USBHSL0. */
N#define USBHSL0_CLOCKS       \
N    {                        \
N        kCLOCK_Usbhsl0       \
N    }
X#define USBHSL0_CLOCKS           {                                kCLOCK_Usbhsl0           }
N/*! @brief Clock ip name array for SHA0. */
N#define SHA0_CLOCKS       \
N    {                     \
N        kCLOCK_Sha0       \
N    }
X#define SHA0_CLOCKS           {                             kCLOCK_Sha0           }
N/*! @brief Clock ip name array for SMARTCARD. */
N#define SMARTCARD_CLOCKS  \
N    {                     \
N        kCLOCK_SmartCard0, kCLOCK_SmartCard1 \
N    }
X#define SMARTCARD_CLOCKS      {                             kCLOCK_SmartCard0, kCLOCK_SmartCard1     }
N/*! @brief Clock ip name array for USBD. */
N#define USBD_CLOCKS  \
N    {                \
N        kCLOCK_Usbd0, kCLOCK_Usbh1, kCLOCK_Usbd1 \
N    }
X#define USBD_CLOCKS      {                        kCLOCK_Usbd0, kCLOCK_Usbh1, kCLOCK_Usbd1     }
N/*! @brief Clock ip name array for USBH. */
N#define USBH_CLOCKS  \
N    {                \
N        kCLOCK_Usbh1 \
N    }
X#define USBH_CLOCKS      {                        kCLOCK_Usbh1     }
N/*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
N/*------------------------------------------------------------------------------
N clock_ip_name_t definition:
N------------------------------------------------------------------------------*/
N
N#define CLK_GATE_REG_OFFSET_SHIFT 8U
N#define CLK_GATE_REG_OFFSET_MASK 0xFFFFFF00U
N#define CLK_GATE_BIT_SHIFT_SHIFT 0U
N#define CLK_GATE_BIT_SHIFT_MASK 0x000000FFU
N
N#define CLK_GATE_DEFINE(reg_offset, bit_shift)                                  \
N    ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) | \
N     (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
X#define CLK_GATE_DEFINE(reg_offset, bit_shift)                                      ((((reg_offset) << CLK_GATE_REG_OFFSET_SHIFT) & CLK_GATE_REG_OFFSET_MASK) |      (((bit_shift) << CLK_GATE_BIT_SHIFT_SHIFT) & CLK_GATE_BIT_SHIFT_MASK))
N
N#define CLK_GATE_ABSTRACT_REG_OFFSET(x) (((uint32_t)(x)&CLK_GATE_REG_OFFSET_MASK) >> CLK_GATE_REG_OFFSET_SHIFT)
N#define CLK_GATE_ABSTRACT_BITS_SHIFT(x) (((uint32_t)(x)&CLK_GATE_BIT_SHIFT_MASK) >> CLK_GATE_BIT_SHIFT_SHIFT)
N
N#define AHB_CLK_CTRL0 0
N#define AHB_CLK_CTRL1 1
N#define AHB_CLK_CTRL2 2
N#define ASYNC_CLK_CTRL0 3
N
N/*! @brief Clock gate name used for CLOCK_EnableClock/CLOCK_DisableClock. */
Ntypedef enum _clock_ip_name
N{
N    kCLOCK_IpInvalid = 0U,
N    kCLOCK_Rom = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 1),
X    kCLOCK_Rom = ((((0) << 8U) & 0xFFFFFF00U) | (((1) << 0U) & 0x000000FFU)),
N    kCLOCK_Sram1 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 3),
X    kCLOCK_Sram1 = ((((0) << 8U) & 0xFFFFFF00U) | (((3) << 0U) & 0x000000FFU)),
N    kCLOCK_Sram2 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 4),
X    kCLOCK_Sram2 = ((((0) << 8U) & 0xFFFFFF00U) | (((4) << 0U) & 0x000000FFU)),
N    kCLOCK_Sram3 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 5),
X    kCLOCK_Sram3 = ((((0) << 8U) & 0xFFFFFF00U) | (((5) << 0U) & 0x000000FFU)),
N    kCLOCK_Flash = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 7),
X    kCLOCK_Flash = ((((0) << 8U) & 0xFFFFFF00U) | (((7) << 0U) & 0x000000FFU)),
N    kCLOCK_Fmc = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 8),
X    kCLOCK_Fmc = ((((0) << 8U) & 0xFFFFFF00U) | (((8) << 0U) & 0x000000FFU)),
N    kCLOCK_Eeprom = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 9),
X    kCLOCK_Eeprom = ((((0) << 8U) & 0xFFFFFF00U) | (((9) << 0U) & 0x000000FFU)),
N    kCLOCK_Spifi = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 10),
X    kCLOCK_Spifi = ((((0) << 8U) & 0xFFFFFF00U) | (((10) << 0U) & 0x000000FFU)),
N    kCLOCK_InputMux = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 11),
X    kCLOCK_InputMux = ((((0) << 8U) & 0xFFFFFF00U) | (((11) << 0U) & 0x000000FFU)),
N    kCLOCK_Iocon = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 13),
X    kCLOCK_Iocon = ((((0) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_Gpio0 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 14),
X    kCLOCK_Gpio0 = ((((0) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_Gpio1 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 15),
X    kCLOCK_Gpio1 = ((((0) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_Gpio2 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 16),
X    kCLOCK_Gpio2 = ((((0) << 8U) & 0xFFFFFF00U) | (((16) << 0U) & 0x000000FFU)),
N    kCLOCK_Gpio3 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 17),
X    kCLOCK_Gpio3 = ((((0) << 8U) & 0xFFFFFF00U) | (((17) << 0U) & 0x000000FFU)),
N    kCLOCK_Pint = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 18),
X    kCLOCK_Pint = ((((0) << 8U) & 0xFFFFFF00U) | (((18) << 0U) & 0x000000FFU)),
N    kCLOCK_Gint = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 19),
X    kCLOCK_Gint = ((((0) << 8U) & 0xFFFFFF00U) | (((19) << 0U) & 0x000000FFU)),
N    kCLOCK_Dma = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 20),
X    kCLOCK_Dma = ((((0) << 8U) & 0xFFFFFF00U) | (((20) << 0U) & 0x000000FFU)),
N    kCLOCK_Crc = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 21),
X    kCLOCK_Crc = ((((0) << 8U) & 0xFFFFFF00U) | (((21) << 0U) & 0x000000FFU)),
N    kCLOCK_Wwdt = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 22),
X    kCLOCK_Wwdt = ((((0) << 8U) & 0xFFFFFF00U) | (((22) << 0U) & 0x000000FFU)),
N    kCLOCK_Rtc = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 23),
X    kCLOCK_Rtc = ((((0) << 8U) & 0xFFFFFF00U) | (((23) << 0U) & 0x000000FFU)),
N    kCLOCK_Adc0 = CLK_GATE_DEFINE(AHB_CLK_CTRL0, 27),
X    kCLOCK_Adc0 = ((((0) << 8U) & 0xFFFFFF00U) | (((27) << 0U) & 0x000000FFU)),
N    kCLOCK_Mrt = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 0),
X    kCLOCK_Mrt = ((((1) << 8U) & 0xFFFFFF00U) | (((0) << 0U) & 0x000000FFU)),
N    kCLOCK_Rit = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 1),
X    kCLOCK_Rit = ((((1) << 8U) & 0xFFFFFF00U) | (((1) << 0U) & 0x000000FFU)),
N    kCLOCK_Sct0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 2),
X    kCLOCK_Sct0 = ((((1) << 8U) & 0xFFFFFF00U) | (((2) << 0U) & 0x000000FFU)),
N    kCLOCK_Mcan0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 7),
X    kCLOCK_Mcan0 = ((((1) << 8U) & 0xFFFFFF00U) | (((7) << 0U) & 0x000000FFU)),
N    kCLOCK_Mcan1 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 8),
X    kCLOCK_Mcan1 = ((((1) << 8U) & 0xFFFFFF00U) | (((8) << 0U) & 0x000000FFU)),
N    kCLOCK_Utick = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 10),
X    kCLOCK_Utick = ((((1) << 8U) & 0xFFFFFF00U) | (((10) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 11),
X    kCLOCK_FlexComm0 = ((((1) << 8U) & 0xFFFFFF00U) | (((11) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm1 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 12),
X    kCLOCK_FlexComm1 = ((((1) << 8U) & 0xFFFFFF00U) | (((12) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm2 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 13),
X    kCLOCK_FlexComm2 = ((((1) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm3 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 14),
X    kCLOCK_FlexComm3 = ((((1) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm4 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 15),
X    kCLOCK_FlexComm4 = ((((1) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm5 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 16),
X    kCLOCK_FlexComm5 = ((((1) << 8U) & 0xFFFFFF00U) | (((16) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm6 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 17),
X    kCLOCK_FlexComm6 = ((((1) << 8U) & 0xFFFFFF00U) | (((17) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm7 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 18),
X    kCLOCK_FlexComm7 = ((((1) << 8U) & 0xFFFFFF00U) | (((18) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 11),
X    kCLOCK_MinUart0 = ((((1) << 8U) & 0xFFFFFF00U) | (((11) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart1 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 12),
X    kCLOCK_MinUart1 = ((((1) << 8U) & 0xFFFFFF00U) | (((12) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart2 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 13),
X    kCLOCK_MinUart2 = ((((1) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart3 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 14),
X    kCLOCK_MinUart3 = ((((1) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart4 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 15),
X    kCLOCK_MinUart4 = ((((1) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart5 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 16),
X    kCLOCK_MinUart5 = ((((1) << 8U) & 0xFFFFFF00U) | (((16) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart6 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 17),
X    kCLOCK_MinUart6 = ((((1) << 8U) & 0xFFFFFF00U) | (((17) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart7 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 18),
X    kCLOCK_MinUart7 = ((((1) << 8U) & 0xFFFFFF00U) | (((18) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 11),
X    kCLOCK_LSpi0 = ((((1) << 8U) & 0xFFFFFF00U) | (((11) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi1 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 12),
X    kCLOCK_LSpi1 = ((((1) << 8U) & 0xFFFFFF00U) | (((12) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi2 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 13),
X    kCLOCK_LSpi2 = ((((1) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi3 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 14),
X    kCLOCK_LSpi3 = ((((1) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi4 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 15),
X    kCLOCK_LSpi4 = ((((1) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi5 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 16),
X    kCLOCK_LSpi5 = ((((1) << 8U) & 0xFFFFFF00U) | (((16) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi6 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 17),
X    kCLOCK_LSpi6 = ((((1) << 8U) & 0xFFFFFF00U) | (((17) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi7 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 18),
X    kCLOCK_LSpi7 = ((((1) << 8U) & 0xFFFFFF00U) | (((18) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 11),
X    kCLOCK_BI2c0 = ((((1) << 8U) & 0xFFFFFF00U) | (((11) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c1 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 12),
X    kCLOCK_BI2c1 = ((((1) << 8U) & 0xFFFFFF00U) | (((12) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c2 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 13),
X    kCLOCK_BI2c2 = ((((1) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c3 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 14),
X    kCLOCK_BI2c3 = ((((1) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c4 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 15),
X    kCLOCK_BI2c4 = ((((1) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c5 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 16),
X    kCLOCK_BI2c5 = ((((1) << 8U) & 0xFFFFFF00U) | (((16) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c6 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 17),
X    kCLOCK_BI2c6 = ((((1) << 8U) & 0xFFFFFF00U) | (((17) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c7 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 18),
X    kCLOCK_BI2c7 = ((((1) << 8U) & 0xFFFFFF00U) | (((18) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 11),
X    kCLOCK_FlexI2s0 = ((((1) << 8U) & 0xFFFFFF00U) | (((11) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s1 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 12),
X    kCLOCK_FlexI2s1 = ((((1) << 8U) & 0xFFFFFF00U) | (((12) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s2 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 13),
X    kCLOCK_FlexI2s2 = ((((1) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s3 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 14),
X    kCLOCK_FlexI2s3 = ((((1) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s4 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 15),
X    kCLOCK_FlexI2s4 = ((((1) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s5 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 16),
X    kCLOCK_FlexI2s5 = ((((1) << 8U) & 0xFFFFFF00U) | (((16) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s6 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 17),
X    kCLOCK_FlexI2s6 = ((((1) << 8U) & 0xFFFFFF00U) | (((17) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s7 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 18),
X    kCLOCK_FlexI2s7 = ((((1) << 8U) & 0xFFFFFF00U) | (((18) << 0U) & 0x000000FFU)),
N    kCLOCK_DMic = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 19),
X    kCLOCK_DMic = ((((1) << 8U) & 0xFFFFFF00U) | (((19) << 0U) & 0x000000FFU)),
N    kCLOCK_Ct32b2 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 22),
X    kCLOCK_Ct32b2 = ((((1) << 8U) & 0xFFFFFF00U) | (((22) << 0U) & 0x000000FFU)),
N    kCLOCK_Usbd0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 25),
X    kCLOCK_Usbd0 = ((((1) << 8U) & 0xFFFFFF00U) | (((25) << 0U) & 0x000000FFU)),
N    kCLOCK_Ct32b0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 26),
X    kCLOCK_Ct32b0 = ((((1) << 8U) & 0xFFFFFF00U) | (((26) << 0U) & 0x000000FFU)),
N    kCLOCK_Ct32b1 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 27),
X    kCLOCK_Ct32b1 = ((((1) << 8U) & 0xFFFFFF00U) | (((27) << 0U) & 0x000000FFU)),
N    kCLOCK_BodyBias0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 29),
X    kCLOCK_BodyBias0 = ((((1) << 8U) & 0xFFFFFF00U) | (((29) << 0U) & 0x000000FFU)),
N    kCLOCK_EzhArchB0 = CLK_GATE_DEFINE(AHB_CLK_CTRL1, 31),
X    kCLOCK_EzhArchB0 = ((((1) << 8U) & 0xFFFFFF00U) | (((31) << 0U) & 0x000000FFU)),
N    kCLOCK_Lcd = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 2),
X    kCLOCK_Lcd = ((((2) << 8U) & 0xFFFFFF00U) | (((2) << 0U) & 0x000000FFU)),
N    kCLOCK_Sdio = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 3),
X    kCLOCK_Sdio = ((((2) << 8U) & 0xFFFFFF00U) | (((3) << 0U) & 0x000000FFU)),
N    kCLOCK_Usbh1 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 4),
X    kCLOCK_Usbh1 = ((((2) << 8U) & 0xFFFFFF00U) | (((4) << 0U) & 0x000000FFU)),
N    kCLOCK_Usbd1 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 5),
X    kCLOCK_Usbd1 = ((((2) << 8U) & 0xFFFFFF00U) | (((5) << 0U) & 0x000000FFU)),
N    kCLOCK_UsbRam1 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 6),
X    kCLOCK_UsbRam1 = ((((2) << 8U) & 0xFFFFFF00U) | (((6) << 0U) & 0x000000FFU)),
N    kCLOCK_Emc = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 7),
X    kCLOCK_Emc = ((((2) << 8U) & 0xFFFFFF00U) | (((7) << 0U) & 0x000000FFU)),
N    kCLOCK_Eth = CLK_GATE_DEFINE(AHB_CLK_CTRL2,8),
X    kCLOCK_Eth = ((((2) << 8U) & 0xFFFFFF00U) | (((8) << 0U) & 0x000000FFU)),
N    kCLOCK_Gpio4 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 9),
X    kCLOCK_Gpio4 = ((((2) << 8U) & 0xFFFFFF00U) | (((9) << 0U) & 0x000000FFU)),
N    kCLOCK_Gpio5 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 10),
X    kCLOCK_Gpio5 = ((((2) << 8U) & 0xFFFFFF00U) | (((10) << 0U) & 0x000000FFU)),
N    kCLOCK_Aes = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 11),
X    kCLOCK_Aes = ((((2) << 8U) & 0xFFFFFF00U) | (((11) << 0U) & 0x000000FFU)),
N    kCLOCK_Otp = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 12),
X    kCLOCK_Otp = ((((2) << 8U) & 0xFFFFFF00U) | (((12) << 0U) & 0x000000FFU)),
N    kCLOCK_Rng = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 13),
X    kCLOCK_Rng = ((((2) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm8 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 14),
X    kCLOCK_FlexComm8 = ((((2) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexComm9 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 15),
X    kCLOCK_FlexComm9 = ((((2) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart8 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 14),
X    kCLOCK_MinUart8 = ((((2) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_MinUart9 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 15),
X    kCLOCK_MinUart9 = ((((2) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi8 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 14),
X    kCLOCK_LSpi8 = ((((2) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_LSpi9 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 15),
X    kCLOCK_LSpi9 = ((((2) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c8 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 14),
X    kCLOCK_BI2c8 = ((((2) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_BI2c9 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 15),
X    kCLOCK_BI2c9 = ((((2) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s8 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 14),
X    kCLOCK_FlexI2s8 = ((((2) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU)),
N    kCLOCK_FlexI2s9 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 15),
X    kCLOCK_FlexI2s9 = ((((2) << 8U) & 0xFFFFFF00U) | (((15) << 0U) & 0x000000FFU)),
N    kCLOCK_Usbhmr0 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 16),
X    kCLOCK_Usbhmr0 = ((((2) << 8U) & 0xFFFFFF00U) | (((16) << 0U) & 0x000000FFU)),
N    kCLOCK_Usbhsl0 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 17),
X    kCLOCK_Usbhsl0 = ((((2) << 8U) & 0xFFFFFF00U) | (((17) << 0U) & 0x000000FFU)),
N    kCLOCK_Sha0 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 18),
X    kCLOCK_Sha0 = ((((2) << 8U) & 0xFFFFFF00U) | (((18) << 0U) & 0x000000FFU)),
N    kCLOCK_SmartCard0 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 19),
X    kCLOCK_SmartCard0 = ((((2) << 8U) & 0xFFFFFF00U) | (((19) << 0U) & 0x000000FFU)),
N    kCLOCK_SmartCard1 = CLK_GATE_DEFINE(AHB_CLK_CTRL2, 20),
X    kCLOCK_SmartCard1 = ((((2) << 8U) & 0xFFFFFF00U) | (((20) << 0U) & 0x000000FFU)),
N
N    kCLOCK_Ct32b3 = CLK_GATE_DEFINE(ASYNC_CLK_CTRL0, 13),
X    kCLOCK_Ct32b3 = ((((3) << 8U) & 0xFFFFFF00U) | (((13) << 0U) & 0x000000FFU)),
N    kCLOCK_Ct32b4 = CLK_GATE_DEFINE(ASYNC_CLK_CTRL0, 14)
X    kCLOCK_Ct32b4 = ((((3) << 8U) & 0xFFFFFF00U) | (((14) << 0U) & 0x000000FFU))
N} clock_ip_name_t;
N
N/*! @brief Clock name used to get clock frequency. */
Ntypedef enum _clock_name
N{
N    kCLOCK_CoreSysClk,  /*!< Core/system clock  (aka MAIN_CLK)                       */
N    kCLOCK_BusClk,      /*!< Bus clock (AHB clock)                                   */
N    kCLOCK_ClockOut,    /*!< CLOCKOUT                                                */
N    kCLOCK_FroHf,       /*!< FRO48/96                                                */
N    kCLOCK_SpiFi,       /*!< SPIFI                                                   */
N    kCLOCK_Adc,         /*!< ADC                                                     */
N    kCLOCK_Usb0,        /*!< USB0                                                    */
N    kCLOCK_Usb1,        /*!< USB1                                                    */
N    kCLOCK_UsbPll,      /*!< USB1 PLL                                                */
N    kCLOCK_Mclk,        /*!< MCLK                                                    */
N    kCLOCK_Sct,         /*!< SCT                                                     */
N    kCLOCK_SDio,        /*!< SDIO                                                    */
N    kCLOCK_EMC,         /*!< EMC                                                     */
N    kCLOCK_LCD,         /*!< LCD                                                     */
N    kCLOCK_MCAN0,       /*!< MCAN0                                                   */
N    kCLOCK_MCAN1,       /*!< MCAN1                                                   */
N    kCLOCK_Fro12M,      /*!< FRO12M                                                  */
N    kCLOCK_ExtClk,      /*!< External Clock                                          */
N    kCLOCK_PllOut,      /*!< PLL Output                                              */
N    kCLOCK_UsbClk,      /*!< USB input                                               */
N    kClock_WdtOsc,      /*!< Watchdog Oscillator                                     */
N    kCLOCK_Frg,         /*!< Frg Clock                                               */
N    kCLOCK_Dmic,        /*!< Digital Mic clock                                       */
N    kCLOCK_AsyncApbClk, /*!< Async APB clock										 */
N    kCLOCK_FlexI2S,     /*!< FlexI2S clock                                           */
N    kCLOCK_Flexcomm0,   /*!< Flexcomm0Clock                                          */
N    kCLOCK_Flexcomm1,   /*!< Flexcomm1Clock                                          */
N    kCLOCK_Flexcomm2,   /*!< Flexcomm2Clock                                          */
N    kCLOCK_Flexcomm3,   /*!< Flexcomm3Clock                                          */
N    kCLOCK_Flexcomm4,   /*!< Flexcomm4Clock                                          */
N    kCLOCK_Flexcomm5,   /*!< Flexcomm5Clock                                          */
N    kCLOCK_Flexcomm6,   /*!< Flexcomm6Clock                                          */
N    kCLOCK_Flexcomm7,   /*!< Flexcomm7Clock                                          */
N    kCLOCK_Flexcomm8,   /*!< Flexcomm8Clock                                          */
N    kCLOCK_Flexcomm9,   /*!< Flexcomm9Clock                                          */
N
N} clock_name_t;
N
N/**
N * Clock source selections for the asynchronous APB clock
N */
Ntypedef enum _async_clock_src
N{
N    kCLOCK_AsyncMainClk = 0, /*!< Main System clock */
N    kCLOCK_AsyncFro12Mhz,    /*!< 12MHz FRO */
N    kCLOCK_AsyncAudioPllClk,
N    kCLOCK_AsyncI2cClkFc6,
N
N} async_clock_src_t;
N
N/*! @brief Clock Mux Switches
N*  The encoding is as follows each connection identified is 64bits wide
N*  starting from LSB upwards
N*
N*  [4 bits for choice, where 1 is A, 2 is B, 3 is C and 4 is D, 0 means end of descriptor] [8 bits mux ID]*
N*
N*/
N
N#define MUX_A(m, choice) (((m) << 0) | ((choice + 1) << 8))
N#define MUX_B(m, choice) (((m) << 12) | ((choice + 1) << 20))
N#define MUX_C(m, choice) (((m) << 24) | ((choice + 1) << 32))
N#define MUX_D(m, choice) (((m) << 36) | ((choice + 1) << 44))
N#define MUX_E(m, choice) (((m) << 48) | ((choice + 1) << 56))
N
N#define CM_MAINCLKSELA 0
N#define CM_MAINCLKSELB 1
N#define CM_CLKOUTCLKSELA 2
N#define CM_SYSPLLCLKSEL 4
N#define CM_AUDPLLCLKSEL 6
N#define CM_SPIFICLKSEL 8
N#define CM_ADCASYNCCLKSEL 9
N#define CM_USB0CLKSEL 10
N#define CM_USB1CLKSEL 11
N#define CM_FXCOMCLKSEL0 12
N#define CM_FXCOMCLKSEL1 13
N#define CM_FXCOMCLKSEL2 14
N#define CM_FXCOMCLKSEL3 15
N#define CM_FXCOMCLKSEL4 16
N#define CM_FXCOMCLKSEL5 17
N#define CM_FXCOMCLKSEL6 18
N#define CM_FXCOMCLKSEL7 19
N#define CM_FXCOMCLKSEL8 20
N#define CM_FXCOMCLKSEL9 21
N#define CM_MCLKCLKSEL 24
N#define CM_FRGCLKSEL 26
N#define CM_DMICCLKSEL 27
N#define CM_SCTCLKSEL  28
N#define CM_LCDCLKSEL  29
N#define CM_SDIOCLKSEL 30
N
N#define CM_ASYNCAPB 31
N
Ntypedef enum _clock_attach_id
N{
N
N    kFRO12M_to_MAIN_CLK = MUX_A(CM_MAINCLKSELA, 0) | MUX_B(CM_MAINCLKSELB, 0),
X    kFRO12M_to_MAIN_CLK = (((0) << 0) | ((0 + 1) << 8)) | (((1) << 12) | ((0 + 1) << 20)),
N    kEXT_CLK_to_MAIN_CLK = MUX_A(CM_MAINCLKSELA, 1) | MUX_B(CM_MAINCLKSELB, 0),
X    kEXT_CLK_to_MAIN_CLK = (((0) << 0) | ((1 + 1) << 8)) | (((1) << 12) | ((0 + 1) << 20)),
N    kWDT_OSC_to_MAIN_CLK = MUX_A(CM_MAINCLKSELA, 2) | MUX_B(CM_MAINCLKSELB, 0),
X    kWDT_OSC_to_MAIN_CLK = (((0) << 0) | ((2 + 1) << 8)) | (((1) << 12) | ((0 + 1) << 20)),
N    kFRO_HF_to_MAIN_CLK = MUX_A(CM_MAINCLKSELA, 3) | MUX_B(CM_MAINCLKSELB, 0),
X    kFRO_HF_to_MAIN_CLK = (((0) << 0) | ((3 + 1) << 8)) | (((1) << 12) | ((0 + 1) << 20)),
N    kSYS_PLL_to_MAIN_CLK = MUX_A(CM_MAINCLKSELB, 2),
X    kSYS_PLL_to_MAIN_CLK = (((1) << 0) | ((2 + 1) << 8)),
N    kOSC32K_to_MAIN_CLK = MUX_A(CM_MAINCLKSELB, 3),
X    kOSC32K_to_MAIN_CLK = (((1) << 0) | ((3 + 1) << 8)),
N
N    kMAIN_CLK_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 0),
X    kMAIN_CLK_to_CLKOUT = (((2) << 0) | ((0 + 1) << 8)),
N    kEXT_CLK_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 1),
X    kEXT_CLK_to_CLKOUT = (((2) << 0) | ((1 + 1) << 8)),
N    kWDT_OSC_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 2),
X    kWDT_OSC_to_CLKOUT = (((2) << 0) | ((2 + 1) << 8)),
N    kFRO_HF_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 3),
X    kFRO_HF_to_CLKOUT = (((2) << 0) | ((3 + 1) << 8)),
N    kSYS_PLL_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 4),
X    kSYS_PLL_to_CLKOUT = (((2) << 0) | ((4 + 1) << 8)),
N    kUSB_PLL_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 5),
X    kUSB_PLL_to_CLKOUT = (((2) << 0) | ((5 + 1) << 8)),
N    kAUDIO_PLL_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 6),
X    kAUDIO_PLL_to_CLKOUT = (((2) << 0) | ((6 + 1) << 8)),
N    kOSC32K_OSC_to_CLKOUT = MUX_A(CM_CLKOUTCLKSELA, 7),
X    kOSC32K_OSC_to_CLKOUT = (((2) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_SYS_PLL = MUX_A(CM_SYSPLLCLKSEL, 0),
X    kFRO12M_to_SYS_PLL = (((4) << 0) | ((0 + 1) << 8)),
N    kEXT_CLK_to_SYS_PLL = MUX_A(CM_SYSPLLCLKSEL, 1),
X    kEXT_CLK_to_SYS_PLL = (((4) << 0) | ((1 + 1) << 8)),
N    kWDT_OSC_to_SYS_PLL = MUX_A(CM_SYSPLLCLKSEL, 2),
X    kWDT_OSC_to_SYS_PLL = (((4) << 0) | ((2 + 1) << 8)),
N    kOSC32K_to_SYS_PLL = MUX_A(CM_SYSPLLCLKSEL, 3),
X    kOSC32K_to_SYS_PLL = (((4) << 0) | ((3 + 1) << 8)),
N    kNONE_to_SYS_PLL = MUX_A(CM_SYSPLLCLKSEL, 7),
X    kNONE_to_SYS_PLL = (((4) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_AUDIO = MUX_A(CM_ASYNCAPB, 0),
X    kFRO12M_to_AUDIO = (((31) << 0) | ((0 + 1) << 8)),
N    kEXT_CLK_to_AUDIO = MUX_A(CM_ASYNCAPB, 1),
X    kEXT_CLK_to_AUDIO = (((31) << 0) | ((1 + 1) << 8)),
N    kNONE_to_AUDIO = MUX_A(CM_ASYNCAPB, 7),
X    kNONE_to_AUDIO = (((31) << 0) | ((7 + 1) << 8)),
N
N    kMAIN_CLK_to_SPIFI_CLK = MUX_A(CM_SPIFICLKSEL, 0),
X    kMAIN_CLK_to_SPIFI_CLK = (((8) << 0) | ((0 + 1) << 8)),
N    kSYS_PLL_to_SPIFI_CLK = MUX_A(CM_SPIFICLKSEL, 1),
X    kSYS_PLL_to_SPIFI_CLK = (((8) << 0) | ((1 + 1) << 8)),
N    kUSB_PLL_to_SPIFI_CLK = MUX_A(CM_SPIFICLKSEL, 2),
X    kUSB_PLL_to_SPIFI_CLK = (((8) << 0) | ((2 + 1) << 8)),
N    kFRO_HF_to_SPIFI_CLK = MUX_A(CM_SPIFICLKSEL, 3),
X    kFRO_HF_to_SPIFI_CLK = (((8) << 0) | ((3 + 1) << 8)),
N    kAUDIO_PLL_to_SPIFI_CLK = MUX_A(CM_SPIFICLKSEL, 4),
X    kAUDIO_PLL_to_SPIFI_CLK = (((8) << 0) | ((4 + 1) << 8)),
N    kNONE_to_SPIFI_CLK = MUX_A(CM_SPIFICLKSEL, 7),
X    kNONE_to_SPIFI_CLK = (((8) << 0) | ((7 + 1) << 8)),
N
N    kFRO_HF_to_ADC_CLK = MUX_A(CM_ADCASYNCCLKSEL, 0),
X    kFRO_HF_to_ADC_CLK = (((9) << 0) | ((0 + 1) << 8)),
N    kSYS_PLL_to_ADC_CLK = MUX_A(CM_ADCASYNCCLKSEL, 1),
X    kSYS_PLL_to_ADC_CLK = (((9) << 0) | ((1 + 1) << 8)),
N    kUSB_PLL_to_ADC_CLK = MUX_A(CM_ADCASYNCCLKSEL, 2),
X    kUSB_PLL_to_ADC_CLK = (((9) << 0) | ((2 + 1) << 8)),
N    kAUDIO_PLL_to_ADC_CLK = MUX_A(CM_ADCASYNCCLKSEL, 3),
X    kAUDIO_PLL_to_ADC_CLK = (((9) << 0) | ((3 + 1) << 8)),
N    kNONE_to_ADC_CLK = MUX_A(CM_ADCASYNCCLKSEL, 7),
X    kNONE_to_ADC_CLK = (((9) << 0) | ((7 + 1) << 8)),
N
N    kFRO_HF_to_USB0_CLK = MUX_A(CM_USB0CLKSEL, 0),
X    kFRO_HF_to_USB0_CLK = (((10) << 0) | ((0 + 1) << 8)),
N    kSYS_PLL_to_USB0_CLK = MUX_A(CM_USB0CLKSEL, 1),
X    kSYS_PLL_to_USB0_CLK = (((10) << 0) | ((1 + 1) << 8)),
N    kUSB_PLL_to_USB0_CLK = MUX_A(CM_USB0CLKSEL, 2),
X    kUSB_PLL_to_USB0_CLK = (((10) << 0) | ((2 + 1) << 8)),
N    kNONE_to_USB0_CLK = MUX_A(CM_USB0CLKSEL, 7),
X    kNONE_to_USB0_CLK = (((10) << 0) | ((7 + 1) << 8)),
N
N    kFRO_HF_to_USB1_CLK = MUX_A(CM_USB1CLKSEL, 0),
X    kFRO_HF_to_USB1_CLK = (((11) << 0) | ((0 + 1) << 8)),
N    kSYS_PLL_to_USB1_CLK = MUX_A(CM_USB1CLKSEL, 1),
X    kSYS_PLL_to_USB1_CLK = (((11) << 0) | ((1 + 1) << 8)),
N    kUSB_PLL_to_USB1_CLK = MUX_A(CM_USB1CLKSEL, 2),
X    kUSB_PLL_to_USB1_CLK = (((11) << 0) | ((2 + 1) << 8)),
N    kNONE_to_USB1_CLK = MUX_A(CM_USB1CLKSEL, 7),
X    kNONE_to_USB1_CLK = (((11) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM0 = MUX_A(CM_FXCOMCLKSEL0, 0),
X    kFRO12M_to_FLEXCOMM0 = (((12) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM0 = MUX_A(CM_FXCOMCLKSEL0, 1),
X    kFRO_HF_to_FLEXCOMM0 = (((12) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM0 = MUX_A(CM_FXCOMCLKSEL0, 2),
X    kAUDIO_PLL_to_FLEXCOMM0 = (((12) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM0 = MUX_A(CM_FXCOMCLKSEL0, 3),
X    kMCLK_to_FLEXCOMM0 = (((12) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM0 = MUX_A(CM_FXCOMCLKSEL0, 4),
X    kFRG_to_FLEXCOMM0 = (((12) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM0 = MUX_A(CM_FXCOMCLKSEL0, 7),
X    kNONE_to_FLEXCOMM0 = (((12) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM1 = MUX_A(CM_FXCOMCLKSEL1, 0),
X    kFRO12M_to_FLEXCOMM1 = (((13) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM1 = MUX_A(CM_FXCOMCLKSEL1, 1),
X    kFRO_HF_to_FLEXCOMM1 = (((13) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM1 = MUX_A(CM_FXCOMCLKSEL1, 2),
X    kAUDIO_PLL_to_FLEXCOMM1 = (((13) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM1 = MUX_A(CM_FXCOMCLKSEL1, 3),
X    kMCLK_to_FLEXCOMM1 = (((13) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM1 = MUX_A(CM_FXCOMCLKSEL1, 4),
X    kFRG_to_FLEXCOMM1 = (((13) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM1 = MUX_A(CM_FXCOMCLKSEL1, 7),
X    kNONE_to_FLEXCOMM1 = (((13) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM2 = MUX_A(CM_FXCOMCLKSEL2, 0),
X    kFRO12M_to_FLEXCOMM2 = (((14) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM2 = MUX_A(CM_FXCOMCLKSEL2, 1),
X    kFRO_HF_to_FLEXCOMM2 = (((14) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM2 = MUX_A(CM_FXCOMCLKSEL2, 2),
X    kAUDIO_PLL_to_FLEXCOMM2 = (((14) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM2 = MUX_A(CM_FXCOMCLKSEL2, 3),
X    kMCLK_to_FLEXCOMM2 = (((14) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM2 = MUX_A(CM_FXCOMCLKSEL2, 4),
X    kFRG_to_FLEXCOMM2 = (((14) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM2 = MUX_A(CM_FXCOMCLKSEL2, 7),
X    kNONE_to_FLEXCOMM2 = (((14) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM3 = MUX_A(CM_FXCOMCLKSEL3, 0),
X    kFRO12M_to_FLEXCOMM3 = (((15) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM3 = MUX_A(CM_FXCOMCLKSEL3, 1),
X    kFRO_HF_to_FLEXCOMM3 = (((15) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM3 = MUX_A(CM_FXCOMCLKSEL3, 2),
X    kAUDIO_PLL_to_FLEXCOMM3 = (((15) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM3 = MUX_A(CM_FXCOMCLKSEL3, 3),
X    kMCLK_to_FLEXCOMM3 = (((15) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM3 = MUX_A(CM_FXCOMCLKSEL3, 4),
X    kFRG_to_FLEXCOMM3 = (((15) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM3 = MUX_A(CM_FXCOMCLKSEL3, 7),
X    kNONE_to_FLEXCOMM3 = (((15) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM4 = MUX_A(CM_FXCOMCLKSEL4, 0),
X    kFRO12M_to_FLEXCOMM4 = (((16) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM4 = MUX_A(CM_FXCOMCLKSEL4, 1),
X    kFRO_HF_to_FLEXCOMM4 = (((16) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM4 = MUX_A(CM_FXCOMCLKSEL4, 2),
X    kAUDIO_PLL_to_FLEXCOMM4 = (((16) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM4 = MUX_A(CM_FXCOMCLKSEL4, 3),
X    kMCLK_to_FLEXCOMM4 = (((16) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM4 = MUX_A(CM_FXCOMCLKSEL4, 4),
X    kFRG_to_FLEXCOMM4 = (((16) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM4 = MUX_A(CM_FXCOMCLKSEL4, 7),
X    kNONE_to_FLEXCOMM4 = (((16) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM5 = MUX_A(CM_FXCOMCLKSEL5, 0),
X    kFRO12M_to_FLEXCOMM5 = (((17) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM5 = MUX_A(CM_FXCOMCLKSEL5, 1),
X    kFRO_HF_to_FLEXCOMM5 = (((17) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM5 = MUX_A(CM_FXCOMCLKSEL5, 2),
X    kAUDIO_PLL_to_FLEXCOMM5 = (((17) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM5 = MUX_A(CM_FXCOMCLKSEL5, 3),
X    kMCLK_to_FLEXCOMM5 = (((17) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM5 = MUX_A(CM_FXCOMCLKSEL5, 4),
X    kFRG_to_FLEXCOMM5 = (((17) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM5 = MUX_A(CM_FXCOMCLKSEL5, 7),
X    kNONE_to_FLEXCOMM5 = (((17) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM6 = MUX_A(CM_FXCOMCLKSEL6, 0),
X    kFRO12M_to_FLEXCOMM6 = (((18) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM6 = MUX_A(CM_FXCOMCLKSEL6, 1),
X    kFRO_HF_to_FLEXCOMM6 = (((18) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM6 = MUX_A(CM_FXCOMCLKSEL6, 2),
X    kAUDIO_PLL_to_FLEXCOMM6 = (((18) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM6 = MUX_A(CM_FXCOMCLKSEL6, 3),
X    kMCLK_to_FLEXCOMM6 = (((18) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM6 = MUX_A(CM_FXCOMCLKSEL6, 4),
X    kFRG_to_FLEXCOMM6 = (((18) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM6 = MUX_A(CM_FXCOMCLKSEL6, 7),
X    kNONE_to_FLEXCOMM6 = (((18) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM7 = MUX_A(CM_FXCOMCLKSEL7, 0),
X    kFRO12M_to_FLEXCOMM7 = (((19) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM7 = MUX_A(CM_FXCOMCLKSEL7, 1),
X    kFRO_HF_to_FLEXCOMM7 = (((19) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM7 = MUX_A(CM_FXCOMCLKSEL7, 2),
X    kAUDIO_PLL_to_FLEXCOMM7 = (((19) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM7 = MUX_A(CM_FXCOMCLKSEL7, 3),
X    kMCLK_to_FLEXCOMM7 = (((19) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM7 = MUX_A(CM_FXCOMCLKSEL7, 4),
X    kFRG_to_FLEXCOMM7 = (((19) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM7 = MUX_A(CM_FXCOMCLKSEL7, 7),
X    kNONE_to_FLEXCOMM7 = (((19) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM8 = MUX_A(CM_FXCOMCLKSEL8, 0),
X    kFRO12M_to_FLEXCOMM8 = (((20) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM8 = MUX_A(CM_FXCOMCLKSEL8, 1),
X    kFRO_HF_to_FLEXCOMM8 = (((20) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM8 = MUX_A(CM_FXCOMCLKSEL8, 2),
X    kAUDIO_PLL_to_FLEXCOMM8 = (((20) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM8 = MUX_A(CM_FXCOMCLKSEL8, 3),
X    kMCLK_to_FLEXCOMM8 = (((20) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM8 = MUX_A(CM_FXCOMCLKSEL8, 4),
X    kFRG_to_FLEXCOMM8 = (((20) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM8 = MUX_A(CM_FXCOMCLKSEL8, 7),
X    kNONE_to_FLEXCOMM8 = (((20) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_FLEXCOMM9 = MUX_A(CM_FXCOMCLKSEL9, 0),
X    kFRO12M_to_FLEXCOMM9 = (((21) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_to_FLEXCOMM9 = MUX_A(CM_FXCOMCLKSEL9, 1),
X    kFRO_HF_to_FLEXCOMM9 = (((21) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_FLEXCOMM9 = MUX_A(CM_FXCOMCLKSEL9, 2),
X    kAUDIO_PLL_to_FLEXCOMM9 = (((21) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_FLEXCOMM9 = MUX_A(CM_FXCOMCLKSEL9, 3),
X    kMCLK_to_FLEXCOMM9 = (((21) << 0) | ((3 + 1) << 8)),
N    kFRG_to_FLEXCOMM9 = MUX_A(CM_FXCOMCLKSEL9, 4),
X    kFRG_to_FLEXCOMM9 = (((21) << 0) | ((4 + 1) << 8)),
N    kNONE_to_FLEXCOMM9 = MUX_A(CM_FXCOMCLKSEL9, 7),
X    kNONE_to_FLEXCOMM9 = (((21) << 0) | ((7 + 1) << 8)),
N
N    kFRO_HF_to_MCLK = MUX_A(CM_MCLKCLKSEL, 0),
X    kFRO_HF_to_MCLK = (((24) << 0) | ((0 + 1) << 8)),
N    kAUDIO_PLL_to_MCLK = MUX_A(CM_MCLKCLKSEL, 1),
X    kAUDIO_PLL_to_MCLK = (((24) << 0) | ((1 + 1) << 8)),
N    kNONE_to_MCLK = MUX_A(CM_MCLKCLKSEL, 7),
X    kNONE_to_MCLK = (((24) << 0) | ((7 + 1) << 8)),
N
N    kMAIN_CLK_to_FRG = MUX_A(CM_FRGCLKSEL, 0),
X    kMAIN_CLK_to_FRG = (((26) << 0) | ((0 + 1) << 8)),
N    kSYS_PLL_to_FRG = MUX_A(CM_FRGCLKSEL, 1),
X    kSYS_PLL_to_FRG = (((26) << 0) | ((1 + 1) << 8)),
N    kFRO12M_to_FRG = MUX_A(CM_FRGCLKSEL, 2),
X    kFRO12M_to_FRG = (((26) << 0) | ((2 + 1) << 8)),
N    kFRO_HF_to_FRG = MUX_A(CM_FRGCLKSEL, 3),
X    kFRO_HF_to_FRG = (((26) << 0) | ((3 + 1) << 8)),
N    kNONE_to_FRG = MUX_A(CM_FRGCLKSEL, 7),
X    kNONE_to_FRG = (((26) << 0) | ((7 + 1) << 8)),
N
N    kFRO12M_to_DMIC = MUX_A(CM_DMICCLKSEL, 0),
X    kFRO12M_to_DMIC = (((27) << 0) | ((0 + 1) << 8)),
N    kFRO_HF_DIV_to_DMIC = MUX_A(CM_DMICCLKSEL, 1),
X    kFRO_HF_DIV_to_DMIC = (((27) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_DMIC = MUX_A(CM_DMICCLKSEL, 2),
X    kAUDIO_PLL_to_DMIC = (((27) << 0) | ((2 + 1) << 8)),
N    kMCLK_to_DMIC = MUX_A(CM_DMICCLKSEL, 3),
X    kMCLK_to_DMIC = (((27) << 0) | ((3 + 1) << 8)),
N    kNONE_to_DMIC = MUX_A(CM_DMICCLKSEL, 7),
X    kNONE_to_DMIC = (((27) << 0) | ((7 + 1) << 8)),
N
N    kMCLK_to_SCT_CLK = MUX_A(CM_SCTCLKSEL, 0),
X    kMCLK_to_SCT_CLK = (((28) << 0) | ((0 + 1) << 8)),
N    kSYS_PLL_to_SCT_CLK = MUX_A(CM_SCTCLKSEL, 1),
X    kSYS_PLL_to_SCT_CLK = (((28) << 0) | ((1 + 1) << 8)),
N    kFRO_HF_to_SCT_CLK = MUX_A(CM_SCTCLKSEL, 2),
X    kFRO_HF_to_SCT_CLK = (((28) << 0) | ((2 + 1) << 8)),
N    kAUDIO_PLL_to_SCT_CLK = MUX_A(CM_SCTCLKSEL, 3),
X    kAUDIO_PLL_to_SCT_CLK = (((28) << 0) | ((3 + 1) << 8)),
N    kNONE_to_SCT_CLK = MUX_A(CM_SCTCLKSEL, 7),
X    kNONE_to_SCT_CLK = (((28) << 0) | ((7 + 1) << 8)),
N
N    kMCLK_to_SDIO_CLK = MUX_A(CM_SDIOCLKSEL, 0),
X    kMCLK_to_SDIO_CLK = (((30) << 0) | ((0 + 1) << 8)),
N    kSYS_PLL_to_SDIO_CLK = MUX_A(CM_SDIOCLKSEL, 1),
X    kSYS_PLL_to_SDIO_CLK = (((30) << 0) | ((1 + 1) << 8)),
N    kUSB_PLL_to_SDIO_CLK = MUX_A(CM_SDIOCLKSEL, 2),
X    kUSB_PLL_to_SDIO_CLK = (((30) << 0) | ((2 + 1) << 8)),
N    kFRO_HF_to_SDIO_CLK = MUX_A(CM_SDIOCLKSEL, 3),
X    kFRO_HF_to_SDIO_CLK = (((30) << 0) | ((3 + 1) << 8)),
N    kAUDIO_PLL_to_SDIO_CLK = MUX_A(CM_SDIOCLKSEL, 3),
X    kAUDIO_PLL_to_SDIO_CLK = (((30) << 0) | ((3 + 1) << 8)),
N    kNONE_to_SDIO_CLK = MUX_A(CM_SDIOCLKSEL, 7),
X    kNONE_to_SDIO_CLK = (((30) << 0) | ((7 + 1) << 8)),
N    
N    kMCLK_to_LCD_CLK = MUX_A(CM_LCDCLKSEL, 0),
X    kMCLK_to_LCD_CLK = (((29) << 0) | ((0 + 1) << 8)),
N    kLCDCLKIN_to_LCD_CLK = MUX_A(CM_LCDCLKSEL, 1),
X    kLCDCLKIN_to_LCD_CLK = (((29) << 0) | ((1 + 1) << 8)),
N    kFRO_HF_to_LCD_CLK = MUX_A(CM_LCDCLKSEL, 2),
X    kFRO_HF_to_LCD_CLK = (((29) << 0) | ((2 + 1) << 8)),
N    kNONE_to_LCD_CLK = MUX_A(CM_LCDCLKSEL, 3),
X    kNONE_to_LCD_CLK = (((29) << 0) | ((3 + 1) << 8)),
N    
N    kMAIN_CLK_to_ASYNC_APB = MUX_A(CM_ASYNCAPB, 0),
X    kMAIN_CLK_to_ASYNC_APB = (((31) << 0) | ((0 + 1) << 8)),
N    kFRO12M_to_ASYNC_APB = MUX_A(CM_ASYNCAPB, 1),
X    kFRO12M_to_ASYNC_APB = (((31) << 0) | ((1 + 1) << 8)),
N    kAUDIO_PLL_to_ASYNC_APB = MUX_A(CM_ASYNCAPB, 2),
X    kAUDIO_PLL_to_ASYNC_APB = (((31) << 0) | ((2 + 1) << 8)),
N    kI2C_CLK_FC6_to_ASYNC_APB = MUX_A(CM_ASYNCAPB, 3),
X    kI2C_CLK_FC6_to_ASYNC_APB = (((31) << 0) | ((3 + 1) << 8)),
N    kNONE_to_NONE = 0x80000000U,
N} clock_attach_id_t;
N
N/*  Clock dividers */
Ntypedef enum _clock_div_name
N{
N    kCLOCK_DivSystickClk = 0,
N    kCLOCK_DivArmTrClkDiv = 1,
N    kCLOCK_DivCan0Clk = 2,
N    kCLOCK_DivCan1Clk = 3,
N    kCLOCK_DivSmartCard0Clk = 4,
N    kCLOCK_DivSmartCard1Clk = 5,
N    kCLOCK_DivAhbClk = 32,
N    kCLOCK_DivClkOut = 33,
N    kCLOCK_DivFrohfClk = 34,
N    kCLOCK_DivSpifiClk = 36,
N    kCLOCK_DivAdcAsyncClk = 37,
N    kCLOCK_DivUsb0Clk = 38,
N    kCLOCK_DivUsb1Clk = 39,
N    kCLOCK_DivFrg = 40,
N    kCLOCK_DivDmicClk = 42,
N    kCLOCK_DivMClk = 43,
N    kCLOCK_DivLcdClk = 44,
N    kCLOCK_DivSctClk = 45,
N    kCLOCK_DivEmcClk = 46,
N    kCLOCK_DivSdioClk = 47
N} clock_div_name_t;
N
N/*******************************************************************************
N * API
N ******************************************************************************/
N
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {
N#endif /* __cplusplus */
N
Nstatic inline void CLOCK_EnableClock(clock_ip_name_t clk)
N{
N    uint32_t index = CLK_GATE_ABSTRACT_REG_OFFSET(clk);
X    uint32_t index = (((uint32_t)(clk)&0xFFFFFF00U) >> 8U);
N    if (index < 3)
N    {
N        SYSCON->AHBCLKCTRLSET[index] = (1U << CLK_GATE_ABSTRACT_BITS_SHIFT(clk));
X        ((SYSCON_Type *)(0x40000000u))->AHBCLKCTRLSET[index] = (1U << (((uint32_t)(clk)&0x000000FFU) >> 0U));
N    }
N    else
N    {
N        SYSCON->ASYNCAPBCTRL = SYSCON_ASYNCAPBCTRL_ENABLE(1);
X        ((SYSCON_Type *)(0x40000000u))->ASYNCAPBCTRL = (((uint32_t)(((uint32_t)(1)) << (0U))) & (0x1U));
N        ASYNC_SYSCON->ASYNCAPBCLKCTRLSET = (1U << CLK_GATE_ABSTRACT_BITS_SHIFT(clk));
X        ((ASYNC_SYSCON_Type *)(0x40040000u))->ASYNCAPBCLKCTRLSET = (1U << (((uint32_t)(clk)&0x000000FFU) >> 0U));
N    }
N}
N
Nstatic inline void CLOCK_DisableClock(clock_ip_name_t clk)
N{
N    uint32_t index = CLK_GATE_ABSTRACT_REG_OFFSET(clk);
X    uint32_t index = (((uint32_t)(clk)&0xFFFFFF00U) >> 8U);
N    if (index < 3)
N    {
N        SYSCON->AHBCLKCTRLCLR[index] = (1U << CLK_GATE_ABSTRACT_BITS_SHIFT(clk));
X        ((SYSCON_Type *)(0x40000000u))->AHBCLKCTRLCLR[index] = (1U << (((uint32_t)(clk)&0x000000FFU) >> 0U));
N    }
N    else
N    {
N        ASYNC_SYSCON->ASYNCAPBCLKCTRLCLR = (1U << CLK_GATE_ABSTRACT_BITS_SHIFT(clk));
X        ((ASYNC_SYSCON_Type *)(0x40040000u))->ASYNCAPBCLKCTRLCLR = (1U << (((uint32_t)(clk)&0x000000FFU) >> 0U));
N        SYSCON->ASYNCAPBCTRL = SYSCON_ASYNCAPBCTRL_ENABLE(0);
X        ((SYSCON_Type *)(0x40000000u))->ASYNCAPBCTRL = (((uint32_t)(((uint32_t)(0)) << (0U))) & (0x1U));
N
N    }
N}
N/**
N * @brief FLASH Access time definitions
N */
Ntypedef enum _clock_flashtim
N{
N    kCLOCK_Flash1Cycle = 0, /*!< Flash accesses use 1 CPU clocks */
N    kCLOCK_Flash2Cycle,     /*!< Flash accesses use 2 CPU clocks */
N    kCLOCK_Flash3Cycle,     /*!< Flash accesses use 3 CPU clocks */
N    kCLOCK_Flash4Cycle,     /*!< Flash accesses use 4 CPU clocks */
N    kCLOCK_Flash5Cycle,     /*!< Flash accesses use 5 CPU clocks */
N    kCLOCK_Flash6Cycle,     /*!< Flash accesses use 6 CPU clocks */
N    kCLOCK_Flash7Cycle,     /*!< Flash accesses use 7 CPU clocks */
N    kCLOCK_Flash8Cycle,     /*!< Flash accesses use 8 CPU clocks */
N    kCLOCK_Flash9Cycle      /*!< Flash accesses use 9 CPU clocks */
N} clock_flashtim_t;
N
N/**
N * @brief	Set FLASH memory access time in clocks
N * @param	clks	: Clock cycles for FLASH access
N * @return	Nothing
N */
Nstatic inline void CLOCK_SetFLASHAccessCycles(clock_flashtim_t clks)
N{
N    uint32_t tmp;
N
N    tmp = SYSCON->FLASHCFG & ~(SYSCON_FLASHCFG_FLASHTIM_MASK);
X    tmp = ((SYSCON_Type *)(0x40000000u))->FLASHCFG & ~((0xF000U));
N
N    /* Don't alter lower bits */
N    SYSCON->FLASHCFG = tmp | ((uint32_t)clks << SYSCON_FLASHCFG_FLASHTIM_SHIFT);
X    ((SYSCON_Type *)(0x40000000u))->FLASHCFG = tmp | ((uint32_t)clks << (12U));
N}
N
N/**
N * @brief	Initialize the Core clock to given frequency (12, 48 or 96 MHz).
N * Turns on FRO and uses default CCO, if freq is 12000000, then high speed output is off, else high speed output is
N * enabled.
N * @param	iFreq	: Desired frequency (must be one of #CLK_FRO_12MHZ or #CLK_FRO_48MHZ or #CLK_FRO_96MHZ)
N * @return	returns success or fail status.
N */
Nstatus_t CLOCK_SetupFROClocking(uint32_t iFreq);
N/**
N * @brief	Configure the clock selection muxes.
N * @param	connection	: Clock to be configured.
N * @return	Nothing
N */
Nvoid CLOCK_AttachClk(clock_attach_id_t connection);
N/**
N * @brief	Setup peripheral clock dividers.
N * @param	div_name	: Clock divider name
N * @param divided_by_value: Value to be divided
N * @param reset :  Whether to reset the divider counter.
N * @return	Nothing
N */
Nvoid CLOCK_SetClkDiv(clock_div_name_t div_name, uint32_t divided_by_value, bool reset);
Xvoid CLOCK_SetClkDiv(clock_div_name_t div_name, uint32_t divided_by_value, _Bool reset);
N/**
N * @brief	Set the flash wait states for the input freuqency.
N * @param	iFreq	: Input frequency
N * @return	Nothing
N */
Nvoid CLOCK_SetFLASHAccessCyclesForFreq(uint32_t iFreq);
N/*! @brief	Return Frequency of selected clock
N *  @return	Frequency of selected clock
N */
Nuint32_t CLOCK_GetFreq(clock_name_t clockName);
N/*! @brief	Return Frequency of FRO 12MHz
N *  @return	Frequency of FRO 12MHz
N */
Nuint32_t CLOCK_GetFro12MFreq(void);
N/*! @brief	Return Frequency of ClockOut
N *  @return	Frequency of ClockOut
N */
Nuint32_t CLOCK_GetClockOutClkFreq(void);
N/*! @brief	Return Frequency of Spifi Clock
N *  @return	Frequency of Spifi.
N */
Nuint32_t CLOCK_GetSpifiClkFreq(void);
N/*! @brief	Return Frequency of Adc Clock
N *  @return	Frequency of Adc Clock.
N */
Nuint32_t CLOCK_GetAdcClkFreq(void);
N/*! @brief	Return Frequency of Usb0 Clock
N *  @return	Frequency of Usb0 Clock.
N */
Nuint32_t CLOCK_GetUsb0ClkFreq(void);
N/*! @brief	Return Frequency of Usb1 Clock
N *  @return	Frequency of Usb1 Clock.
N */
Nuint32_t CLOCK_GetUsb1ClkFreq(void);
N/*! @brief	Return Frequency of MClk Clock
N *  @return	Frequency of MClk Clock.
N */
Nuint32_t CLOCK_GetMclkClkFreq(void);
N/*! @brief	Return Frequency of SCTimer Clock
N *  @return	Frequency of SCTimer Clock.
N */
Nuint32_t CLOCK_GetSctClkFreq(void);
N/*! @brief	Return Frequency of SDIO Clock
N *  @return	Frequency of SDIO Clock.
N */
Nuint32_t CLOCK_GetSdioClkFreq(void);
N/*! @brief	Return Frequency of LCD Clock
N *  @return	Frequency of LCD Clock.
N */
Nuint32_t CLOCK_GetLcdClkFreq(void);
N/*! @brief	Return Frequency of LCD CLKIN Clock
N *  @return	Frequency of LCD CLKIN Clock.
N */
Nuint32_t CLOCK_GetLcdClkIn(void);
N/*! @brief	Return Frequency of External Clock
N *  @return	Frequency of External Clock. If no external clock is used returns 0.
N */
Nuint32_t CLOCK_GetExtClkFreq(void);
N/*! @brief	Return Frequency of Watchdog Oscillator
N *  @return	Frequency of Watchdog Oscillator
N */
Nuint32_t CLOCK_GetWdtOscFreq(void);
N/*! @brief	Return Frequency of High-Freq output of FRO
N *  @return	Frequency of High-Freq output of FRO
N */
Nuint32_t CLOCK_GetFroHfFreq(void);
N/*! @brief	Return Frequency of PLL
N *  @return	Frequency of PLL
N */
Nuint32_t CLOCK_GetPllOutFreq(void);
N/*! @brief	Return Frequency of USB PLL
N *  @return	Frequency of PLL
N */
Nuint32_t CLOCK_GetUsbPllOutFreq(void);
N/*! @brief	Return Frequency of AUDIO PLL
N *  @return	Frequency of PLL
N */
Nuint32_t CLOCK_GetAudioPllOutFreq(void);
N/*! @brief	Return Frequency of 32kHz osc
N *  @return	Frequency of 32kHz osc
N */
Nuint32_t CLOCK_GetOsc32KFreq(void);
N/*! @brief	Return Frequency of Core System
N *  @return	Frequency of Core System
N */
Nuint32_t CLOCK_GetCoreSysClkFreq(void);
N/*! @brief	Return Frequency of I2S MCLK Clock
N *  @return	Frequency of I2S MCLK Clock
N */
Nuint32_t CLOCK_GetI2SMClkFreq(void);
N/*! @brief	Return Frequency of Flexcomm functional Clock
N *  @return	Frequency of Flexcomm functional Clock
N */
Nuint32_t CLOCK_GetFlexCommClkFreq(uint32_t id);
N/*! @brief	Return Asynchronous APB Clock source
N *  @return	Asynchronous APB CLock source
N */
N__STATIC_INLINE async_clock_src_t CLOCK_GetAsyncApbClkSrc(void)
Xstatic __inline async_clock_src_t CLOCK_GetAsyncApbClkSrc(void)
N{
N    return (async_clock_src_t)(ASYNC_SYSCON->ASYNCAPBCLKSELA & 0x3);
X    return (async_clock_src_t)(((ASYNC_SYSCON_Type *)(0x40040000u))->ASYNCAPBCLKSELA & 0x3);
N}
N/*! @brief	Return Frequency of Asynchronous APB Clock
N *  @return	Frequency of Asynchronous APB Clock Clock
N */
Nuint32_t CLOCK_GetAsyncApbClkFreq(void);
N/*! @brief	Return Audio PLL input clock rate
N *  @return	Audio PLL input clock rate
N */
Nuint32_t CLOCK_GetAudioPLLInClockRate(void);
N/*! @brief	Return System PLL input clock rate
N *  @return	System PLL input clock rate
N */
Nuint32_t CLOCK_GetSystemPLLInClockRate(void);
N
N/*! @brief	Return System PLL output clock rate
N *  @param	recompute	: Forces a PLL rate recomputation if true
N *  @return	System PLL output clock rate
N *  @note	The PLL rate is cached in the driver in a variable as
N *  the rate computation function can take some time to perform. It
N *  is recommended to use 'false' with the 'recompute' parameter.
N */
Nuint32_t CLOCK_GetSystemPLLOutClockRate(bool recompute);
Xuint32_t CLOCK_GetSystemPLLOutClockRate(_Bool recompute);
N
N/*! @brief	Return System AUDIO PLL output clock rate
N *  @param	recompute	: Forces a AUDIO PLL rate recomputation if true
N *  @return	System AUDIO PLL output clock rate
N *  @note	The AUDIO PLL rate is cached in the driver in a variable as
N *  the rate computation function can take some time to perform. It
N *  is recommended to use 'false' with the 'recompute' parameter.
N */
Nuint32_t CLOCK_GetAudioPLLOutClockRate(bool recompute);
Xuint32_t CLOCK_GetAudioPLLOutClockRate(_Bool recompute);
N
N/*! @brief	Return System USB PLL output clock rate
N *  @param	recompute	: Forces a USB PLL rate recomputation if true
N *  @return	System USB PLL output clock rate
N *  @note	The USB PLL rate is cached in the driver in a variable as
N *  the rate computation function can take some time to perform. It
N *  is recommended to use 'false' with the 'recompute' parameter.
N */
Nuint32_t CLOCK_GetUSbPLLOutClockRate(bool recompute);
Xuint32_t CLOCK_GetUSbPLLOutClockRate(_Bool recompute);
N
N/*! @brief	Enables and disables PLL bypass mode
N *  @brief	bypass	: true to bypass PLL (PLL output = PLL input, false to disable bypass
N *  @return	System PLL output clock rate
N */
N__STATIC_INLINE void CLOCK_SetBypassPLL(bool bypass)
Xstatic __inline void CLOCK_SetBypassPLL(_Bool bypass)
N{
N    if (bypass)
N    {
N        SYSCON->SYSPLLCTRL |= (1UL << SYSCON_SYSPLLCTRL_BYPASS_SHIFT);
X        ((SYSCON_Type *)(0x40000000u))->SYSPLLCTRL |= (1UL << (15U));
N    }
N    else
N    {
N        SYSCON->SYSPLLCTRL &= ~(1UL << SYSCON_SYSPLLCTRL_BYPASS_SHIFT);
X        ((SYSCON_Type *)(0x40000000u))->SYSPLLCTRL &= ~(1UL << (15U));
N    }
N}
N
N/*! @brief	Check if PLL is locked or not
N *  @return	true if the PLL is locked, false if not locked
N */
N__STATIC_INLINE bool CLOCK_IsSystemPLLLocked(void)
Xstatic __inline _Bool CLOCK_IsSystemPLLLocked(void)
N{
N    return (bool)((SYSCON->SYSPLLSTAT & SYSCON_SYSPLLSTAT_LOCK_MASK) != 0);
X    return (_Bool)((((SYSCON_Type *)(0x40000000u))->SYSPLLSTAT & (0x1U)) != 0);
N}
N
N/*! @brief	Check if USB PLL is locked or not
N *  @return	true if the USB PLL is locked, false if not locked
N */
N__STATIC_INLINE bool CLOCK_IsUsbPLLLocked(void)
Xstatic __inline _Bool CLOCK_IsUsbPLLLocked(void)
N{
N    return (bool)((SYSCON->USBPLLSTAT & SYSCON_USBPLLSTAT_LOCK_MASK) != 0);
X    return (_Bool)((((SYSCON_Type *)(0x40000000u))->USBPLLSTAT & (0x1U)) != 0);
N}
N
N/*! @brief	Check if AUDIO PLL is locked or not
N *  @return	true if the AUDIO PLL is locked, false if not locked
N */
N__STATIC_INLINE bool CLOCK_IsAudioPLLLocked(void)
Xstatic __inline _Bool CLOCK_IsAudioPLLLocked(void)
N{
N    return (bool)((SYSCON->AUDPLLSTAT & SYSCON_AUDPLLSTAT_LOCK_MASK) != 0);
X    return (_Bool)((((SYSCON_Type *)(0x40000000u))->AUDPLLSTAT & (0x1U)) != 0);
N}
N
N/*! @brief	Enables and disables SYS OSC
N *  @brief	enable	: true to enable SYS OSC, false to disable SYS OSC
N*/
N__STATIC_INLINE  void CLOCK_Enable_SysOsc(bool enable)
Xstatic __inline  void CLOCK_Enable_SysOsc(_Bool enable)
N{
N    if(enable)
N    {
N        SYSCON->PDRUNCFGCLR[0] |= SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK;
X        ((SYSCON_Type *)(0x40000000u))->PDRUNCFGCLR[0] |= (0x200U);
N        SYSCON->PDRUNCFGCLR[1] |= SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK;
X        ((SYSCON_Type *)(0x40000000u))->PDRUNCFGCLR[1] |= (0x8U);
N    }
N    
N    else
N    {
N        SYSCON->PDRUNCFGSET[0] = SYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK; 
X        ((SYSCON_Type *)(0x40000000u))->PDRUNCFGSET[0] = (0x200U); 
N        SYSCON->PDRUNCFGSET[1] = SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK;
X        ((SYSCON_Type *)(0x40000000u))->PDRUNCFGSET[1] = (0x8U);
N
N    }
N}
N
N/*! @brief Store the current PLL rate
N *  @param	rate: Current rate of the PLL
N *  @return	Nothing
N **/
Nvoid CLOCK_SetStoredPLLClockRate(uint32_t rate);
N
N/*! @brief Store the current AUDIO PLL rate
N *  @param	rate: Current rate of the PLL
N *  @return	Nothing
N **/
Nvoid CLOCK_SetStoredAudioPLLClockRate(uint32_t rate);
N
N/*! @brief PLL configuration structure flags for 'flags' field
N * These flags control how the PLL configuration function sets up the PLL setup structure.<br>
N *
N * When the PLL_CONFIGFLAG_USEINRATE flag is selected, the 'InputRate' field in the
N * configuration structure must be assigned with the expected PLL frequency. If the
N * PLL_CONFIGFLAG_USEINRATE is not used, 'InputRate' is ignored in the configuration
N * function and the driver will determine the PLL rate from the currently selected
N * PLL source. This flag might be used to configure the PLL input clock more accurately
N * when using the WDT oscillator or a more dyanmic CLKIN source.<br>
N *
N * When the PLL_CONFIGFLAG_FORCENOFRACT flag is selected, the PLL hardware for the
N * automatic bandwidth selection, Spread Spectrum (SS) support, and fractional M-divider
N * are not used.<br>
N */
N#define PLL_CONFIGFLAG_USEINRATE (1 << 0) /*!< Flag to use InputRate in PLL configuration structure for setup */
N#define PLL_CONFIGFLAG_FORCENOFRACT                                                                                    \
N    (1                                                                                                                 \
N     << 2) /*!< Force non-fractional output mode, PLL output will not use the fractional, automatic bandwidth, or SS \ \
N                \ \ \                                                                                                                     \
N                  \ \ \ \ \                                                                                                                     \
N                    \ \ \ \ \ \ \                                                                                                                     \
N                      hardware */
X#define PLL_CONFIGFLAG_FORCENOFRACT                                                                                        (1                                                                                                                      << 2)  
N
N/*! @brief PLL Spread Spectrum (SS) Programmable modulation frequency
N * See (MF) field in the SYSPLLSSCTRL1 register in the UM.
N */
Ntypedef enum _ss_progmodfm
N{
N    kSS_MF_512 = (0 << 20), /*!< Nss = 512 (fm ? 3.9 - 7.8 kHz) */
N    kSS_MF_384 = (1 << 20), /*!< Nss ?= 384 (fm ? 5.2 - 10.4 kHz) */
N    kSS_MF_256 = (2 << 20), /*!< Nss = 256 (fm ? 7.8 - 15.6 kHz) */
N    kSS_MF_128 = (3 << 20), /*!< Nss = 128 (fm ? 15.6 - 31.3 kHz) */
N    kSS_MF_64 = (4 << 20),  /*!< Nss = 64 (fm ? 32.3 - 64.5 kHz) */
N    kSS_MF_32 = (5 << 20),  /*!< Nss = 32 (fm ? 62.5- 125 kHz) */
N    kSS_MF_24 = (6 << 20),  /*!< Nss ?= 24 (fm ? 83.3- 166.6 kHz) */
N    kSS_MF_16 = (7 << 20)   /*!< Nss = 16 (fm ? 125- 250 kHz) */
N} ss_progmodfm_t;
N
N/*! @brief PLL Spread Spectrum (SS) Programmable frequency modulation depth
N * See (MR) field in the SYSPLLSSCTRL1 register in the UM.
N */
Ntypedef enum _ss_progmoddp
N{
N    kSS_MR_K0 = (0 << 23),   /*!< k = 0 (no spread spectrum) */
N    kSS_MR_K1 = (1 << 23),   /*!< k = 1 */
N    kSS_MR_K1_5 = (2 << 23), /*!< k = 1.5 */
N    kSS_MR_K2 = (3 << 23),   /*!< k = 2 */
N    kSS_MR_K3 = (4 << 23),   /*!< k = 3 */
N    kSS_MR_K4 = (5 << 23),   /*!< k = 4 */
N    kSS_MR_K6 = (6 << 23),   /*!< k = 6 */
N    kSS_MR_K8 = (7 << 23)    /*!< k = 8 */
N} ss_progmoddp_t;
N
N/*! @brief PLL Spread Spectrum (SS) Modulation waveform control
N * See (MC) field in the SYSPLLSSCTRL1 register in the UM.<br>
N * Compensation for low pass filtering of the PLL to get a triangular
N * modulation at the output of the PLL, giving a flat frequency spectrum.
N */
Ntypedef enum _ss_modwvctrl
N{
N    kSS_MC_NOC = (0 << 26),  /*!< no compensation */
N    kSS_MC_RECC = (2 << 26), /*!< recommended setting */
N    kSS_MC_MAXC = (3 << 26), /*!< max. compensation */
N} ss_modwvctrl_t;
N
N/*! @brief PLL configuration structure
N *
N * This structure can be used to configure the settings for a PLL
N * setup structure. Fill in the desired configuration for the PLL
N * and call the PLL setup function to fill in a PLL setup structure.
N */
Ntypedef struct _pll_config
N{
N    uint32_t desiredRate; /*!< Desired PLL rate in Hz */
N    uint32_t inputRate;   /*!< PLL input clock in Hz, only used if PLL_CONFIGFLAG_USEINRATE flag is set */
N    uint32_t flags;       /*!< PLL configuration flags, Or'ed value of PLL_CONFIGFLAG_* definitions */
N    ss_progmodfm_t ss_mf; /*!< SS Programmable modulation frequency, only applicable when not using
N                             PLL_CONFIGFLAG_FORCENOFRACT flag */
N    ss_progmoddp_t ss_mr; /*!< SS Programmable frequency modulation depth, only applicable when not using
N                             PLL_CONFIGFLAG_FORCENOFRACT flag */
N    ss_modwvctrl_t
N        ss_mc; /*!< SS Modulation waveform control, only applicable when not using PLL_CONFIGFLAG_FORCENOFRACT flag */
N    bool mfDither; /*!< false for fixed modulation frequency or true for dithering, only applicable when not using
X    _Bool mfDither; 
N                      PLL_CONFIGFLAG_FORCENOFRACT flag */
N
N} pll_config_t;
N
N/*! @brief PLL setup structure flags for 'flags' field
N* These flags control how the PLL setup function sets up the PLL
N*/
N#define PLL_SETUPFLAG_POWERUP (1 << 0)  /*!< Setup will power on the PLL after setup */
N#define PLL_SETUPFLAG_WAITLOCK (1 << 1) /*!< Setup will wait for PLL lock, implies the PLL will be pwoered on */
N#define PLL_SETUPFLAG_ADGVOLT (1 << 2)  /*!< Optimize system voltage for the new PLL rate */
N
N/*! @brief PLL setup structure
N* This structure can be used to pre-build a PLL setup configuration
N* at run-time and quickly set the PLL to the configuration. It can be
N* populated with the PLL setup function. If powering up or waiting
N* for PLL lock, the PLL input clock source should be configured prior
N* to PLL setup.
N*/
Ntypedef struct _pll_setup
N{
N    uint32_t syspllctrl;      /*!< PLL control register SYSPLLCTRL */
N    uint32_t syspllndec;      /*!< PLL NDEC register SYSPLLNDEC */
N    uint32_t syspllpdec;      /*!< PLL PDEC register SYSPLLPDEC */
N    uint32_t syspllmdec;      /*!< PLL MDEC registers SYSPLLPDEC */
N    uint32_t pllRate;         /*!< Acutal PLL rate */
N    uint32_t flags;           /*!< PLL setup flags, Or'ed value of PLL_SETUPFLAG_* definitions */
N} pll_setup_t;
N
N/*! @brief PLL status definitions
N */
Ntypedef enum _pll_error
N{
N    kStatus_PLL_Success = MAKE_STATUS(kStatusGroup_Generic, 0),         /*!< PLL operation was successful */
X    kStatus_PLL_Success = ((((kStatusGroup_Generic)*100) + (0))),          
N    kStatus_PLL_OutputTooLow = MAKE_STATUS(kStatusGroup_Generic, 1),    /*!< PLL output rate request was too low */
X    kStatus_PLL_OutputTooLow = ((((kStatusGroup_Generic)*100) + (1))),     
N    kStatus_PLL_OutputTooHigh = MAKE_STATUS(kStatusGroup_Generic, 2),   /*!< PLL output rate request was too high */
X    kStatus_PLL_OutputTooHigh = ((((kStatusGroup_Generic)*100) + (2))),    
N    kStatus_PLL_InputTooLow = MAKE_STATUS(kStatusGroup_Generic, 3),     /*!< PLL input rate is too low */
X    kStatus_PLL_InputTooLow = ((((kStatusGroup_Generic)*100) + (3))),      
N    kStatus_PLL_InputTooHigh = MAKE_STATUS(kStatusGroup_Generic, 4),    /*!< PLL input rate is too high */
X    kStatus_PLL_InputTooHigh = ((((kStatusGroup_Generic)*100) + (4))),     
N    kStatus_PLL_OutsideIntLimit = MAKE_STATUS(kStatusGroup_Generic, 5), /*!< Requested output rate isn't possible */
X    kStatus_PLL_OutsideIntLimit = ((((kStatusGroup_Generic)*100) + (5))),  
N    kStatus_PLL_CCOTooLow = MAKE_STATUS(kStatusGroup_Generic, 6),       /*!< Requested CCO rate isn't possible */
X    kStatus_PLL_CCOTooLow = ((((kStatusGroup_Generic)*100) + (6))),        
N    kStatus_PLL_CCOTooHigh = MAKE_STATUS(kStatusGroup_Generic, 7)       /*!< Requested CCO rate isn't possible */
X    kStatus_PLL_CCOTooHigh = ((((kStatusGroup_Generic)*100) + (7)))        
N} pll_error_t;
N
N/*! @brief USB clock source definition. */
Ntypedef enum _clock_usb_src
N{
N    kCLOCK_UsbSrcFro = (uint32_t)kCLOCK_FroHf,            /*!< Use FRO 96 or 48 MHz. */
N    kCLOCK_UsbSrcSystemPll = (uint32_t)kCLOCK_PllOut,     /*!< Use System PLL output. */
N    kCLOCK_UsbSrcMainClock = (uint32_t)kCLOCK_CoreSysClk, /*!< Use Main clock.    */
N    kCLOCK_UsbSrcUsbPll = (uint32_t)kCLOCK_UsbPll,        /*!< Use USB PLL clock.    */
N
N    kCLOCK_UsbSrcNone = SYSCON_USB0CLKSEL_SEL(7)          /*!< Use None, this may be selected in order to reduce power when no output is needed.. */
X    kCLOCK_UsbSrcNone = (((uint32_t)(((uint32_t)(7)) << (0U))) & (0x7U))           
N} clock_usb_src_t;
N
N/*! @brief USB PDEL Divider. */
Ntypedef enum _usb_pll_psel
N{
N    pSel_Divide_1 = 0U,
N    pSel_Divide_2,
N    pSel_Divide_4,
N    pSel_Divide_8
N}usb_pll_psel;
N
N/*! @brief PLL setup structure
N* This structure can be used to pre-build a USB PLL setup configuration
N* at run-time and quickly set the usb PLL to the configuration. It can be
N* populated with the USB PLL setup function. If powering up or waiting
N* for USB PLL lock, the PLL input clock source should be configured prior
N* to USB PLL setup.
N*/
Ntypedef struct _usb_pll_setup
N{
N  uint8_t msel;           /*!< USB PLL control register msel:1U-256U */
N  uint8_t psel;           /*!< USB PLL control register psel:only support inter 1U 2U 4U 8U */
N  uint8_t nsel;           /*!< USB PLL control register nsel:only suppoet inter 1U 2U 3U 4U */
N  bool direct;            /*!< USB PLL CCO output control */
X  _Bool direct;             
N  bool bypass;            /*!< USB PLL inout clock bypass control  */
X  _Bool bypass;             
N  bool fbsel;             /*!< USB PLL ineter mode and non-integer mode control*/
X  _Bool fbsel;              
N  uint32_t inputRate;     /*!< USB PLL input rate */
N} usb_pll_setup_t;
N
N/*! @brief	Return System PLL output clock rate from setup structure
N *  @param	pSetup	: Pointer to a PLL setup structure
N *  @return	System PLL output clock rate the setup structure will generate
N */
Nuint32_t CLOCK_GetSystemPLLOutFromSetup(pll_setup_t *pSetup);
N
N/*! @brief	Return System AUDIO PLL output clock rate from setup structure
N *  @param	pSetup	: Pointer to a PLL setup structure
N *  @return	System PLL output clock rate the setup structure will generate
N */
Nuint32_t CLOCK_GetAudioPLLOutFromSetup(pll_setup_t *pSetup);
N
N/*! @brief	Return System USB PLL output clock rate from setup structure
N *  @param	pSetup	: Pointer to a PLL setup structure
N *  @return	System PLL output clock rate the setup structure will generate
N */
Nuint32_t CLOCK_GetUsbPLLOutFromSetup(const usb_pll_setup_t *pSetup);
N
N/*! @brief	Set PLL output based on the passed PLL setup data
N *  @param	pControl	: Pointer to populated PLL control structure to generate setup with
N *  @param	pSetup		: Pointer to PLL setup structure to be filled
N *  @return	PLL_ERROR_SUCCESS on success, or PLL setup error code
N *  @note	Actual frequency for setup may vary from the desired frequency based on the
N *  accuracy of input clocks, rounding, non-fractional PLL mode, etc.
N */
Npll_error_t CLOCK_SetupPLLData(pll_config_t *pControl, pll_setup_t *pSetup);
N
N/*! @brief	Set AUDIO PLL output based on the passed AUDIO PLL setup data
N *  @param	pControl	: Pointer to populated PLL control structure to generate setup with
N *  @param	pSetup		: Pointer to PLL setup structure to be filled
N *  @return	PLL_ERROR_SUCCESS on success, or PLL setup error code
N *  @note	Actual frequency for setup may vary from the desired frequency based on the
N *  accuracy of input clocks, rounding, non-fractional PLL mode, etc.
N */
Npll_error_t CLOCK_SetupAudioPLLData(pll_config_t *pControl, pll_setup_t *pSetup);
N
N/*! @brief	Set PLL output from PLL setup structure (precise frequency)
N * @param	pSetup	: Pointer to populated PLL setup structure
N* @param flagcfg : Flag configuration for PLL config structure
N * @return	PLL_ERROR_SUCCESS on success, or PLL setup error code
N * @note	This function will power off the PLL, setup the PLL with the
N * new setup data, and then optionally powerup the PLL, wait for PLL lock,
N * and adjust system voltages to the new PLL rate. The function will not
N * alter any source clocks (ie, main systen clock) that may use the PLL,
N * so these should be setup prior to and after exiting the function.
N */
Npll_error_t CLOCK_SetupSystemPLLPrec(pll_setup_t *pSetup, uint32_t flagcfg);
N
N/*! @brief	Set AUDIO PLL output from AUDIOPLL setup structure (precise frequency)
N * @param	pSetup	: Pointer to populated PLL setup structure
N* @param flagcfg : Flag configuration for PLL config structure
N * @return	PLL_ERROR_SUCCESS on success, or PLL setup error code
N * @note	This function will power off the PLL, setup the PLL with the
N * new setup data, and then optionally powerup the AUDIO PLL, wait for PLL lock,
N * and adjust system voltages to the new AUDIOPLL rate. The function will not
N * alter any source clocks (ie, main systen clock) that may use the AUDIO PLL,
N * so these should be setup prior to and after exiting the function.
N */
Npll_error_t CLOCK_SetupAudioPLLPrec(pll_setup_t *pSetup, uint32_t flagcfg);
N
N/**
N * @brief	Set PLL output from PLL setup structure (precise frequency)
N * @param	pSetup	: Pointer to populated PLL setup structure
N * @return	kStatus_PLL_Success on success, or PLL setup error code
N * @note	This function will power off the PLL, setup the PLL with the
N * new setup data, and then optionally powerup the PLL, wait for PLL lock,
N * and adjust system voltages to the new PLL rate. The function will not
N * alter any source clocks (ie, main systen clock) that may use the PLL,
N * so these should be setup prior to and after exiting the function.
N */
Npll_error_t CLOCK_SetPLLFreq(const pll_setup_t *pSetup);
N
N/**
N * @brief	Set USB PLL output from USB PLL setup structure (precise frequency)
N * @param	pSetup	: Pointer to populated USB PLL setup structure
N * @return	kStatus_PLL_Success on success, or USB PLL setup error code
N * @note	This function will power off the USB PLL, setup the PLL with the
N * new setup data, and then optionally powerup the USB PLL, wait for USB PLL lock,
N * and adjust system voltages to the new USB PLL rate. The function will not
N * alter any source clocks (ie, usb pll clock) that may use the USB PLL,
N * so these should be setup prior to and after exiting the function.
N */
Npll_error_t CLOCK_SetUsbPLLFreq(const usb_pll_setup_t *pSetup);
N
N/*! @brief	Set PLL output based on the multiplier and input frequency
N * @param	multiply_by	: multiplier
N * @param	input_freq	: Clock input frequency of the PLL
N * @return	Nothing
N * @note	Unlike the Chip_Clock_SetupSystemPLLPrec() function, this
N * function does not disable or enable PLL power, wait for PLL lock,
N * or adjust system voltages. These must be done in the application.
N * The function will not alter any source clocks (ie, main systen clock)
N * that may use the PLL, so these should be setup prior to and after
N * exiting the function.
N */
Nvoid CLOCK_SetupSystemPLLMult(uint32_t multiply_by, uint32_t input_freq);
N
N/*! @brief Disable USB clock.
N *
N * Disable USB clock.
N */
Nstatic inline void CLOCK_DisableUsbDevicefs0Clock(clock_ip_name_t clk)
N{
N    CLOCK_DisableClock(clk);
N}
N
N/*! @brief Enable USB Device FS clock.
N * @param	src	: clock source
N * @param	freq: clock frequency
N * Enable USB Device Full Speed clock.
N */
Nbool CLOCK_EnableUsbfs0DeviceClock(clock_usb_src_t src, uint32_t freq);
X_Bool CLOCK_EnableUsbfs0DeviceClock(clock_usb_src_t src, uint32_t freq);
N
N/*! @brief Enable USB HOST FS clock.
N * @param	src	: clock source
N * @param	freq: clock frequency
N * Enable USB HOST Full Speed clock.
N */
Nbool CLOCK_EnableUsbfs0HostClock(clock_usb_src_t src, uint32_t freq);
X_Bool CLOCK_EnableUsbfs0HostClock(clock_usb_src_t src, uint32_t freq);
N
N/*! @brief Enable USB Device HS clock.
N * @param	src	: clock source
N * @param	freq: clock frequency
N * Enable USB Device High Speed clock.
N */
Nbool CLOCK_EnableUsbhs0DeviceClock(clock_usb_src_t src, uint32_t freq);
X_Bool CLOCK_EnableUsbhs0DeviceClock(clock_usb_src_t src, uint32_t freq);
N
N/*! @brief Enable USB HOST HS clock.
N * @param	src	: clock source
N * @param	freq: clock frequency
N * Enable USB HOST High Speed clock.
N */
Nbool CLOCK_EnableUsbhs0HostClock(clock_usb_src_t src, uint32_t freq);
X_Bool CLOCK_EnableUsbhs0HostClock(clock_usb_src_t src, uint32_t freq);
N
N#if defined(__cplusplus)
X#if 0L
S}
N#endif /* __cplusplus */
N
N/*! @} */
N
N#endif /* _FSL_CLOCK_H_ */
L 137 ".\SRC\Drivers\fsl_common.h" 2
N
N/*
N * Chip level peripheral reset API, for MCUs that implement peripheral reset control external to a peripheral
N */
N#if ((defined(FSL_FEATURE_SOC_SYSCON_COUNT) && (FSL_FEATURE_SOC_SYSCON_COUNT > 0)) || \
N     (defined(FSL_FEATURE_SOC_ASYNC_SYSCON_COUNT) && (FSL_FEATURE_SOC_ASYNC_SYSCON_COUNT > 0)))
X#if ((1L && ((1) > 0)) ||      (1L && ((1) > 0)))
N#include "fsl_reset.h"
L 1 ".\SRC\Drivers\fsl_reset.h" 1
N/*
N * Copyright (c) 2016, Freescale Semiconductor, Inc.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * o Redistributions of source code must retain the above copyright notice, this list
N *   of conditions and the following disclaimer.
N *
N * o Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N *
N * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N *   contributors may be used to endorse or promote products derived from this
N *   software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifndef _FSL_RESET_H_
N#define _FSL_RESET_H_
N
N#include <assert.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\assert.h" 1
N/* assert.h: ANSI 'C' (X3J11 Oct 88) library header section 4.2 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.        */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N/*
N * The assert macro puts diagnostics into programs. When it is executed,
N * if its argument expression is false, it writes information about the
N * call that failed (including the text of the argument, the name of the
N * source file, and the source line number - the latter are respectively
N * the values of the preprocessing macros __FILE__ and __LINE__) on the
N * standard error stream. It then calls the abort function.
N * If its argument expression is true, the assert macro returns no value.
N */
N
N/*
N * Note that <assert.h> may be included more that once in a program with
N * different setting of NDEBUG. Hence the slightly unusual first-time
N * only flag.
N */
N
N#ifndef __assert_h
S#   define __assert_h
S#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
S#define __ARMCLIB_VERSION 5060019
S#   ifndef __ARM_PROMISE
S#      define __ARM_PROMISE __promise
S#   endif
S#   undef __CLIBNS
S#   ifdef __cplusplus
S        namespace std {
S#           define __CLIBNS ::std::
S            extern "C" {
S#   else
S#       define __CLIBNS
S#   endif  /* __cplusplus */
S    extern _ARMABI_NORETURN void abort(void);
S    extern _ARMABI_NORETURN void __aeabi_assert(const char *, const char *, int) __attribute__((__nonnull__(1,2)));
S#   ifdef __cplusplus
S            }  /* extern "C" */
S        }  /* namespace std */
S#   endif
N#else
N#   undef assert
N#   undef __promise
N#endif
N
N#ifdef NDEBUG
S#   define assert(ignore) ((void)0)
S#   define __promise(e) ((__ARM_PROMISE)((e)?1:0))
N#else
N#   if defined __DO_NOT_LINK_PROMISE_WITH_ASSERT
X#   if 0L
S#      if defined __OPT_SMALL_ASSERT && !defined __ASSERT_MSG && !defined __STRICT_ANSI__ && !(_AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
S#          define assert(e) ((e) ? (void)0 : __CLIBNS abort())
S#      elif defined __STDC__
S#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert(#e, __FILE__, __LINE__))
S#      else
S#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert("e", __FILE__, __LINE__))
S#      endif
S#      define __promise(e) ((__ARM_PROMISE)((e)?1:0))
N#   else
N#      if defined __OPT_SMALL_ASSERT && !defined __ASSERT_MSG && !defined __STRICT_ANSI__ && !(_AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
X#      if 0L && !0L && !0L && !(_AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0))
S#undef __promise
S#          define assert(e) ((e) ? (void)0 : __CLIBNS abort(), (__ARM_PROMISE)((e)?1:0))
N#      else
N#          define assert(e) ((e) ? (void)0 : __CLIBNS __aeabi_assert(#e, __FILE__, __LINE__), (__ARM_PROMISE)((e)?1:0))
N#      endif
N#      define __promise(e) assert(e)
N#   endif
N#endif
N
N#if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X#if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S  #define _AEABI_PORTABLE
N#endif
N
N/* end of assert.h */
N
L 35 ".\SRC\Drivers\fsl_reset.h" 2
N#include <stdbool.h>
N#include <stdint.h>
N#include <string.h>
N#include "fsl_device_registers.h"
N
N/*!
N * @addtogroup ksdk_common
N * @{
N */
N
N/*******************************************************************************
N * Definitions
N ******************************************************************************/
N
N/*!
N * @brief Enumeration for peripheral reset control bits
N *
N * Defines the enumeration for peripheral reset control bits in PRESETCTRL/ASYNCPRESETCTRL registers
N */
Ntypedef enum _SYSCON_RSTn
N{
N    kFLASH_RST_SHIFT_RSTn = 0 | 7U,          /**< Flash controller reset control */
N    kFMC_RST_SHIFT_RSTn = 0 | 8U,            /**< Flash accelerator reset control */
N    kEEPROM_RST_SHIFT_RSTn = 0 | 9U,         /**< EEPROM reset control */
N    kSPIFI_RST_SHIFT_RSTn = 0 | 10U,         /**< SPIFI reset control */
N    kMUX_RST_SHIFT_RSTn = 0 | 11U,           /**< Input mux reset control */
N    kIOCON_RST_SHIFT_RSTn = 0 | 13U,         /**< IOCON reset control */
N    kGPIO0_RST_SHIFT_RSTn = 0 | 14U,         /**< GPIO0 reset control */
N    kGPIO1_RST_SHIFT_RSTn = 0 | 15U,         /**< GPIO1 reset control */
N    kGPIO2_RST_SHIFT_RSTn = 0 | 16U,         /**< GPIO2 reset control */
N    kGPIO3_RST_SHIFT_RSTn = 0 | 17U,         /**< GPIO3 reset control */
N    kPINT_RST_SHIFT_RSTn = 0 | 18U,          /**< Pin interrupt (PINT) reset control */
N    kGINT_RST_SHIFT_RSTn = 0 | 19U,          /**< Grouped interrupt (PINT) reset control. */
N    kDMA_RST_SHIFT_RSTn = 0 | 20U,           /**< DMA reset control */
N    kCRC_RST_SHIFT_RSTn = 0 | 21U,           /**< CRC reset control */
N    kWWDT_RST_SHIFT_RSTn = 0 | 22U,          /**< Watchdog timer reset control */
N    kADC0_RST_SHIFT_RSTn = 0 | 27U,          /**< ADC0 reset control */
N    
N    kMRT_RST_SHIFT_RSTn = 65536 | 0U,        /**< Multi-rate timer (MRT) reset control */
N    kSCT0_RST_SHIFT_RSTn = 65536 | 2U,       /**< SCTimer/PWM 0 (SCT0) reset control */
N    kMCAN0_RST_SHIFT_RSTn = 65536 | 7U,      /**< MCAN0 reset control */
N    kMCAN1_RST_SHIFT_RSTn = 65536 | 8U,      /**< MCAN1 reset control */
N    kUTICK_RST_SHIFT_RSTn = 65536 | 10U,     /**< Micro-tick timer reset control */
N    kFC0_RST_SHIFT_RSTn = 65536 | 11U,       /**< Flexcomm Interface 0 reset control */
N    kFC1_RST_SHIFT_RSTn = 65536 | 12U,       /**< Flexcomm Interface 1 reset control */
N    kFC2_RST_SHIFT_RSTn = 65536 | 13U,       /**< Flexcomm Interface 2 reset control */
N    kFC3_RST_SHIFT_RSTn = 65536 | 14U,       /**< Flexcomm Interface 3 reset control */
N    kFC4_RST_SHIFT_RSTn = 65536 | 15U,       /**< Flexcomm Interface 4 reset control */
N    kFC5_RST_SHIFT_RSTn = 65536 | 16U,       /**< Flexcomm Interface 5 reset control */
N    kFC6_RST_SHIFT_RSTn = 65536 | 17U,       /**< Flexcomm Interface 6 reset control */
N    kFC7_RST_SHIFT_RSTn = 65536 | 18U,       /**< Flexcomm Interface 7 reset control */
N    kDMIC_RST_SHIFT_RSTn = 65536 | 19U,      /**< Digital microphone interface reset control */
N    kCT32B2_RST_SHIFT_RSTn = 65536 | 22U,    /**< CT32B2 reset control */
N    kUSB0D_RST_SHIFT_RSTn = 65536 | 25U,     /**< USB0D reset control */
N    kCT32B0_RST_SHIFT_RSTn = 65536 | 26U,    /**< CT32B0 reset control */
N    kCT32B1_RST_SHIFT_RSTn = 65536 | 27U,    /**< CT32B1 reset control */
N    
N    kLCD_RST_SHIFT_RSTn = 131072 | 2U,       /**< LCD reset control */
N    kSDIO_RST_SHIFT_RSTn = 131072 | 3U,      /**< SDIO reset control */
N    kUSB1H_RST_SHIFT_RSTn = 131072 | 4U,     /**< USB1H reset control */
N    kUSB1D_RST_SHIFT_RSTn = 131072 | 5U,     /**< USB1D reset control */    
N    kUSB1RAM_RST_SHIFT_RSTn = 131072 | 6U,   /**< USB1RAM reset control */
N    kEMC_RST_SHIFT_RSTn = 131072 | 7U,       /**< EMC reset control */
N    kETH_RST_SHIFT_RSTn = 131072 | 8U,       /**< ETH reset control */
N    kGPIO4_RST_SHIFT_RSTn = 131072 | 9U,     /**< GPIO4 reset control */ 
N    kGPIO5_RST_SHIFT_RSTn = 131072 | 10U,    /**< GPIO5 reset control */
N    kAES_RST_SHIFT_RSTn = 131072 | 11U,      /**< AES reset control */
N    kOTP_RST_SHIFT_RSTn = 131072 | 12U,      /**< OTP reset control */
N    kRNG_RST_SHIFT_RSTn = 131072 | 13U,      /**< RNG  reset control */ 
N    kFC8_RST_SHIFT_RSTn = 131072 | 14U,      /**< Flexcomm Interface 8 reset control */
N    kFC9_RST_SHIFT_RSTn = 131072 | 15U,      /**< Flexcomm Interface 9 reset control */
N    kUSB0HMR_RST_SHIFT_RSTn = 131072 | 16U,  /**< USB0HMR reset control */
N    kUSB0HSL_RST_SHIFT_RSTn = 131072 | 17U,  /**< USB0HSL reset control */
N    kSHA_RST_SHIFT_RSTn = 131072 | 18U,      /**< SHA reset control */
N    kSC0_RST_SHIFT_RSTn = 131072 | 19U,      /**< SC0 reset control */
N    kSC1_RST_SHIFT_RSTn = 131072 | 20U,      /**< SC1 reset control */
N    
N    kCT32B3_RST_SHIFT_RSTn = 67108864 | 13U, /**< CT32B3 reset control */
N    kCT32B4_RST_SHIFT_RSTn = 67108864 | 14U, /**< CT32B4 reset control */
N} SYSCON_RSTn_t;
N
N/** Array initializers with peripheral reset bits **/
N#define ADC_RSTS             \
N    {                        \
N        kADC0_RST_SHIFT_RSTn \
N    } /* Reset bits for ADC peripheral */
X#define ADC_RSTS                 {                                kADC0_RST_SHIFT_RSTn     }  
N#define AES_RSTS             \
N    {                        \
N        kAES_RST_SHIFT_RSTn  \
N    } /* Reset bits for AES peripheral */
X#define AES_RSTS                 {                                kAES_RST_SHIFT_RSTn      }  
N#define CRC_RSTS            \
N    {                       \
N        kCRC_RST_SHIFT_RSTn \
N    } /* Reset bits for CRC peripheral */
X#define CRC_RSTS                {                               kCRC_RST_SHIFT_RSTn     }  
N#define CTIMER_RSTS                                                                                     \
N    {                                                                                                   \
N        kCT32B0_RST_SHIFT_RSTn, kCT32B1_RST_SHIFT_RSTn, kCT32B2_RST_SHIFT_RSTn, kCT32B3_RST_SHIFT_RSTn, \
N            kCT32B4_RST_SHIFT_RSTn                                                                      \
N    } /* Reset bits for CTIMER peripheral */
X#define CTIMER_RSTS                                                                                         {                                                                                                           kCT32B0_RST_SHIFT_RSTn, kCT32B1_RST_SHIFT_RSTn, kCT32B2_RST_SHIFT_RSTn, kCT32B3_RST_SHIFT_RSTn,             kCT32B4_RST_SHIFT_RSTn                                                                          }  
N#define DMA_RSTS            \
N    {                       \
N        kDMA_RST_SHIFT_RSTn \
N    } /* Reset bits for DMA peripheral */
X#define DMA_RSTS                {                               kDMA_RST_SHIFT_RSTn     }  
N#define DMIC_RSTS            \
N    {                        \
N        kDMIC_RST_SHIFT_RSTn \
N    } /* Reset bits for DMIC peripheral */
X#define DMIC_RSTS                {                                kDMIC_RST_SHIFT_RSTn     }  
N#define EMC_RSTS             \
N    {                        \
N        kEMC_RST_SHIFT_RSTn  \
N    } /* Reset bits for EMC peripheral */
X#define EMC_RSTS                 {                                kEMC_RST_SHIFT_RSTn      }  
N#define ETH_RST              \
N    {                        \
N        kETH_RST_SHIFT_RSTn  \
N    } /* Reset bits for EMC peripheral */
X#define ETH_RST                  {                                kETH_RST_SHIFT_RSTn      }  
N#define FLEXCOMM_RSTS                                                                                            \
N    {                                                                                                            \
N        kFC0_RST_SHIFT_RSTn, kFC1_RST_SHIFT_RSTn, kFC2_RST_SHIFT_RSTn, kFC3_RST_SHIFT_RSTn, kFC4_RST_SHIFT_RSTn, \
N            kFC5_RST_SHIFT_RSTn, kFC6_RST_SHIFT_RSTn, kFC7_RST_SHIFT_RSTn, kFC8_RST_SHIFT_RSTn, kFC9_RST_SHIFT_RSTn                                       \
N    } /* Reset bits for FLEXCOMM peripheral */
X#define FLEXCOMM_RSTS                                                                                                {                                                                                                                    kFC0_RST_SHIFT_RSTn, kFC1_RST_SHIFT_RSTn, kFC2_RST_SHIFT_RSTn, kFC3_RST_SHIFT_RSTn, kFC4_RST_SHIFT_RSTn,             kFC5_RST_SHIFT_RSTn, kFC6_RST_SHIFT_RSTn, kFC7_RST_SHIFT_RSTn, kFC8_RST_SHIFT_RSTn, kFC9_RST_SHIFT_RSTn                                           }  
N#define GINT_RSTS                                  \
N    {                                              \
N        kGINT_RST_SHIFT_RSTn, kGINT_RST_SHIFT_RSTn \
N    } /* Reset bits for GINT peripheral. GINT0 & GINT1 share same slot */
X#define GINT_RSTS                                      {                                                      kGINT_RST_SHIFT_RSTn, kGINT_RST_SHIFT_RSTn     }  
N#define GPIO_RSTS                                    \
N    {                                                \
N        kGPIO0_RST_SHIFT_RSTn, kGPIO1_RST_SHIFT_RSTn, kGPIO2_RST_SHIFT_RSTn, kGPIO3_RST_SHIFT_RSTn,  \
N        kGPIO4_RST_SHIFT_RSTn, kGPIO5_RST_SHIFT_RSTn                                                 \
N    } /* Reset bits for GPIO peripheral */
X#define GPIO_RSTS                                        {                                                        kGPIO0_RST_SHIFT_RSTn, kGPIO1_RST_SHIFT_RSTn, kGPIO2_RST_SHIFT_RSTn, kGPIO3_RST_SHIFT_RSTn,          kGPIO4_RST_SHIFT_RSTn, kGPIO5_RST_SHIFT_RSTn                                                     }  
N#define INPUTMUX_RSTS       \
N    {                       \
N        kMUX_RST_SHIFT_RSTn \
N    } /* Reset bits for INPUTMUX peripheral */
X#define INPUTMUX_RSTS           {                               kMUX_RST_SHIFT_RSTn     }  
N#define IOCON_RSTS            \
N    {                         \
N        kIOCON_RST_SHIFT_RSTn \
N    } /* Reset bits for IOCON peripheral */
X#define IOCON_RSTS                {                                 kIOCON_RST_SHIFT_RSTn     }  
N#define FLASH_RSTS                                 \
N    {                                              \
N        kFLASH_RST_SHIFT_RSTn, kFMC_RST_SHIFT_RSTn \
N    } /* Reset bits for Flash peripheral */
X#define FLASH_RSTS                                     {                                                      kFLASH_RST_SHIFT_RSTn, kFMC_RST_SHIFT_RSTn     }  
N#define LCD_RSTS                                 \
N    {                                            \
N        kLCD_RST_SHIFT_RSTn                      \
N    } /* Reset bits for LCD peripheral */
X#define LCD_RSTS                                     {                                                    kLCD_RST_SHIFT_RSTn                          }  
N#define MRT_RSTS            \
N    {                       \
N        kMRT_RST_SHIFT_RSTn \
N    } /* Reset bits for MRT peripheral */
X#define MRT_RSTS                {                               kMRT_RST_SHIFT_RSTn     }  
N#define MCAN_RSTS                                   \
N    {                                               \
N        kMCAN0_RST_SHIFT_RSTn,kMCAN1_RST_SHIFT_RSTn \
N    } /* Reset bits for MCAN0&MACN1 peripheral */
X#define MCAN_RSTS                                       {                                                       kMCAN0_RST_SHIFT_RSTn,kMCAN1_RST_SHIFT_RSTn     }  
N#define OTP_RSTS            \
N    {                       \
N        kOTP_RST_SHIFT_RSTn \
N    } /* Reset bits for OTP peripheral */
X#define OTP_RSTS                {                               kOTP_RST_SHIFT_RSTn     }  
N#define PINT_RSTS            \
N    {                        \
N        kPINT_RST_SHIFT_RSTn \
N    } /* Reset bits for PINT peripheral */
X#define PINT_RSTS                {                                kPINT_RST_SHIFT_RSTn     }  
N#define RNG_RSTS             \
N    {                        \
N        kRNG_RST_SHIFT_RSTn  \
N    } /* Reset bits for RNG peripheral */
X#define RNG_RSTS                 {                                kRNG_RST_SHIFT_RSTn      }  
N#define SDIO_RST             \
N    {                        \
N        kSDIO_RST_SHIFT_RSTn \
N    } /* Reset bits for SDIO peripheral */
X#define SDIO_RST                 {                                kSDIO_RST_SHIFT_RSTn     }  
N#define SCT_RSTS             \
N    {                        \
N        kSCT0_RST_SHIFT_RSTn \
N    } /* Reset bits for SCT peripheral */
X#define SCT_RSTS                 {                                kSCT0_RST_SHIFT_RSTn     }  
N#define SHA_RST              \
N    {                        \
N        kSHA_RST_SHIFT_RSTn  \
N    } /* Reset bits for SHA peripheral */
X#define SHA_RST                  {                                kSHA_RST_SHIFT_RSTn      }  
N#define USB0D_RST             \
N    {                         \
N        kUSB0D_RST_SHIFT_RSTn \
N    } /* Reset bits for USB0D peripheral */
X#define USB0D_RST                 {                                 kUSB0D_RST_SHIFT_RSTn     }  
N#define USB0HMR_RST             \
N    {                           \
N        kUSB0HMR_RST_SHIFT_RSTn \
N    } /* Reset bits for USB0HMR peripheral */
X#define USB0HMR_RST                 {                                   kUSB0HMR_RST_SHIFT_RSTn     }  
N#define USB0HSL_RST             \
N    {                           \
N        kUSB0HSL_RST_SHIFT_RSTn \
N    } /* Reset bits for USB0HSL peripheral */
X#define USB0HSL_RST                 {                                   kUSB0HSL_RST_SHIFT_RSTn     }  
N#define USB1H_RST             \
N    {                         \
N        kUSB1H_RST_SHIFT_RSTn \
N    } /* Reset bits for USB1H peripheral */
X#define USB1H_RST                 {                                 kUSB1H_RST_SHIFT_RSTn     }  
N#define USB1D_RST             \
N    {                         \
N        kUSB1D_RST_SHIFT_RSTn \
N    } /* Reset bits for USB1D peripheral */
X#define USB1D_RST                 {                                 kUSB1D_RST_SHIFT_RSTn     }  
N#define USB1RAM_RST             \
N    {                           \
N        kUSB1RAM_RST_SHIFT_RSTn \
N    } /* Reset bits for USB1RAM peripheral */
X#define USB1RAM_RST                 {                                   kUSB1RAM_RST_SHIFT_RSTn     }  
N#define UTICK_RSTS            \
N    {                         \
N        kUTICK_RST_SHIFT_RSTn \
N    } /* Reset bits for UTICK peripheral */
X#define UTICK_RSTS                {                                 kUTICK_RST_SHIFT_RSTn     }  
N#define WWDT_RSTS            \
N    {                        \
N        kWWDT_RST_SHIFT_RSTn \
N    } /* Reset bits for WWDT peripheral */
X#define WWDT_RSTS                {                                kWWDT_RST_SHIFT_RSTn     }  
N
Ntypedef SYSCON_RSTn_t reset_ip_name_t;
N
N/*******************************************************************************
N * API
N ******************************************************************************/
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {
N#endif
N
N/*!
N * @brief Assert reset to peripheral.
N *
N * Asserts reset signal to specified peripheral module.
N *
N * @param peripheral Assert reset to this peripheral. The enum argument contains encoding of reset register
N *                   and reset bit position in the reset register.
N */
Nvoid RESET_SetPeripheralReset(reset_ip_name_t peripheral);
N
N/*!
N * @brief Clear reset to peripheral.
N *
N * Clears reset signal to specified peripheral module, allows it to operate.
N *
N * @param peripheral Clear reset to this peripheral. The enum argument contains encoding of reset register
N *                   and reset bit position in the reset register.
N */
Nvoid RESET_ClearPeripheralReset(reset_ip_name_t peripheral);
N
N/*!
N * @brief Reset peripheral module.
N *
N * Reset peripheral module.
N *
N * @param peripheral Peripheral to reset. The enum argument contains encoding of reset register
N *                   and reset bit position in the reset register.
N */
Nvoid RESET_PeripheralReset(reset_ip_name_t peripheral);
N
N#if defined(__cplusplus)
X#if 0L
S}
N#endif
N
N/*! @} */
N
N#endif /* _FSL_RESET_H_ */
L 144 ".\SRC\Drivers\fsl_common.h" 2
N#endif
N
N/*! @name Min/max macros */
N/* @{ */
N#if !defined(MIN)
X#if !0L
N#define MIN(a, b) ((a) < (b) ? (a) : (b))
N#endif
N
N#if !defined(MAX)
X#if !0L
N#define MAX(a, b) ((a) > (b) ? (a) : (b))
N#endif
N/* @} */
N
N/*! @brief Computes the number of elements in an array. */
N#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
N
N/*! @name UINT16_MAX/UINT32_MAX value */
N/* @{ */
N#if !defined(UINT16_MAX)
X#if !1L
S#define UINT16_MAX ((uint16_t)-1)
N#endif
N
N#if !defined(UINT32_MAX)
X#if !1L
S#define UINT32_MAX ((uint32_t)-1)
N#endif
N/* @} */
N
N/*! @name Timer utilities */
N/* @{ */
N/*! Macro to convert a microsecond period to raw count value */
N#define USEC_TO_COUNT(us, clockFreqInHz) (uint64_t)((uint64_t)us * clockFreqInHz / 1000000U)
N/*! Macro to convert a raw count value to microsecond */
N#define COUNT_TO_USEC(count, clockFreqInHz) (uint64_t)((uint64_t)count * 1000000U / clockFreqInHz)
N
N/*! Macro to convert a millisecond period to raw count value */
N#define MSEC_TO_COUNT(ms, clockFreqInHz) (uint64_t)((uint64_t)ms * clockFreqInHz / 1000U)
N/*! Macro to convert a raw count value to millisecond */
N#define COUNT_TO_MSEC(count, clockFreqInHz) (uint64_t)((uint64_t)count * 1000U / clockFreqInHz)
N/* @} */
N
N/*******************************************************************************
N * API
N ******************************************************************************/
N
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {
N#endif
N
N/*!
N * @brief Enable specific interrupt.
N *
N * Enable the interrupt not routed from intmux.
N *
N * @param interrupt The IRQ number.
N */
Nstatic inline void EnableIRQ(IRQn_Type interrupt)
N{
N    if (NotAvail_IRQn == interrupt)
N    {
N        return;
N    }
N
N#if defined(FSL_FEATURE_SOC_INTMUX_COUNT) && (FSL_FEATURE_SOC_INTMUX_COUNT > 0)
X#if 0L && (FSL_FEATURE_SOC_INTMUX_COUNT > 0)
S    if (interrupt < FSL_FEATURE_INTMUX_IRQ_START_INDEX)
N#endif
N    {
N        NVIC_EnableIRQ(interrupt);
N    }
N}
N
N/*!
N * @brief Disable specific interrupt.
N *
N * Disable the interrupt not routed from intmux.
N *
N * @param interrupt The IRQ number.
N */
Nstatic inline void DisableIRQ(IRQn_Type interrupt)
N{
N    if (NotAvail_IRQn == interrupt)
N    {
N        return;
N    }
N
N#if defined(FSL_FEATURE_SOC_INTMUX_COUNT) && (FSL_FEATURE_SOC_INTMUX_COUNT > 0)
X#if 0L && (FSL_FEATURE_SOC_INTMUX_COUNT > 0)
S    if (interrupt < FSL_FEATURE_INTMUX_IRQ_START_INDEX)
N#endif
N    {
N        NVIC_DisableIRQ(interrupt);
N    }
N}
N
N/*!
N * @brief Disable the global IRQ
N *
N * Disable the global interrupt and return the current primask register. User is required to provided the primask
N * register for the EnableGlobalIRQ().
N *
N * @return Current primask value.
N */
Nstatic inline uint32_t DisableGlobalIRQ(void)
N{
N    uint32_t regPrimask = __get_PRIMASK();
N
N    __disable_irq();
N
N    return regPrimask;
N}
N
N/*!
N * @brief Enaable the global IRQ
N *
N * Set the primask register with the provided primask value but not just enable the primask. The idea is for the
N * convinience of integration of RTOS. some RTOS get its own management mechanism of primask. User is required to
N * use the EnableGlobalIRQ() and DisableGlobalIRQ() in pair.
N *
N * @param primask value of primask register to be restored. The primask value is supposed to be provided by the
N * DisableGlobalIRQ().
N */
Nstatic inline void EnableGlobalIRQ(uint32_t primask)
N{
N    __set_PRIMASK(primask);
N}
N
N/*!
N * @brief install IRQ handler
N *
N * @param irq IRQ number
N * @param irqHandler IRQ handler address
N * @return The old IRQ handler address
N */
Nuint32_t InstallIRQHandler(IRQn_Type irq, uint32_t irqHandler);
N
N#if (defined(FSL_FEATURE_SOC_SYSCON_COUNT) && (FSL_FEATURE_SOC_SYSCON_COUNT > 0))
X#if (1L && ((1) > 0))
N/*!
N * @brief Enable specific interrupt for wake-up from deep-sleep mode.
N *
N * Enable the interrupt for wake-up from deep sleep mode.
N * Some interrupts are typically used in sleep mode only and will not occur during
N * deep-sleep mode because relevant clocks are stopped. However, it is possible to enable
N * those clocks (significantly increasing power consumption in the reduced power mode),
N * making these wake-ups possible.
N *
N * @note This function also enables the interrupt in the NVIC (EnableIRQ() is called internally).
N *
N * @param interrupt The IRQ number.
N */
Nvoid EnableDeepSleepIRQ(IRQn_Type interrupt);
N
N/*!
N * @brief Disable specific interrupt for wake-up from deep-sleep mode.
N *
N * Disable the interrupt for wake-up from deep sleep mode.
N * Some interrupts are typically used in sleep mode only and will not occur during
N * deep-sleep mode because relevant clocks are stopped. However, it is possible to enable
N * those clocks (significantly increasing power consumption in the reduced power mode),
N * making these wake-ups possible.
N *
N * @note This function also disables the interrupt in the NVIC (DisableIRQ() is called internally).
N *
N * @param interrupt The IRQ number.
N */
Nvoid DisableDeepSleepIRQ(IRQn_Type interrupt);
N#endif /* FSL_FEATURE_SOC_SYSCON_COUNT */
N
N#if defined(__cplusplus)
X#if 0L
S}
N#endif
N
N/*! @} */
N
N#endif /* _FSL_COMMON_H_ */
L 32 "SRC\Board\clock_config.c" 2
N#include "clock_config.h"
L 1 "SRC\Board\clock_config.h" 1
N/*
N * Copyright (c) 2015, Freescale Semiconductor, Inc.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * o Redistributions of source code must retain the above copyright notice, this list
N *   of conditions and the following disclaimer.
N *
N * o Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N *
N * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N *   contributors may be used to endorse or promote products derived from this
N *   software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N#ifndef _CLOCK_CONFIG_H_
N#define _CLOCK_CONFIG_H_
N
N/*******************************************************************************
N * DEFINITION
N ******************************************************************************/
N#define BOARD_XTAL0_CLK_HZ 12000000U
N#define BOARD_XTAL32K_CLK_HZ 32768U
N
N/*******************************************************************************
N * API
N ******************************************************************************/
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {
N#endif /* __cplusplus*/
N
Nvoid BOARD_BootClockVLPR(void);
Nvoid BOARD_BootClockRUN(void);
Nvoid BOARD_BootClockHSRUN(void);
Nvoid BOARD_BootClock_PLL_RUN(void);
N	
N#if defined(__cplusplus)
X#if 0L
S}
N#endif /* __cplusplus*/
N
N#endif /* _CLOCK_CONFIG_H_ */
L 33 "SRC\Board\clock_config.c" 2
N#include "fsl_power.h"
L 1 ".\SRC\Drivers\fsl_power.h" 1
N/*
N * Copyright (c) 2016, Freescale Semiconductor, Inc.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * o Redistributions of source code must retain the above copyright notice, this list
N *   of conditions and the following disclaimer.
N *
N * o Redistributions in binary form must reproduce the above copyright notice, this
N *   list of conditions and the following disclaimer in the documentation and/or
N *   other materials provided with the distribution.
N *
N * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N *   contributors may be used to endorse or promote products derived from this
N *   software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N#ifndef _FSL_POWER_H_
N#define _FSL_POWER_H_
N
N#include "fsl_common.h"
N
N/*******************************************************************************
N * Definitions
N ******************************************************************************/
N
N#define MAKE_PD_BITS(reg, slot) ((reg << 8) | slot)
N#define PDRCFG0 0x0U
N#define PDRCFG1 0x1U
N
Ntypedef enum pd_bits
N{
N    kPDRUNCFG_LP_REG = MAKE_PD_BITS(PDRCFG0, 2U),
X    kPDRUNCFG_LP_REG = ((0x0U << 8) | 2U),
N    kPDRUNCFG_PD_FRO_EN = MAKE_PD_BITS(PDRCFG0, 4U),
X    kPDRUNCFG_PD_FRO_EN = ((0x0U << 8) | 4U),
N    kPDRUNCFG_PD_TS = MAKE_PD_BITS(PDRCFG0, 6U),
X    kPDRUNCFG_PD_TS = ((0x0U << 8) | 6U),
N    kPDRUNCFG_PD_BOD_RESET = MAKE_PD_BITS(PDRCFG0, 7U),
X    kPDRUNCFG_PD_BOD_RESET = ((0x0U << 8) | 7U),
N    kPDRUNCFG_PD_BOD_INTR = MAKE_PD_BITS(PDRCFG0, 8U),
X    kPDRUNCFG_PD_BOD_INTR = ((0x0U << 8) | 8U),
N    kPDRUNCFG_PD_VD2_ANA = MAKE_PD_BITS(PDRCFG0, 9U),
X    kPDRUNCFG_PD_VD2_ANA = ((0x0U << 8) | 9U),
N    kPDRUNCFG_PD_ADC0 = MAKE_PD_BITS(PDRCFG0, 10U),
X    kPDRUNCFG_PD_ADC0 = ((0x0U << 8) | 10U),
N    kPDRUNCFG_PD_RAM0 = MAKE_PD_BITS(PDRCFG0, 13U),
X    kPDRUNCFG_PD_RAM0 = ((0x0U << 8) | 13U),
N    kPDRUNCFG_PD_RAM1 = MAKE_PD_BITS(PDRCFG0, 14U),
X    kPDRUNCFG_PD_RAM1 = ((0x0U << 8) | 14U),
N    kPDRUNCFG_PD_RAM2 = MAKE_PD_BITS(PDRCFG0, 15U),
X    kPDRUNCFG_PD_RAM2 = ((0x0U << 8) | 15U),
N    kPDRUNCFG_PD_RAM3 = MAKE_PD_BITS(PDRCFG0, 16U),
X    kPDRUNCFG_PD_RAM3 = ((0x0U << 8) | 16U),
N    kPDRUNCFG_PD_ROM = MAKE_PD_BITS(PDRCFG0, 17U),
X    kPDRUNCFG_PD_ROM = ((0x0U << 8) | 17U),
N    kPDRUNCFG_PD_VDDA = MAKE_PD_BITS(PDRCFG0, 19U),
X    kPDRUNCFG_PD_VDDA = ((0x0U << 8) | 19U),
N    kPDRUNCFG_PD_WDT_OSC = MAKE_PD_BITS(PDRCFG0, 20U),
X    kPDRUNCFG_PD_WDT_OSC = ((0x0U << 8) | 20U),
N    kPDRUNCFG_PD_USB0_PHY = MAKE_PD_BITS(PDRCFG0, 21U),
X    kPDRUNCFG_PD_USB0_PHY = ((0x0U << 8) | 21U),
N    kPDRUNCFG_PD_SYS_PLL0 = MAKE_PD_BITS(PDRCFG0, 22U),
X    kPDRUNCFG_PD_SYS_PLL0 = ((0x0U << 8) | 22U),
N    kPDRUNCFG_PD_VREFP = MAKE_PD_BITS(PDRCFG0, 23U),
X    kPDRUNCFG_PD_VREFP = ((0x0U << 8) | 23U),
N    kPDRUNCFG_PD_FLASH_BG = MAKE_PD_BITS(PDRCFG0, 25U),
X    kPDRUNCFG_PD_FLASH_BG = ((0x0U << 8) | 25U),
N    kPDRUNCFG_PD_VD3 = MAKE_PD_BITS(PDRCFG0, 26U),
X    kPDRUNCFG_PD_VD3 = ((0x0U << 8) | 26U),
N    kPDRUNCFG_PD_VD4 = MAKE_PD_BITS(PDRCFG0, 27U),
X    kPDRUNCFG_PD_VD4 = ((0x0U << 8) | 27U),
N    kPDRUNCFG_PD_VD5 = MAKE_PD_BITS(PDRCFG0, 28U),
X    kPDRUNCFG_PD_VD5 = ((0x0U << 8) | 28U),
N    kPDRUNCFG_PD_VD6 = MAKE_PD_BITS(PDRCFG0, 29U),
X    kPDRUNCFG_PD_VD6 = ((0x0U << 8) | 29U),
N    kPDRUNCFG_REQ_DELAY = MAKE_PD_BITS(PDRCFG0, 30U),
X    kPDRUNCFG_REQ_DELAY = ((0x0U << 8) | 30U),
N    kPDRUNCFG_FORCE_RBB = MAKE_PD_BITS(PDRCFG0, 31U),
X    kPDRUNCFG_FORCE_RBB = ((0x0U << 8) | 31U),
N
N    kPDRUNCFG_PD_USB1_PHY = MAKE_PD_BITS(PDRCFG1, 0U),
X    kPDRUNCFG_PD_USB1_PHY = ((0x1U << 8) | 0U),
N    kPDRUNCFG_PD_USB_PLL = MAKE_PD_BITS(PDRCFG1, 1U),
X    kPDRUNCFG_PD_USB_PLL = ((0x1U << 8) | 1U),
N    kPDRUNCFG_PD_AUDIO_PLL = MAKE_PD_BITS(PDRCFG1, 2U),
X    kPDRUNCFG_PD_AUDIO_PLL = ((0x1U << 8) | 2U),
N    kPDRUNCFG_PD_SYS_OSC = MAKE_PD_BITS(PDRCFG1, 3U),
X    kPDRUNCFG_PD_SYS_OSC = ((0x1U << 8) | 3U),
N    kPDRUNCFG_PD_EEPROM = MAKE_PD_BITS(PDRCFG1, 5U),
X    kPDRUNCFG_PD_EEPROM = ((0x1U << 8) | 5U),
N    kPDRUNCFG_PD_rng = MAKE_PD_BITS(PDRCFG1, 6U),
X    kPDRUNCFG_PD_rng = ((0x1U << 8) | 6U),
N
N    kPDRUNCFG_ForceUnsigned = 0x80000000U,
N} pd_bit_t;
N
N/* Power mode configuration API parameter */
Ntypedef enum _power_mode_config
N{
N    kPmu_Sleep = 0U,
N    kPmu_Deep_Sleep = 1U,
N    kPmu_Deep_PowerDown = 2U,
N} power_mode_cfg_t;
N
N/*******************************************************************************
N * API
N ******************************************************************************/
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*!
N* @name Power Configuration
N* @{
N*/
N
N/*!
N * @brief API to enable PDRUNCFG bit in the Syscon. Note that enabling the bit powers down the peripheral
N *
N * @param en    peripheral for which to enable the PDRUNCFG bit
N * @return none
N */
Nstatic inline void POWER_EnablePD(pd_bit_t en)
N{
N    /* PDRUNCFGSET */
N    SYSCON->PDRUNCFGSET[(en >> 8UL)] = (1UL << (en & 0xffU));
X    ((SYSCON_Type *)(0x40000000u))->PDRUNCFGSET[(en >> 8UL)] = (1UL << (en & 0xffU));
N}
N
N/*!
N * @brief API to disable PDRUNCFG bit in the Syscon. Note that disabling the bit powers up the peripheral
N *
N * @param en    peripheral for which to disable the PDRUNCFG bit
N * @return none
N */
Nstatic inline void POWER_DisablePD(pd_bit_t en)
N{
N    /* PDRUNCFGCLR */
N    SYSCON->PDRUNCFGCLR[(en >> 8UL)] = (1UL << (en & 0xffU));
X    ((SYSCON_Type *)(0x40000000u))->PDRUNCFGCLR[(en >> 8UL)] = (1UL << (en & 0xffU));
N}
N
N/*!
N * @brief API to enable deep sleep bit in the ARM Core.
N *
N * @param none
N * @return none
N */
Nstatic inline void POWER_EnableDeepSleep(void)
N{
N    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR |= (1UL << 2U);
N}
N
N/*!
N * @brief API to disable deep sleep bit in the ARM Core.
N *
N * @param none
N * @return none
N */
Nstatic inline void POWER_DisableDeepSleep(void)
N{
N    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR |= (1UL << 2U);
N}
N
N/*!
N * @brief API to power down flash controller.
N *
N * @param none
N * @return none
N */
Nstatic inline void POWER_PowerDownFlash(void)
N{
N    /* TURN OFF clock ip_2113 (only needed for FLASH programming, will be turned on by ROM API) */
N    CLOCK_DisableClock(kCLOCK_Flash);
N
N    /* TURN OFF clock ip_2113 (only needed for FLASH programming, will be turned on by ROM API) */
N    CLOCK_DisableClock(kCLOCK_Fmc);
N}
N
N/*!
N * @brief API to power up flash controller.
N *
N * @param none
N * @return none
N */
Nstatic inline void POWER_PowerUpFlash(void)
N{
N    /* TURN OFF clock ip_2113 (only needed for FLASH programming, will be turned on by ROM API) */
N    CLOCK_EnableClock(kCLOCK_Fmc);
N}
N
N/*!
N * @brief Power Library API to power the PLLs.
N *
N * @param none
N * @return none
N */
Nvoid POWER_SetPLL(void);
N
N/*!
N * @brief Power Library API to power the USB PHY.
N *
N * @param none
N * @return none
N */
Nvoid POWER_SetUsbPhy(void);
N
N/*!
N * @brief Power Library API to enter different power mode.
N *
N * @param exclude_from_pd  Bit mask of the PDRUNCFG0(low 32bits) and PDRUNCFG1(high 32bits) that needs to be powered on during power mode selected.
N * @return none
N */
Nvoid POWER_EnterPowerMode(power_mode_cfg_t mode, uint64_t exclude_from_pd);
N
N/*!
N * @brief Power Library API to enter sleep mode.
N *
N * @return none
N */
Nvoid POWER_EnterSleep(void);
N
N/*!
N * @brief Power Library API to enter deep sleep mode.
N *
N * @param exclude_from_pd  Bit mask of the PDRUNCFG0(low 32bits) and PDRUNCFG1(high 32bits) bits that needs to be powered on during deep sleep
N * @return none
N */
Nvoid POWER_EnterDeepSleep(uint64_t exclude_from_pd);
N
N/*!
N * @brief Power Library API to enter deep power down mode.
N *
N * @param exclude_from_pd   Bit mask of the PDRUNCFG0(low 32bits) and PDRUNCFG1(high 32bits) that needs to be powered on during deep power 
N *                          down mode, but this is has no effect as the voltages are cut off.
N 
N * @return none
N */
Nvoid POWER_EnterDeepPowerDown(uint64_t exclude_from_pd);
N
N/*!
N * @brief Power Library API to choose normal regulation and set the voltage for the desired operating frequency.
N *
N * @param freq  - The desired frequency at which the part would like to operate, 
N *                note that the voltage and flash wait states should be set before changing frequency
N * @return none
N */
Nvoid POWER_SetVoltageForFreq(uint32_t freq);
N
N/*!
N * @brief Power Library API to choose normal regulation and set the voltage for the desired operating frequency.
N *
N * @param freq  - The desired frequency at which the part would like to operate, 
N *                note that the voltage and flash wait states should be set before changing frequency
N * @return none
N */
Nvoid POWER_SetVoltageForFreq(uint32_t freq);
N
N/*!
N * @brief Power Library API to return the library version.
N *
N * @param none
N * @return version number of the power library
N */
Nuint32_t POWER_GetLibVersion(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* _FSL_POWER_H_ */
L 34 "SRC\Board\clock_config.c" 2
N
N/*******************************************************************************
N * Definitions
N ******************************************************************************/
N
N/*******************************************************************************
N * Variables
N ******************************************************************************/
N/* System clock frequency. */
Nextern uint32_t SystemCoreClock;
N
N/*******************************************************************************
N * Code
N ******************************************************************************/
N
Nvoid BOARD_BootClockVLPR(void)
N{
N    POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
N    CLOCK_AttachClk(kFRO12M_to_MAIN_CLK); /*!< Switch to 12MHz */
N    CLOCK_SetupFROClocking(12000000);     /*!< Turn off high speed output of FRO */
N    CLOCK_SetFLASHAccessCyclesForFreq(12000000); /*!< Set FLASH waitstates for core */
N    POWER_SetVoltageForFreq(12000000);           /*!< Set voltage for core */
N    SystemCoreClock = 12000000;                  /*!< Update information about frequency */
N}
N
Nvoid BOARD_BootClockRUN(void)
N{
N    POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
N    CLOCK_AttachClk(
N        kFRO12M_to_MAIN_CLK);          /*!< Switch to 12MHz first to ensure we can change voltage without accidentally
N                                       being below the voltage for current speed */
N    POWER_SetVoltageForFreq(48000000); /*!< Set voltage for core */
N    CLOCK_SetFLASHAccessCyclesForFreq(48000000); /*!< Set FLASH waitstates for core */
N    CLOCK_SetupFROClocking(48000000);            /*!< Setup CPU to run off FRO 48MHz output*/
N    CLOCK_AttachClk(kFRO_HF_to_MAIN_CLK);        /*!< Switch main clock to 48MHz */
N    SystemCoreClock = 48000000;                  /*!< Update information about frequency */
N}
N
Nvoid BOARD_BootClockHSRUN(void)
N{
N    POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
N    CLOCK_AttachClk(
N        kFRO12M_to_MAIN_CLK);          /*!< Switch to 12MHz first to ensure we can change voltage without accidentally
N                                       being below the voltage for current speed */
N    POWER_SetVoltageForFreq(96000000); /*!< Set voltage for core */
N    CLOCK_SetFLASHAccessCyclesForFreq(96000000); /*!< Set FLASH waitstates for core */
N    CLOCK_SetupFROClocking(96000000);            /*!< Setup CPU to run off FRO 96MHz output*/
N	
N    CLOCK_AttachClk(kFRO_HF_to_MAIN_CLK);        /*!< Switch main clock to 96MHz */
N    SystemCoreClock = 96000000;                  /*!< Update information about frequency */
N}
N
N/***
N *      _  ___   ___  __  __ _   _        ____ _            _     
N *     / |( _ ) / _ \|  \/  | | | |____  / ___| | ___   ___| | __ 
N *     | |/ _ \| | | | |\/| | |_| |_  / | |   | |/ _ \ / __| |/ / 
N *     | | (_) | |_| | |  | |  _  |/ /  | |___| | (_) | (__|   <  
N *     |_|\___/ \___/|_|  |_|_| |_/___|  \____|_|\___/ \___|_|\_\ 
N *     / ___|  ___| |_ _   _ _ __                                 
N *     \___ \ / _ \ __| | | | '_ \                                
N *      ___) |  __/ |_| |_| | |_) |                               
N *     |____/ \___|\__|\__,_| .__/                                
N *                          |_|                                   
N */
N
Nvoid BOARD_BootClock_PLL_RUN(void)
N{
N    POWER_DisablePD(kPDRUNCFG_PD_FRO_EN); /*!< Ensure FRO is on so that we can switch to its 12MHz mode temporarily*/
N   
N    POWER_SetVoltageForFreq(1800000000); /*!< Set voltage for core */
N    CLOCK_SetFLASHAccessCyclesForFreq(180000000); /*!< Set FLASH waitstates for core */
N	
N	  pll_config_t sys_pll_config = 
N		{
N        .desiredRate = 180000000, .inputRate = 12000000U,
N    };
N		
N		pll_setup_t sys_pll_setup;
N	
N		CLOCK_SetupPLLData(&sys_pll_config, &sys_pll_setup);
N    
N		sys_pll_setup.flags = PLL_SETUPFLAG_POWERUP | PLL_SETUPFLAG_WAITLOCK ;
X		sys_pll_setup.flags = (1 << 0) | (1 << 1) ;
N		
N    CLOCK_SetupSystemPLLPrec(&sys_pll_setup, sys_pll_setup.flags);
N		
N	  CLOCK_AttachClk(kSYS_PLL_to_MAIN_CLK);          /*!< Switch to 12MHz first to ensure we can change voltage without accidentally
N																										being below the voltage for current speed */
N		
N    SystemCoreClock = 180000000;                  /*!< Update information about frequency */
N}
N
N
N
N

; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_flashiap.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_flashiap.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\SRC\eGFX\Fonts\Arial__23px__Regular__SystemDefault_1BPP -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_flashiap.crf SRC\Drivers\fsl_flashiap.c]
                          THUMB

                          AREA ||i.FLASHIAP_BlankCheckSector||, CODE, READONLY, ALIGN=1

                  FLASHIAP_BlankCheckSector PROC
;;;103    
;;;104    status_t FLASHIAP_BlankCheckSector(uint32_t startSector, uint32_t endSector)
000000  b530              PUSH     {r4,r5,lr}
;;;105    {
000002  b089              SUB      sp,sp,#0x24
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;106        uint32_t command[5], result[4];
;;;107    
;;;108        command[0] = kIapCmd_FLASHIAP_BlankCheckSector;
000008  2035              MOVS     r0,#0x35
00000a  9004              STR      r0,[sp,#0x10]
;;;109        command[1] = startSector;
00000c  9405              STR      r4,[sp,#0x14]
;;;110        command[2] = endSector;
00000e  9506              STR      r5,[sp,#0x18]
;;;111        iap_entry(command, result);
000010  4669              MOV      r1,sp
000012  a804              ADD      r0,sp,#0x10
000014  f7fffffe          BL       iap_entry
;;;112    
;;;113        return translate_iap_status(result[0]);
000018  9800              LDR      r0,[sp,#0]
00001a  f7fffffe          BL       translate_iap_status
;;;114    }
00001e  b009              ADD      sp,sp,#0x24
000020  bd30              POP      {r4,r5,pc}
;;;115    
                          ENDP


                          AREA ||i.FLASHIAP_Compare||, CODE, READONLY, ALIGN=1

                  FLASHIAP_Compare PROC
;;;115    
;;;116    status_t FLASHIAP_Compare(uint32_t dstAddr, uint32_t *srcAddr, uint32_t numOfBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;117    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;118        uint32_t command[5], result[4];
;;;119    
;;;120        command[0] = kIapCmd_FLASHIAP_Compare;
00000a  2038              MOVS     r0,#0x38
00000c  9005              STR      r0,[sp,#0x14]
;;;121        command[1] = dstAddr;
00000e  9406              STR      r4,[sp,#0x18]
;;;122        command[2] = (uint32_t)srcAddr;
000010  9507              STR      r5,[sp,#0x1c]
;;;123        command[3] = numOfBytes;
000012  9608              STR      r6,[sp,#0x20]
;;;124        iap_entry(command, result);
000014  a901              ADD      r1,sp,#4
000016  a805              ADD      r0,sp,#0x14
000018  f7fffffe          BL       iap_entry
;;;125    
;;;126        return translate_iap_status(result[0]);
00001c  9801              LDR      r0,[sp,#4]
00001e  f7fffffe          BL       translate_iap_status
;;;127    }
000022  b00a              ADD      sp,sp,#0x28
000024  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.FLASHIAP_CopyRamToFlash||, CODE, READONLY, ALIGN=1

                  FLASHIAP_CopyRamToFlash PROC
;;;63     
;;;64     status_t FLASHIAP_CopyRamToFlash(uint32_t dstAddr, uint32_t *srcAddr, uint32_t numOfBytes, uint32_t systemCoreClock)
000000  b5f0              PUSH     {r4-r7,lr}
;;;65     {
000002  b089              SUB      sp,sp,#0x24
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;66         uint32_t command[5], result[4];
;;;67     
;;;68         command[0] = kIapCmd_FLASHIAP_CopyRamToFlash;
00000c  2033              MOVS     r0,#0x33
00000e  9004              STR      r0,[sp,#0x10]
;;;69         command[1] = dstAddr;
000010  9405              STR      r4,[sp,#0x14]
;;;70         command[2] = (uint32_t)srcAddr;
000012  9506              STR      r5,[sp,#0x18]
;;;71         command[3] = numOfBytes;
000014  9607              STR      r6,[sp,#0x1c]
;;;72         command[4] = systemCoreClock / HZ_TO_KHZ_DIV;
000016  f44f707a          MOV      r0,#0x3e8
00001a  fbb7f0f0          UDIV     r0,r7,r0
00001e  9008              STR      r0,[sp,#0x20]
;;;73         iap_entry(command, result);
000020  4669              MOV      r1,sp
000022  a804              ADD      r0,sp,#0x10
000024  f7fffffe          BL       iap_entry
;;;74     
;;;75         return translate_iap_status(result[0]);
000028  9800              LDR      r0,[sp,#0]
00002a  f7fffffe          BL       translate_iap_status
;;;76     }
00002e  b009              ADD      sp,sp,#0x24
000030  bdf0              POP      {r4-r7,pc}
;;;77     
                          ENDP


                          AREA ||i.FLASHIAP_ErasePage||, CODE, READONLY, ALIGN=1

                  FLASHIAP_ErasePage PROC
;;;90     
;;;91     status_t FLASHIAP_ErasePage(uint32_t startPage, uint32_t endPage, uint32_t systemCoreClock)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;93         uint32_t command[5], result[4];
;;;94     
;;;95         command[0] = kIapCmd_FLASHIAP_ErasePage;
00000a  203b              MOVS     r0,#0x3b
00000c  9005              STR      r0,[sp,#0x14]
;;;96         command[1] = startPage;
00000e  9406              STR      r4,[sp,#0x18]
;;;97         command[2] = endPage;
000010  9507              STR      r5,[sp,#0x1c]
;;;98         command[3] = systemCoreClock / HZ_TO_KHZ_DIV;
000012  f44f707a          MOV      r0,#0x3e8
000016  fbb6f0f0          UDIV     r0,r6,r0
00001a  9008              STR      r0,[sp,#0x20]
;;;99         iap_entry(command, result);
00001c  a901              ADD      r1,sp,#4
00001e  a805              ADD      r0,sp,#0x14
000020  f7fffffe          BL       iap_entry
;;;100    
;;;101        return translate_iap_status(result[0]);
000024  9801              LDR      r0,[sp,#4]
000026  f7fffffe          BL       translate_iap_status
;;;102    }
00002a  b00a              ADD      sp,sp,#0x28
00002c  bd70              POP      {r4-r6,pc}
;;;103    
                          ENDP


                          AREA ||i.FLASHIAP_EraseSector||, CODE, READONLY, ALIGN=1

                  FLASHIAP_EraseSector PROC
;;;77     
;;;78     status_t FLASHIAP_EraseSector(uint32_t startSector, uint32_t endSector, uint32_t systemCoreClock)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;80         uint32_t command[5], result[4];
;;;81     
;;;82         command[0] = kIapCmd_FLASHIAP_EraseSector;
00000a  2034              MOVS     r0,#0x34
00000c  9005              STR      r0,[sp,#0x14]
;;;83         command[1] = startSector;
00000e  9406              STR      r4,[sp,#0x18]
;;;84         command[2] = endSector;
000010  9507              STR      r5,[sp,#0x1c]
;;;85         command[3] = systemCoreClock / HZ_TO_KHZ_DIV;
000012  f44f707a          MOV      r0,#0x3e8
000016  fbb6f0f0          UDIV     r0,r6,r0
00001a  9008              STR      r0,[sp,#0x20]
;;;86         iap_entry(command, result);
00001c  a901              ADD      r1,sp,#4
00001e  a805              ADD      r0,sp,#0x14
000020  f7fffffe          BL       iap_entry
;;;87     
;;;88         return translate_iap_status(result[0]);
000024  9801              LDR      r0,[sp,#4]
000026  f7fffffe          BL       translate_iap_status
;;;89     }
00002a  b00a              ADD      sp,sp,#0x28
00002c  bd70              POP      {r4-r6,pc}
;;;90     
                          ENDP


                          AREA ||i.FLASHIAP_PrepareSectorForWrite||, CODE, READONLY, ALIGN=1

                  FLASHIAP_PrepareSectorForWrite PROC
;;;51     
;;;52     status_t FLASHIAP_PrepareSectorForWrite(uint32_t startSector, uint32_t endSector)
000000  b530              PUSH     {r4,r5,lr}
;;;53     {
000002  b089              SUB      sp,sp,#0x24
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;54         uint32_t command[5], result[4];
;;;55     
;;;56         command[0] = kIapCmd_FLASHIAP_PrepareSectorforWrite;
000008  2032              MOVS     r0,#0x32
00000a  9004              STR      r0,[sp,#0x10]
;;;57         command[1] = startSector;
00000c  9405              STR      r4,[sp,#0x14]
;;;58         command[2] = endSector;
00000e  9506              STR      r5,[sp,#0x18]
;;;59         iap_entry(command, result);
000010  4669              MOV      r1,sp
000012  a804              ADD      r0,sp,#0x10
000014  f7fffffe          BL       iap_entry
;;;60     
;;;61         return translate_iap_status(result[0]);
000018  9800              LDR      r0,[sp,#0]
00001a  f7fffffe          BL       translate_iap_status
;;;62     }
00001e  b009              ADD      sp,sp,#0x24
000020  bd30              POP      {r4,r5,pc}
;;;63     
                          ENDP


                          AREA ||i.iap_entry||, CODE, READONLY, ALIGN=2

                  iap_entry PROC
;;;128     */
;;;129    static inline void iap_entry(uint32_t *cmd_param, uint32_t *status_result)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;131        ((IAP_ENTRY_T)FSL_FEATURE_SYSCON_IAP_ENTRY_LOCATION)(cmd_param, status_result);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  4a01              LDR      r2,|L7.16|
00000c  4790              BLX      r2
;;;132    }
00000e  bd70              POP      {r4-r6,pc}
;;;133    
                          ENDP

                  |L7.16|
                          DCD      0x03000205

                          AREA ||i.translate_iap_status||, CODE, READONLY, ALIGN=1

                  translate_iap_status PROC
;;;38     
;;;39     static status_t translate_iap_status(uint32_t status)
000000  4601              MOV      r1,r0
;;;40     {
;;;41         /* Translate IAP return code to sdk status code */
;;;42         if (status == kStatus_Success)
000002  b909              CBNZ     r1,|L8.8|
;;;43         {
;;;44             return status;
000004  4608              MOV      r0,r1
                  |L8.6|
;;;45         }
;;;46         else
;;;47         {
;;;48             return MAKE_STATUS(kStatusGroup_FLASHIAP, status);
;;;49         }
;;;50     }
000006  4770              BX       lr
                  |L8.8|
000008  f60110c4          ADD      r0,r1,#0x9c4          ;48
00000c  e7fb              B        |L8.6|
;;;51     
                          ENDP


;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_flashiap.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_fsl_flashiap_c_703c7abf____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_fsl_flashiap_c_703c7abf____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_fsl_flashiap_c_703c7abf____REVSH|
#line 402
|__asm___14_fsl_flashiap_c_703c7abf____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_fsl_flashiap_c_703c7abf____RRX|
#line 587
|__asm___14_fsl_flashiap_c_703c7abf____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

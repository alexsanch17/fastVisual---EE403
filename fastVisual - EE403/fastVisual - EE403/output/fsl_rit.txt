; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\fsl_rit.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\fsl_rit.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I.\SRC\eGFX\Fonts\Arial__23px__Regular__SystemDefault_1BPP -I.\RTE\_Lab6 -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\fsl_rit.crf SRC\Drivers\fsl_rit.c]
                          THUMB

                          AREA ||i.RIT_Deinit||, CODE, READONLY, ALIGN=2

                  RIT_Deinit PROC
;;;106    
;;;107    void RIT_Deinit(RIT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;108    {
000002  4605              MOV      r5,r0
;;;109        /* Disable RIT timers */
;;;110        base->CTRL |= ~RIT_CTRL_RITEN_MASK;
000004  68a8              LDR      r0,[r5,#8]
000006  f0600008          ORN      r0,r0,#8
00000a  60a8              STR      r0,[r5,#8]
;;;111    #ifdef FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL
;;;112        /* Gate the RIT clock*/
;;;113        CLOCK_DisableClock(s_ritClocks[RIT_GetInstance(base)]);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       RIT_GetInstance
000012  490a              LDR      r1,|L1.60|
000014  f8314010          LDRH     r4,[r1,r0,LSL #1]
000018  0a20              LSRS     r0,r4,#8
00001a  2803              CMP      r0,#3
00001c  d205              BCS      |L1.42|
00001e  2101              MOVS     r1,#1
000020  40a1              LSLS     r1,r1,r4
000022  4a07              LDR      r2,|L1.64|
000024  f8421020          STR      r1,[r2,r0,LSL #2]
000028  e006              B        |L1.56|
                  |L1.42|
00002a  2101              MOVS     r1,#1
00002c  40a1              LSLS     r1,r1,r4
00002e  4a05              LDR      r2,|L1.68|
000030  6191              STR      r1,[r2,#0x18]
000032  2100              MOVS     r1,#0
000034  0312              LSLS     r2,r2,#12
000036  64d1              STR      r1,[r2,#0x4c]
                  |L1.56|
000038  bf00              NOP      
;;;114    #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;115    }
00003a  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP

                  |L1.60|
                          DCD      s_ritClocks
                  |L1.64|
                          DCD      0x40000240
                  |L1.68|
                          DCD      0x40040000

                          AREA ||i.RIT_GetCompareTimerCount||, CODE, READONLY, ALIGN=1

                  RIT_GetCompareTimerCount PROC
;;;130    
;;;131    uint64_t RIT_GetCompareTimerCount(RIT_Type *base)
000000  b530              PUSH     {r4,r5,lr}
;;;132    {
000002  4603              MOV      r3,r0
;;;133        uint16_t valueH = 0U;
000004  2200              MOVS     r2,#0
;;;134        uint32_t valueL = 0U;
000006  2400              MOVS     r4,#0
;;;135    
;;;136        /* COMPVAL_H should be read before COMPVAL */
;;;137        valueH = base->COMPVAL_H;
000008  6918              LDR      r0,[r3,#0x10]
00000a  b282              UXTH     r2,r0
;;;138        valueL = base->COMPVAL;
00000c  681c              LDR      r4,[r3,#0]
;;;139    
;;;140        return (((uint64_t)valueH << 32U) + (uint64_t)(valueL));
00000e  2100              MOVS     r1,#0
000010  1908              ADDS     r0,r1,r4
000012  4151              ADCS     r1,r1,r2
;;;141    }
000014  bd30              POP      {r4,r5,pc}
;;;142    
                          ENDP


                          AREA ||i.RIT_GetCounterTimerCount||, CODE, READONLY, ALIGN=1

                  RIT_GetCounterTimerCount PROC
;;;142    
;;;143    uint64_t RIT_GetCounterTimerCount(RIT_Type *base)
000000  b530              PUSH     {r4,r5,lr}
;;;144    {
000002  4603              MOV      r3,r0
;;;145        uint16_t valueH = 0U;
000004  2200              MOVS     r2,#0
;;;146        uint32_t valueL = 0U;
000006  2400              MOVS     r4,#0
;;;147    
;;;148        /* COUNTER_H should be read before COUNTER */
;;;149        valueH = base->COUNTER_H;
000008  69d8              LDR      r0,[r3,#0x1c]
00000a  b282              UXTH     r2,r0
;;;150        valueL = base->COUNTER;
00000c  68dc              LDR      r4,[r3,#0xc]
;;;151    
;;;152        return (((uint64_t)valueH << 32U) + (uint64_t)(valueL));
00000e  2100              MOVS     r1,#0
000010  1908              ADDS     r0,r1,r4
000012  4151              ADCS     r1,r1,r2
;;;153    }
000014  bd30              POP      {r4,r5,pc}
;;;154    
                          ENDP


                          AREA ||i.RIT_GetDefaultConfig||, CODE, READONLY, ALIGN=2

                  RIT_GetDefaultConfig PROC
;;;76     
;;;77     void RIT_GetDefaultConfig(rit_config_t *config)
000000  b510              PUSH     {r4,lr}
;;;78     {
000002  4604              MOV      r4,r0
;;;79         assert(config);
000004  b104              CBZ      r4,|L4.8|
000006  e004              B        |L4.18|
                  |L4.8|
000008  224f              MOVS     r2,#0x4f
00000a  a103              ADR      r1,|L4.24|
00000c  a008              ADR      r0,|L4.48|
00000e  f7fffffe          BL       __aeabi_assert
                  |L4.18|
;;;80         /* Timer operation are no effect in Debug mode */
;;;81         config->enableRunInDebug = false;
000012  2000              MOVS     r0,#0
000014  7020              STRB     r0,[r4,#0]
;;;82     }
000016  bd10              POP      {r4,pc}
;;;83     
                          ENDP

                  |L4.24|
000018  5352435c          DCB      "SRC\\Drivers\\fsl_rit.c",0
00001c  44726976
000020  6572735c
000024  66736c5f
000028  7269742e
00002c  6300    
00002e  00                DCB      0
00002f  00                DCB      0
                  |L4.48|
000030  636f6e66          DCB      "config",0
000034  696700  
000037  00                DCB      0

                          AREA ||i.RIT_GetInstance||, CODE, READONLY, ALIGN=2

                  RIT_GetInstance PROC
;;;58      ******************************************************************************/
;;;59     static uint32_t RIT_GetInstance(RIT_Type *base)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
000002  4605              MOV      r5,r0
;;;61         uint32_t instance;
;;;62     
;;;63         /* Find the instance index from base address mappings. */
;;;64         for (instance = 0; instance < FSL_FEATURE_SOC_RIT_COUNT; instance++)
000004  2400              MOVS     r4,#0
000006  e006              B        |L5.22|
                  |L5.8|
;;;65         {
;;;66             if (s_ritBases[instance] == base)
000008  4809              LDR      r0,|L5.48|
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  42a8              CMP      r0,r5
000010  d100              BNE      |L5.20|
;;;67             {
;;;68                 break;
000012  e002              B        |L5.26|
                  |L5.20|
000014  1c64              ADDS     r4,r4,#1              ;64
                  |L5.22|
000016  2c00              CMP      r4,#0                 ;64
000018  d0f6              BEQ      |L5.8|
                  |L5.26|
00001a  bf00              NOP      
;;;69             }
;;;70         }
;;;71     
;;;72         assert(instance < FSL_FEATURE_SOC_RIT_COUNT);
00001c  b904              CBNZ     r4,|L5.32|
00001e  e004              B        |L5.42|
                  |L5.32|
000020  2248              MOVS     r2,#0x48
000022  a104              ADR      r1,|L5.52|
000024  a009              ADR      r0,|L5.76|
000026  f7fffffe          BL       __aeabi_assert
                  |L5.42|
;;;73     
;;;74         return instance;
00002a  4620              MOV      r0,r4
;;;75     }
00002c  bd70              POP      {r4-r6,pc}
;;;76     
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      s_ritBases
                  |L5.52|
000034  5352435c          DCB      "SRC\\Drivers\\fsl_rit.c",0
000038  44726976
00003c  6572735c
000040  66736c5f
000044  7269742e
000048  6300    
00004a  00                DCB      0
00004b  00                DCB      0
                  |L5.76|
00004c  696e7374          DCB      "instance < FSL_FEATURE_SOC_RIT_COUNT",0
000050  616e6365
000054  203c2046
000058  534c5f46
00005c  45415455
000060  52455f53
000064  4f435f52
000068  49545f43
00006c  4f554e54
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.RIT_GetMaskTimerCount||, CODE, READONLY, ALIGN=1

                  RIT_GetMaskTimerCount PROC
;;;154    
;;;155    uint64_t RIT_GetMaskTimerCount(RIT_Type *base)
000000  b530              PUSH     {r4,r5,lr}
;;;156    {
000002  4603              MOV      r3,r0
;;;157        uint16_t valueH = 0U;
000004  2200              MOVS     r2,#0
;;;158        uint32_t valueL = 0U;
000006  2400              MOVS     r4,#0
;;;159    
;;;160        /* MASK_H should be read before MASK */
;;;161        valueH = base->MASK_H;
000008  6958              LDR      r0,[r3,#0x14]
00000a  b282              UXTH     r2,r0
;;;162        valueL = base->MASK;
00000c  685c              LDR      r4,[r3,#4]
;;;163    
;;;164        return (((uint64_t)valueH << 32U) + (uint64_t)(valueL));
00000e  2100              MOVS     r1,#0
000010  1908              ADDS     r0,r1,r4
000012  4151              ADCS     r1,r1,r2
;;;165    }
000014  bd30              POP      {r4,r5,pc}
                          ENDP


                          AREA ||i.RIT_Init||, CODE, READONLY, ALIGN=2

                  RIT_Init PROC
;;;83     
;;;84     void RIT_Init(RIT_Type *base, const rit_config_t *config)
000000  b570              PUSH     {r4-r6,lr}
;;;85     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;86         assert(config);
000006  b106              CBZ      r6,|L7.10|
000008  e004              B        |L7.20|
                  |L7.10|
00000a  2256              MOVS     r2,#0x56
00000c  a114              ADR      r1,|L7.96|
00000e  a01a              ADR      r0,|L7.120|
000010  f7fffffe          BL       __aeabi_assert
                  |L7.20|
;;;87     
;;;88     #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
;;;89         /* Ungate the RIT clock*/
;;;90         CLOCK_EnableClock(s_ritClocks[RIT_GetInstance(base)]);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       RIT_GetInstance
00001a  4919              LDR      r1,|L7.128|
00001c  f8315010          LDRH     r5,[r1,r0,LSL #1]
000020  0a28              LSRS     r0,r5,#8
000022  2803              CMP      r0,#3
000024  d205              BCS      |L7.50|
000026  2101              MOVS     r1,#1
000028  40a9              LSLS     r1,r1,r5
00002a  4a16              LDR      r2,|L7.132|
00002c  f8421020          STR      r1,[r2,r0,LSL #2]
000030  e005              B        |L7.62|
                  |L7.50|
000032  2101              MOVS     r1,#1
000034  078a              LSLS     r2,r1,#30
000036  64d1              STR      r1,[r2,#0x4c]
000038  40a9              LSLS     r1,r1,r5
00003a  4a13              LDR      r2,|L7.136|
00003c  6151              STR      r1,[r2,#0x14]
                  |L7.62|
00003e  bf00              NOP      
;;;91     #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
;;;92     
;;;93         /* Enable RIT timers */
;;;94         base->CTRL &= ~RIT_CTRL_RITEN_MASK;
000040  68a0              LDR      r0,[r4,#8]
000042  f0200008          BIC      r0,r0,#8
000046  60a0              STR      r0,[r4,#8]
;;;95     
;;;96         /* Config timer operation is no effect in debug mode */
;;;97         if (!config->enableRunInDebug)
000048  7830              LDRB     r0,[r6,#0]
00004a  b920              CBNZ     r0,|L7.86|
;;;98         {
;;;99             base->CTRL &= ~RIT_CTRL_RITENBR_MASK;
00004c  68a0              LDR      r0,[r4,#8]
00004e  f0200004          BIC      r0,r0,#4
000052  60a0              STR      r0,[r4,#8]
000054  e003              B        |L7.94|
                  |L7.86|
;;;100        }
;;;101        else
;;;102        {
;;;103            base->CTRL |= RIT_CTRL_RITENBR_MASK;
000056  68a0              LDR      r0,[r4,#8]
000058  f0400004          ORR      r0,r0,#4
00005c  60a0              STR      r0,[r4,#8]
                  |L7.94|
;;;104        }
;;;105    }
00005e  bd70              POP      {r4-r6,pc}
;;;106    
                          ENDP

                  |L7.96|
000060  5352435c          DCB      "SRC\\Drivers\\fsl_rit.c",0
000064  44726976
000068  6572735c
00006c  66736c5f
000070  7269742e
000074  6300    
000076  00                DCB      0
000077  00                DCB      0
                  |L7.120|
000078  636f6e66          DCB      "config",0
00007c  696700  
00007f  00                DCB      0
                  |L7.128|
                          DCD      s_ritClocks
                  |L7.132|
                          DCD      0x40000220
                  |L7.136|
                          DCD      0x40040000

                          AREA ||i.RIT_SetMaskBit||, CODE, READONLY, ALIGN=1

                  RIT_SetMaskBit PROC
;;;124    
;;;125    void RIT_SetMaskBit(RIT_Type *base, uint64_t count)
000000  6042              STR      r2,[r0,#4]
;;;126    {
;;;127        base->MASK = (uint32_t)count;
;;;128        base->MASK_H = (uint16_t)(count >> 32U);
000002  b299              UXTH     r1,r3
000004  6141              STR      r1,[r0,#0x14]
;;;129    }
000006  4770              BX       lr
;;;130    
                          ENDP


                          AREA ||i.RIT_SetTimerCompare||, CODE, READONLY, ALIGN=1

                  RIT_SetTimerCompare PROC
;;;116    
;;;117    void RIT_SetTimerCompare(RIT_Type *base, uint64_t count)
000000  6881              LDR      r1,[r0,#8]
;;;118    {
;;;119        /* Disable RIT timers */
;;;120        base->CTRL &= ~RIT_CTRL_RITEN_MASK;
000002  f0210108          BIC      r1,r1,#8
000006  6081              STR      r1,[r0,#8]
;;;121        base->COMPVAL = (uint32_t)count;
000008  6002              STR      r2,[r0,#0]
;;;122        base->COMPVAL_H = (uint16_t)(count >> 32U);
00000a  b299              UXTH     r1,r3
00000c  6101              STR      r1,[r0,#0x10]
;;;123    }
00000e  4770              BX       lr
;;;124    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  s_ritBases
                          DCD      0x4002d000
                  s_ritClocks
000004  0101              DCW      0x0101

;*** Start embedded assembler ***

#line 1 "SRC\\Drivers\\fsl_rit.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_rit_c_cdb2f5f3____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_rit_c_cdb2f5f3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_rit_c_cdb2f5f3____REVSH|
#line 402
|__asm___9_fsl_rit_c_cdb2f5f3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_rit_c_cdb2f5f3____RRX|
#line 587
|__asm___9_fsl_rit_c_cdb2f5f3____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
